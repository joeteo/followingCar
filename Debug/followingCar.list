
followingCar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d22c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000640  0800d3e0  0800d3e0  0001d3e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800da20  0800da20  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800da20  0800da20  0001da20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800da28  0800da28  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800da28  0800da28  0001da28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800da2c  0800da2c  0001da2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800da30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          00000330  200001e0  200001e0  000201e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000510  20000510  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016bb8  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037a2  00000000  00000000  00036dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013b0  00000000  00000000  0003a570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001220  00000000  00000000  0003b920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027f3d  00000000  00000000  0003cb40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001aaf1  00000000  00000000  00064a7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e61e8  00000000  00000000  0007f56e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00165756  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000069b8  00000000  00000000  001657a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800d3c4 	.word	0x0800d3c4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	0800d3c4 	.word	0x0800d3c4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <HMC5883L_readNormalize>:

    return v;
}

Vector HMC5883L_readNormalize(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af00      	add	r7, sp, #0
    v.XAxis = ((float)HMC5883L_readRegister16(HMC5883L_REG_OUT_X_M) - xOffset) * mgPerDigit;
 800101e:	2003      	movs	r0, #3
 8001020:	f000 f960 	bl	80012e4 <HMC5883L_readRegister16>
 8001024:	4603      	mov	r3, r0
 8001026:	ee07 3a90 	vmov	s15, r3
 800102a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800102e:	4b28      	ldr	r3, [pc, #160]	; (80010d0 <HMC5883L_readNormalize+0xb8>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	ee07 3a90 	vmov	s15, r3
 8001036:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800103a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800103e:	4b25      	ldr	r3, [pc, #148]	; (80010d4 <HMC5883L_readNormalize+0xbc>)
 8001040:	edd3 7a00 	vldr	s15, [r3]
 8001044:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001048:	4b23      	ldr	r3, [pc, #140]	; (80010d8 <HMC5883L_readNormalize+0xc0>)
 800104a:	edc3 7a00 	vstr	s15, [r3]
    v.YAxis = ((float)HMC5883L_readRegister16(HMC5883L_REG_OUT_Y_M) - yOffset) * mgPerDigit;
 800104e:	2007      	movs	r0, #7
 8001050:	f000 f948 	bl	80012e4 <HMC5883L_readRegister16>
 8001054:	4603      	mov	r3, r0
 8001056:	ee07 3a90 	vmov	s15, r3
 800105a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800105e:	4b1f      	ldr	r3, [pc, #124]	; (80010dc <HMC5883L_readNormalize+0xc4>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	ee07 3a90 	vmov	s15, r3
 8001066:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800106a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800106e:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <HMC5883L_readNormalize+0xbc>)
 8001070:	edd3 7a00 	vldr	s15, [r3]
 8001074:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001078:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <HMC5883L_readNormalize+0xc0>)
 800107a:	edc3 7a01 	vstr	s15, [r3, #4]
    v.ZAxis = (float)HMC5883L_readRegister16(HMC5883L_REG_OUT_Z_M) * mgPerDigit;
 800107e:	2005      	movs	r0, #5
 8001080:	f000 f930 	bl	80012e4 <HMC5883L_readRegister16>
 8001084:	4603      	mov	r3, r0
 8001086:	ee07 3a90 	vmov	s15, r3
 800108a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800108e:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <HMC5883L_readNormalize+0xbc>)
 8001090:	edd3 7a00 	vldr	s15, [r3]
 8001094:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001098:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <HMC5883L_readNormalize+0xc0>)
 800109a:	edc3 7a02 	vstr	s15, [r3, #8]

    return v;
 800109e:	4a0e      	ldr	r2, [pc, #56]	; (80010d8 <HMC5883L_readNormalize+0xc0>)
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80010a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80010aa:	6979      	ldr	r1, [r7, #20]
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	ee06 1a90 	vmov	s13, r1
 80010b4:	ee07 2a10 	vmov	s14, r2
 80010b8:	ee07 3a90 	vmov	s15, r3
}
 80010bc:	eeb0 0a66 	vmov.f32	s0, s13
 80010c0:	eef0 0a47 	vmov.f32	s1, s14
 80010c4:	eeb0 1a67 	vmov.f32	s2, s15
 80010c8:	3720      	adds	r7, #32
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	2000020c 	.word	0x2000020c
 80010d4:	200001fc 	.word	0x200001fc
 80010d8:	20000200 	.word	0x20000200
 80010dc:	20000210 	.word	0x20000210

080010e0 <HMC5883L_setOffset>:

void HMC5883L_setOffset(int xo, int yo)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
    xOffset = xo;
 80010ea:	4a06      	ldr	r2, [pc, #24]	; (8001104 <HMC5883L_setOffset+0x24>)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6013      	str	r3, [r2, #0]
    yOffset = yo;
 80010f0:	4a05      	ldr	r2, [pc, #20]	; (8001108 <HMC5883L_setOffset+0x28>)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	6013      	str	r3, [r2, #0]
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	2000020c 	.word	0x2000020c
 8001108:	20000210 	.word	0x20000210

0800110c <HMC5883L_setRange>:

void HMC5883L_setRange(hmc5883l_range_t range)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
    switch(range)
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	2b07      	cmp	r3, #7
 800111a:	d833      	bhi.n	8001184 <HMC5883L_setRange+0x78>
 800111c:	a201      	add	r2, pc, #4	; (adr r2, 8001124 <HMC5883L_setRange+0x18>)
 800111e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001122:	bf00      	nop
 8001124:	08001145 	.word	0x08001145
 8001128:	0800114d 	.word	0x0800114d
 800112c:	08001155 	.word	0x08001155
 8001130:	0800115d 	.word	0x0800115d
 8001134:	08001165 	.word	0x08001165
 8001138:	0800116d 	.word	0x0800116d
 800113c:	08001175 	.word	0x08001175
 8001140:	0800117d 	.word	0x0800117d
    {
	case HMC5883L_RANGE_0_88GA:
	    mgPerDigit = 0.73f;
 8001144:	4b15      	ldr	r3, [pc, #84]	; (800119c <HMC5883L_setRange+0x90>)
 8001146:	4a16      	ldr	r2, [pc, #88]	; (80011a0 <HMC5883L_setRange+0x94>)
 8001148:	601a      	str	r2, [r3, #0]
	    break;
 800114a:	e01c      	b.n	8001186 <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_1_3GA:
	    mgPerDigit = 0.92f;
 800114c:	4b13      	ldr	r3, [pc, #76]	; (800119c <HMC5883L_setRange+0x90>)
 800114e:	4a15      	ldr	r2, [pc, #84]	; (80011a4 <HMC5883L_setRange+0x98>)
 8001150:	601a      	str	r2, [r3, #0]
	    break;
 8001152:	e018      	b.n	8001186 <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_1_9GA:
	    mgPerDigit = 1.22f;
 8001154:	4b11      	ldr	r3, [pc, #68]	; (800119c <HMC5883L_setRange+0x90>)
 8001156:	4a14      	ldr	r2, [pc, #80]	; (80011a8 <HMC5883L_setRange+0x9c>)
 8001158:	601a      	str	r2, [r3, #0]
	    break;
 800115a:	e014      	b.n	8001186 <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_2_5GA:
	    mgPerDigit = 1.52f;
 800115c:	4b0f      	ldr	r3, [pc, #60]	; (800119c <HMC5883L_setRange+0x90>)
 800115e:	4a13      	ldr	r2, [pc, #76]	; (80011ac <HMC5883L_setRange+0xa0>)
 8001160:	601a      	str	r2, [r3, #0]
	    break;
 8001162:	e010      	b.n	8001186 <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_4GA:
	    mgPerDigit = 2.27f;
 8001164:	4b0d      	ldr	r3, [pc, #52]	; (800119c <HMC5883L_setRange+0x90>)
 8001166:	4a12      	ldr	r2, [pc, #72]	; (80011b0 <HMC5883L_setRange+0xa4>)
 8001168:	601a      	str	r2, [r3, #0]
	    break;
 800116a:	e00c      	b.n	8001186 <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_4_7GA:
	    mgPerDigit = 2.56f;
 800116c:	4b0b      	ldr	r3, [pc, #44]	; (800119c <HMC5883L_setRange+0x90>)
 800116e:	4a11      	ldr	r2, [pc, #68]	; (80011b4 <HMC5883L_setRange+0xa8>)
 8001170:	601a      	str	r2, [r3, #0]
	    break;
 8001172:	e008      	b.n	8001186 <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_5_6GA:
	    mgPerDigit = 3.03f;
 8001174:	4b09      	ldr	r3, [pc, #36]	; (800119c <HMC5883L_setRange+0x90>)
 8001176:	4a10      	ldr	r2, [pc, #64]	; (80011b8 <HMC5883L_setRange+0xac>)
 8001178:	601a      	str	r2, [r3, #0]
	    break;
 800117a:	e004      	b.n	8001186 <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_8_1GA:
	    mgPerDigit = 4.35f;
 800117c:	4b07      	ldr	r3, [pc, #28]	; (800119c <HMC5883L_setRange+0x90>)
 800117e:	4a0f      	ldr	r2, [pc, #60]	; (80011bc <HMC5883L_setRange+0xb0>)
 8001180:	601a      	str	r2, [r3, #0]
	    break;
 8001182:	e000      	b.n	8001186 <HMC5883L_setRange+0x7a>

	default:
	    break;
 8001184:	bf00      	nop
    }

    HMC5883L_writeRegister8(HMC5883L_REG_CONFIG_B, range << 5);
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	015b      	lsls	r3, r3, #5
 800118a:	b2db      	uxtb	r3, r3
 800118c:	4619      	mov	r1, r3
 800118e:	2001      	movs	r0, #1
 8001190:	f000 f870 	bl	8001274 <HMC5883L_writeRegister8>
}
 8001194:	bf00      	nop
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	200001fc 	.word	0x200001fc
 80011a0:	3f3ae148 	.word	0x3f3ae148
 80011a4:	3f6b851f 	.word	0x3f6b851f
 80011a8:	3f9c28f6 	.word	0x3f9c28f6
 80011ac:	3fc28f5c 	.word	0x3fc28f5c
 80011b0:	401147ae 	.word	0x401147ae
 80011b4:	4023d70a 	.word	0x4023d70a
 80011b8:	4041eb85 	.word	0x4041eb85
 80011bc:	408b3333 	.word	0x408b3333

080011c0 <HMC5883L_setMeasurementMode>:
{
    return (hmc5883l_range_t)((HMC5883L_readRegister8(HMC5883L_REG_CONFIG_B) >> 5));
}

void HMC5883L_setMeasurementMode(hmc5883l_mode_t mode)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;

    value = HMC5883L_readRegister8(HMC5883L_REG_MODE);
 80011ca:	2002      	movs	r0, #2
 80011cc:	f000 f86e 	bl	80012ac <HMC5883L_readRegister8>
 80011d0:	4603      	mov	r3, r0
 80011d2:	73fb      	strb	r3, [r7, #15]
    value &= 0xFC;
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
 80011d6:	f023 0303 	bic.w	r3, r3, #3
 80011da:	73fb      	strb	r3, [r7, #15]
    value |= mode;
 80011dc:	7bfa      	ldrb	r2, [r7, #15]
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	73fb      	strb	r3, [r7, #15]

    HMC5883L_writeRegister8(HMC5883L_REG_MODE, value);
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	4619      	mov	r1, r3
 80011e8:	2002      	movs	r0, #2
 80011ea:	f000 f843 	bl	8001274 <HMC5883L_writeRegister8>
}
 80011ee:	bf00      	nop
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HMC5883L_setDataRate>:

    return (hmc5883l_mode_t)value;
}

void HMC5883L_setDataRate(hmc5883l_dataRate_t dataRate)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b084      	sub	sp, #16
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	4603      	mov	r3, r0
 80011fe:	71fb      	strb	r3, [r7, #7]
    uint8_t value;

    value = HMC5883L_readRegister8(HMC5883L_REG_CONFIG_A);
 8001200:	2000      	movs	r0, #0
 8001202:	f000 f853 	bl	80012ac <HMC5883L_readRegister8>
 8001206:	4603      	mov	r3, r0
 8001208:	73fb      	strb	r3, [r7, #15]
    value &= 0xE3;
 800120a:	7bfb      	ldrb	r3, [r7, #15]
 800120c:	f023 031c 	bic.w	r3, r3, #28
 8001210:	73fb      	strb	r3, [r7, #15]
    value |= (dataRate << 2);
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	b25a      	sxtb	r2, r3
 8001218:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800121c:	4313      	orrs	r3, r2
 800121e:	b25b      	sxtb	r3, r3
 8001220:	73fb      	strb	r3, [r7, #15]

    HMC5883L_writeRegister8(HMC5883L_REG_CONFIG_A, value);
 8001222:	7bfb      	ldrb	r3, [r7, #15]
 8001224:	4619      	mov	r1, r3
 8001226:	2000      	movs	r0, #0
 8001228:	f000 f824 	bl	8001274 <HMC5883L_writeRegister8>
}
 800122c:	bf00      	nop
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <HMC5883L_setSamples>:

    return (hmc5883l_dataRate_t)value;
}

void HMC5883L_setSamples(hmc5883l_samples_t samples)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;

    value = HMC5883L_readRegister8(HMC5883L_REG_CONFIG_A);
 800123e:	2000      	movs	r0, #0
 8001240:	f000 f834 	bl	80012ac <HMC5883L_readRegister8>
 8001244:	4603      	mov	r3, r0
 8001246:	73fb      	strb	r3, [r7, #15]
    value &= 0x9F;
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800124e:	73fb      	strb	r3, [r7, #15]
    value |= (samples << 5);
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	015b      	lsls	r3, r3, #5
 8001254:	b25a      	sxtb	r2, r3
 8001256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800125a:	4313      	orrs	r3, r2
 800125c:	b25b      	sxtb	r3, r3
 800125e:	73fb      	strb	r3, [r7, #15]

    HMC5883L_writeRegister8(HMC5883L_REG_CONFIG_A, value);
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	4619      	mov	r1, r3
 8001264:	2000      	movs	r0, #0
 8001266:	f000 f805 	bl	8001274 <HMC5883L_writeRegister8>
}
 800126a:	bf00      	nop
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <HMC5883L_writeRegister8>:
    return (hmc5883l_samples_t)value;
}

// Write byte to register
void HMC5883L_writeRegister8(uint8_t reg, uint8_t value)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af04      	add	r7, sp, #16
 800127a:	4603      	mov	r3, r0
 800127c:	460a      	mov	r2, r1
 800127e:	71fb      	strb	r3, [r7, #7]
 8001280:	4613      	mov	r3, r2
 8001282:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&I2C, HMC5883L_DEFAULT_ADDRESS, reg, 1 , &value,1,500);
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	b29a      	uxth	r2, r3
 8001288:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800128c:	9302      	str	r3, [sp, #8]
 800128e:	2301      	movs	r3, #1
 8001290:	9301      	str	r3, [sp, #4]
 8001292:	1dbb      	adds	r3, r7, #6
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	2301      	movs	r3, #1
 8001298:	213c      	movs	r1, #60	; 0x3c
 800129a:	4803      	ldr	r0, [pc, #12]	; (80012a8 <HMC5883L_writeRegister8+0x34>)
 800129c:	f002 fc0a 	bl	8003ab4 <HAL_I2C_Mem_Write>
}
 80012a0:	bf00      	nop
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000338 	.word	0x20000338

080012ac <HMC5883L_readRegister8>:
    return value;
}

// Read byte from register
uint8_t HMC5883L_readRegister8(uint8_t reg)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b088      	sub	sp, #32
 80012b0:	af04      	add	r7, sp, #16
 80012b2:	4603      	mov	r3, r0
 80012b4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    HAL_I2C_Mem_Read(&I2C, HMC5883L_DEFAULT_ADDRESS , reg, 1, &value, 1, 500);
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012be:	9302      	str	r3, [sp, #8]
 80012c0:	2301      	movs	r3, #1
 80012c2:	9301      	str	r3, [sp, #4]
 80012c4:	f107 030f 	add.w	r3, r7, #15
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	2301      	movs	r3, #1
 80012cc:	213c      	movs	r1, #60	; 0x3c
 80012ce:	4804      	ldr	r0, [pc, #16]	; (80012e0 <HMC5883L_readRegister8+0x34>)
 80012d0:	f002 fcea 	bl	8003ca8 <HAL_I2C_Mem_Read>
    return value;
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000338 	.word	0x20000338

080012e4 <HMC5883L_readRegister16>:

// Read word from register
int16_t HMC5883L_readRegister16(uint8_t reg)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b088      	sub	sp, #32
 80012e8:	af04      	add	r7, sp, #16
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
    int16_t value;
	  
	  uint8_t vha[2];
	
    HAL_I2C_Mem_Read(&I2C,  HMC5883L_DEFAULT_ADDRESS, reg, 1, vha, 2, 500);
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012f6:	9302      	str	r3, [sp, #8]
 80012f8:	2302      	movs	r3, #2
 80012fa:	9301      	str	r3, [sp, #4]
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	2301      	movs	r3, #1
 8001304:	213c      	movs	r1, #60	; 0x3c
 8001306:	4808      	ldr	r0, [pc, #32]	; (8001328 <HMC5883L_readRegister16+0x44>)
 8001308:	f002 fcce 	bl	8003ca8 <HAL_I2C_Mem_Read>
	  
	  value = vha[0] <<8 | vha[1];
 800130c:	7b3b      	ldrb	r3, [r7, #12]
 800130e:	021b      	lsls	r3, r3, #8
 8001310:	b21a      	sxth	r2, r3
 8001312:	7b7b      	ldrb	r3, [r7, #13]
 8001314:	b21b      	sxth	r3, r3
 8001316:	4313      	orrs	r3, r2
 8001318:	81fb      	strh	r3, [r7, #14]
    return value;
 800131a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800131e:	4618      	mov	r0, r3
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000338 	.word	0x20000338

0800132c <Compass_Init>:

void Compass_Init(){
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
	HMC5883L_setRange (HMC5883L_RANGE_1_3GA);
 8001330:	2001      	movs	r0, #1
 8001332:	f7ff feeb 	bl	800110c <HMC5883L_setRange>
	HMC5883L_setMeasurementMode (HMC5883L_CONTINOUS);
 8001336:	2000      	movs	r0, #0
 8001338:	f7ff ff42 	bl	80011c0 <HMC5883L_setMeasurementMode>
	HMC5883L_setDataRate (HMC5883L_DATARATE_15HZ);
 800133c:	2004      	movs	r0, #4
 800133e:	f7ff ff5a 	bl	80011f6 <HMC5883L_setDataRate>
	HMC5883L_setSamples (HMC5883L_SAMPLES_1);
 8001342:	2000      	movs	r0, #0
 8001344:	f7ff ff76 	bl	8001234 <HMC5883L_setSamples>
	HMC5883L_setOffset (40, -200);
 8001348:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
 800134c:	2028      	movs	r0, #40	; 0x28
 800134e:	f7ff fec7 	bl	80010e0 <HMC5883L_setOffset>
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
	...

08001358 <calculateHeading>:

void calculateHeading(void){
 8001358:	b5b0      	push	{r4, r5, r7, lr}
 800135a:	af00      	add	r7, sp, #0
	  mag = HMC5883L_readNormalize ();
 800135c:	f7ff fe5c 	bl	8001018 <HMC5883L_readNormalize>
 8001360:	eef0 6a40 	vmov.f32	s13, s0
 8001364:	eeb0 7a60 	vmov.f32	s14, s1
 8001368:	eef0 7a41 	vmov.f32	s15, s2
 800136c:	4b40      	ldr	r3, [pc, #256]	; (8001470 <calculateHeading+0x118>)
 800136e:	edc3 6a00 	vstr	s13, [r3]
 8001372:	ed83 7a01 	vstr	s14, [r3, #4]
 8001376:	edc3 7a02 	vstr	s15, [r3, #8]
//	  printf ("XAxis %0.2f, YAxis %0.2f, ZAxis %0.2f \r\n", mag.XAxis, mag.YAxis, mag.ZAxis);

	  // Calculate heading
	  heading = atan2(mag.YAxis, mag.XAxis);
 800137a:	4b3d      	ldr	r3, [pc, #244]	; (8001470 <calculateHeading+0x118>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff f8f2 	bl	8000568 <__aeabi_f2d>
 8001384:	4604      	mov	r4, r0
 8001386:	460d      	mov	r5, r1
 8001388:	4b39      	ldr	r3, [pc, #228]	; (8001470 <calculateHeading+0x118>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff f8eb 	bl	8000568 <__aeabi_f2d>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	ec43 2b11 	vmov	d1, r2, r3
 800139a:	ec45 4b10 	vmov	d0, r4, r5
 800139e:	f00b fa5d 	bl	800c85c <atan2>
 80013a2:	ec53 2b10 	vmov	r2, r3, d0
 80013a6:	4610      	mov	r0, r2
 80013a8:	4619      	mov	r1, r3
 80013aa:	f7ff fc2d 	bl	8000c08 <__aeabi_d2f>
 80013ae:	4603      	mov	r3, r0
 80013b0:	4a30      	ldr	r2, [pc, #192]	; (8001474 <calculateHeading+0x11c>)
 80013b2:	6013      	str	r3, [r2, #0]
	  // Formula: (deg + (min / 60.0)) / (180 / M_PI);
	  //declinationAngle = (40.0 + 8.0 + (50.0 / 60.0)) / (180 / M_PI);
	  //declinationAngle = (10.0) / (180 / M_PI);
	  //heading += declinationAngle;
	  // Correct for heading < 0deg and heading > 360deg
	  if (heading < 0)
 80013b4:	4b2f      	ldr	r3, [pc, #188]	; (8001474 <calculateHeading+0x11c>)
 80013b6:	edd3 7a00 	vldr	s15, [r3]
 80013ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c2:	d512      	bpl.n	80013ea <calculateHeading+0x92>
	  {
	  heading += 2 * M_PI;
 80013c4:	4b2b      	ldr	r3, [pc, #172]	; (8001474 <calculateHeading+0x11c>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff f8cd 	bl	8000568 <__aeabi_f2d>
 80013ce:	a324      	add	r3, pc, #144	; (adr r3, 8001460 <calculateHeading+0x108>)
 80013d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d4:	f7fe ff6a 	bl	80002ac <__adddf3>
 80013d8:	4602      	mov	r2, r0
 80013da:	460b      	mov	r3, r1
 80013dc:	4610      	mov	r0, r2
 80013de:	4619      	mov	r1, r3
 80013e0:	f7ff fc12 	bl	8000c08 <__aeabi_d2f>
 80013e4:	4603      	mov	r3, r0
 80013e6:	4a23      	ldr	r2, [pc, #140]	; (8001474 <calculateHeading+0x11c>)
 80013e8:	6013      	str	r3, [r2, #0]
	  }
	  if (heading > 2 * M_PI)
 80013ea:	4b22      	ldr	r3, [pc, #136]	; (8001474 <calculateHeading+0x11c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff f8ba 	bl	8000568 <__aeabi_f2d>
 80013f4:	a31a      	add	r3, pc, #104	; (adr r3, 8001460 <calculateHeading+0x108>)
 80013f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fa:	f7ff fb9d 	bl	8000b38 <__aeabi_dcmpgt>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d012      	beq.n	800142a <calculateHeading+0xd2>
	  {
	  heading -= 2 * M_PI;
 8001404:	4b1b      	ldr	r3, [pc, #108]	; (8001474 <calculateHeading+0x11c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff f8ad 	bl	8000568 <__aeabi_f2d>
 800140e:	a314      	add	r3, pc, #80	; (adr r3, 8001460 <calculateHeading+0x108>)
 8001410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001414:	f7fe ff48 	bl	80002a8 <__aeabi_dsub>
 8001418:	4602      	mov	r2, r0
 800141a:	460b      	mov	r3, r1
 800141c:	4610      	mov	r0, r2
 800141e:	4619      	mov	r1, r3
 8001420:	f7ff fbf2 	bl	8000c08 <__aeabi_d2f>
 8001424:	4603      	mov	r3, r0
 8001426:	4a13      	ldr	r2, [pc, #76]	; (8001474 <calculateHeading+0x11c>)
 8001428:	6013      	str	r3, [r2, #0]
	  }
	  // Convert to degrees
	  headingDegrees = heading * 180/M_PI; // Fix HMC5883L issue with angles
 800142a:	4b12      	ldr	r3, [pc, #72]	; (8001474 <calculateHeading+0x11c>)
 800142c:	edd3 7a00 	vldr	s15, [r3]
 8001430:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001478 <calculateHeading+0x120>
 8001434:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001438:	ee17 0a90 	vmov	r0, s15
 800143c:	f7ff f894 	bl	8000568 <__aeabi_f2d>
 8001440:	a309      	add	r3, pc, #36	; (adr r3, 8001468 <calculateHeading+0x110>)
 8001442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001446:	f7ff fa11 	bl	800086c <__aeabi_ddiv>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	4610      	mov	r0, r2
 8001450:	4619      	mov	r1, r3
 8001452:	f7ff fbd9 	bl	8000c08 <__aeabi_d2f>
 8001456:	4603      	mov	r3, r0
 8001458:	4a08      	ldr	r2, [pc, #32]	; (800147c <calculateHeading+0x124>)
 800145a:	6013      	str	r3, [r2, #0]
//	  printf ("headingDegrees : %.0f\r\n", headingDegrees);
//	  printf ("headingDegrees : %.0f\r\n", fixedHeadingDegrees);
//	  printf ("headingDegrees : %.0f\r\n", smoothHeadingDegrees);

	  // We need delay ~28ms for allow data rate 30Hz (~33ms)
}
 800145c:	bf00      	nop
 800145e:	bdb0      	pop	{r4, r5, r7, pc}
 8001460:	54442d18 	.word	0x54442d18
 8001464:	401921fb 	.word	0x401921fb
 8001468:	54442d18 	.word	0x54442d18
 800146c:	400921fb 	.word	0x400921fb
 8001470:	20000214 	.word	0x20000214
 8001474:	20000220 	.word	0x20000220
 8001478:	43340000 	.word	0x43340000
 800147c:	20000224 	.word	0x20000224

08001480 <BT_Init>:

extern float headingDegrees;
extern GPS_t GPS;

void BT_Init()
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart7, &rx7_data, sizeof(rx7_data));
 8001484:	2201      	movs	r2, #1
 8001486:	4903      	ldr	r1, [pc, #12]	; (8001494 <BT_Init+0x14>)
 8001488:	4803      	ldr	r0, [pc, #12]	; (8001498 <BT_Init+0x18>)
 800148a:	f005 f940 	bl	800670e <HAL_UART_Receive_IT>
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000238 	.word	0x20000238
 8001498:	20000430 	.word	0x20000430

0800149c <Phone_UART_CallBack>:

void Phone_UART_CallBack(){
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0


	// AUTO_MODE_SIGNAL == 'A'
	if((Mode_Flag == CONTROL_MODE || Mode_Flag == WAYPOINT_MODE) && rx7_data==AUTO_MODE_SIGNAL){
 80014a0:	4b78      	ldr	r3, [pc, #480]	; (8001684 <Phone_UART_CallBack+0x1e8>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d003      	beq.n	80014b0 <Phone_UART_CallBack+0x14>
 80014a8:	4b76      	ldr	r3, [pc, #472]	; (8001684 <Phone_UART_CallBack+0x1e8>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d10c      	bne.n	80014ca <Phone_UART_CallBack+0x2e>
 80014b0:	4b75      	ldr	r3, [pc, #468]	; (8001688 <Phone_UART_CallBack+0x1ec>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b41      	cmp	r3, #65	; 0x41
 80014b6:	d108      	bne.n	80014ca <Phone_UART_CallBack+0x2e>
		memset(rx7_buffer, 0, sizeof(rx7_buffer));
 80014b8:	2214      	movs	r2, #20
 80014ba:	2100      	movs	r1, #0
 80014bc:	4873      	ldr	r0, [pc, #460]	; (800168c <Phone_UART_CallBack+0x1f0>)
 80014be:	f006 f8e9 	bl	8007694 <memset>
		Mode_Flag=AUTO_MODE;
 80014c2:	4b70      	ldr	r3, [pc, #448]	; (8001684 <Phone_UART_CallBack+0x1e8>)
 80014c4:	2202      	movs	r2, #2
 80014c6:	701a      	strb	r2, [r3, #0]
 80014c8:	e028      	b.n	800151c <Phone_UART_CallBack+0x80>

	// WAYPOINT_MODE_SIGNAL == 'W'
	}else if((Mode_Flag == AUTO_MODE || Mode_Flag == CONTROL_MODE) && rx7_data==WAYPOINT_MODE_SIGNAL){
 80014ca:	4b6e      	ldr	r3, [pc, #440]	; (8001684 <Phone_UART_CallBack+0x1e8>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d003      	beq.n	80014da <Phone_UART_CallBack+0x3e>
 80014d2:	4b6c      	ldr	r3, [pc, #432]	; (8001684 <Phone_UART_CallBack+0x1e8>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d10c      	bne.n	80014f4 <Phone_UART_CallBack+0x58>
 80014da:	4b6b      	ldr	r3, [pc, #428]	; (8001688 <Phone_UART_CallBack+0x1ec>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b57      	cmp	r3, #87	; 0x57
 80014e0:	d108      	bne.n	80014f4 <Phone_UART_CallBack+0x58>
		memset(rx7_buffer, 0, sizeof(rx7_buffer));
 80014e2:	2214      	movs	r2, #20
 80014e4:	2100      	movs	r1, #0
 80014e6:	4869      	ldr	r0, [pc, #420]	; (800168c <Phone_UART_CallBack+0x1f0>)
 80014e8:	f006 f8d4 	bl	8007694 <memset>
		Mode_Flag=WAYPOINT_MODE;
 80014ec:	4b65      	ldr	r3, [pc, #404]	; (8001684 <Phone_UART_CallBack+0x1e8>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	701a      	strb	r2, [r3, #0]
 80014f2:	e013      	b.n	800151c <Phone_UART_CallBack+0x80>

	// CONTROL_MODE_SIGNAL == 'C'
	}else if((Mode_Flag == AUTO_MODE || Mode_Flag == WAYPOINT_MODE) && rx7_data==CONTROL_MODE_SIGNAL){
 80014f4:	4b63      	ldr	r3, [pc, #396]	; (8001684 <Phone_UART_CallBack+0x1e8>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d003      	beq.n	8001504 <Phone_UART_CallBack+0x68>
 80014fc:	4b61      	ldr	r3, [pc, #388]	; (8001684 <Phone_UART_CallBack+0x1e8>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d10b      	bne.n	800151c <Phone_UART_CallBack+0x80>
 8001504:	4b60      	ldr	r3, [pc, #384]	; (8001688 <Phone_UART_CallBack+0x1ec>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b43      	cmp	r3, #67	; 0x43
 800150a:	d107      	bne.n	800151c <Phone_UART_CallBack+0x80>
		memset(rx7_buffer, 0, sizeof(rx7_buffer));
 800150c:	2214      	movs	r2, #20
 800150e:	2100      	movs	r1, #0
 8001510:	485e      	ldr	r0, [pc, #376]	; (800168c <Phone_UART_CallBack+0x1f0>)
 8001512:	f006 f8bf 	bl	8007694 <memset>
		Mode_Flag=CONTROL_MODE;
 8001516:	4b5b      	ldr	r3, [pc, #364]	; (8001684 <Phone_UART_CallBack+0x1e8>)
 8001518:	2200      	movs	r2, #0
 800151a:	701a      	strb	r2, [r3, #0]
	}


	if(Mode_Flag==CONTROL_MODE){
 800151c:	4b59      	ldr	r3, [pc, #356]	; (8001684 <Phone_UART_CallBack+0x1e8>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d123      	bne.n	800156c <Phone_UART_CallBack+0xd0>
		if (rx7_data != '\n' && rx7_index < sizeof(rx7_buffer)) {
 8001524:	4b58      	ldr	r3, [pc, #352]	; (8001688 <Phone_UART_CallBack+0x1ec>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b0a      	cmp	r3, #10
 800152a:	d00f      	beq.n	800154c <Phone_UART_CallBack+0xb0>
 800152c:	4b58      	ldr	r3, [pc, #352]	; (8001690 <Phone_UART_CallBack+0x1f4>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b13      	cmp	r3, #19
 8001532:	d80b      	bhi.n	800154c <Phone_UART_CallBack+0xb0>
			rx7_buffer[rx7_index++] = rx7_data;
 8001534:	4b56      	ldr	r3, [pc, #344]	; (8001690 <Phone_UART_CallBack+0x1f4>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	1c5a      	adds	r2, r3, #1
 800153a:	b2d1      	uxtb	r1, r2
 800153c:	4a54      	ldr	r2, [pc, #336]	; (8001690 <Phone_UART_CallBack+0x1f4>)
 800153e:	7011      	strb	r1, [r2, #0]
 8001540:	461a      	mov	r2, r3
 8001542:	4b51      	ldr	r3, [pc, #324]	; (8001688 <Phone_UART_CallBack+0x1ec>)
 8001544:	7819      	ldrb	r1, [r3, #0]
 8001546:	4b51      	ldr	r3, [pc, #324]	; (800168c <Phone_UART_CallBack+0x1f0>)
 8001548:	5499      	strb	r1, [r3, r2]
 800154a:	e08e      	b.n	800166a <Phone_UART_CallBack+0x1ce>
		} else {
			rx7_buffer[rx7_index]=0;
 800154c:	4b50      	ldr	r3, [pc, #320]	; (8001690 <Phone_UART_CallBack+0x1f4>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	461a      	mov	r2, r3
 8001552:	4b4e      	ldr	r3, [pc, #312]	; (800168c <Phone_UART_CallBack+0x1f0>)
 8001554:	2100      	movs	r1, #0
 8001556:	5499      	strb	r1, [r3, r2]
			rx7_index = 0;
 8001558:	4b4d      	ldr	r3, [pc, #308]	; (8001690 <Phone_UART_CallBack+0x1f4>)
 800155a:	2200      	movs	r2, #0
 800155c:	701a      	strb	r2, [r3, #0]
			sscanf((const char*)(rx7_buffer+2), "%d", &controlCMD);
 800155e:	4b4d      	ldr	r3, [pc, #308]	; (8001694 <Phone_UART_CallBack+0x1f8>)
 8001560:	4a4d      	ldr	r2, [pc, #308]	; (8001698 <Phone_UART_CallBack+0x1fc>)
 8001562:	494e      	ldr	r1, [pc, #312]	; (800169c <Phone_UART_CallBack+0x200>)
 8001564:	4618      	mov	r0, r3
 8001566:	f006 ff3d 	bl	80083e4 <siscanf>
 800156a:	e07e      	b.n	800166a <Phone_UART_CallBack+0x1ce>
		}

	}else if(Mode_Flag==WAYPOINT_MODE){
 800156c:	4b45      	ldr	r3, [pc, #276]	; (8001684 <Phone_UART_CallBack+0x1e8>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d153      	bne.n	800161c <Phone_UART_CallBack+0x180>
		if (rx7_data != '\n' && rx7_index < sizeof(rx7_buffer)) {
 8001574:	4b44      	ldr	r3, [pc, #272]	; (8001688 <Phone_UART_CallBack+0x1ec>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b0a      	cmp	r3, #10
 800157a:	d00f      	beq.n	800159c <Phone_UART_CallBack+0x100>
 800157c:	4b44      	ldr	r3, [pc, #272]	; (8001690 <Phone_UART_CallBack+0x1f4>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b13      	cmp	r3, #19
 8001582:	d80b      	bhi.n	800159c <Phone_UART_CallBack+0x100>
			rx7_buffer[rx7_index++] = rx7_data;
 8001584:	4b42      	ldr	r3, [pc, #264]	; (8001690 <Phone_UART_CallBack+0x1f4>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	1c5a      	adds	r2, r3, #1
 800158a:	b2d1      	uxtb	r1, r2
 800158c:	4a40      	ldr	r2, [pc, #256]	; (8001690 <Phone_UART_CallBack+0x1f4>)
 800158e:	7011      	strb	r1, [r2, #0]
 8001590:	461a      	mov	r2, r3
 8001592:	4b3d      	ldr	r3, [pc, #244]	; (8001688 <Phone_UART_CallBack+0x1ec>)
 8001594:	7819      	ldrb	r1, [r3, #0]
 8001596:	4b3d      	ldr	r3, [pc, #244]	; (800168c <Phone_UART_CallBack+0x1f0>)
 8001598:	5499      	strb	r1, [r3, r2]
 800159a:	e066      	b.n	800166a <Phone_UART_CallBack+0x1ce>
		} else {
			rx7_buffer[rx7_index]=0;
 800159c:	4b3c      	ldr	r3, [pc, #240]	; (8001690 <Phone_UART_CallBack+0x1f4>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	461a      	mov	r2, r3
 80015a2:	4b3a      	ldr	r3, [pc, #232]	; (800168c <Phone_UART_CallBack+0x1f0>)
 80015a4:	2100      	movs	r1, #0
 80015a6:	5499      	strb	r1, [r3, r2]
			rx7_index = 0;
 80015a8:	4b39      	ldr	r3, [pc, #228]	; (8001690 <Phone_UART_CallBack+0x1f4>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	701a      	strb	r2, [r3, #0]
			sscanf((const char*)(rx7_buffer+1), "%f,%f", &phoneGPS.latitude, &phoneGPS.longitude);
 80015ae:	483c      	ldr	r0, [pc, #240]	; (80016a0 <Phone_UART_CallBack+0x204>)
 80015b0:	4b3c      	ldr	r3, [pc, #240]	; (80016a4 <Phone_UART_CallBack+0x208>)
 80015b2:	4a3d      	ldr	r2, [pc, #244]	; (80016a8 <Phone_UART_CallBack+0x20c>)
 80015b4:	493d      	ldr	r1, [pc, #244]	; (80016ac <Phone_UART_CallBack+0x210>)
 80015b6:	f006 ff15 	bl	80083e4 <siscanf>
			if(phoneGPS.latitude > 34 && phoneGPS.latitude< 38 && phoneGPS.longitude > 126 && phoneGPS.longitude < 130){
 80015ba:	4b3a      	ldr	r3, [pc, #232]	; (80016a4 <Phone_UART_CallBack+0x208>)
 80015bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80015c0:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80016b0 <Phone_UART_CallBack+0x214>
 80015c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015cc:	dd4d      	ble.n	800166a <Phone_UART_CallBack+0x1ce>
 80015ce:	4b35      	ldr	r3, [pc, #212]	; (80016a4 <Phone_UART_CallBack+0x208>)
 80015d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80015d4:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80016b4 <Phone_UART_CallBack+0x218>
 80015d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e0:	d543      	bpl.n	800166a <Phone_UART_CallBack+0x1ce>
 80015e2:	4b30      	ldr	r3, [pc, #192]	; (80016a4 <Phone_UART_CallBack+0x208>)
 80015e4:	edd3 7a00 	vldr	s15, [r3]
 80015e8:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80016b8 <Phone_UART_CallBack+0x21c>
 80015ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f4:	dd39      	ble.n	800166a <Phone_UART_CallBack+0x1ce>
 80015f6:	4b2b      	ldr	r3, [pc, #172]	; (80016a4 <Phone_UART_CallBack+0x208>)
 80015f8:	edd3 7a00 	vldr	s15, [r3]
 80015fc:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80016bc <Phone_UART_CallBack+0x220>
 8001600:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001608:	d52f      	bpl.n	800166a <Phone_UART_CallBack+0x1ce>
				waypointGPS.latitude=phoneGPS.latitude;
 800160a:	4b26      	ldr	r3, [pc, #152]	; (80016a4 <Phone_UART_CallBack+0x208>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	4a2c      	ldr	r2, [pc, #176]	; (80016c0 <Phone_UART_CallBack+0x224>)
 8001610:	6053      	str	r3, [r2, #4]
				waypointGPS.longitude=phoneGPS.longitude;
 8001612:	4b24      	ldr	r3, [pc, #144]	; (80016a4 <Phone_UART_CallBack+0x208>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a2a      	ldr	r2, [pc, #168]	; (80016c0 <Phone_UART_CallBack+0x224>)
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	e026      	b.n	800166a <Phone_UART_CallBack+0x1ce>
			}
		}

	}else if(Mode_Flag==AUTO_MODE){
 800161c:	4b19      	ldr	r3, [pc, #100]	; (8001684 <Phone_UART_CallBack+0x1e8>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b02      	cmp	r3, #2
 8001622:	d122      	bne.n	800166a <Phone_UART_CallBack+0x1ce>
		if (rx7_data != '\n' && rx7_index < sizeof(rx7_buffer)) {
 8001624:	4b18      	ldr	r3, [pc, #96]	; (8001688 <Phone_UART_CallBack+0x1ec>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b0a      	cmp	r3, #10
 800162a:	d00f      	beq.n	800164c <Phone_UART_CallBack+0x1b0>
 800162c:	4b18      	ldr	r3, [pc, #96]	; (8001690 <Phone_UART_CallBack+0x1f4>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	2b13      	cmp	r3, #19
 8001632:	d80b      	bhi.n	800164c <Phone_UART_CallBack+0x1b0>
			rx7_buffer[rx7_index++] = rx7_data;
 8001634:	4b16      	ldr	r3, [pc, #88]	; (8001690 <Phone_UART_CallBack+0x1f4>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	1c5a      	adds	r2, r3, #1
 800163a:	b2d1      	uxtb	r1, r2
 800163c:	4a14      	ldr	r2, [pc, #80]	; (8001690 <Phone_UART_CallBack+0x1f4>)
 800163e:	7011      	strb	r1, [r2, #0]
 8001640:	461a      	mov	r2, r3
 8001642:	4b11      	ldr	r3, [pc, #68]	; (8001688 <Phone_UART_CallBack+0x1ec>)
 8001644:	7819      	ldrb	r1, [r3, #0]
 8001646:	4b11      	ldr	r3, [pc, #68]	; (800168c <Phone_UART_CallBack+0x1f0>)
 8001648:	5499      	strb	r1, [r3, r2]
 800164a:	e00e      	b.n	800166a <Phone_UART_CallBack+0x1ce>
		} else {
			rx7_buffer[rx7_index]=0;
 800164c:	4b10      	ldr	r3, [pc, #64]	; (8001690 <Phone_UART_CallBack+0x1f4>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	461a      	mov	r2, r3
 8001652:	4b0e      	ldr	r3, [pc, #56]	; (800168c <Phone_UART_CallBack+0x1f0>)
 8001654:	2100      	movs	r1, #0
 8001656:	5499      	strb	r1, [r3, r2]
			rx7_index = 0;
 8001658:	4b0d      	ldr	r3, [pc, #52]	; (8001690 <Phone_UART_CallBack+0x1f4>)
 800165a:	2200      	movs	r2, #0
 800165c:	701a      	strb	r2, [r3, #0]
			sscanf((const char*)(rx7_buffer+1), "%f,%f", &phoneGPS.latitude, &phoneGPS.longitude);
 800165e:	4810      	ldr	r0, [pc, #64]	; (80016a0 <Phone_UART_CallBack+0x204>)
 8001660:	4b10      	ldr	r3, [pc, #64]	; (80016a4 <Phone_UART_CallBack+0x208>)
 8001662:	4a11      	ldr	r2, [pc, #68]	; (80016a8 <Phone_UART_CallBack+0x20c>)
 8001664:	4911      	ldr	r1, [pc, #68]	; (80016ac <Phone_UART_CallBack+0x210>)
 8001666:	f006 febd 	bl	80083e4 <siscanf>
		}
	}



	HAL_UART_Transmit(&huart3, &rx7_data, sizeof(rx7_data), 10);
 800166a:	230a      	movs	r3, #10
 800166c:	2201      	movs	r2, #1
 800166e:	4906      	ldr	r1, [pc, #24]	; (8001688 <Phone_UART_CallBack+0x1ec>)
 8001670:	4814      	ldr	r0, [pc, #80]	; (80016c4 <Phone_UART_CallBack+0x228>)
 8001672:	f004 ffba 	bl	80065ea <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart7, &rx7_data, sizeof(rx7_data));
 8001676:	2201      	movs	r2, #1
 8001678:	4903      	ldr	r1, [pc, #12]	; (8001688 <Phone_UART_CallBack+0x1ec>)
 800167a:	4813      	ldr	r0, [pc, #76]	; (80016c8 <Phone_UART_CallBack+0x22c>)
 800167c:	f005 f847 	bl	800670e <HAL_UART_Receive_IT>
}
 8001680:	bf00      	nop
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20000251 	.word	0x20000251
 8001688:	20000238 	.word	0x20000238
 800168c:	2000023c 	.word	0x2000023c
 8001690:	20000250 	.word	0x20000250
 8001694:	2000023e 	.word	0x2000023e
 8001698:	20000254 	.word	0x20000254
 800169c:	0800d3e0 	.word	0x0800d3e0
 80016a0:	2000023d 	.word	0x2000023d
 80016a4:	20000228 	.word	0x20000228
 80016a8:	2000022c 	.word	0x2000022c
 80016ac:	0800d3e4 	.word	0x0800d3e4
 80016b0:	42080000 	.word	0x42080000
 80016b4:	42180000 	.word	0x42180000
 80016b8:	42fc0000 	.word	0x42fc0000
 80016bc:	43020000 	.word	0x43020000
 80016c0:	20000230 	.word	0x20000230
 80016c4:	200004b8 	.word	0x200004b8
 80016c8:	20000430 	.word	0x20000430

080016cc <transmit_To_Phone>:

void transmit_To_Phone(){
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b0a0      	sub	sp, #128	; 0x80
 80016d0:	af00      	add	r7, sp, #0
	char buf[GPSBUFSIZE] = {0,};
 80016d2:	2300      	movs	r3, #0
 80016d4:	603b      	str	r3, [r7, #0]
 80016d6:	1d3b      	adds	r3, r7, #4
 80016d8:	227c      	movs	r2, #124	; 0x7c
 80016da:	2100      	movs	r1, #0
 80016dc:	4618      	mov	r0, r3
 80016de:	f005 ffd9 	bl	8007694 <memset>
	sprintf(buf, "A,%.13f\n\r", GPS.dec_latitude);
 80016e2:	4b23      	ldr	r3, [pc, #140]	; (8001770 <transmit_To_Phone+0xa4>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7fe ff3e 	bl	8000568 <__aeabi_f2d>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	4638      	mov	r0, r7
 80016f2:	4920      	ldr	r1, [pc, #128]	; (8001774 <transmit_To_Phone+0xa8>)
 80016f4:	f006 fe56 	bl	80083a4 <siprintf>
	//HAL_UART_Transmit(&huart3, (unsigned char *)buf, strlen(buf), 10);
	HAL_UART_Transmit(&huart7, (unsigned char *)buf, strlen(buf), 10);
 80016f8:	463b      	mov	r3, r7
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7fe fd78 	bl	80001f0 <strlen>
 8001700:	4603      	mov	r3, r0
 8001702:	b29a      	uxth	r2, r3
 8001704:	4639      	mov	r1, r7
 8001706:	230a      	movs	r3, #10
 8001708:	481b      	ldr	r0, [pc, #108]	; (8001778 <transmit_To_Phone+0xac>)
 800170a:	f004 ff6e 	bl	80065ea <HAL_UART_Transmit>
	sprintf(buf, "O,%.13f\n\r", GPS.dec_longitude);
 800170e:	4b18      	ldr	r3, [pc, #96]	; (8001770 <transmit_To_Phone+0xa4>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f7fe ff28 	bl	8000568 <__aeabi_f2d>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	4638      	mov	r0, r7
 800171e:	4917      	ldr	r1, [pc, #92]	; (800177c <transmit_To_Phone+0xb0>)
 8001720:	f006 fe40 	bl	80083a4 <siprintf>
	//HAL_UART_Transmit(&huart3, (unsigned char *)buf, strlen(buf), 10);
	HAL_UART_Transmit(&huart7, (unsigned char *)buf, strlen(buf), 10);
 8001724:	463b      	mov	r3, r7
 8001726:	4618      	mov	r0, r3
 8001728:	f7fe fd62 	bl	80001f0 <strlen>
 800172c:	4603      	mov	r3, r0
 800172e:	b29a      	uxth	r2, r3
 8001730:	4639      	mov	r1, r7
 8001732:	230a      	movs	r3, #10
 8001734:	4810      	ldr	r0, [pc, #64]	; (8001778 <transmit_To_Phone+0xac>)
 8001736:	f004 ff58 	bl	80065ea <HAL_UART_Transmit>
	sprintf(buf, "C,%.13f\n\r", headingDegrees);
 800173a:	4b11      	ldr	r3, [pc, #68]	; (8001780 <transmit_To_Phone+0xb4>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4618      	mov	r0, r3
 8001740:	f7fe ff12 	bl	8000568 <__aeabi_f2d>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	4638      	mov	r0, r7
 800174a:	490e      	ldr	r1, [pc, #56]	; (8001784 <transmit_To_Phone+0xb8>)
 800174c:	f006 fe2a 	bl	80083a4 <siprintf>
	// transmit data to bluetooth module
	//HAL_UART_Transmit(&huart3, (unsigned char *)buf, strlen(buf), 10);
	HAL_UART_Transmit(&huart7, (unsigned char *)buf, strlen(buf), 10);
 8001750:	463b      	mov	r3, r7
 8001752:	4618      	mov	r0, r3
 8001754:	f7fe fd4c 	bl	80001f0 <strlen>
 8001758:	4603      	mov	r3, r0
 800175a:	b29a      	uxth	r2, r3
 800175c:	4639      	mov	r1, r7
 800175e:	230a      	movs	r3, #10
 8001760:	4805      	ldr	r0, [pc, #20]	; (8001778 <transmit_To_Phone+0xac>)
 8001762:	f004 ff42 	bl	80065ea <HAL_UART_Transmit>

}
 8001766:	bf00      	nop
 8001768:	3780      	adds	r7, #128	; 0x80
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	200002e0 	.word	0x200002e0
 8001774:	0800d3ec 	.word	0x0800d3ec
 8001778:	20000430 	.word	0x20000430
 800177c:	0800d3f8 	.word	0x0800d3f8
 8001780:	20000224 	.word	0x20000224
 8001784:	0800d404 	.word	0x0800d404

08001788 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08c      	sub	sp, #48	; 0x30
 800178c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178e:	f107 031c 	add.w	r3, r7, #28
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	605a      	str	r2, [r3, #4]
 8001798:	609a      	str	r2, [r3, #8]
 800179a:	60da      	str	r2, [r3, #12]
 800179c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	61bb      	str	r3, [r7, #24]
 80017a2:	4b50      	ldr	r3, [pc, #320]	; (80018e4 <MX_GPIO_Init+0x15c>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	4a4f      	ldr	r2, [pc, #316]	; (80018e4 <MX_GPIO_Init+0x15c>)
 80017a8:	f043 0304 	orr.w	r3, r3, #4
 80017ac:	6313      	str	r3, [r2, #48]	; 0x30
 80017ae:	4b4d      	ldr	r3, [pc, #308]	; (80018e4 <MX_GPIO_Init+0x15c>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	f003 0304 	and.w	r3, r3, #4
 80017b6:	61bb      	str	r3, [r7, #24]
 80017b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
 80017be:	4b49      	ldr	r3, [pc, #292]	; (80018e4 <MX_GPIO_Init+0x15c>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	4a48      	ldr	r2, [pc, #288]	; (80018e4 <MX_GPIO_Init+0x15c>)
 80017c4:	f043 0320 	orr.w	r3, r3, #32
 80017c8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ca:	4b46      	ldr	r3, [pc, #280]	; (80018e4 <MX_GPIO_Init+0x15c>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	f003 0320 	and.w	r3, r3, #32
 80017d2:	617b      	str	r3, [r7, #20]
 80017d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	613b      	str	r3, [r7, #16]
 80017da:	4b42      	ldr	r3, [pc, #264]	; (80018e4 <MX_GPIO_Init+0x15c>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	4a41      	ldr	r2, [pc, #260]	; (80018e4 <MX_GPIO_Init+0x15c>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	6313      	str	r3, [r2, #48]	; 0x30
 80017e6:	4b3f      	ldr	r3, [pc, #252]	; (80018e4 <MX_GPIO_Init+0x15c>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	613b      	str	r3, [r7, #16]
 80017f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	4b3b      	ldr	r3, [pc, #236]	; (80018e4 <MX_GPIO_Init+0x15c>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	4a3a      	ldr	r2, [pc, #232]	; (80018e4 <MX_GPIO_Init+0x15c>)
 80017fc:	f043 0302 	orr.w	r3, r3, #2
 8001800:	6313      	str	r3, [r2, #48]	; 0x30
 8001802:	4b38      	ldr	r3, [pc, #224]	; (80018e4 <MX_GPIO_Init+0x15c>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	60bb      	str	r3, [r7, #8]
 8001812:	4b34      	ldr	r3, [pc, #208]	; (80018e4 <MX_GPIO_Init+0x15c>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	4a33      	ldr	r2, [pc, #204]	; (80018e4 <MX_GPIO_Init+0x15c>)
 8001818:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800181c:	6313      	str	r3, [r2, #48]	; 0x30
 800181e:	4b31      	ldr	r3, [pc, #196]	; (80018e4 <MX_GPIO_Init+0x15c>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001826:	60bb      	str	r3, [r7, #8]
 8001828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	607b      	str	r3, [r7, #4]
 800182e:	4b2d      	ldr	r3, [pc, #180]	; (80018e4 <MX_GPIO_Init+0x15c>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	4a2c      	ldr	r2, [pc, #176]	; (80018e4 <MX_GPIO_Init+0x15c>)
 8001834:	f043 0310 	orr.w	r3, r3, #16
 8001838:	6313      	str	r3, [r2, #48]	; 0x30
 800183a:	4b2a      	ldr	r3, [pc, #168]	; (80018e4 <MX_GPIO_Init+0x15c>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	f003 0310 	and.w	r3, r3, #16
 8001842:	607b      	str	r3, [r7, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	603b      	str	r3, [r7, #0]
 800184a:	4b26      	ldr	r3, [pc, #152]	; (80018e4 <MX_GPIO_Init+0x15c>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	4a25      	ldr	r2, [pc, #148]	; (80018e4 <MX_GPIO_Init+0x15c>)
 8001850:	f043 0308 	orr.w	r3, r3, #8
 8001854:	6313      	str	r3, [r2, #48]	; 0x30
 8001856:	4b23      	ldr	r3, [pc, #140]	; (80018e4 <MX_GPIO_Init+0x15c>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	f003 0308 	and.w	r3, r3, #8
 800185e:	603b      	str	r3, [r7, #0]
 8001860:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001862:	2200      	movs	r2, #0
 8001864:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001868:	481f      	ldr	r0, [pc, #124]	; (80018e8 <MX_GPIO_Init+0x160>)
 800186a:	f001 ffc5 	bl	80037f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 800186e:	2200      	movs	r2, #0
 8001870:	f244 0181 	movw	r1, #16513	; 0x4081
 8001874:	481d      	ldr	r0, [pc, #116]	; (80018ec <MX_GPIO_Init+0x164>)
 8001876:	f001 ffbf 	bl	80037f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_RESET);
 800187a:	2200      	movs	r2, #0
 800187c:	2102      	movs	r1, #2
 800187e:	481c      	ldr	r0, [pc, #112]	; (80018f0 <MX_GPIO_Init+0x168>)
 8001880:	f001 ffba 	bl	80037f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF7 PF8 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001884:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800188a:	2301      	movs	r3, #1
 800188c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001892:	2300      	movs	r3, #0
 8001894:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001896:	f107 031c 	add.w	r3, r7, #28
 800189a:	4619      	mov	r1, r3
 800189c:	4812      	ldr	r0, [pc, #72]	; (80018e8 <MX_GPIO_Init+0x160>)
 800189e:	f001 fdff 	bl	80034a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 80018a2:	f244 0381 	movw	r3, #16513	; 0x4081
 80018a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a8:	2301      	movs	r3, #1
 80018aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b0:	2300      	movs	r3, #0
 80018b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b4:	f107 031c 	add.w	r3, r7, #28
 80018b8:	4619      	mov	r1, r3
 80018ba:	480c      	ldr	r0, [pc, #48]	; (80018ec <MX_GPIO_Init+0x164>)
 80018bc:	f001 fdf0 	bl	80034a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80018c0:	2302      	movs	r3, #2
 80018c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c4:	2301      	movs	r3, #1
 80018c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018cc:	2300      	movs	r3, #0
 80018ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018d0:	f107 031c 	add.w	r3, r7, #28
 80018d4:	4619      	mov	r1, r3
 80018d6:	4806      	ldr	r0, [pc, #24]	; (80018f0 <MX_GPIO_Init+0x168>)
 80018d8:	f001 fde2 	bl	80034a0 <HAL_GPIO_Init>

}
 80018dc:	bf00      	nop
 80018de:	3730      	adds	r7, #48	; 0x30
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40021400 	.word	0x40021400
 80018ec:	40020400 	.word	0x40020400
 80018f0:	40021800 	.word	0x40021800

080018f4 <GPS_Init>:
/*	CDC_Transmit_FS((unsigned char *) buf, (uint16_t) strlen(buf));*/
}
#endif

void GPS_Init()
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 80018f8:	2201      	movs	r2, #1
 80018fa:	4903      	ldr	r1, [pc, #12]	; (8001908 <GPS_Init+0x14>)
 80018fc:	4803      	ldr	r0, [pc, #12]	; (800190c <GPS_Init+0x18>)
 80018fe:	f004 ff06 	bl	800670e <HAL_UART_Receive_IT>
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20000258 	.word	0x20000258
 800190c:	20000474 	.word	0x20000474

08001910 <GPS_UART_CallBack>:


void GPS_UART_CallBack(){
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
	if (rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 8001914:	4b16      	ldr	r3, [pc, #88]	; (8001970 <GPS_UART_CallBack+0x60>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b0a      	cmp	r3, #10
 800191a:	d010      	beq.n	800193e <GPS_UART_CallBack+0x2e>
 800191c:	4b15      	ldr	r3, [pc, #84]	; (8001974 <GPS_UART_CallBack+0x64>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	b25b      	sxtb	r3, r3
 8001922:	2b00      	cmp	r3, #0
 8001924:	db0b      	blt.n	800193e <GPS_UART_CallBack+0x2e>
		rx_buffer[rx_index++] = rx_data;
 8001926:	4b13      	ldr	r3, [pc, #76]	; (8001974 <GPS_UART_CallBack+0x64>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	1c5a      	adds	r2, r3, #1
 800192c:	b2d1      	uxtb	r1, r2
 800192e:	4a11      	ldr	r2, [pc, #68]	; (8001974 <GPS_UART_CallBack+0x64>)
 8001930:	7011      	strb	r1, [r2, #0]
 8001932:	461a      	mov	r2, r3
 8001934:	4b0e      	ldr	r3, [pc, #56]	; (8001970 <GPS_UART_CallBack+0x60>)
 8001936:	7819      	ldrb	r1, [r3, #0]
 8001938:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <GPS_UART_CallBack+0x68>)
 800193a:	5499      	strb	r1, [r3, r2]
 800193c:	e010      	b.n	8001960 <GPS_UART_CallBack+0x50>

/*		#if (GPS_DEBUG == 1)*/

/*		#endif*/

		if(GPS_validate((char*) rx_buffer)){
 800193e:	480e      	ldr	r0, [pc, #56]	; (8001978 <GPS_UART_CallBack+0x68>)
 8001940:	f000 f81e 	bl	8001980 <GPS_validate>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d002      	beq.n	8001950 <GPS_UART_CallBack+0x40>

//			GPS_print((char*)rx_buffer);

			GPS_parse((char*) rx_buffer);
 800194a:	480b      	ldr	r0, [pc, #44]	; (8001978 <GPS_UART_CallBack+0x68>)
 800194c:	f000 f87a 	bl	8001a44 <GPS_parse>
		}
		rx_index = 0;
 8001950:	4b08      	ldr	r3, [pc, #32]	; (8001974 <GPS_UART_CallBack+0x64>)
 8001952:	2200      	movs	r2, #0
 8001954:	701a      	strb	r2, [r3, #0]
		memset(rx_buffer, 0, sizeof(rx_buffer));
 8001956:	2280      	movs	r2, #128	; 0x80
 8001958:	2100      	movs	r1, #0
 800195a:	4807      	ldr	r0, [pc, #28]	; (8001978 <GPS_UART_CallBack+0x68>)
 800195c:	f005 fe9a 	bl	8007694 <memset>
	}
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 8001960:	2201      	movs	r2, #1
 8001962:	4903      	ldr	r1, [pc, #12]	; (8001970 <GPS_UART_CallBack+0x60>)
 8001964:	4805      	ldr	r0, [pc, #20]	; (800197c <GPS_UART_CallBack+0x6c>)
 8001966:	f004 fed2 	bl	800670e <HAL_UART_Receive_IT>
}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	20000258 	.word	0x20000258
 8001974:	200002dc 	.word	0x200002dc
 8001978:	2000025c 	.word	0x2000025c
 800197c:	20000474 	.word	0x20000474

08001980 <GPS_validate>:


int GPS_validate(char *nmeastr){
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 800198c:	2300      	movs	r3, #0
 800198e:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	2b24      	cmp	r3, #36	; 0x24
 800199a:	d103      	bne.n	80019a4 <GPS_validate+0x24>
        i++;
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	3301      	adds	r3, #1
 80019a0:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80019a2:	e00c      	b.n	80019be <GPS_validate+0x3e>
        return 0;
 80019a4:	2300      	movs	r3, #0
 80019a6:	e047      	b.n	8001a38 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	4413      	add	r3, r2
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	461a      	mov	r2, r3
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	4053      	eors	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
        i++;
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	3301      	adds	r3, #1
 80019bc:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	4413      	add	r3, r2
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d008      	beq.n	80019dc <GPS_validate+0x5c>
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	4413      	add	r3, r2
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b2a      	cmp	r3, #42	; 0x2a
 80019d4:	d002      	beq.n	80019dc <GPS_validate+0x5c>
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	2b4a      	cmp	r3, #74	; 0x4a
 80019da:	dde5      	ble.n	80019a8 <GPS_validate+0x28>
    }

    if(i >= 75){
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	2b4a      	cmp	r3, #74	; 0x4a
 80019e0:	dd01      	ble.n	80019e6 <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 80019e2:	2300      	movs	r3, #0
 80019e4:	e028      	b.n	8001a38 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	4413      	add	r3, r2
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	2b2a      	cmp	r3, #42	; 0x2a
 80019f0:	d119      	bne.n	8001a26 <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	3301      	adds	r3, #1
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	4413      	add	r3, r2
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	3302      	adds	r3, #2
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	4413      	add	r3, r2
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 8001a0e:	f107 0308 	add.w	r3, r7, #8
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	490a      	ldr	r1, [pc, #40]	; (8001a40 <GPS_validate+0xc0>)
 8001a16:	4618      	mov	r0, r3
 8001a18:	f006 fcc4 	bl	80083a4 <siprintf>
    return((checkcalcstr[0] == check[0])
 8001a1c:	7a3a      	ldrb	r2, [r7, #8]
 8001a1e:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d108      	bne.n	8001a36 <GPS_validate+0xb6>
 8001a24:	e001      	b.n	8001a2a <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 8001a26:	2300      	movs	r3, #0
 8001a28:	e006      	b.n	8001a38 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8001a2a:	7a7a      	ldrb	r2, [r7, #9]
 8001a2c:	7b7b      	ldrb	r3, [r7, #13]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d101      	bne.n	8001a36 <GPS_validate+0xb6>
 8001a32:	2301      	movs	r3, #1
 8001a34:	e000      	b.n	8001a38 <GPS_validate+0xb8>
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3718      	adds	r7, #24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	0800d428 	.word	0x0800d428

08001a44 <GPS_parse>:

void GPS_parse(char *GPSstrParse){
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08a      	sub	sp, #40	; 0x28
 8001a48:	af08      	add	r7, sp, #32
 8001a4a:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GPGGA", 6)){
 8001a4c:	2206      	movs	r2, #6
 8001a4e:	494b      	ldr	r1, [pc, #300]	; (8001b7c <GPS_parse+0x138>)
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f006 fd38 	bl	80084c6 <strncmp>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d139      	bne.n	8001ad0 <GPS_parse+0x8c>
    	if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 8001a5c:	4b48      	ldr	r3, [pc, #288]	; (8001b80 <GPS_parse+0x13c>)
 8001a5e:	9307      	str	r3, [sp, #28]
 8001a60:	4b48      	ldr	r3, [pc, #288]	; (8001b84 <GPS_parse+0x140>)
 8001a62:	9306      	str	r3, [sp, #24]
 8001a64:	4b48      	ldr	r3, [pc, #288]	; (8001b88 <GPS_parse+0x144>)
 8001a66:	9305      	str	r3, [sp, #20]
 8001a68:	4b48      	ldr	r3, [pc, #288]	; (8001b8c <GPS_parse+0x148>)
 8001a6a:	9304      	str	r3, [sp, #16]
 8001a6c:	4b48      	ldr	r3, [pc, #288]	; (8001b90 <GPS_parse+0x14c>)
 8001a6e:	9303      	str	r3, [sp, #12]
 8001a70:	4b48      	ldr	r3, [pc, #288]	; (8001b94 <GPS_parse+0x150>)
 8001a72:	9302      	str	r3, [sp, #8]
 8001a74:	4b48      	ldr	r3, [pc, #288]	; (8001b98 <GPS_parse+0x154>)
 8001a76:	9301      	str	r3, [sp, #4]
 8001a78:	4b48      	ldr	r3, [pc, #288]	; (8001b9c <GPS_parse+0x158>)
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	4b48      	ldr	r3, [pc, #288]	; (8001ba0 <GPS_parse+0x15c>)
 8001a7e:	4a49      	ldr	r2, [pc, #292]	; (8001ba4 <GPS_parse+0x160>)
 8001a80:	4949      	ldr	r1, [pc, #292]	; (8001ba8 <GPS_parse+0x164>)
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f006 fcae 	bl	80083e4 <siscanf>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	dd72      	ble.n	8001b74 <GPS_parse+0x130>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8001a8e:	4b47      	ldr	r3, [pc, #284]	; (8001bac <GPS_parse+0x168>)
 8001a90:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a94:	4b45      	ldr	r3, [pc, #276]	; (8001bac <GPS_parse+0x168>)
 8001a96:	7e1b      	ldrb	r3, [r3, #24]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a9e:	f000 f8a9 	bl	8001bf4 <GPS_nmea_to_dec>
 8001aa2:	eef0 7a40 	vmov.f32	s15, s0
 8001aa6:	4b41      	ldr	r3, [pc, #260]	; (8001bac <GPS_parse+0x168>)
 8001aa8:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8001aac:	4b3f      	ldr	r3, [pc, #252]	; (8001bac <GPS_parse+0x168>)
 8001aae:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ab2:	4b3e      	ldr	r3, [pc, #248]	; (8001bac <GPS_parse+0x168>)
 8001ab4:	7e5b      	ldrb	r3, [r3, #25]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	eeb0 0a67 	vmov.f32	s0, s15
 8001abc:	f000 f89a 	bl	8001bf4 <GPS_nmea_to_dec>
 8001ac0:	eef0 7a40 	vmov.f32	s15, s0
 8001ac4:	4b39      	ldr	r3, [pc, #228]	; (8001bac <GPS_parse+0x168>)
 8001ac6:	edc3 7a00 	vstr	s15, [r3]

    		transmit_To_Phone();
 8001aca:	f7ff fdff 	bl	80016cc <transmit_To_Phone>

			// transmit data to huart3 for check
/*			HAL_UART_Transmit(&huart3, (unsigned char *)buf, strlen(buf), 10);*/
    		return;
 8001ace:	e051      	b.n	8001b74 <GPS_parse+0x130>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GPRMC", 6)){
 8001ad0:	2206      	movs	r2, #6
 8001ad2:	4937      	ldr	r1, [pc, #220]	; (8001bb0 <GPS_parse+0x16c>)
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f006 fcf6 	bl	80084c6 <strncmp>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d114      	bne.n	8001b0a <GPS_parse+0xc6>
    	if(sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1)
 8001ae0:	4b34      	ldr	r3, [pc, #208]	; (8001bb4 <GPS_parse+0x170>)
 8001ae2:	9305      	str	r3, [sp, #20]
 8001ae4:	4b34      	ldr	r3, [pc, #208]	; (8001bb8 <GPS_parse+0x174>)
 8001ae6:	9304      	str	r3, [sp, #16]
 8001ae8:	4b34      	ldr	r3, [pc, #208]	; (8001bbc <GPS_parse+0x178>)
 8001aea:	9303      	str	r3, [sp, #12]
 8001aec:	4b29      	ldr	r3, [pc, #164]	; (8001b94 <GPS_parse+0x150>)
 8001aee:	9302      	str	r3, [sp, #8]
 8001af0:	4b29      	ldr	r3, [pc, #164]	; (8001b98 <GPS_parse+0x154>)
 8001af2:	9301      	str	r3, [sp, #4]
 8001af4:	4b29      	ldr	r3, [pc, #164]	; (8001b9c <GPS_parse+0x158>)
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	4b29      	ldr	r3, [pc, #164]	; (8001ba0 <GPS_parse+0x15c>)
 8001afa:	4a2a      	ldr	r2, [pc, #168]	; (8001ba4 <GPS_parse+0x160>)
 8001afc:	4930      	ldr	r1, [pc, #192]	; (8001bc0 <GPS_parse+0x17c>)
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f006 fc70 	bl	80083e4 <siscanf>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	e034      	b.n	8001b74 <GPS_parse+0x130>
    		return;

    }
    else if (!strncmp(GPSstrParse, "$GPGLL", 6)){
 8001b0a:	2206      	movs	r2, #6
 8001b0c:	492d      	ldr	r1, [pc, #180]	; (8001bc4 <GPS_parse+0x180>)
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f006 fcd9 	bl	80084c6 <strncmp>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d110      	bne.n	8001b3c <GPS_parse+0xf8>
        if(sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1)
 8001b1a:	4b2b      	ldr	r3, [pc, #172]	; (8001bc8 <GPS_parse+0x184>)
 8001b1c:	9303      	str	r3, [sp, #12]
 8001b1e:	4b21      	ldr	r3, [pc, #132]	; (8001ba4 <GPS_parse+0x160>)
 8001b20:	9302      	str	r3, [sp, #8]
 8001b22:	4b1c      	ldr	r3, [pc, #112]	; (8001b94 <GPS_parse+0x150>)
 8001b24:	9301      	str	r3, [sp, #4]
 8001b26:	4b1c      	ldr	r3, [pc, #112]	; (8001b98 <GPS_parse+0x154>)
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	4b1c      	ldr	r3, [pc, #112]	; (8001b9c <GPS_parse+0x158>)
 8001b2c:	4a1c      	ldr	r2, [pc, #112]	; (8001ba0 <GPS_parse+0x15c>)
 8001b2e:	4927      	ldr	r1, [pc, #156]	; (8001bcc <GPS_parse+0x188>)
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f006 fc57 	bl	80083e4 <siscanf>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	e01b      	b.n	8001b74 <GPS_parse+0x130>
            return;
    }
    else if (!strncmp(GPSstrParse, "$GPVTG", 6)){
 8001b3c:	2206      	movs	r2, #6
 8001b3e:	4924      	ldr	r1, [pc, #144]	; (8001bd0 <GPS_parse+0x18c>)
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f006 fcc0 	bl	80084c6 <strncmp>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d113      	bne.n	8001b74 <GPS_parse+0x130>
        if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8001b4c:	4b21      	ldr	r3, [pc, #132]	; (8001bd4 <GPS_parse+0x190>)
 8001b4e:	9305      	str	r3, [sp, #20]
 8001b50:	4b21      	ldr	r3, [pc, #132]	; (8001bd8 <GPS_parse+0x194>)
 8001b52:	9304      	str	r3, [sp, #16]
 8001b54:	4b21      	ldr	r3, [pc, #132]	; (8001bdc <GPS_parse+0x198>)
 8001b56:	9303      	str	r3, [sp, #12]
 8001b58:	4b18      	ldr	r3, [pc, #96]	; (8001bbc <GPS_parse+0x178>)
 8001b5a:	9302      	str	r3, [sp, #8]
 8001b5c:	4b20      	ldr	r3, [pc, #128]	; (8001be0 <GPS_parse+0x19c>)
 8001b5e:	9301      	str	r3, [sp, #4]
 8001b60:	4b20      	ldr	r3, [pc, #128]	; (8001be4 <GPS_parse+0x1a0>)
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	4b20      	ldr	r3, [pc, #128]	; (8001be8 <GPS_parse+0x1a4>)
 8001b66:	4a21      	ldr	r2, [pc, #132]	; (8001bec <GPS_parse+0x1a8>)
 8001b68:	4921      	ldr	r1, [pc, #132]	; (8001bf0 <GPS_parse+0x1ac>)
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f006 fc3a 	bl	80083e4 <siscanf>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
            return;
    }
}
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	0800d430 	.word	0x0800d430
 8001b80:	2000030c 	.word	0x2000030c
 8001b84:	20000308 	.word	0x20000308
 8001b88:	20000304 	.word	0x20000304
 8001b8c:	20000300 	.word	0x20000300
 8001b90:	200002fc 	.word	0x200002fc
 8001b94:	200002f9 	.word	0x200002f9
 8001b98:	200002ec 	.word	0x200002ec
 8001b9c:	200002f8 	.word	0x200002f8
 8001ba0:	200002f0 	.word	0x200002f0
 8001ba4:	200002f4 	.word	0x200002f4
 8001ba8:	0800d438 	.word	0x0800d438
 8001bac:	200002e0 	.word	0x200002e0
 8001bb0:	0800d418 	.word	0x0800d418
 8001bb4:	20000318 	.word	0x20000318
 8001bb8:	20000314 	.word	0x20000314
 8001bbc:	20000310 	.word	0x20000310
 8001bc0:	0800d460 	.word	0x0800d460
 8001bc4:	0800d480 	.word	0x0800d480
 8001bc8:	2000031c 	.word	0x2000031c
 8001bcc:	0800d488 	.word	0x0800d488
 8001bd0:	0800d4a4 	.word	0x0800d4a4
 8001bd4:	20000334 	.word	0x20000334
 8001bd8:	20000330 	.word	0x20000330
 8001bdc:	2000032d 	.word	0x2000032d
 8001be0:	2000032c 	.word	0x2000032c
 8001be4:	20000328 	.word	0x20000328
 8001be8:	20000324 	.word	0x20000324
 8001bec:	20000320 	.word	0x20000320
 8001bf0:	0800d4ac 	.word	0x0800d4ac

08001bf4 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8001bf4:	b480      	push	{r7}
 8001bf6:	b087      	sub	sp, #28
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	ed87 0a01 	vstr	s0, [r7, #4]
 8001bfe:	4603      	mov	r3, r0
 8001c00:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8001c02:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c06:	eddf 6a20 	vldr	s13, [pc, #128]	; 8001c88 <GPS_nmea_to_dec+0x94>
 8001c0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c12:	ee17 3a90 	vmov	r3, s15
 8001c16:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	2264      	movs	r2, #100	; 0x64
 8001c1c:	fb02 f303 	mul.w	r3, r2, r3
 8001c20:	ee07 3a90 	vmov	s15, r3
 8001c24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c28:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c30:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8001c34:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c38:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001c8c <GPS_nmea_to_dec+0x98>
 8001c3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c40:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	ee07 3a90 	vmov	s15, r3
 8001c4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c4e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001c52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c56:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 8001c5a:	78fb      	ldrb	r3, [r7, #3]
 8001c5c:	2b53      	cmp	r3, #83	; 0x53
 8001c5e:	d002      	beq.n	8001c66 <GPS_nmea_to_dec+0x72>
 8001c60:	78fb      	ldrb	r3, [r7, #3]
 8001c62:	2b57      	cmp	r3, #87	; 0x57
 8001c64:	d105      	bne.n	8001c72 <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 8001c66:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c6a:	eef1 7a67 	vneg.f32	s15, s15
 8001c6e:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	ee07 3a90 	vmov	s15, r3
}
 8001c78:	eeb0 0a67 	vmov.f32	s0, s15
 8001c7c:	371c      	adds	r7, #28
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	42c80000 	.word	0x42c80000
 8001c8c:	42700000 	.word	0x42700000

08001c90 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c94:	4b1b      	ldr	r3, [pc, #108]	; (8001d04 <MX_I2C1_Init+0x74>)
 8001c96:	4a1c      	ldr	r2, [pc, #112]	; (8001d08 <MX_I2C1_Init+0x78>)
 8001c98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001c9a:	4b1a      	ldr	r3, [pc, #104]	; (8001d04 <MX_I2C1_Init+0x74>)
 8001c9c:	4a1b      	ldr	r2, [pc, #108]	; (8001d0c <MX_I2C1_Init+0x7c>)
 8001c9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ca0:	4b18      	ldr	r3, [pc, #96]	; (8001d04 <MX_I2C1_Init+0x74>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ca6:	4b17      	ldr	r3, [pc, #92]	; (8001d04 <MX_I2C1_Init+0x74>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cac:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <MX_I2C1_Init+0x74>)
 8001cae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cb2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cb4:	4b13      	ldr	r3, [pc, #76]	; (8001d04 <MX_I2C1_Init+0x74>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001cba:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <MX_I2C1_Init+0x74>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cc0:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <MX_I2C1_Init+0x74>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cc6:	4b0f      	ldr	r3, [pc, #60]	; (8001d04 <MX_I2C1_Init+0x74>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ccc:	480d      	ldr	r0, [pc, #52]	; (8001d04 <MX_I2C1_Init+0x74>)
 8001cce:	f001 fdad 	bl	800382c <HAL_I2C_Init>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001cd8:	f000 f942 	bl	8001f60 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001cdc:	2100      	movs	r1, #0
 8001cde:	4809      	ldr	r0, [pc, #36]	; (8001d04 <MX_I2C1_Init+0x74>)
 8001ce0:	f002 fd63 	bl	80047aa <HAL_I2CEx_ConfigAnalogFilter>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001cea:	f000 f939 	bl	8001f60 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001cee:	2100      	movs	r1, #0
 8001cf0:	4804      	ldr	r0, [pc, #16]	; (8001d04 <MX_I2C1_Init+0x74>)
 8001cf2:	f002 fd96 	bl	8004822 <HAL_I2CEx_ConfigDigitalFilter>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001cfc:	f000 f930 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d00:	bf00      	nop
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20000338 	.word	0x20000338
 8001d08:	40005400 	.word	0x40005400
 8001d0c:	000186a0 	.word	0x000186a0

08001d10 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08a      	sub	sp, #40	; 0x28
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d18:	f107 0314 	add.w	r3, r7, #20
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	609a      	str	r2, [r3, #8]
 8001d24:	60da      	str	r2, [r3, #12]
 8001d26:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a19      	ldr	r2, [pc, #100]	; (8001d94 <HAL_I2C_MspInit+0x84>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d12c      	bne.n	8001d8c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	613b      	str	r3, [r7, #16]
 8001d36:	4b18      	ldr	r3, [pc, #96]	; (8001d98 <HAL_I2C_MspInit+0x88>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	4a17      	ldr	r2, [pc, #92]	; (8001d98 <HAL_I2C_MspInit+0x88>)
 8001d3c:	f043 0302 	orr.w	r3, r3, #2
 8001d40:	6313      	str	r3, [r2, #48]	; 0x30
 8001d42:	4b15      	ldr	r3, [pc, #84]	; (8001d98 <HAL_I2C_MspInit+0x88>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	613b      	str	r3, [r7, #16]
 8001d4c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d4e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d54:	2312      	movs	r3, #18
 8001d56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d60:	2304      	movs	r3, #4
 8001d62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d64:	f107 0314 	add.w	r3, r7, #20
 8001d68:	4619      	mov	r1, r3
 8001d6a:	480c      	ldr	r0, [pc, #48]	; (8001d9c <HAL_I2C_MspInit+0x8c>)
 8001d6c:	f001 fb98 	bl	80034a0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d70:	2300      	movs	r3, #0
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	4b08      	ldr	r3, [pc, #32]	; (8001d98 <HAL_I2C_MspInit+0x88>)
 8001d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d78:	4a07      	ldr	r2, [pc, #28]	; (8001d98 <HAL_I2C_MspInit+0x88>)
 8001d7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d7e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d80:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <HAL_I2C_MspInit+0x88>)
 8001d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001d8c:	bf00      	nop
 8001d8e:	3728      	adds	r7, #40	; 0x28
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40005400 	.word	0x40005400
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	40020400 	.word	0x40020400

08001da0 <__io_putchar>:
  #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8001da8:	1d39      	adds	r1, r7, #4
 8001daa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dae:	2201      	movs	r2, #1
 8001db0:	4803      	ldr	r0, [pc, #12]	; (8001dc0 <__io_putchar+0x20>)
 8001db2:	f004 fc1a 	bl	80065ea <HAL_UART_Transmit>

  return ch;
 8001db6:	687b      	ldr	r3, [r7, #4]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	200004b8 	.word	0x200004b8

08001dc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dca:	f001 f953 	bl	8003074 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dce:	f000 f83b 	bl	8001e48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dd2:	f7ff fcd9 	bl	8001788 <MX_GPIO_Init>
  MX_RTC_Init();
 8001dd6:	f000 fac3 	bl	8002360 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8001dda:	f000 ffe1 	bl	8002da0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001dde:	f001 f809 	bl	8002df4 <MX_USART3_UART_Init>
  MX_UART7_Init();
 8001de2:	f000 ffb3 	bl	8002d4c <MX_UART7_Init>
  MX_I2C1_Init();
 8001de6:	f7ff ff53 	bl	8001c90 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001dea:	f000 fea1 	bl	8002b30 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */


  GPS_Init();
 8001dee:	f7ff fd81 	bl	80018f4 <GPS_Init>
  BT_Init();
 8001df2:	f7ff fb45 	bl	8001480 <BT_Init>
  Compass_Init();
 8001df6:	f7ff fa99 	bl	800132c <Compass_Init>
  Motor_Init();
 8001dfa:	f000 fa95 	bl	8002328 <Motor_Init>

  uint32_t start_tick = HAL_GetTick();
 8001dfe:	f001 f99f 	bl	8003140 <HAL_GetTick>
 8001e02:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  current_tick = HAL_GetTick();
 8001e04:	f001 f99c 	bl	8003140 <HAL_GetTick>
 8001e08:	6038      	str	r0, [r7, #0]
	  if(current_tick - start_tick >= 70){
 8001e0a:	683a      	ldr	r2, [r7, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b45      	cmp	r3, #69	; 0x45
 8001e12:	d903      	bls.n	8001e1c <main+0x58>
		  calculateHeading();
 8001e14:	f7ff faa0 	bl	8001358 <calculateHeading>
		  start_tick = current_tick;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	607b      	str	r3, [r7, #4]
	  }

	  if(Mode_Flag==CONTROL_MODE){
 8001e1c:	4b08      	ldr	r3, [pc, #32]	; (8001e40 <main+0x7c>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d105      	bne.n	8001e30 <main+0x6c>
		  Move(controlCMD);
 8001e24:	4b07      	ldr	r3, [pc, #28]	; (8001e44 <main+0x80>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f000 f89f 	bl	8001f6c <Move>
 8001e2e:	e7e9      	b.n	8001e04 <main+0x40>

	  }else if(Mode_Flag==WAYPOINT_MODE){
 8001e30:	4b03      	ldr	r3, [pc, #12]	; (8001e40 <main+0x7c>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d1e5      	bne.n	8001e04 <main+0x40>
		  SelfDriving();
 8001e38:	f000 fb56 	bl	80024e8 <SelfDriving>
	  current_tick = HAL_GetTick();
 8001e3c:	e7e2      	b.n	8001e04 <main+0x40>
 8001e3e:	bf00      	nop
 8001e40:	20000251 	.word	0x20000251
 8001e44:	20000254 	.word	0x20000254

08001e48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b094      	sub	sp, #80	; 0x50
 8001e4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e4e:	f107 0320 	add.w	r3, r7, #32
 8001e52:	2230      	movs	r2, #48	; 0x30
 8001e54:	2100      	movs	r1, #0
 8001e56:	4618      	mov	r0, r3
 8001e58:	f005 fc1c 	bl	8007694 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e5c:	f107 030c 	add.w	r3, r7, #12
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
 8001e6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60bb      	str	r3, [r7, #8]
 8001e70:	4b2c      	ldr	r3, [pc, #176]	; (8001f24 <SystemClock_Config+0xdc>)
 8001e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e74:	4a2b      	ldr	r2, [pc, #172]	; (8001f24 <SystemClock_Config+0xdc>)
 8001e76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e7a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e7c:	4b29      	ldr	r3, [pc, #164]	; (8001f24 <SystemClock_Config+0xdc>)
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e84:	60bb      	str	r3, [r7, #8]
 8001e86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e88:	2300      	movs	r3, #0
 8001e8a:	607b      	str	r3, [r7, #4]
 8001e8c:	4b26      	ldr	r3, [pc, #152]	; (8001f28 <SystemClock_Config+0xe0>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a25      	ldr	r2, [pc, #148]	; (8001f28 <SystemClock_Config+0xe0>)
 8001e92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e96:	6013      	str	r3, [r2, #0]
 8001e98:	4b23      	ldr	r3, [pc, #140]	; (8001f28 <SystemClock_Config+0xe0>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ea0:	607b      	str	r3, [r7, #4]
 8001ea2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001ea4:	2306      	movs	r3, #6
 8001ea6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001eac:	2301      	movs	r3, #1
 8001eae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001eb0:	2310      	movs	r3, #16
 8001eb2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ebc:	2308      	movs	r3, #8
 8001ebe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001ec0:	23b4      	movs	r3, #180	; 0xb4
 8001ec2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ec8:	2304      	movs	r3, #4
 8001eca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ecc:	f107 0320 	add.w	r3, r7, #32
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f002 fd35 	bl	8004940 <HAL_RCC_OscConfig>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001edc:	f000 f840 	bl	8001f60 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001ee0:	f002 fcde 	bl	80048a0 <HAL_PWREx_EnableOverDrive>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001eea:	f000 f839 	bl	8001f60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001eee:	230f      	movs	r3, #15
 8001ef0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001efa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001efe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f04:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f06:	f107 030c 	add.w	r3, r7, #12
 8001f0a:	2105      	movs	r1, #5
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f002 ff8f 	bl	8004e30 <HAL_RCC_ClockConfig>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001f18:	f000 f822 	bl	8001f60 <Error_Handler>
  }
}
 8001f1c:	bf00      	nop
 8001f1e:	3750      	adds	r7, #80	; 0x50
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40023800 	.word	0x40023800
 8001f28:	40007000 	.word	0x40007000

08001f2c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
	if(huart == &huart2) GPS_UART_CallBack();
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a08      	ldr	r2, [pc, #32]	; (8001f58 <HAL_UART_RxCpltCallback+0x2c>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d101      	bne.n	8001f40 <HAL_UART_RxCpltCallback+0x14>
 8001f3c:	f7ff fce8 	bl	8001910 <GPS_UART_CallBack>
	if(huart->Instance == UART7) Phone_UART_CallBack();
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a05      	ldr	r2, [pc, #20]	; (8001f5c <HAL_UART_RxCpltCallback+0x30>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d101      	bne.n	8001f4e <HAL_UART_RxCpltCallback+0x22>
 8001f4a:	f7ff faa7 	bl	800149c <Phone_UART_CallBack>

}
 8001f4e:	bf00      	nop
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	20000474 	.word	0x20000474
 8001f5c:	40007800 	.word	0x40007800

08001f60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f64:	b672      	cpsid	i
}
 8001f66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f68:	e7fe      	b.n	8001f68 <Error_Handler+0x8>
	...

08001f6c <Move>:





void Move(int controlcmd){
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]



	switch(controlcmd){
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b06      	cmp	r3, #6
 8001f78:	f200 8097 	bhi.w	80020aa <Move+0x13e>
 8001f7c:	a201      	add	r2, pc, #4	; (adr r2, 8001f84 <Move+0x18>)
 8001f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f82:	bf00      	nop
 8001f84:	08002085 	.word	0x08002085
 8001f88:	08001fa1 	.word	0x08001fa1
 8001f8c:	08001fed 	.word	0x08001fed
 8001f90:	08001fc7 	.word	0x08001fc7
 8001f94:	08002013 	.word	0x08002013
 8001f98:	08002039 	.word	0x08002039
 8001f9c:	0800205f 	.word	0x0800205f
		case FORWARD:
			Forward();
 8001fa0:	f000 f88c 	bl	80020bc <Forward>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	4843      	ldr	r0, [pc, #268]	; (80020b8 <Move+0x14c>)
 8001faa:	f001 fc25 	bl	80037f8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2180      	movs	r1, #128	; 0x80
 8001fb2:	4841      	ldr	r0, [pc, #260]	; (80020b8 <Move+0x14c>)
 8001fb4:	f001 fc20 	bl	80037f8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fbe:	483e      	ldr	r0, [pc, #248]	; (80020b8 <Move+0x14c>)
 8001fc0:	f001 fc1a 	bl	80037f8 <HAL_GPIO_WritePin>
			break;
 8001fc4:	e074      	b.n	80020b0 <Move+0x144>
		case BACKWARD:
			Backward();
 8001fc6:	f000 f8a9 	bl	800211c <Backward>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8001fca:	2200      	movs	r2, #0
 8001fcc:	2101      	movs	r1, #1
 8001fce:	483a      	ldr	r0, [pc, #232]	; (80020b8 <Move+0x14c>)
 8001fd0:	f001 fc12 	bl	80037f8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	2180      	movs	r1, #128	; 0x80
 8001fd8:	4837      	ldr	r0, [pc, #220]	; (80020b8 <Move+0x14c>)
 8001fda:	f001 fc0d 	bl	80037f8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fe4:	4834      	ldr	r0, [pc, #208]	; (80020b8 <Move+0x14c>)
 8001fe6:	f001 fc07 	bl	80037f8 <HAL_GPIO_WritePin>
			break;
 8001fea:	e061      	b.n	80020b0 <Move+0x144>
		case RIGHT:
			Right();
 8001fec:	f000 f8c6 	bl	800217c <Right>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	4830      	ldr	r0, [pc, #192]	; (80020b8 <Move+0x14c>)
 8001ff6:	f001 fbff 	bl	80037f8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	2180      	movs	r1, #128	; 0x80
 8001ffe:	482e      	ldr	r0, [pc, #184]	; (80020b8 <Move+0x14c>)
 8002000:	f001 fbfa 	bl	80037f8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8002004:	2200      	movs	r2, #0
 8002006:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800200a:	482b      	ldr	r0, [pc, #172]	; (80020b8 <Move+0x14c>)
 800200c:	f001 fbf4 	bl	80037f8 <HAL_GPIO_WritePin>
			break;
 8002010:	e04e      	b.n	80020b0 <Move+0x144>
		case LEFT:
			Left();
 8002012:	f000 f8e3 	bl	80021dc <Left>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8002016:	2200      	movs	r2, #0
 8002018:	2101      	movs	r1, #1
 800201a:	4827      	ldr	r0, [pc, #156]	; (80020b8 <Move+0x14c>)
 800201c:	f001 fbec 	bl	80037f8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8002020:	2201      	movs	r2, #1
 8002022:	2180      	movs	r1, #128	; 0x80
 8002024:	4824      	ldr	r0, [pc, #144]	; (80020b8 <Move+0x14c>)
 8002026:	f001 fbe7 	bl	80037f8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 800202a:	2201      	movs	r2, #1
 800202c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002030:	4821      	ldr	r0, [pc, #132]	; (80020b8 <Move+0x14c>)
 8002032:	f001 fbe1 	bl	80037f8 <HAL_GPIO_WritePin>
			break;
 8002036:	e03b      	b.n	80020b0 <Move+0x144>
		case CW:
			Cw();
 8002038:	f000 f900 	bl	800223c <Cw>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 800203c:	2201      	movs	r2, #1
 800203e:	2101      	movs	r1, #1
 8002040:	481d      	ldr	r0, [pc, #116]	; (80020b8 <Move+0x14c>)
 8002042:	f001 fbd9 	bl	80037f8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8002046:	2201      	movs	r2, #1
 8002048:	2180      	movs	r1, #128	; 0x80
 800204a:	481b      	ldr	r0, [pc, #108]	; (80020b8 <Move+0x14c>)
 800204c:	f001 fbd4 	bl	80037f8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8002050:	2200      	movs	r2, #0
 8002052:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002056:	4818      	ldr	r0, [pc, #96]	; (80020b8 <Move+0x14c>)
 8002058:	f001 fbce 	bl	80037f8 <HAL_GPIO_WritePin>
			break;
 800205c:	e028      	b.n	80020b0 <Move+0x144>
		case CCW:
			Ccw();
 800205e:	f000 f91d 	bl	800229c <Ccw>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8002062:	2201      	movs	r2, #1
 8002064:	2101      	movs	r1, #1
 8002066:	4814      	ldr	r0, [pc, #80]	; (80020b8 <Move+0x14c>)
 8002068:	f001 fbc6 	bl	80037f8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 800206c:	2201      	movs	r2, #1
 800206e:	2180      	movs	r1, #128	; 0x80
 8002070:	4811      	ldr	r0, [pc, #68]	; (80020b8 <Move+0x14c>)
 8002072:	f001 fbc1 	bl	80037f8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8002076:	2201      	movs	r2, #1
 8002078:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800207c:	480e      	ldr	r0, [pc, #56]	; (80020b8 <Move+0x14c>)
 800207e:	f001 fbbb 	bl	80037f8 <HAL_GPIO_WritePin>
			break;
 8002082:	e015      	b.n	80020b0 <Move+0x144>
		case STOP:
			Stop();
 8002084:	f000 f93a 	bl	80022fc <Stop>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8002088:	2200      	movs	r2, #0
 800208a:	2101      	movs	r1, #1
 800208c:	480a      	ldr	r0, [pc, #40]	; (80020b8 <Move+0x14c>)
 800208e:	f001 fbb3 	bl	80037f8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 8002092:	2200      	movs	r2, #0
 8002094:	2180      	movs	r1, #128	; 0x80
 8002096:	4808      	ldr	r0, [pc, #32]	; (80020b8 <Move+0x14c>)
 8002098:	f001 fbae 	bl	80037f8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 800209c:	2200      	movs	r2, #0
 800209e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020a2:	4805      	ldr	r0, [pc, #20]	; (80020b8 <Move+0x14c>)
 80020a4:	f001 fba8 	bl	80037f8 <HAL_GPIO_WritePin>
			break;
 80020a8:	e002      	b.n	80020b0 <Move+0x144>
		default:
			Stop();
 80020aa:	f000 f927 	bl	80022fc <Stop>
			break;
 80020ae:	bf00      	nop
		}
}
 80020b0:	bf00      	nop
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40020400 	.word	0x40020400

080020bc <Forward>:

void Forward()
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_RESET);
 80020c0:	2200      	movs	r2, #0
 80020c2:	2102      	movs	r1, #2
 80020c4:	4812      	ldr	r0, [pc, #72]	; (8002110 <Forward+0x54>)
 80020c6:	f001 fb97 	bl	80037f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_SET);
 80020ca:	2201      	movs	r2, #1
 80020cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020d0:	4810      	ldr	r0, [pc, #64]	; (8002114 <Forward+0x58>)
 80020d2:	f001 fb91 	bl	80037f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_RESET);
 80020d6:	2200      	movs	r2, #0
 80020d8:	2180      	movs	r1, #128	; 0x80
 80020da:	480e      	ldr	r0, [pc, #56]	; (8002114 <Forward+0x58>)
 80020dc:	f001 fb8c 	bl	80037f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_SET);
 80020e0:	2201      	movs	r2, #1
 80020e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020e6:	480b      	ldr	r0, [pc, #44]	; (8002114 <Forward+0x58>)
 80020e8:	f001 fb86 	bl	80037f8 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80020ec:	2100      	movs	r1, #0
 80020ee:	480a      	ldr	r0, [pc, #40]	; (8002118 <Forward+0x5c>)
 80020f0:	f003 fbe0 	bl	80058b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80020f4:	2104      	movs	r1, #4
 80020f6:	4808      	ldr	r0, [pc, #32]	; (8002118 <Forward+0x5c>)
 80020f8:	f003 fbdc 	bl	80058b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80020fc:	2108      	movs	r1, #8
 80020fe:	4806      	ldr	r0, [pc, #24]	; (8002118 <Forward+0x5c>)
 8002100:	f003 fbd8 	bl	80058b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8002104:	210c      	movs	r1, #12
 8002106:	4804      	ldr	r0, [pc, #16]	; (8002118 <Forward+0x5c>)
 8002108:	f003 fbd4 	bl	80058b4 <HAL_TIM_PWM_Start>
}
 800210c:	bf00      	nop
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40021800 	.word	0x40021800
 8002114:	40021400 	.word	0x40021400
 8002118:	200003e8 	.word	0x200003e8

0800211c <Backward>:

void Backward()
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_SET);
 8002120:	2201      	movs	r2, #1
 8002122:	2102      	movs	r1, #2
 8002124:	4812      	ldr	r0, [pc, #72]	; (8002170 <Backward+0x54>)
 8002126:	f001 fb67 	bl	80037f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_RESET);
 800212a:	2200      	movs	r2, #0
 800212c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002130:	4810      	ldr	r0, [pc, #64]	; (8002174 <Backward+0x58>)
 8002132:	f001 fb61 	bl	80037f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_SET);
 8002136:	2201      	movs	r2, #1
 8002138:	2180      	movs	r1, #128	; 0x80
 800213a:	480e      	ldr	r0, [pc, #56]	; (8002174 <Backward+0x58>)
 800213c:	f001 fb5c 	bl	80037f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_RESET);
 8002140:	2200      	movs	r2, #0
 8002142:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002146:	480b      	ldr	r0, [pc, #44]	; (8002174 <Backward+0x58>)
 8002148:	f001 fb56 	bl	80037f8 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800214c:	2100      	movs	r1, #0
 800214e:	480a      	ldr	r0, [pc, #40]	; (8002178 <Backward+0x5c>)
 8002150:	f003 fbb0 	bl	80058b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8002154:	2104      	movs	r1, #4
 8002156:	4808      	ldr	r0, [pc, #32]	; (8002178 <Backward+0x5c>)
 8002158:	f003 fbac 	bl	80058b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800215c:	2108      	movs	r1, #8
 800215e:	4806      	ldr	r0, [pc, #24]	; (8002178 <Backward+0x5c>)
 8002160:	f003 fba8 	bl	80058b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8002164:	210c      	movs	r1, #12
 8002166:	4804      	ldr	r0, [pc, #16]	; (8002178 <Backward+0x5c>)
 8002168:	f003 fba4 	bl	80058b4 <HAL_TIM_PWM_Start>
}
 800216c:	bf00      	nop
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40021800 	.word	0x40021800
 8002174:	40021400 	.word	0x40021400
 8002178:	200003e8 	.word	0x200003e8

0800217c <Right>:

void Right()
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_SET);
 8002180:	2201      	movs	r2, #1
 8002182:	2102      	movs	r1, #2
 8002184:	4812      	ldr	r0, [pc, #72]	; (80021d0 <Right+0x54>)
 8002186:	f001 fb37 	bl	80037f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_RESET);
 800218a:	2200      	movs	r2, #0
 800218c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002190:	4810      	ldr	r0, [pc, #64]	; (80021d4 <Right+0x58>)
 8002192:	f001 fb31 	bl	80037f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_RESET);
 8002196:	2200      	movs	r2, #0
 8002198:	2180      	movs	r1, #128	; 0x80
 800219a:	480e      	ldr	r0, [pc, #56]	; (80021d4 <Right+0x58>)
 800219c:	f001 fb2c 	bl	80037f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_SET);
 80021a0:	2201      	movs	r2, #1
 80021a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021a6:	480b      	ldr	r0, [pc, #44]	; (80021d4 <Right+0x58>)
 80021a8:	f001 fb26 	bl	80037f8 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80021ac:	2100      	movs	r1, #0
 80021ae:	480a      	ldr	r0, [pc, #40]	; (80021d8 <Right+0x5c>)
 80021b0:	f003 fb80 	bl	80058b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80021b4:	2104      	movs	r1, #4
 80021b6:	4808      	ldr	r0, [pc, #32]	; (80021d8 <Right+0x5c>)
 80021b8:	f003 fb7c 	bl	80058b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80021bc:	2108      	movs	r1, #8
 80021be:	4806      	ldr	r0, [pc, #24]	; (80021d8 <Right+0x5c>)
 80021c0:	f003 fb78 	bl	80058b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80021c4:	210c      	movs	r1, #12
 80021c6:	4804      	ldr	r0, [pc, #16]	; (80021d8 <Right+0x5c>)
 80021c8:	f003 fb74 	bl	80058b4 <HAL_TIM_PWM_Start>
}
 80021cc:	bf00      	nop
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40021800 	.word	0x40021800
 80021d4:	40021400 	.word	0x40021400
 80021d8:	200003e8 	.word	0x200003e8

080021dc <Left>:

void Left()
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_RESET);
 80021e0:	2200      	movs	r2, #0
 80021e2:	2102      	movs	r1, #2
 80021e4:	4812      	ldr	r0, [pc, #72]	; (8002230 <Left+0x54>)
 80021e6:	f001 fb07 	bl	80037f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_SET);
 80021ea:	2201      	movs	r2, #1
 80021ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021f0:	4810      	ldr	r0, [pc, #64]	; (8002234 <Left+0x58>)
 80021f2:	f001 fb01 	bl	80037f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_SET);
 80021f6:	2201      	movs	r2, #1
 80021f8:	2180      	movs	r1, #128	; 0x80
 80021fa:	480e      	ldr	r0, [pc, #56]	; (8002234 <Left+0x58>)
 80021fc:	f001 fafc 	bl	80037f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_RESET);
 8002200:	2200      	movs	r2, #0
 8002202:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002206:	480b      	ldr	r0, [pc, #44]	; (8002234 <Left+0x58>)
 8002208:	f001 faf6 	bl	80037f8 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800220c:	2100      	movs	r1, #0
 800220e:	480a      	ldr	r0, [pc, #40]	; (8002238 <Left+0x5c>)
 8002210:	f003 fb50 	bl	80058b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8002214:	2104      	movs	r1, #4
 8002216:	4808      	ldr	r0, [pc, #32]	; (8002238 <Left+0x5c>)
 8002218:	f003 fb4c 	bl	80058b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800221c:	2108      	movs	r1, #8
 800221e:	4806      	ldr	r0, [pc, #24]	; (8002238 <Left+0x5c>)
 8002220:	f003 fb48 	bl	80058b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8002224:	210c      	movs	r1, #12
 8002226:	4804      	ldr	r0, [pc, #16]	; (8002238 <Left+0x5c>)
 8002228:	f003 fb44 	bl	80058b4 <HAL_TIM_PWM_Start>
}
 800222c:	bf00      	nop
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40021800 	.word	0x40021800
 8002234:	40021400 	.word	0x40021400
 8002238:	200003e8 	.word	0x200003e8

0800223c <Cw>:

void Cw()
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_SET);
 8002240:	2201      	movs	r2, #1
 8002242:	2102      	movs	r1, #2
 8002244:	4812      	ldr	r0, [pc, #72]	; (8002290 <Cw+0x54>)
 8002246:	f001 fad7 	bl	80037f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_SET);
 800224a:	2201      	movs	r2, #1
 800224c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002250:	4810      	ldr	r0, [pc, #64]	; (8002294 <Cw+0x58>)
 8002252:	f001 fad1 	bl	80037f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_SET);
 8002256:	2201      	movs	r2, #1
 8002258:	2180      	movs	r1, #128	; 0x80
 800225a:	480e      	ldr	r0, [pc, #56]	; (8002294 <Cw+0x58>)
 800225c:	f001 facc 	bl	80037f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_SET);
 8002260:	2201      	movs	r2, #1
 8002262:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002266:	480b      	ldr	r0, [pc, #44]	; (8002294 <Cw+0x58>)
 8002268:	f001 fac6 	bl	80037f8 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800226c:	2100      	movs	r1, #0
 800226e:	480a      	ldr	r0, [pc, #40]	; (8002298 <Cw+0x5c>)
 8002270:	f003 fb20 	bl	80058b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8002274:	2104      	movs	r1, #4
 8002276:	4808      	ldr	r0, [pc, #32]	; (8002298 <Cw+0x5c>)
 8002278:	f003 fb1c 	bl	80058b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800227c:	2108      	movs	r1, #8
 800227e:	4806      	ldr	r0, [pc, #24]	; (8002298 <Cw+0x5c>)
 8002280:	f003 fb18 	bl	80058b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8002284:	210c      	movs	r1, #12
 8002286:	4804      	ldr	r0, [pc, #16]	; (8002298 <Cw+0x5c>)
 8002288:	f003 fb14 	bl	80058b4 <HAL_TIM_PWM_Start>
}
 800228c:	bf00      	nop
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40021800 	.word	0x40021800
 8002294:	40021400 	.word	0x40021400
 8002298:	200003e8 	.word	0x200003e8

0800229c <Ccw>:

void Ccw()
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_RESET);
 80022a0:	2200      	movs	r2, #0
 80022a2:	2102      	movs	r1, #2
 80022a4:	4812      	ldr	r0, [pc, #72]	; (80022f0 <Ccw+0x54>)
 80022a6:	f001 faa7 	bl	80037f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_RESET);
 80022aa:	2200      	movs	r2, #0
 80022ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022b0:	4810      	ldr	r0, [pc, #64]	; (80022f4 <Ccw+0x58>)
 80022b2:	f001 faa1 	bl	80037f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_RESET);
 80022b6:	2200      	movs	r2, #0
 80022b8:	2180      	movs	r1, #128	; 0x80
 80022ba:	480e      	ldr	r0, [pc, #56]	; (80022f4 <Ccw+0x58>)
 80022bc:	f001 fa9c 	bl	80037f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_RESET);
 80022c0:	2200      	movs	r2, #0
 80022c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022c6:	480b      	ldr	r0, [pc, #44]	; (80022f4 <Ccw+0x58>)
 80022c8:	f001 fa96 	bl	80037f8 <HAL_GPIO_WritePin>


	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80022cc:	2100      	movs	r1, #0
 80022ce:	480a      	ldr	r0, [pc, #40]	; (80022f8 <Ccw+0x5c>)
 80022d0:	f003 faf0 	bl	80058b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80022d4:	2104      	movs	r1, #4
 80022d6:	4808      	ldr	r0, [pc, #32]	; (80022f8 <Ccw+0x5c>)
 80022d8:	f003 faec 	bl	80058b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80022dc:	2108      	movs	r1, #8
 80022de:	4806      	ldr	r0, [pc, #24]	; (80022f8 <Ccw+0x5c>)
 80022e0:	f003 fae8 	bl	80058b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80022e4:	210c      	movs	r1, #12
 80022e6:	4804      	ldr	r0, [pc, #16]	; (80022f8 <Ccw+0x5c>)
 80022e8:	f003 fae4 	bl	80058b4 <HAL_TIM_PWM_Start>
}
 80022ec:	bf00      	nop
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	40021800 	.word	0x40021800
 80022f4:	40021400 	.word	0x40021400
 80022f8:	200003e8 	.word	0x200003e8

080022fc <Stop>:

void Stop()
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8002300:	2100      	movs	r1, #0
 8002302:	4808      	ldr	r0, [pc, #32]	; (8002324 <Stop+0x28>)
 8002304:	f003 fb9e 	bl	8005a44 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8002308:	2104      	movs	r1, #4
 800230a:	4806      	ldr	r0, [pc, #24]	; (8002324 <Stop+0x28>)
 800230c:	f003 fb9a 	bl	8005a44 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8002310:	2108      	movs	r1, #8
 8002312:	4804      	ldr	r0, [pc, #16]	; (8002324 <Stop+0x28>)
 8002314:	f003 fb96 	bl	8005a44 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 8002318:	210c      	movs	r1, #12
 800231a:	4802      	ldr	r0, [pc, #8]	; (8002324 <Stop+0x28>)
 800231c:	f003 fb92 	bl	8005a44 <HAL_TIM_PWM_Stop>


}
 8002320:	bf00      	nop
 8002322:	bd80      	pop	{r7, pc}
 8002324:	200003e8 	.word	0x200003e8

08002328 <Motor_Init>:

void Motor_Init(){
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
	TIM2->CCR1 = SPEED;
 800232c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002330:	f240 32b6 	movw	r2, #950	; 0x3b6
 8002334:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCR2 = SPEED;
 8002336:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800233a:	f240 32b6 	movw	r2, #950	; 0x3b6
 800233e:	639a      	str	r2, [r3, #56]	; 0x38
	TIM2->CCR3 = SPEED;
 8002340:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002344:	f240 32b6 	movw	r2, #950	; 0x3b6
 8002348:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM2->CCR4 = SPEED;
 800234a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800234e:	f240 32b6 	movw	r2, #950	; 0x3b6
 8002352:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002354:	bf00      	nop
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
	...

08002360 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002364:	4b0f      	ldr	r3, [pc, #60]	; (80023a4 <MX_RTC_Init+0x44>)
 8002366:	4a10      	ldr	r2, [pc, #64]	; (80023a8 <MX_RTC_Init+0x48>)
 8002368:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800236a:	4b0e      	ldr	r3, [pc, #56]	; (80023a4 <MX_RTC_Init+0x44>)
 800236c:	2200      	movs	r2, #0
 800236e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002370:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <MX_RTC_Init+0x44>)
 8002372:	227f      	movs	r2, #127	; 0x7f
 8002374:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002376:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <MX_RTC_Init+0x44>)
 8002378:	22ff      	movs	r2, #255	; 0xff
 800237a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800237c:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <MX_RTC_Init+0x44>)
 800237e:	2200      	movs	r2, #0
 8002380:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002382:	4b08      	ldr	r3, [pc, #32]	; (80023a4 <MX_RTC_Init+0x44>)
 8002384:	2200      	movs	r2, #0
 8002386:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002388:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <MX_RTC_Init+0x44>)
 800238a:	2200      	movs	r2, #0
 800238c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800238e:	4805      	ldr	r0, [pc, #20]	; (80023a4 <MX_RTC_Init+0x44>)
 8002390:	f003 f8ee 	bl	8005570 <HAL_RTC_Init>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800239a:	f7ff fde1 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800239e:	bf00      	nop
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	2000038c 	.word	0x2000038c
 80023a8:	40002800 	.word	0x40002800

080023ac <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b08e      	sub	sp, #56	; 0x38
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023b4:	f107 0308 	add.w	r3, r7, #8
 80023b8:	2230      	movs	r2, #48	; 0x30
 80023ba:	2100      	movs	r1, #0
 80023bc:	4618      	mov	r0, r3
 80023be:	f005 f969 	bl	8007694 <memset>
  if(rtcHandle->Instance==RTC)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a0c      	ldr	r2, [pc, #48]	; (80023f8 <HAL_RTC_MspInit+0x4c>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d111      	bne.n	80023f0 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80023cc:	2320      	movs	r3, #32
 80023ce:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80023d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023d4:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023d6:	f107 0308 	add.w	r3, r7, #8
 80023da:	4618      	mov	r0, r3
 80023dc:	f002 ff08 	bl	80051f0 <HAL_RCCEx_PeriphCLKConfig>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80023e6:	f7ff fdbb 	bl	8001f60 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80023ea:	4b04      	ldr	r3, [pc, #16]	; (80023fc <HAL_RTC_MspInit+0x50>)
 80023ec:	2201      	movs	r2, #1
 80023ee:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80023f0:	bf00      	nop
 80023f2:	3738      	adds	r7, #56	; 0x38
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40002800 	.word	0x40002800
 80023fc:	42470e3c 	.word	0x42470e3c

08002400 <chkCWCCW>:
extern _DestinationGPS waypointGPS;
_DestinationGPS waypointBefore;

_Quadrant quadrant;

CONTROLLER_SIGNAL chkCWCCW(float target_angle, float car_angle) {
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	ed87 0a01 	vstr	s0, [r7, #4]
 800240a:	edc7 0a00 	vstr	s1, [r7]
	if (car_angle < 180) {
 800240e:	edd7 7a00 	vldr	s15, [r7]
 8002412:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80024dc <chkCWCCW+0xdc>
 8002416:	eef4 7ac7 	vcmpe.f32	s15, s14
 800241a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800241e:	d526      	bpl.n	800246e <chkCWCCW+0x6e>
		double distance_angle = target_angle - car_angle;
 8002420:	ed97 7a01 	vldr	s14, [r7, #4]
 8002424:	edd7 7a00 	vldr	s15, [r7]
 8002428:	ee77 7a67 	vsub.f32	s15, s14, s15
 800242c:	ee17 0a90 	vmov	r0, s15
 8002430:	f7fe f89a 	bl	8000568 <__aeabi_f2d>
 8002434:	4602      	mov	r2, r0
 8002436:	460b      	mov	r3, r1
 8002438:	e9c7 2302 	strd	r2, r3, [r7, #8]
		if (distance_angle > 0 && distance_angle < 180) {
 800243c:	f04f 0200 	mov.w	r2, #0
 8002440:	f04f 0300 	mov.w	r3, #0
 8002444:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002448:	f7fe fb76 	bl	8000b38 <__aeabi_dcmpgt>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d00b      	beq.n	800246a <chkCWCCW+0x6a>
 8002452:	f04f 0200 	mov.w	r2, #0
 8002456:	4b22      	ldr	r3, [pc, #136]	; (80024e0 <chkCWCCW+0xe0>)
 8002458:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800245c:	f7fe fb4e 	bl	8000afc <__aeabi_dcmplt>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <chkCWCCW+0x6a>
			return CW;
 8002466:	2305      	movs	r3, #5
 8002468:	e033      	b.n	80024d2 <chkCWCCW+0xd2>
		}
		else {
			return CCW;
 800246a:	2306      	movs	r3, #6
 800246c:	e031      	b.n	80024d2 <chkCWCCW+0xd2>
		}
	}
	else {
		double distance_angle = (target_angle + 360) - car_angle;
 800246e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002472:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80024e4 <chkCWCCW+0xe4>
 8002476:	ee37 7a87 	vadd.f32	s14, s15, s14
 800247a:	edd7 7a00 	vldr	s15, [r7]
 800247e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002482:	ee17 0a90 	vmov	r0, s15
 8002486:	f7fe f86f 	bl	8000568 <__aeabi_f2d>
 800248a:	4602      	mov	r2, r0
 800248c:	460b      	mov	r3, r1
 800248e:	e9c7 2304 	strd	r2, r3, [r7, #16]
		if (distance_angle < 180 || distance_angle >(car_angle + 360)) {
 8002492:	f04f 0200 	mov.w	r2, #0
 8002496:	4b12      	ldr	r3, [pc, #72]	; (80024e0 <chkCWCCW+0xe0>)
 8002498:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800249c:	f7fe fb2e 	bl	8000afc <__aeabi_dcmplt>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d112      	bne.n	80024cc <chkCWCCW+0xcc>
 80024a6:	edd7 7a00 	vldr	s15, [r7]
 80024aa:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80024e4 <chkCWCCW+0xe4>
 80024ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024b2:	ee17 0a90 	vmov	r0, s15
 80024b6:	f7fe f857 	bl	8000568 <__aeabi_f2d>
 80024ba:	4602      	mov	r2, r0
 80024bc:	460b      	mov	r3, r1
 80024be:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024c2:	f7fe fb39 	bl	8000b38 <__aeabi_dcmpgt>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <chkCWCCW+0xd0>
			return CW;
 80024cc:	2305      	movs	r3, #5
 80024ce:	e000      	b.n	80024d2 <chkCWCCW+0xd2>
		}
		else {
			return CCW;
 80024d0:	2306      	movs	r3, #6
		}
	}
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3718      	adds	r7, #24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	43340000 	.word	0x43340000
 80024e0:	40668000 	.word	0x40668000
 80024e4:	43b40000 	.word	0x43b40000

080024e8 <SelfDriving>:

void SelfDriving(){
 80024e8:	b5b0      	push	{r4, r5, r7, lr}
 80024ea:	af00      	add	r7, sp, #0

	  distance_long = (waypointGPS.longitude - GPS.dec_longitude) * 1000000;
 80024ec:	4b8a      	ldr	r3, [pc, #552]	; (8002718 <SelfDriving+0x230>)
 80024ee:	ed93 7a00 	vldr	s14, [r3]
 80024f2:	4b8a      	ldr	r3, [pc, #552]	; (800271c <SelfDriving+0x234>)
 80024f4:	edd3 7a00 	vldr	s15, [r3]
 80024f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024fc:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8002720 <SelfDriving+0x238>
 8002500:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002504:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002508:	ee17 2a90 	vmov	r2, s15
 800250c:	4b85      	ldr	r3, [pc, #532]	; (8002724 <SelfDriving+0x23c>)
 800250e:	601a      	str	r2, [r3, #0]
	  distance_lat = (waypointGPS.latitude - GPS.dec_latitude) * 1000000;
 8002510:	4b81      	ldr	r3, [pc, #516]	; (8002718 <SelfDriving+0x230>)
 8002512:	ed93 7a01 	vldr	s14, [r3, #4]
 8002516:	4b81      	ldr	r3, [pc, #516]	; (800271c <SelfDriving+0x234>)
 8002518:	edd3 7a01 	vldr	s15, [r3, #4]
 800251c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002520:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8002720 <SelfDriving+0x238>
 8002524:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002528:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800252c:	ee17 2a90 	vmov	r2, s15
 8002530:	4b7d      	ldr	r3, [pc, #500]	; (8002728 <SelfDriving+0x240>)
 8002532:	601a      	str	r2, [r3, #0]
	  distance_c = sqrt((distance_lat * distance_lat) + (distance_long * distance_long));
 8002534:	4b7c      	ldr	r3, [pc, #496]	; (8002728 <SelfDriving+0x240>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a7b      	ldr	r2, [pc, #492]	; (8002728 <SelfDriving+0x240>)
 800253a:	6812      	ldr	r2, [r2, #0]
 800253c:	fb03 f202 	mul.w	r2, r3, r2
 8002540:	4b78      	ldr	r3, [pc, #480]	; (8002724 <SelfDriving+0x23c>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4977      	ldr	r1, [pc, #476]	; (8002724 <SelfDriving+0x23c>)
 8002546:	6809      	ldr	r1, [r1, #0]
 8002548:	fb01 f303 	mul.w	r3, r1, r3
 800254c:	4413      	add	r3, r2
 800254e:	4618      	mov	r0, r3
 8002550:	f7fd fff8 	bl	8000544 <__aeabi_i2d>
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	ec43 2b10 	vmov	d0, r2, r3
 800255c:	f00a f980 	bl	800c860 <sqrt>
 8002560:	ec53 2b10 	vmov	r2, r3, d0
 8002564:	4610      	mov	r0, r2
 8002566:	4619      	mov	r1, r3
 8002568:	f7fe fb06 	bl	8000b78 <__aeabi_d2iz>
 800256c:	4603      	mov	r3, r0
 800256e:	4a6f      	ldr	r2, [pc, #444]	; (800272c <SelfDriving+0x244>)
 8002570:	6013      	str	r3, [r2, #0]

	  angle = acos((double)distance_long / distance_c);
 8002572:	4b6c      	ldr	r3, [pc, #432]	; (8002724 <SelfDriving+0x23c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4618      	mov	r0, r3
 8002578:	f7fd ffe4 	bl	8000544 <__aeabi_i2d>
 800257c:	4604      	mov	r4, r0
 800257e:	460d      	mov	r5, r1
 8002580:	4b6a      	ldr	r3, [pc, #424]	; (800272c <SelfDriving+0x244>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4618      	mov	r0, r3
 8002586:	f7fd ffdd 	bl	8000544 <__aeabi_i2d>
 800258a:	4602      	mov	r2, r0
 800258c:	460b      	mov	r3, r1
 800258e:	4620      	mov	r0, r4
 8002590:	4629      	mov	r1, r5
 8002592:	f7fe f96b 	bl	800086c <__aeabi_ddiv>
 8002596:	4602      	mov	r2, r0
 8002598:	460b      	mov	r3, r1
 800259a:	ec43 2b17 	vmov	d7, r2, r3
 800259e:	eeb0 0a47 	vmov.f32	s0, s14
 80025a2:	eef0 0a67 	vmov.f32	s1, s15
 80025a6:	f00a f925 	bl	800c7f4 <acos>
 80025aa:	eeb0 7a40 	vmov.f32	s14, s0
 80025ae:	eef0 7a60 	vmov.f32	s15, s1
 80025b2:	4b5f      	ldr	r3, [pc, #380]	; (8002730 <SelfDriving+0x248>)
 80025b4:	ed83 7b00 	vstr	d7, [r3]
	  degree_angle = (double)angle * 180 / M_PI;
 80025b8:	4b5d      	ldr	r3, [pc, #372]	; (8002730 <SelfDriving+0x248>)
 80025ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025be:	f04f 0200 	mov.w	r2, #0
 80025c2:	4b5c      	ldr	r3, [pc, #368]	; (8002734 <SelfDriving+0x24c>)
 80025c4:	f7fe f828 	bl	8000618 <__aeabi_dmul>
 80025c8:	4602      	mov	r2, r0
 80025ca:	460b      	mov	r3, r1
 80025cc:	4610      	mov	r0, r2
 80025ce:	4619      	mov	r1, r3
 80025d0:	a34d      	add	r3, pc, #308	; (adr r3, 8002708 <SelfDriving+0x220>)
 80025d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d6:	f7fe f949 	bl	800086c <__aeabi_ddiv>
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	4956      	ldr	r1, [pc, #344]	; (8002738 <SelfDriving+0x250>)
 80025e0:	e9c1 2300 	strd	r2, r3, [r1]

	  if (distance_long > 0 && distance_lat > 0) {
 80025e4:	4b4f      	ldr	r3, [pc, #316]	; (8002724 <SelfDriving+0x23c>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	dd07      	ble.n	80025fc <SelfDriving+0x114>
 80025ec:	4b4e      	ldr	r3, [pc, #312]	; (8002728 <SelfDriving+0x240>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	dd03      	ble.n	80025fc <SelfDriving+0x114>
		  quadrant = QUADRANT_ONE;
 80025f4:	4b51      	ldr	r3, [pc, #324]	; (800273c <SelfDriving+0x254>)
 80025f6:	2201      	movs	r2, #1
 80025f8:	701a      	strb	r2, [r3, #0]
 80025fa:	e022      	b.n	8002642 <SelfDriving+0x15a>
	  }
	  else if (distance_long < 0 && distance_lat > 0) {
 80025fc:	4b49      	ldr	r3, [pc, #292]	; (8002724 <SelfDriving+0x23c>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	da07      	bge.n	8002614 <SelfDriving+0x12c>
 8002604:	4b48      	ldr	r3, [pc, #288]	; (8002728 <SelfDriving+0x240>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	dd03      	ble.n	8002614 <SelfDriving+0x12c>
		  quadrant = QUADRANT_TWO;
 800260c:	4b4b      	ldr	r3, [pc, #300]	; (800273c <SelfDriving+0x254>)
 800260e:	2202      	movs	r2, #2
 8002610:	701a      	strb	r2, [r3, #0]
 8002612:	e016      	b.n	8002642 <SelfDriving+0x15a>
	  }
	  else if (distance_long < 0 && distance_lat < 0) {
 8002614:	4b43      	ldr	r3, [pc, #268]	; (8002724 <SelfDriving+0x23c>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	da07      	bge.n	800262c <SelfDriving+0x144>
 800261c:	4b42      	ldr	r3, [pc, #264]	; (8002728 <SelfDriving+0x240>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	da03      	bge.n	800262c <SelfDriving+0x144>
		  quadrant = QUADRANT_THREE;
 8002624:	4b45      	ldr	r3, [pc, #276]	; (800273c <SelfDriving+0x254>)
 8002626:	2203      	movs	r2, #3
 8002628:	701a      	strb	r2, [r3, #0]
 800262a:	e00a      	b.n	8002642 <SelfDriving+0x15a>
	  }
	  else if (distance_long > 0 && distance_lat < 0) {
 800262c:	4b3d      	ldr	r3, [pc, #244]	; (8002724 <SelfDriving+0x23c>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	dd06      	ble.n	8002642 <SelfDriving+0x15a>
 8002634:	4b3c      	ldr	r3, [pc, #240]	; (8002728 <SelfDriving+0x240>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	da02      	bge.n	8002642 <SelfDriving+0x15a>
		  quadrant = QUADRANT_FOUR;
 800263c:	4b3f      	ldr	r3, [pc, #252]	; (800273c <SelfDriving+0x254>)
 800263e:	2204      	movs	r2, #4
 8002640:	701a      	strb	r2, [r3, #0]
	  }



	  switch (quadrant) {
 8002642:	4b3e      	ldr	r3, [pc, #248]	; (800273c <SelfDriving+0x254>)
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	3b01      	subs	r3, #1
 8002648:	2b03      	cmp	r3, #3
 800264a:	d87d      	bhi.n	8002748 <SelfDriving+0x260>
 800264c:	a201      	add	r2, pc, #4	; (adr r2, 8002654 <SelfDriving+0x16c>)
 800264e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002652:	bf00      	nop
 8002654:	08002665 	.word	0x08002665
 8002658:	08002681 	.word	0x08002681
 800265c:	080026b7 	.word	0x080026b7
 8002660:	080026ed 	.word	0x080026ed
	  case QUADRANT_ONE:
		  target_angle = 90 - degree_angle;
 8002664:	4b34      	ldr	r3, [pc, #208]	; (8002738 <SelfDriving+0x250>)
 8002666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266a:	f04f 0000 	mov.w	r0, #0
 800266e:	4934      	ldr	r1, [pc, #208]	; (8002740 <SelfDriving+0x258>)
 8002670:	f7fd fe1a 	bl	80002a8 <__aeabi_dsub>
 8002674:	4602      	mov	r2, r0
 8002676:	460b      	mov	r3, r1
 8002678:	4932      	ldr	r1, [pc, #200]	; (8002744 <SelfDriving+0x25c>)
 800267a:	e9c1 2300 	strd	r2, r3, [r1]
		  break;
 800267e:	e064      	b.n	800274a <SelfDriving+0x262>
	  case QUADRANT_TWO:
		  degree_angle = 180-degree_angle;
 8002680:	4b2d      	ldr	r3, [pc, #180]	; (8002738 <SelfDriving+0x250>)
 8002682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002686:	f04f 0000 	mov.w	r0, #0
 800268a:	492a      	ldr	r1, [pc, #168]	; (8002734 <SelfDriving+0x24c>)
 800268c:	f7fd fe0c 	bl	80002a8 <__aeabi_dsub>
 8002690:	4602      	mov	r2, r0
 8002692:	460b      	mov	r3, r1
 8002694:	4928      	ldr	r1, [pc, #160]	; (8002738 <SelfDriving+0x250>)
 8002696:	e9c1 2300 	strd	r2, r3, [r1]
		  target_angle = 270 + degree_angle;
 800269a:	4b27      	ldr	r3, [pc, #156]	; (8002738 <SelfDriving+0x250>)
 800269c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026a0:	a31b      	add	r3, pc, #108	; (adr r3, 8002710 <SelfDriving+0x228>)
 80026a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a6:	f7fd fe01 	bl	80002ac <__adddf3>
 80026aa:	4602      	mov	r2, r0
 80026ac:	460b      	mov	r3, r1
 80026ae:	4925      	ldr	r1, [pc, #148]	; (8002744 <SelfDriving+0x25c>)
 80026b0:	e9c1 2300 	strd	r2, r3, [r1]
		  break;
 80026b4:	e049      	b.n	800274a <SelfDriving+0x262>
	  case QUADRANT_THREE:
		  degree_angle = 180-degree_angle;
 80026b6:	4b20      	ldr	r3, [pc, #128]	; (8002738 <SelfDriving+0x250>)
 80026b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026bc:	f04f 0000 	mov.w	r0, #0
 80026c0:	491c      	ldr	r1, [pc, #112]	; (8002734 <SelfDriving+0x24c>)
 80026c2:	f7fd fdf1 	bl	80002a8 <__aeabi_dsub>
 80026c6:	4602      	mov	r2, r0
 80026c8:	460b      	mov	r3, r1
 80026ca:	491b      	ldr	r1, [pc, #108]	; (8002738 <SelfDriving+0x250>)
 80026cc:	e9c1 2300 	strd	r2, r3, [r1]
		  target_angle = 270 - degree_angle;
 80026d0:	4b19      	ldr	r3, [pc, #100]	; (8002738 <SelfDriving+0x250>)
 80026d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d6:	a10e      	add	r1, pc, #56	; (adr r1, 8002710 <SelfDriving+0x228>)
 80026d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80026dc:	f7fd fde4 	bl	80002a8 <__aeabi_dsub>
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	4917      	ldr	r1, [pc, #92]	; (8002744 <SelfDriving+0x25c>)
 80026e6:	e9c1 2300 	strd	r2, r3, [r1]
		  break;
 80026ea:	e02e      	b.n	800274a <SelfDriving+0x262>
	  case QUADRANT_FOUR:
		  target_angle = 90 + degree_angle;
 80026ec:	4b12      	ldr	r3, [pc, #72]	; (8002738 <SelfDriving+0x250>)
 80026ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026f2:	f04f 0200 	mov.w	r2, #0
 80026f6:	4b12      	ldr	r3, [pc, #72]	; (8002740 <SelfDriving+0x258>)
 80026f8:	f7fd fdd8 	bl	80002ac <__adddf3>
 80026fc:	4602      	mov	r2, r0
 80026fe:	460b      	mov	r3, r1
 8002700:	4910      	ldr	r1, [pc, #64]	; (8002744 <SelfDriving+0x25c>)
 8002702:	e9c1 2300 	strd	r2, r3, [r1]
		  break;
 8002706:	e020      	b.n	800274a <SelfDriving+0x262>
 8002708:	54442d18 	.word	0x54442d18
 800270c:	400921fb 	.word	0x400921fb
 8002710:	00000000 	.word	0x00000000
 8002714:	4070e000 	.word	0x4070e000
 8002718:	20000230 	.word	0x20000230
 800271c:	200002e0 	.word	0x200002e0
 8002720:	49742400 	.word	0x49742400
 8002724:	200003ac 	.word	0x200003ac
 8002728:	200003b0 	.word	0x200003b0
 800272c:	200003b4 	.word	0x200003b4
 8002730:	200003b8 	.word	0x200003b8
 8002734:	40668000 	.word	0x40668000
 8002738:	200003c0 	.word	0x200003c0
 800273c:	200003e0 	.word	0x200003e0
 8002740:	40568000 	.word	0x40568000
 8002744:	200003c8 	.word	0x200003c8
	  default:
		  break;
 8002748:	bf00      	nop
	  }


	  diffAngle = abs((int)headingDegrees - (int)target_angle);
 800274a:	4b4d      	ldr	r3, [pc, #308]	; (8002880 <SelfDriving+0x398>)
 800274c:	edd3 7a00 	vldr	s15, [r3]
 8002750:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002754:	ee17 4a90 	vmov	r4, s15
 8002758:	4b4a      	ldr	r3, [pc, #296]	; (8002884 <SelfDriving+0x39c>)
 800275a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275e:	4610      	mov	r0, r2
 8002760:	4619      	mov	r1, r3
 8002762:	f7fe fa09 	bl	8000b78 <__aeabi_d2iz>
 8002766:	4603      	mov	r3, r0
 8002768:	1ae3      	subs	r3, r4, r3
 800276a:	2b00      	cmp	r3, #0
 800276c:	bfb8      	it	lt
 800276e:	425b      	neglt	r3, r3
 8002770:	4a45      	ldr	r2, [pc, #276]	; (8002888 <SelfDriving+0x3a0>)
 8002772:	6013      	str	r3, [r2, #0]

	  if ((diffAngle > 10 && diffAngle < 350) && rotate_flag==0) {
 8002774:	4b44      	ldr	r3, [pc, #272]	; (8002888 <SelfDriving+0x3a0>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2b0a      	cmp	r3, #10
 800277a:	dd28      	ble.n	80027ce <SelfDriving+0x2e6>
 800277c:	4b42      	ldr	r3, [pc, #264]	; (8002888 <SelfDriving+0x3a0>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8002784:	da23      	bge.n	80027ce <SelfDriving+0x2e6>
 8002786:	4b41      	ldr	r3, [pc, #260]	; (800288c <SelfDriving+0x3a4>)
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d11f      	bne.n	80027ce <SelfDriving+0x2e6>
		  rotate=chkCWCCW((float)target_angle, headingDegrees);
 800278e:	4b3d      	ldr	r3, [pc, #244]	; (8002884 <SelfDriving+0x39c>)
 8002790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002794:	4610      	mov	r0, r2
 8002796:	4619      	mov	r1, r3
 8002798:	f7fe fa36 	bl	8000c08 <__aeabi_d2f>
 800279c:	4602      	mov	r2, r0
 800279e:	4b38      	ldr	r3, [pc, #224]	; (8002880 <SelfDriving+0x398>)
 80027a0:	edd3 7a00 	vldr	s15, [r3]
 80027a4:	eef0 0a67 	vmov.f32	s1, s15
 80027a8:	ee00 2a10 	vmov	s0, r2
 80027ac:	f7ff fe28 	bl	8002400 <chkCWCCW>
 80027b0:	4603      	mov	r3, r0
 80027b2:	461a      	mov	r2, r3
 80027b4:	4b36      	ldr	r3, [pc, #216]	; (8002890 <SelfDriving+0x3a8>)
 80027b6:	701a      	strb	r2, [r3, #0]
		  rotate_flag=1;
 80027b8:	4b34      	ldr	r3, [pc, #208]	; (800288c <SelfDriving+0x3a4>)
 80027ba:	2201      	movs	r2, #1
 80027bc:	701a      	strb	r2, [r3, #0]
		  waypointBefore.latitude=waypointGPS.latitude;
 80027be:	4b35      	ldr	r3, [pc, #212]	; (8002894 <SelfDriving+0x3ac>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	4a35      	ldr	r2, [pc, #212]	; (8002898 <SelfDriving+0x3b0>)
 80027c4:	6053      	str	r3, [r2, #4]
		  waypointBefore.longitude=waypointGPS.longitude ;
 80027c6:	4b33      	ldr	r3, [pc, #204]	; (8002894 <SelfDriving+0x3ac>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a33      	ldr	r2, [pc, #204]	; (8002898 <SelfDriving+0x3b0>)
 80027cc:	6013      	str	r3, [r2, #0]
	  }

	  if((waypointGPS.latitude!=waypointBefore.latitude && waypointGPS.longitude!=waypointBefore.longitude)){
 80027ce:	4b31      	ldr	r3, [pc, #196]	; (8002894 <SelfDriving+0x3ac>)
 80027d0:	ed93 7a01 	vldr	s14, [r3, #4]
 80027d4:	4b30      	ldr	r3, [pc, #192]	; (8002898 <SelfDriving+0x3b0>)
 80027d6:	edd3 7a01 	vldr	s15, [r3, #4]
 80027da:	eeb4 7a67 	vcmp.f32	s14, s15
 80027de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027e2:	d01f      	beq.n	8002824 <SelfDriving+0x33c>
 80027e4:	4b2b      	ldr	r3, [pc, #172]	; (8002894 <SelfDriving+0x3ac>)
 80027e6:	ed93 7a00 	vldr	s14, [r3]
 80027ea:	4b2b      	ldr	r3, [pc, #172]	; (8002898 <SelfDriving+0x3b0>)
 80027ec:	edd3 7a00 	vldr	s15, [r3]
 80027f0:	eeb4 7a67 	vcmp.f32	s14, s15
 80027f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027f8:	d014      	beq.n	8002824 <SelfDriving+0x33c>
		  rotate=chkCWCCW((float)target_angle, headingDegrees);
 80027fa:	4b22      	ldr	r3, [pc, #136]	; (8002884 <SelfDriving+0x39c>)
 80027fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002800:	4610      	mov	r0, r2
 8002802:	4619      	mov	r1, r3
 8002804:	f7fe fa00 	bl	8000c08 <__aeabi_d2f>
 8002808:	4602      	mov	r2, r0
 800280a:	4b1d      	ldr	r3, [pc, #116]	; (8002880 <SelfDriving+0x398>)
 800280c:	edd3 7a00 	vldr	s15, [r3]
 8002810:	eef0 0a67 	vmov.f32	s1, s15
 8002814:	ee00 2a10 	vmov	s0, r2
 8002818:	f7ff fdf2 	bl	8002400 <chkCWCCW>
 800281c:	4603      	mov	r3, r0
 800281e:	461a      	mov	r2, r3
 8002820:	4b1b      	ldr	r3, [pc, #108]	; (8002890 <SelfDriving+0x3a8>)
 8002822:	701a      	strb	r2, [r3, #0]
	  }


	  if((diffAngle < 10 || diffAngle > 350)) {
 8002824:	4b18      	ldr	r3, [pc, #96]	; (8002888 <SelfDriving+0x3a0>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2b09      	cmp	r3, #9
 800282a:	dd04      	ble.n	8002836 <SelfDriving+0x34e>
 800282c:	4b16      	ldr	r3, [pc, #88]	; (8002888 <SelfDriving+0x3a0>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8002834:	dd02      	ble.n	800283c <SelfDriving+0x354>
		  rotate_flag=0;
 8002836:	4b15      	ldr	r3, [pc, #84]	; (800288c <SelfDriving+0x3a4>)
 8002838:	2200      	movs	r2, #0
 800283a:	701a      	strb	r2, [r3, #0]
	  }


	  if(rotate_flag==1){
 800283c:	4b13      	ldr	r3, [pc, #76]	; (800288c <SelfDriving+0x3a4>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d104      	bne.n	800284e <SelfDriving+0x366>
		  Move(rotate);
 8002844:	4b12      	ldr	r3, [pc, #72]	; (8002890 <SelfDriving+0x3a8>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff fb8f 	bl	8001f6c <Move>
	  }



	  if (distance_c > 50 && rotate_flag==0) {
 800284e:	4b13      	ldr	r3, [pc, #76]	; (800289c <SelfDriving+0x3b4>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2b32      	cmp	r3, #50	; 0x32
 8002854:	dd07      	ble.n	8002866 <SelfDriving+0x37e>
 8002856:	4b0d      	ldr	r3, [pc, #52]	; (800288c <SelfDriving+0x3a4>)
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d103      	bne.n	8002866 <SelfDriving+0x37e>
		  Move(FORWARD);
 800285e:	2001      	movs	r0, #1
 8002860:	f7ff fb84 	bl	8001f6c <Move>
		  Move(STOP);
	  }



}
 8002864:	e00a      	b.n	800287c <SelfDriving+0x394>
	  else if(distance_c < 50 && rotate_flag==0){
 8002866:	4b0d      	ldr	r3, [pc, #52]	; (800289c <SelfDriving+0x3b4>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2b31      	cmp	r3, #49	; 0x31
 800286c:	dc06      	bgt.n	800287c <SelfDriving+0x394>
 800286e:	4b07      	ldr	r3, [pc, #28]	; (800288c <SelfDriving+0x3a4>)
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d102      	bne.n	800287c <SelfDriving+0x394>
		  Move(STOP);
 8002876:	2000      	movs	r0, #0
 8002878:	f7ff fb78 	bl	8001f6c <Move>
}
 800287c:	bf00      	nop
 800287e:	bdb0      	pop	{r4, r5, r7, pc}
 8002880:	20000224 	.word	0x20000224
 8002884:	200003c8 	.word	0x200003c8
 8002888:	200003d0 	.word	0x200003d0
 800288c:	200003d5 	.word	0x200003d5
 8002890:	200003d4 	.word	0x200003d4
 8002894:	20000230 	.word	0x20000230
 8002898:	200003d8 	.word	0x200003d8
 800289c:	200003b4 	.word	0x200003b4

080028a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028a6:	2300      	movs	r3, #0
 80028a8:	607b      	str	r3, [r7, #4]
 80028aa:	4b10      	ldr	r3, [pc, #64]	; (80028ec <HAL_MspInit+0x4c>)
 80028ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ae:	4a0f      	ldr	r2, [pc, #60]	; (80028ec <HAL_MspInit+0x4c>)
 80028b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028b4:	6453      	str	r3, [r2, #68]	; 0x44
 80028b6:	4b0d      	ldr	r3, [pc, #52]	; (80028ec <HAL_MspInit+0x4c>)
 80028b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028be:	607b      	str	r3, [r7, #4]
 80028c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028c2:	2300      	movs	r3, #0
 80028c4:	603b      	str	r3, [r7, #0]
 80028c6:	4b09      	ldr	r3, [pc, #36]	; (80028ec <HAL_MspInit+0x4c>)
 80028c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ca:	4a08      	ldr	r2, [pc, #32]	; (80028ec <HAL_MspInit+0x4c>)
 80028cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028d0:	6413      	str	r3, [r2, #64]	; 0x40
 80028d2:	4b06      	ldr	r3, [pc, #24]	; (80028ec <HAL_MspInit+0x4c>)
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028da:	603b      	str	r3, [r7, #0]
 80028dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028de:	bf00      	nop
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	40023800 	.word	0x40023800

080028f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028f4:	e7fe      	b.n	80028f4 <NMI_Handler+0x4>

080028f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028f6:	b480      	push	{r7}
 80028f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028fa:	e7fe      	b.n	80028fa <HardFault_Handler+0x4>

080028fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002900:	e7fe      	b.n	8002900 <MemManage_Handler+0x4>

08002902 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002902:	b480      	push	{r7}
 8002904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002906:	e7fe      	b.n	8002906 <BusFault_Handler+0x4>

08002908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800290c:	e7fe      	b.n	800290c <UsageFault_Handler+0x4>

0800290e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800290e:	b480      	push	{r7}
 8002910:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002912:	bf00      	nop
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002920:	bf00      	nop
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800292a:	b480      	push	{r7}
 800292c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800292e:	bf00      	nop
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800293c:	f000 fbec 	bl	8003118 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002940:	bf00      	nop
 8002942:	bd80      	pop	{r7, pc}

08002944 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002948:	4802      	ldr	r0, [pc, #8]	; (8002954 <USART2_IRQHandler+0x10>)
 800294a:	f003 ff11 	bl	8006770 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800294e:	bf00      	nop
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	20000474 	.word	0x20000474

08002958 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800295c:	4802      	ldr	r0, [pc, #8]	; (8002968 <USART3_IRQHandler+0x10>)
 800295e:	f003 ff07 	bl	8006770 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002962:	bf00      	nop
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	200004b8 	.word	0x200004b8

0800296c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8002970:	4802      	ldr	r0, [pc, #8]	; (800297c <UART7_IRQHandler+0x10>)
 8002972:	f003 fefd 	bl	8006770 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8002976:	bf00      	nop
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	20000430 	.word	0x20000430

08002980 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
	return 1;
 8002984:	2301      	movs	r3, #1
}
 8002986:	4618      	mov	r0, r3
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <_kill>:

int _kill(int pid, int sig)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800299a:	f004 fe51 	bl	8007640 <__errno>
 800299e:	4603      	mov	r3, r0
 80029a0:	2216      	movs	r2, #22
 80029a2:	601a      	str	r2, [r3, #0]
	return -1;
 80029a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <_exit>:

void _exit (int status)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80029b8:	f04f 31ff 	mov.w	r1, #4294967295
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f7ff ffe7 	bl	8002990 <_kill>
	while (1) {}		/* Make sure we hang here */
 80029c2:	e7fe      	b.n	80029c2 <_exit+0x12>

080029c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029d0:	2300      	movs	r3, #0
 80029d2:	617b      	str	r3, [r7, #20]
 80029d4:	e00a      	b.n	80029ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80029d6:	f3af 8000 	nop.w
 80029da:	4601      	mov	r1, r0
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	1c5a      	adds	r2, r3, #1
 80029e0:	60ba      	str	r2, [r7, #8]
 80029e2:	b2ca      	uxtb	r2, r1
 80029e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	3301      	adds	r3, #1
 80029ea:	617b      	str	r3, [r7, #20]
 80029ec:	697a      	ldr	r2, [r7, #20]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	dbf0      	blt.n	80029d6 <_read+0x12>
	}

return len;
 80029f4:	687b      	ldr	r3, [r7, #4]
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3718      	adds	r7, #24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b086      	sub	sp, #24
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	60f8      	str	r0, [r7, #12]
 8002a06:	60b9      	str	r1, [r7, #8]
 8002a08:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	617b      	str	r3, [r7, #20]
 8002a0e:	e009      	b.n	8002a24 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	1c5a      	adds	r2, r3, #1
 8002a14:	60ba      	str	r2, [r7, #8]
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff f9c1 	bl	8001da0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	3301      	adds	r3, #1
 8002a22:	617b      	str	r3, [r7, #20]
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	dbf1      	blt.n	8002a10 <_write+0x12>
	}
	return len;
 8002a2c:	687b      	ldr	r3, [r7, #4]
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3718      	adds	r7, #24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <_close>:

int _close(int file)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b083      	sub	sp, #12
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
	return -1;
 8002a3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr

08002a4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b083      	sub	sp, #12
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
 8002a56:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a5e:	605a      	str	r2, [r3, #4]
	return 0;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <_isatty>:

int _isatty(int file)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b083      	sub	sp, #12
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
	return 1;
 8002a76:	2301      	movs	r3, #1
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
	return 0;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
	...

08002aa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002aa8:	4a14      	ldr	r2, [pc, #80]	; (8002afc <_sbrk+0x5c>)
 8002aaa:	4b15      	ldr	r3, [pc, #84]	; (8002b00 <_sbrk+0x60>)
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ab4:	4b13      	ldr	r3, [pc, #76]	; (8002b04 <_sbrk+0x64>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d102      	bne.n	8002ac2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002abc:	4b11      	ldr	r3, [pc, #68]	; (8002b04 <_sbrk+0x64>)
 8002abe:	4a12      	ldr	r2, [pc, #72]	; (8002b08 <_sbrk+0x68>)
 8002ac0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ac2:	4b10      	ldr	r3, [pc, #64]	; (8002b04 <_sbrk+0x64>)
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4413      	add	r3, r2
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d207      	bcs.n	8002ae0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ad0:	f004 fdb6 	bl	8007640 <__errno>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	220c      	movs	r2, #12
 8002ad8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ada:	f04f 33ff 	mov.w	r3, #4294967295
 8002ade:	e009      	b.n	8002af4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ae0:	4b08      	ldr	r3, [pc, #32]	; (8002b04 <_sbrk+0x64>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ae6:	4b07      	ldr	r3, [pc, #28]	; (8002b04 <_sbrk+0x64>)
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4413      	add	r3, r2
 8002aee:	4a05      	ldr	r2, [pc, #20]	; (8002b04 <_sbrk+0x64>)
 8002af0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002af2:	68fb      	ldr	r3, [r7, #12]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3718      	adds	r7, #24
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	20030000 	.word	0x20030000
 8002b00:	00000400 	.word	0x00000400
 8002b04:	200003e4 	.word	0x200003e4
 8002b08:	20000510 	.word	0x20000510

08002b0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b10:	4b06      	ldr	r3, [pc, #24]	; (8002b2c <SystemInit+0x20>)
 8002b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b16:	4a05      	ldr	r2, [pc, #20]	; (8002b2c <SystemInit+0x20>)
 8002b18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b20:	bf00      	nop
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	e000ed00 	.word	0xe000ed00

08002b30 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b08e      	sub	sp, #56	; 0x38
 8002b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	605a      	str	r2, [r3, #4]
 8002b40:	609a      	str	r2, [r3, #8]
 8002b42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b44:	f107 0320 	add.w	r3, r7, #32
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b4e:	1d3b      	adds	r3, r7, #4
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	605a      	str	r2, [r3, #4]
 8002b56:	609a      	str	r2, [r3, #8]
 8002b58:	60da      	str	r2, [r3, #12]
 8002b5a:	611a      	str	r2, [r3, #16]
 8002b5c:	615a      	str	r2, [r3, #20]
 8002b5e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002b60:	4b3d      	ldr	r3, [pc, #244]	; (8002c58 <MX_TIM2_Init+0x128>)
 8002b62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b66:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8002b68:	4b3b      	ldr	r3, [pc, #236]	; (8002c58 <MX_TIM2_Init+0x128>)
 8002b6a:	2259      	movs	r2, #89	; 0x59
 8002b6c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b6e:	4b3a      	ldr	r3, [pc, #232]	; (8002c58 <MX_TIM2_Init+0x128>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8002b74:	4b38      	ldr	r3, [pc, #224]	; (8002c58 <MX_TIM2_Init+0x128>)
 8002b76:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b7c:	4b36      	ldr	r3, [pc, #216]	; (8002c58 <MX_TIM2_Init+0x128>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b82:	4b35      	ldr	r3, [pc, #212]	; (8002c58 <MX_TIM2_Init+0x128>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b88:	4833      	ldr	r0, [pc, #204]	; (8002c58 <MX_TIM2_Init+0x128>)
 8002b8a:	f002 fdeb 	bl	8005764 <HAL_TIM_Base_Init>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002b94:	f7ff f9e4 	bl	8001f60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b9c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	482c      	ldr	r0, [pc, #176]	; (8002c58 <MX_TIM2_Init+0x128>)
 8002ba6:	f003 f87f 	bl	8005ca8 <HAL_TIM_ConfigClockSource>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002bb0:	f7ff f9d6 	bl	8001f60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002bb4:	4828      	ldr	r0, [pc, #160]	; (8002c58 <MX_TIM2_Init+0x128>)
 8002bb6:	f002 fe24 	bl	8005802 <HAL_TIM_PWM_Init>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002bc0:	f7ff f9ce 	bl	8001f60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002bcc:	f107 0320 	add.w	r3, r7, #32
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4821      	ldr	r0, [pc, #132]	; (8002c58 <MX_TIM2_Init+0x128>)
 8002bd4:	f003 fc40 	bl	8006458 <HAL_TIMEx_MasterConfigSynchronization>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002bde:	f7ff f9bf 	bl	8001f60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002be2:	2370      	movs	r3, #112	; 0x70
 8002be4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002be6:	2300      	movs	r3, #0
 8002be8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bea:	2300      	movs	r3, #0
 8002bec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bf2:	1d3b      	adds	r3, r7, #4
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4817      	ldr	r0, [pc, #92]	; (8002c58 <MX_TIM2_Init+0x128>)
 8002bfa:	f002 ff93 	bl	8005b24 <HAL_TIM_PWM_ConfigChannel>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002c04:	f7ff f9ac 	bl	8001f60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c08:	1d3b      	adds	r3, r7, #4
 8002c0a:	2204      	movs	r2, #4
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	4812      	ldr	r0, [pc, #72]	; (8002c58 <MX_TIM2_Init+0x128>)
 8002c10:	f002 ff88 	bl	8005b24 <HAL_TIM_PWM_ConfigChannel>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8002c1a:	f7ff f9a1 	bl	8001f60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002c1e:	1d3b      	adds	r3, r7, #4
 8002c20:	2208      	movs	r2, #8
 8002c22:	4619      	mov	r1, r3
 8002c24:	480c      	ldr	r0, [pc, #48]	; (8002c58 <MX_TIM2_Init+0x128>)
 8002c26:	f002 ff7d 	bl	8005b24 <HAL_TIM_PWM_ConfigChannel>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8002c30:	f7ff f996 	bl	8001f60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002c34:	1d3b      	adds	r3, r7, #4
 8002c36:	220c      	movs	r2, #12
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4807      	ldr	r0, [pc, #28]	; (8002c58 <MX_TIM2_Init+0x128>)
 8002c3c:	f002 ff72 	bl	8005b24 <HAL_TIM_PWM_ConfigChannel>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8002c46:	f7ff f98b 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002c4a:	4803      	ldr	r0, [pc, #12]	; (8002c58 <MX_TIM2_Init+0x128>)
 8002c4c:	f000 f826 	bl	8002c9c <HAL_TIM_MspPostInit>

}
 8002c50:	bf00      	nop
 8002c52:	3738      	adds	r7, #56	; 0x38
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	200003e8 	.word	0x200003e8

08002c5c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c6c:	d10d      	bne.n	8002c8a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60fb      	str	r3, [r7, #12]
 8002c72:	4b09      	ldr	r3, [pc, #36]	; (8002c98 <HAL_TIM_Base_MspInit+0x3c>)
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	4a08      	ldr	r2, [pc, #32]	; (8002c98 <HAL_TIM_Base_MspInit+0x3c>)
 8002c78:	f043 0301 	orr.w	r3, r3, #1
 8002c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c7e:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <HAL_TIM_Base_MspInit+0x3c>)
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002c8a:	bf00      	nop
 8002c8c:	3714      	adds	r7, #20
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	40023800 	.word	0x40023800

08002c9c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b08a      	sub	sp, #40	; 0x28
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca4:	f107 0314 	add.w	r3, r7, #20
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	605a      	str	r2, [r3, #4]
 8002cae:	609a      	str	r2, [r3, #8]
 8002cb0:	60da      	str	r2, [r3, #12]
 8002cb2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cbc:	d13c      	bne.n	8002d38 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	613b      	str	r3, [r7, #16]
 8002cc2:	4b1f      	ldr	r3, [pc, #124]	; (8002d40 <HAL_TIM_MspPostInit+0xa4>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc6:	4a1e      	ldr	r2, [pc, #120]	; (8002d40 <HAL_TIM_MspPostInit+0xa4>)
 8002cc8:	f043 0301 	orr.w	r3, r3, #1
 8002ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cce:	4b1c      	ldr	r3, [pc, #112]	; (8002d40 <HAL_TIM_MspPostInit+0xa4>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	613b      	str	r3, [r7, #16]
 8002cd8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cda:	2300      	movs	r3, #0
 8002cdc:	60fb      	str	r3, [r7, #12]
 8002cde:	4b18      	ldr	r3, [pc, #96]	; (8002d40 <HAL_TIM_MspPostInit+0xa4>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	4a17      	ldr	r2, [pc, #92]	; (8002d40 <HAL_TIM_MspPostInit+0xa4>)
 8002ce4:	f043 0302 	orr.w	r3, r3, #2
 8002ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cea:	4b15      	ldr	r3, [pc, #84]	; (8002d40 <HAL_TIM_MspPostInit+0xa4>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
    PA0/WKUP     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d02:	2300      	movs	r3, #0
 8002d04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d06:	2301      	movs	r3, #1
 8002d08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d0a:	f107 0314 	add.w	r3, r7, #20
 8002d0e:	4619      	mov	r1, r3
 8002d10:	480c      	ldr	r0, [pc, #48]	; (8002d44 <HAL_TIM_MspPostInit+0xa8>)
 8002d12:	f000 fbc5 	bl	80034a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_3;
 8002d16:	f640 4308 	movw	r3, #3080	; 0xc08
 8002d1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d20:	2300      	movs	r3, #0
 8002d22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d24:	2300      	movs	r3, #0
 8002d26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d2c:	f107 0314 	add.w	r3, r7, #20
 8002d30:	4619      	mov	r1, r3
 8002d32:	4805      	ldr	r0, [pc, #20]	; (8002d48 <HAL_TIM_MspPostInit+0xac>)
 8002d34:	f000 fbb4 	bl	80034a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002d38:	bf00      	nop
 8002d3a:	3728      	adds	r7, #40	; 0x28
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	40023800 	.word	0x40023800
 8002d44:	40020000 	.word	0x40020000
 8002d48:	40020400 	.word	0x40020400

08002d4c <MX_UART7_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8002d50:	4b11      	ldr	r3, [pc, #68]	; (8002d98 <MX_UART7_Init+0x4c>)
 8002d52:	4a12      	ldr	r2, [pc, #72]	; (8002d9c <MX_UART7_Init+0x50>)
 8002d54:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 8002d56:	4b10      	ldr	r3, [pc, #64]	; (8002d98 <MX_UART7_Init+0x4c>)
 8002d58:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002d5c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002d5e:	4b0e      	ldr	r3, [pc, #56]	; (8002d98 <MX_UART7_Init+0x4c>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002d64:	4b0c      	ldr	r3, [pc, #48]	; (8002d98 <MX_UART7_Init+0x4c>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8002d6a:	4b0b      	ldr	r3, [pc, #44]	; (8002d98 <MX_UART7_Init+0x4c>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002d70:	4b09      	ldr	r3, [pc, #36]	; (8002d98 <MX_UART7_Init+0x4c>)
 8002d72:	220c      	movs	r2, #12
 8002d74:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d76:	4b08      	ldr	r3, [pc, #32]	; (8002d98 <MX_UART7_Init+0x4c>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d7c:	4b06      	ldr	r3, [pc, #24]	; (8002d98 <MX_UART7_Init+0x4c>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002d82:	4805      	ldr	r0, [pc, #20]	; (8002d98 <MX_UART7_Init+0x4c>)
 8002d84:	f003 fbe4 	bl	8006550 <HAL_UART_Init>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <MX_UART7_Init+0x46>
  {
    Error_Handler();
 8002d8e:	f7ff f8e7 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8002d92:	bf00      	nop
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	20000430 	.word	0x20000430
 8002d9c:	40007800 	.word	0x40007800

08002da0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002da4:	4b11      	ldr	r3, [pc, #68]	; (8002dec <MX_USART2_UART_Init+0x4c>)
 8002da6:	4a12      	ldr	r2, [pc, #72]	; (8002df0 <MX_USART2_UART_Init+0x50>)
 8002da8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002daa:	4b10      	ldr	r3, [pc, #64]	; (8002dec <MX_USART2_UART_Init+0x4c>)
 8002dac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002db0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002db2:	4b0e      	ldr	r3, [pc, #56]	; (8002dec <MX_USART2_UART_Init+0x4c>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002db8:	4b0c      	ldr	r3, [pc, #48]	; (8002dec <MX_USART2_UART_Init+0x4c>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002dbe:	4b0b      	ldr	r3, [pc, #44]	; (8002dec <MX_USART2_UART_Init+0x4c>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002dc4:	4b09      	ldr	r3, [pc, #36]	; (8002dec <MX_USART2_UART_Init+0x4c>)
 8002dc6:	220c      	movs	r2, #12
 8002dc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dca:	4b08      	ldr	r3, [pc, #32]	; (8002dec <MX_USART2_UART_Init+0x4c>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002dd0:	4b06      	ldr	r3, [pc, #24]	; (8002dec <MX_USART2_UART_Init+0x4c>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002dd6:	4805      	ldr	r0, [pc, #20]	; (8002dec <MX_USART2_UART_Init+0x4c>)
 8002dd8:	f003 fbba 	bl	8006550 <HAL_UART_Init>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002de2:	f7ff f8bd 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002de6:	bf00      	nop
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	20000474 	.word	0x20000474
 8002df0:	40004400 	.word	0x40004400

08002df4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002df8:	4b11      	ldr	r3, [pc, #68]	; (8002e40 <MX_USART3_UART_Init+0x4c>)
 8002dfa:	4a12      	ldr	r2, [pc, #72]	; (8002e44 <MX_USART3_UART_Init+0x50>)
 8002dfc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002dfe:	4b10      	ldr	r3, [pc, #64]	; (8002e40 <MX_USART3_UART_Init+0x4c>)
 8002e00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e04:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002e06:	4b0e      	ldr	r3, [pc, #56]	; (8002e40 <MX_USART3_UART_Init+0x4c>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002e0c:	4b0c      	ldr	r3, [pc, #48]	; (8002e40 <MX_USART3_UART_Init+0x4c>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002e12:	4b0b      	ldr	r3, [pc, #44]	; (8002e40 <MX_USART3_UART_Init+0x4c>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002e18:	4b09      	ldr	r3, [pc, #36]	; (8002e40 <MX_USART3_UART_Init+0x4c>)
 8002e1a:	220c      	movs	r2, #12
 8002e1c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e1e:	4b08      	ldr	r3, [pc, #32]	; (8002e40 <MX_USART3_UART_Init+0x4c>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e24:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <MX_USART3_UART_Init+0x4c>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002e2a:	4805      	ldr	r0, [pc, #20]	; (8002e40 <MX_USART3_UART_Init+0x4c>)
 8002e2c:	f003 fb90 	bl	8006550 <HAL_UART_Init>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002e36:	f7ff f893 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002e3a:	bf00      	nop
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	200004b8 	.word	0x200004b8
 8002e44:	40004800 	.word	0x40004800

08002e48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b08e      	sub	sp, #56	; 0x38
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	605a      	str	r2, [r3, #4]
 8002e5a:	609a      	str	r2, [r3, #8]
 8002e5c:	60da      	str	r2, [r3, #12]
 8002e5e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a67      	ldr	r2, [pc, #412]	; (8003004 <HAL_UART_MspInit+0x1bc>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d135      	bne.n	8002ed6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	623b      	str	r3, [r7, #32]
 8002e6e:	4b66      	ldr	r3, [pc, #408]	; (8003008 <HAL_UART_MspInit+0x1c0>)
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	4a65      	ldr	r2, [pc, #404]	; (8003008 <HAL_UART_MspInit+0x1c0>)
 8002e74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002e78:	6413      	str	r3, [r2, #64]	; 0x40
 8002e7a:	4b63      	ldr	r3, [pc, #396]	; (8003008 <HAL_UART_MspInit+0x1c0>)
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002e82:	623b      	str	r3, [r7, #32]
 8002e84:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e86:	2300      	movs	r3, #0
 8002e88:	61fb      	str	r3, [r7, #28]
 8002e8a:	4b5f      	ldr	r3, [pc, #380]	; (8003008 <HAL_UART_MspInit+0x1c0>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	4a5e      	ldr	r2, [pc, #376]	; (8003008 <HAL_UART_MspInit+0x1c0>)
 8002e90:	f043 0310 	orr.w	r3, r3, #16
 8002e94:	6313      	str	r3, [r2, #48]	; 0x30
 8002e96:	4b5c      	ldr	r3, [pc, #368]	; (8003008 <HAL_UART_MspInit+0x1c0>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	f003 0310 	and.w	r3, r3, #16
 8002e9e:	61fb      	str	r3, [r7, #28]
 8002ea0:	69fb      	ldr	r3, [r7, #28]
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002ea2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002ea6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eac:	2300      	movs	r3, #0
 8002eae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002eb4:	2308      	movs	r3, #8
 8002eb6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002eb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4853      	ldr	r0, [pc, #332]	; (800300c <HAL_UART_MspInit+0x1c4>)
 8002ec0:	f000 faee 	bl	80034a0 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	2052      	movs	r0, #82	; 0x52
 8002eca:	f000 fa20 	bl	800330e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8002ece:	2052      	movs	r0, #82	; 0x52
 8002ed0:	f000 fa39 	bl	8003346 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002ed4:	e091      	b.n	8002ffa <HAL_UART_MspInit+0x1b2>
  else if(uartHandle->Instance==USART2)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a4d      	ldr	r2, [pc, #308]	; (8003010 <HAL_UART_MspInit+0x1c8>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d152      	bne.n	8002f86 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	61bb      	str	r3, [r7, #24]
 8002ee4:	4b48      	ldr	r3, [pc, #288]	; (8003008 <HAL_UART_MspInit+0x1c0>)
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee8:	4a47      	ldr	r2, [pc, #284]	; (8003008 <HAL_UART_MspInit+0x1c0>)
 8002eea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eee:	6413      	str	r3, [r2, #64]	; 0x40
 8002ef0:	4b45      	ldr	r3, [pc, #276]	; (8003008 <HAL_UART_MspInit+0x1c0>)
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef8:	61bb      	str	r3, [r7, #24]
 8002efa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002efc:	2300      	movs	r3, #0
 8002efe:	617b      	str	r3, [r7, #20]
 8002f00:	4b41      	ldr	r3, [pc, #260]	; (8003008 <HAL_UART_MspInit+0x1c0>)
 8002f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f04:	4a40      	ldr	r2, [pc, #256]	; (8003008 <HAL_UART_MspInit+0x1c0>)
 8002f06:	f043 0301 	orr.w	r3, r3, #1
 8002f0a:	6313      	str	r3, [r2, #48]	; 0x30
 8002f0c:	4b3e      	ldr	r3, [pc, #248]	; (8003008 <HAL_UART_MspInit+0x1c0>)
 8002f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	617b      	str	r3, [r7, #20]
 8002f16:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f18:	2300      	movs	r3, #0
 8002f1a:	613b      	str	r3, [r7, #16]
 8002f1c:	4b3a      	ldr	r3, [pc, #232]	; (8003008 <HAL_UART_MspInit+0x1c0>)
 8002f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f20:	4a39      	ldr	r2, [pc, #228]	; (8003008 <HAL_UART_MspInit+0x1c0>)
 8002f22:	f043 0308 	orr.w	r3, r3, #8
 8002f26:	6313      	str	r3, [r2, #48]	; 0x30
 8002f28:	4b37      	ldr	r3, [pc, #220]	; (8003008 <HAL_UART_MspInit+0x1c0>)
 8002f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2c:	f003 0308 	and.w	r3, r3, #8
 8002f30:	613b      	str	r3, [r7, #16]
 8002f32:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f34:	2308      	movs	r3, #8
 8002f36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f38:	2302      	movs	r3, #2
 8002f3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f40:	2303      	movs	r3, #3
 8002f42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f44:	2307      	movs	r3, #7
 8002f46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4831      	ldr	r0, [pc, #196]	; (8003014 <HAL_UART_MspInit+0x1cc>)
 8002f50:	f000 faa6 	bl	80034a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002f54:	2320      	movs	r3, #32
 8002f56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f58:	2302      	movs	r3, #2
 8002f5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f60:	2303      	movs	r3, #3
 8002f62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f64:	2307      	movs	r3, #7
 8002f66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	482a      	ldr	r0, [pc, #168]	; (8003018 <HAL_UART_MspInit+0x1d0>)
 8002f70:	f000 fa96 	bl	80034a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002f74:	2200      	movs	r2, #0
 8002f76:	2100      	movs	r1, #0
 8002f78:	2026      	movs	r0, #38	; 0x26
 8002f7a:	f000 f9c8 	bl	800330e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002f7e:	2026      	movs	r0, #38	; 0x26
 8002f80:	f000 f9e1 	bl	8003346 <HAL_NVIC_EnableIRQ>
}
 8002f84:	e039      	b.n	8002ffa <HAL_UART_MspInit+0x1b2>
  else if(uartHandle->Instance==USART3)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a24      	ldr	r2, [pc, #144]	; (800301c <HAL_UART_MspInit+0x1d4>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d134      	bne.n	8002ffa <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f90:	2300      	movs	r3, #0
 8002f92:	60fb      	str	r3, [r7, #12]
 8002f94:	4b1c      	ldr	r3, [pc, #112]	; (8003008 <HAL_UART_MspInit+0x1c0>)
 8002f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f98:	4a1b      	ldr	r2, [pc, #108]	; (8003008 <HAL_UART_MspInit+0x1c0>)
 8002f9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f9e:	6413      	str	r3, [r2, #64]	; 0x40
 8002fa0:	4b19      	ldr	r3, [pc, #100]	; (8003008 <HAL_UART_MspInit+0x1c0>)
 8002fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fa8:	60fb      	str	r3, [r7, #12]
 8002faa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fac:	2300      	movs	r3, #0
 8002fae:	60bb      	str	r3, [r7, #8]
 8002fb0:	4b15      	ldr	r3, [pc, #84]	; (8003008 <HAL_UART_MspInit+0x1c0>)
 8002fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb4:	4a14      	ldr	r2, [pc, #80]	; (8003008 <HAL_UART_MspInit+0x1c0>)
 8002fb6:	f043 0308 	orr.w	r3, r3, #8
 8002fba:	6313      	str	r3, [r2, #48]	; 0x30
 8002fbc:	4b12      	ldr	r3, [pc, #72]	; (8003008 <HAL_UART_MspInit+0x1c0>)
 8002fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc0:	f003 0308 	and.w	r3, r3, #8
 8002fc4:	60bb      	str	r3, [r7, #8]
 8002fc6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002fc8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002fcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fce:	2302      	movs	r3, #2
 8002fd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002fda:	2307      	movs	r3, #7
 8002fdc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	480c      	ldr	r0, [pc, #48]	; (8003018 <HAL_UART_MspInit+0x1d0>)
 8002fe6:	f000 fa5b 	bl	80034a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002fea:	2200      	movs	r2, #0
 8002fec:	2100      	movs	r1, #0
 8002fee:	2027      	movs	r0, #39	; 0x27
 8002ff0:	f000 f98d 	bl	800330e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002ff4:	2027      	movs	r0, #39	; 0x27
 8002ff6:	f000 f9a6 	bl	8003346 <HAL_NVIC_EnableIRQ>
}
 8002ffa:	bf00      	nop
 8002ffc:	3738      	adds	r7, #56	; 0x38
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	40007800 	.word	0x40007800
 8003008:	40023800 	.word	0x40023800
 800300c:	40021000 	.word	0x40021000
 8003010:	40004400 	.word	0x40004400
 8003014:	40020000 	.word	0x40020000
 8003018:	40020c00 	.word	0x40020c00
 800301c:	40004800 	.word	0x40004800

08003020 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003020:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003058 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003024:	480d      	ldr	r0, [pc, #52]	; (800305c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003026:	490e      	ldr	r1, [pc, #56]	; (8003060 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003028:	4a0e      	ldr	r2, [pc, #56]	; (8003064 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800302a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800302c:	e002      	b.n	8003034 <LoopCopyDataInit>

0800302e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800302e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003030:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003032:	3304      	adds	r3, #4

08003034 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003034:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003036:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003038:	d3f9      	bcc.n	800302e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800303a:	4a0b      	ldr	r2, [pc, #44]	; (8003068 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800303c:	4c0b      	ldr	r4, [pc, #44]	; (800306c <LoopFillZerobss+0x26>)
  movs r3, #0
 800303e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003040:	e001      	b.n	8003046 <LoopFillZerobss>

08003042 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003042:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003044:	3204      	adds	r2, #4

08003046 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003046:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003048:	d3fb      	bcc.n	8003042 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800304a:	f7ff fd5f 	bl	8002b0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800304e:	f004 fafd 	bl	800764c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003052:	f7fe feb7 	bl	8001dc4 <main>
  bx  lr    
 8003056:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003058:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800305c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003060:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003064:	0800da30 	.word	0x0800da30
  ldr r2, =_sbss
 8003068:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800306c:	20000510 	.word	0x20000510

08003070 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003070:	e7fe      	b.n	8003070 <ADC_IRQHandler>
	...

08003074 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003078:	4b0e      	ldr	r3, [pc, #56]	; (80030b4 <HAL_Init+0x40>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a0d      	ldr	r2, [pc, #52]	; (80030b4 <HAL_Init+0x40>)
 800307e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003082:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003084:	4b0b      	ldr	r3, [pc, #44]	; (80030b4 <HAL_Init+0x40>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a0a      	ldr	r2, [pc, #40]	; (80030b4 <HAL_Init+0x40>)
 800308a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800308e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003090:	4b08      	ldr	r3, [pc, #32]	; (80030b4 <HAL_Init+0x40>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a07      	ldr	r2, [pc, #28]	; (80030b4 <HAL_Init+0x40>)
 8003096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800309a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800309c:	2003      	movs	r0, #3
 800309e:	f000 f92b 	bl	80032f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030a2:	200f      	movs	r0, #15
 80030a4:	f000 f808 	bl	80030b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030a8:	f7ff fbfa 	bl	80028a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	40023c00 	.word	0x40023c00

080030b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030c0:	4b12      	ldr	r3, [pc, #72]	; (800310c <HAL_InitTick+0x54>)
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	4b12      	ldr	r3, [pc, #72]	; (8003110 <HAL_InitTick+0x58>)
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	4619      	mov	r1, r3
 80030ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80030d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d6:	4618      	mov	r0, r3
 80030d8:	f000 f943 	bl	8003362 <HAL_SYSTICK_Config>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e00e      	b.n	8003104 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2b0f      	cmp	r3, #15
 80030ea:	d80a      	bhi.n	8003102 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030ec:	2200      	movs	r2, #0
 80030ee:	6879      	ldr	r1, [r7, #4]
 80030f0:	f04f 30ff 	mov.w	r0, #4294967295
 80030f4:	f000 f90b 	bl	800330e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030f8:	4a06      	ldr	r2, [pc, #24]	; (8003114 <HAL_InitTick+0x5c>)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
 8003100:	e000      	b.n	8003104 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
}
 8003104:	4618      	mov	r0, r3
 8003106:	3708      	adds	r7, #8
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	20000000 	.word	0x20000000
 8003110:	20000008 	.word	0x20000008
 8003114:	20000004 	.word	0x20000004

08003118 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800311c:	4b06      	ldr	r3, [pc, #24]	; (8003138 <HAL_IncTick+0x20>)
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	461a      	mov	r2, r3
 8003122:	4b06      	ldr	r3, [pc, #24]	; (800313c <HAL_IncTick+0x24>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4413      	add	r3, r2
 8003128:	4a04      	ldr	r2, [pc, #16]	; (800313c <HAL_IncTick+0x24>)
 800312a:	6013      	str	r3, [r2, #0]
}
 800312c:	bf00      	nop
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	20000008 	.word	0x20000008
 800313c:	200004fc 	.word	0x200004fc

08003140 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
  return uwTick;
 8003144:	4b03      	ldr	r3, [pc, #12]	; (8003154 <HAL_GetTick+0x14>)
 8003146:	681b      	ldr	r3, [r3, #0]
}
 8003148:	4618      	mov	r0, r3
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	200004fc 	.word	0x200004fc

08003158 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003158:	b480      	push	{r7}
 800315a:	b085      	sub	sp, #20
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f003 0307 	and.w	r3, r3, #7
 8003166:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003168:	4b0c      	ldr	r3, [pc, #48]	; (800319c <__NVIC_SetPriorityGrouping+0x44>)
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800316e:	68ba      	ldr	r2, [r7, #8]
 8003170:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003174:	4013      	ands	r3, r2
 8003176:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003180:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003188:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800318a:	4a04      	ldr	r2, [pc, #16]	; (800319c <__NVIC_SetPriorityGrouping+0x44>)
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	60d3      	str	r3, [r2, #12]
}
 8003190:	bf00      	nop
 8003192:	3714      	adds	r7, #20
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr
 800319c:	e000ed00 	.word	0xe000ed00

080031a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031a4:	4b04      	ldr	r3, [pc, #16]	; (80031b8 <__NVIC_GetPriorityGrouping+0x18>)
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	0a1b      	lsrs	r3, r3, #8
 80031aa:	f003 0307 	and.w	r3, r3, #7
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr
 80031b8:	e000ed00 	.word	0xe000ed00

080031bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	4603      	mov	r3, r0
 80031c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	db0b      	blt.n	80031e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031ce:	79fb      	ldrb	r3, [r7, #7]
 80031d0:	f003 021f 	and.w	r2, r3, #31
 80031d4:	4907      	ldr	r1, [pc, #28]	; (80031f4 <__NVIC_EnableIRQ+0x38>)
 80031d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031da:	095b      	lsrs	r3, r3, #5
 80031dc:	2001      	movs	r0, #1
 80031de:	fa00 f202 	lsl.w	r2, r0, r2
 80031e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031e6:	bf00      	nop
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	e000e100 	.word	0xe000e100

080031f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	4603      	mov	r3, r0
 8003200:	6039      	str	r1, [r7, #0]
 8003202:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003208:	2b00      	cmp	r3, #0
 800320a:	db0a      	blt.n	8003222 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	b2da      	uxtb	r2, r3
 8003210:	490c      	ldr	r1, [pc, #48]	; (8003244 <__NVIC_SetPriority+0x4c>)
 8003212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003216:	0112      	lsls	r2, r2, #4
 8003218:	b2d2      	uxtb	r2, r2
 800321a:	440b      	add	r3, r1
 800321c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003220:	e00a      	b.n	8003238 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	b2da      	uxtb	r2, r3
 8003226:	4908      	ldr	r1, [pc, #32]	; (8003248 <__NVIC_SetPriority+0x50>)
 8003228:	79fb      	ldrb	r3, [r7, #7]
 800322a:	f003 030f 	and.w	r3, r3, #15
 800322e:	3b04      	subs	r3, #4
 8003230:	0112      	lsls	r2, r2, #4
 8003232:	b2d2      	uxtb	r2, r2
 8003234:	440b      	add	r3, r1
 8003236:	761a      	strb	r2, [r3, #24]
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr
 8003244:	e000e100 	.word	0xe000e100
 8003248:	e000ed00 	.word	0xe000ed00

0800324c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800324c:	b480      	push	{r7}
 800324e:	b089      	sub	sp, #36	; 0x24
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f003 0307 	and.w	r3, r3, #7
 800325e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	f1c3 0307 	rsb	r3, r3, #7
 8003266:	2b04      	cmp	r3, #4
 8003268:	bf28      	it	cs
 800326a:	2304      	movcs	r3, #4
 800326c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	3304      	adds	r3, #4
 8003272:	2b06      	cmp	r3, #6
 8003274:	d902      	bls.n	800327c <NVIC_EncodePriority+0x30>
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	3b03      	subs	r3, #3
 800327a:	e000      	b.n	800327e <NVIC_EncodePriority+0x32>
 800327c:	2300      	movs	r3, #0
 800327e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003280:	f04f 32ff 	mov.w	r2, #4294967295
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	fa02 f303 	lsl.w	r3, r2, r3
 800328a:	43da      	mvns	r2, r3
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	401a      	ands	r2, r3
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003294:	f04f 31ff 	mov.w	r1, #4294967295
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	fa01 f303 	lsl.w	r3, r1, r3
 800329e:	43d9      	mvns	r1, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032a4:	4313      	orrs	r3, r2
         );
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3724      	adds	r7, #36	; 0x24
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
	...

080032b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	3b01      	subs	r3, #1
 80032c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032c4:	d301      	bcc.n	80032ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032c6:	2301      	movs	r3, #1
 80032c8:	e00f      	b.n	80032ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032ca:	4a0a      	ldr	r2, [pc, #40]	; (80032f4 <SysTick_Config+0x40>)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	3b01      	subs	r3, #1
 80032d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032d2:	210f      	movs	r1, #15
 80032d4:	f04f 30ff 	mov.w	r0, #4294967295
 80032d8:	f7ff ff8e 	bl	80031f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032dc:	4b05      	ldr	r3, [pc, #20]	; (80032f4 <SysTick_Config+0x40>)
 80032de:	2200      	movs	r2, #0
 80032e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032e2:	4b04      	ldr	r3, [pc, #16]	; (80032f4 <SysTick_Config+0x40>)
 80032e4:	2207      	movs	r2, #7
 80032e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	e000e010 	.word	0xe000e010

080032f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f7ff ff29 	bl	8003158 <__NVIC_SetPriorityGrouping>
}
 8003306:	bf00      	nop
 8003308:	3708      	adds	r7, #8
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800330e:	b580      	push	{r7, lr}
 8003310:	b086      	sub	sp, #24
 8003312:	af00      	add	r7, sp, #0
 8003314:	4603      	mov	r3, r0
 8003316:	60b9      	str	r1, [r7, #8]
 8003318:	607a      	str	r2, [r7, #4]
 800331a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800331c:	2300      	movs	r3, #0
 800331e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003320:	f7ff ff3e 	bl	80031a0 <__NVIC_GetPriorityGrouping>
 8003324:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	68b9      	ldr	r1, [r7, #8]
 800332a:	6978      	ldr	r0, [r7, #20]
 800332c:	f7ff ff8e 	bl	800324c <NVIC_EncodePriority>
 8003330:	4602      	mov	r2, r0
 8003332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003336:	4611      	mov	r1, r2
 8003338:	4618      	mov	r0, r3
 800333a:	f7ff ff5d 	bl	80031f8 <__NVIC_SetPriority>
}
 800333e:	bf00      	nop
 8003340:	3718      	adds	r7, #24
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b082      	sub	sp, #8
 800334a:	af00      	add	r7, sp, #0
 800334c:	4603      	mov	r3, r0
 800334e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003354:	4618      	mov	r0, r3
 8003356:	f7ff ff31 	bl	80031bc <__NVIC_EnableIRQ>
}
 800335a:	bf00      	nop
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b082      	sub	sp, #8
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f7ff ffa2 	bl	80032b4 <SysTick_Config>
 8003370:	4603      	mov	r3, r0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3708      	adds	r7, #8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800337a:	b580      	push	{r7, lr}
 800337c:	b084      	sub	sp, #16
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003386:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003388:	f7ff feda 	bl	8003140 <HAL_GetTick>
 800338c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d008      	beq.n	80033ac <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2280      	movs	r2, #128	; 0x80
 800339e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e052      	b.n	8003452 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 0216 	bic.w	r2, r2, #22
 80033ba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	695a      	ldr	r2, [r3, #20]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033ca:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d103      	bne.n	80033dc <HAL_DMA_Abort+0x62>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d007      	beq.n	80033ec <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f022 0208 	bic.w	r2, r2, #8
 80033ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f022 0201 	bic.w	r2, r2, #1
 80033fa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033fc:	e013      	b.n	8003426 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033fe:	f7ff fe9f 	bl	8003140 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b05      	cmp	r3, #5
 800340a:	d90c      	bls.n	8003426 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2220      	movs	r2, #32
 8003410:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2203      	movs	r2, #3
 8003416:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e015      	b.n	8003452 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0301 	and.w	r3, r3, #1
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1e4      	bne.n	80033fe <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003438:	223f      	movs	r2, #63	; 0x3f
 800343a:	409a      	lsls	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800345a:	b480      	push	{r7}
 800345c:	b083      	sub	sp, #12
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d004      	beq.n	8003478 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2280      	movs	r2, #128	; 0x80
 8003472:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e00c      	b.n	8003492 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2205      	movs	r2, #5
 800347c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f022 0201 	bic.w	r2, r2, #1
 800348e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
	...

080034a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b089      	sub	sp, #36	; 0x24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034aa:	2300      	movs	r3, #0
 80034ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034ae:	2300      	movs	r3, #0
 80034b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034b2:	2300      	movs	r3, #0
 80034b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034b6:	2300      	movs	r3, #0
 80034b8:	61fb      	str	r3, [r7, #28]
 80034ba:	e177      	b.n	80037ac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034bc:	2201      	movs	r2, #1
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	697a      	ldr	r2, [r7, #20]
 80034cc:	4013      	ands	r3, r2
 80034ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	f040 8166 	bne.w	80037a6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f003 0303 	and.w	r3, r3, #3
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d005      	beq.n	80034f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d130      	bne.n	8003554 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	2203      	movs	r2, #3
 80034fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003502:	43db      	mvns	r3, r3
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	4013      	ands	r3, r2
 8003508:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	68da      	ldr	r2, [r3, #12]
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	fa02 f303 	lsl.w	r3, r2, r3
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	4313      	orrs	r3, r2
 800351a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003528:	2201      	movs	r2, #1
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	fa02 f303 	lsl.w	r3, r2, r3
 8003530:	43db      	mvns	r3, r3
 8003532:	69ba      	ldr	r2, [r7, #24]
 8003534:	4013      	ands	r3, r2
 8003536:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	091b      	lsrs	r3, r3, #4
 800353e:	f003 0201 	and.w	r2, r3, #1
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	4313      	orrs	r3, r2
 800354c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f003 0303 	and.w	r3, r3, #3
 800355c:	2b03      	cmp	r3, #3
 800355e:	d017      	beq.n	8003590 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	2203      	movs	r2, #3
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	43db      	mvns	r3, r3
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	4013      	ands	r3, r2
 8003576:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	689a      	ldr	r2, [r3, #8]
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	4313      	orrs	r3, r2
 8003588:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f003 0303 	and.w	r3, r3, #3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d123      	bne.n	80035e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	08da      	lsrs	r2, r3, #3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	3208      	adds	r2, #8
 80035a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	f003 0307 	and.w	r3, r3, #7
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	220f      	movs	r2, #15
 80035b4:	fa02 f303 	lsl.w	r3, r2, r3
 80035b8:	43db      	mvns	r3, r3
 80035ba:	69ba      	ldr	r2, [r7, #24]
 80035bc:	4013      	ands	r3, r2
 80035be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	691a      	ldr	r2, [r3, #16]
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	f003 0307 	and.w	r3, r3, #7
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	fa02 f303 	lsl.w	r3, r2, r3
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	08da      	lsrs	r2, r3, #3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	3208      	adds	r2, #8
 80035de:	69b9      	ldr	r1, [r7, #24]
 80035e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	2203      	movs	r2, #3
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	43db      	mvns	r3, r3
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	4013      	ands	r3, r2
 80035fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f003 0203 	and.w	r2, r3, #3
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	fa02 f303 	lsl.w	r3, r2, r3
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	4313      	orrs	r3, r2
 8003610:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 80c0 	beq.w	80037a6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003626:	2300      	movs	r3, #0
 8003628:	60fb      	str	r3, [r7, #12]
 800362a:	4b66      	ldr	r3, [pc, #408]	; (80037c4 <HAL_GPIO_Init+0x324>)
 800362c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362e:	4a65      	ldr	r2, [pc, #404]	; (80037c4 <HAL_GPIO_Init+0x324>)
 8003630:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003634:	6453      	str	r3, [r2, #68]	; 0x44
 8003636:	4b63      	ldr	r3, [pc, #396]	; (80037c4 <HAL_GPIO_Init+0x324>)
 8003638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800363e:	60fb      	str	r3, [r7, #12]
 8003640:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003642:	4a61      	ldr	r2, [pc, #388]	; (80037c8 <HAL_GPIO_Init+0x328>)
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	089b      	lsrs	r3, r3, #2
 8003648:	3302      	adds	r3, #2
 800364a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800364e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	f003 0303 	and.w	r3, r3, #3
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	220f      	movs	r2, #15
 800365a:	fa02 f303 	lsl.w	r3, r2, r3
 800365e:	43db      	mvns	r3, r3
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	4013      	ands	r3, r2
 8003664:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a58      	ldr	r2, [pc, #352]	; (80037cc <HAL_GPIO_Init+0x32c>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d037      	beq.n	80036de <HAL_GPIO_Init+0x23e>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a57      	ldr	r2, [pc, #348]	; (80037d0 <HAL_GPIO_Init+0x330>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d031      	beq.n	80036da <HAL_GPIO_Init+0x23a>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a56      	ldr	r2, [pc, #344]	; (80037d4 <HAL_GPIO_Init+0x334>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d02b      	beq.n	80036d6 <HAL_GPIO_Init+0x236>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a55      	ldr	r2, [pc, #340]	; (80037d8 <HAL_GPIO_Init+0x338>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d025      	beq.n	80036d2 <HAL_GPIO_Init+0x232>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a54      	ldr	r2, [pc, #336]	; (80037dc <HAL_GPIO_Init+0x33c>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d01f      	beq.n	80036ce <HAL_GPIO_Init+0x22e>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a53      	ldr	r2, [pc, #332]	; (80037e0 <HAL_GPIO_Init+0x340>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d019      	beq.n	80036ca <HAL_GPIO_Init+0x22a>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a52      	ldr	r2, [pc, #328]	; (80037e4 <HAL_GPIO_Init+0x344>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d013      	beq.n	80036c6 <HAL_GPIO_Init+0x226>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a51      	ldr	r2, [pc, #324]	; (80037e8 <HAL_GPIO_Init+0x348>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d00d      	beq.n	80036c2 <HAL_GPIO_Init+0x222>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a50      	ldr	r2, [pc, #320]	; (80037ec <HAL_GPIO_Init+0x34c>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d007      	beq.n	80036be <HAL_GPIO_Init+0x21e>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a4f      	ldr	r2, [pc, #316]	; (80037f0 <HAL_GPIO_Init+0x350>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d101      	bne.n	80036ba <HAL_GPIO_Init+0x21a>
 80036b6:	2309      	movs	r3, #9
 80036b8:	e012      	b.n	80036e0 <HAL_GPIO_Init+0x240>
 80036ba:	230a      	movs	r3, #10
 80036bc:	e010      	b.n	80036e0 <HAL_GPIO_Init+0x240>
 80036be:	2308      	movs	r3, #8
 80036c0:	e00e      	b.n	80036e0 <HAL_GPIO_Init+0x240>
 80036c2:	2307      	movs	r3, #7
 80036c4:	e00c      	b.n	80036e0 <HAL_GPIO_Init+0x240>
 80036c6:	2306      	movs	r3, #6
 80036c8:	e00a      	b.n	80036e0 <HAL_GPIO_Init+0x240>
 80036ca:	2305      	movs	r3, #5
 80036cc:	e008      	b.n	80036e0 <HAL_GPIO_Init+0x240>
 80036ce:	2304      	movs	r3, #4
 80036d0:	e006      	b.n	80036e0 <HAL_GPIO_Init+0x240>
 80036d2:	2303      	movs	r3, #3
 80036d4:	e004      	b.n	80036e0 <HAL_GPIO_Init+0x240>
 80036d6:	2302      	movs	r3, #2
 80036d8:	e002      	b.n	80036e0 <HAL_GPIO_Init+0x240>
 80036da:	2301      	movs	r3, #1
 80036dc:	e000      	b.n	80036e0 <HAL_GPIO_Init+0x240>
 80036de:	2300      	movs	r3, #0
 80036e0:	69fa      	ldr	r2, [r7, #28]
 80036e2:	f002 0203 	and.w	r2, r2, #3
 80036e6:	0092      	lsls	r2, r2, #2
 80036e8:	4093      	lsls	r3, r2
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036f0:	4935      	ldr	r1, [pc, #212]	; (80037c8 <HAL_GPIO_Init+0x328>)
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	089b      	lsrs	r3, r3, #2
 80036f6:	3302      	adds	r3, #2
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036fe:	4b3d      	ldr	r3, [pc, #244]	; (80037f4 <HAL_GPIO_Init+0x354>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	43db      	mvns	r3, r3
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	4013      	ands	r3, r2
 800370c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d003      	beq.n	8003722 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800371a:	69ba      	ldr	r2, [r7, #24]
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	4313      	orrs	r3, r2
 8003720:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003722:	4a34      	ldr	r2, [pc, #208]	; (80037f4 <HAL_GPIO_Init+0x354>)
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003728:	4b32      	ldr	r3, [pc, #200]	; (80037f4 <HAL_GPIO_Init+0x354>)
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	43db      	mvns	r3, r3
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	4013      	ands	r3, r2
 8003736:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d003      	beq.n	800374c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	4313      	orrs	r3, r2
 800374a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800374c:	4a29      	ldr	r2, [pc, #164]	; (80037f4 <HAL_GPIO_Init+0x354>)
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003752:	4b28      	ldr	r3, [pc, #160]	; (80037f4 <HAL_GPIO_Init+0x354>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	43db      	mvns	r3, r3
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	4013      	ands	r3, r2
 8003760:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d003      	beq.n	8003776 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800376e:	69ba      	ldr	r2, [r7, #24]
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	4313      	orrs	r3, r2
 8003774:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003776:	4a1f      	ldr	r2, [pc, #124]	; (80037f4 <HAL_GPIO_Init+0x354>)
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800377c:	4b1d      	ldr	r3, [pc, #116]	; (80037f4 <HAL_GPIO_Init+0x354>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	43db      	mvns	r3, r3
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	4013      	ands	r3, r2
 800378a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d003      	beq.n	80037a0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	4313      	orrs	r3, r2
 800379e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037a0:	4a14      	ldr	r2, [pc, #80]	; (80037f4 <HAL_GPIO_Init+0x354>)
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	3301      	adds	r3, #1
 80037aa:	61fb      	str	r3, [r7, #28]
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	2b0f      	cmp	r3, #15
 80037b0:	f67f ae84 	bls.w	80034bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037b4:	bf00      	nop
 80037b6:	bf00      	nop
 80037b8:	3724      	adds	r7, #36	; 0x24
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	40023800 	.word	0x40023800
 80037c8:	40013800 	.word	0x40013800
 80037cc:	40020000 	.word	0x40020000
 80037d0:	40020400 	.word	0x40020400
 80037d4:	40020800 	.word	0x40020800
 80037d8:	40020c00 	.word	0x40020c00
 80037dc:	40021000 	.word	0x40021000
 80037e0:	40021400 	.word	0x40021400
 80037e4:	40021800 	.word	0x40021800
 80037e8:	40021c00 	.word	0x40021c00
 80037ec:	40022000 	.word	0x40022000
 80037f0:	40022400 	.word	0x40022400
 80037f4:	40013c00 	.word	0x40013c00

080037f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	460b      	mov	r3, r1
 8003802:	807b      	strh	r3, [r7, #2]
 8003804:	4613      	mov	r3, r2
 8003806:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003808:	787b      	ldrb	r3, [r7, #1]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d003      	beq.n	8003816 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800380e:	887a      	ldrh	r2, [r7, #2]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003814:	e003      	b.n	800381e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003816:	887b      	ldrh	r3, [r7, #2]
 8003818:	041a      	lsls	r2, r3, #16
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	619a      	str	r2, [r3, #24]
}
 800381e:	bf00      	nop
 8003820:	370c      	adds	r7, #12
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
	...

0800382c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d101      	bne.n	800383e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e12b      	b.n	8003a96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d106      	bne.n	8003858 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7fe fa5c 	bl	8001d10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2224      	movs	r2, #36	; 0x24
 800385c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 0201 	bic.w	r2, r2, #1
 800386e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800387e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800388e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003890:	f001 fc86 	bl	80051a0 <HAL_RCC_GetPCLK1Freq>
 8003894:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	4a81      	ldr	r2, [pc, #516]	; (8003aa0 <HAL_I2C_Init+0x274>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d807      	bhi.n	80038b0 <HAL_I2C_Init+0x84>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	4a80      	ldr	r2, [pc, #512]	; (8003aa4 <HAL_I2C_Init+0x278>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	bf94      	ite	ls
 80038a8:	2301      	movls	r3, #1
 80038aa:	2300      	movhi	r3, #0
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	e006      	b.n	80038be <HAL_I2C_Init+0x92>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	4a7d      	ldr	r2, [pc, #500]	; (8003aa8 <HAL_I2C_Init+0x27c>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	bf94      	ite	ls
 80038b8:	2301      	movls	r3, #1
 80038ba:	2300      	movhi	r3, #0
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e0e7      	b.n	8003a96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	4a78      	ldr	r2, [pc, #480]	; (8003aac <HAL_I2C_Init+0x280>)
 80038ca:	fba2 2303 	umull	r2, r3, r2, r3
 80038ce:	0c9b      	lsrs	r3, r3, #18
 80038d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68ba      	ldr	r2, [r7, #8]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	6a1b      	ldr	r3, [r3, #32]
 80038ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	4a6a      	ldr	r2, [pc, #424]	; (8003aa0 <HAL_I2C_Init+0x274>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d802      	bhi.n	8003900 <HAL_I2C_Init+0xd4>
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	3301      	adds	r3, #1
 80038fe:	e009      	b.n	8003914 <HAL_I2C_Init+0xe8>
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003906:	fb02 f303 	mul.w	r3, r2, r3
 800390a:	4a69      	ldr	r2, [pc, #420]	; (8003ab0 <HAL_I2C_Init+0x284>)
 800390c:	fba2 2303 	umull	r2, r3, r2, r3
 8003910:	099b      	lsrs	r3, r3, #6
 8003912:	3301      	adds	r3, #1
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	6812      	ldr	r2, [r2, #0]
 8003918:	430b      	orrs	r3, r1
 800391a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	69db      	ldr	r3, [r3, #28]
 8003922:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003926:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	495c      	ldr	r1, [pc, #368]	; (8003aa0 <HAL_I2C_Init+0x274>)
 8003930:	428b      	cmp	r3, r1
 8003932:	d819      	bhi.n	8003968 <HAL_I2C_Init+0x13c>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	1e59      	subs	r1, r3, #1
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003942:	1c59      	adds	r1, r3, #1
 8003944:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003948:	400b      	ands	r3, r1
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00a      	beq.n	8003964 <HAL_I2C_Init+0x138>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	1e59      	subs	r1, r3, #1
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	fbb1 f3f3 	udiv	r3, r1, r3
 800395c:	3301      	adds	r3, #1
 800395e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003962:	e051      	b.n	8003a08 <HAL_I2C_Init+0x1dc>
 8003964:	2304      	movs	r3, #4
 8003966:	e04f      	b.n	8003a08 <HAL_I2C_Init+0x1dc>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d111      	bne.n	8003994 <HAL_I2C_Init+0x168>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	1e58      	subs	r0, r3, #1
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6859      	ldr	r1, [r3, #4]
 8003978:	460b      	mov	r3, r1
 800397a:	005b      	lsls	r3, r3, #1
 800397c:	440b      	add	r3, r1
 800397e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003982:	3301      	adds	r3, #1
 8003984:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003988:	2b00      	cmp	r3, #0
 800398a:	bf0c      	ite	eq
 800398c:	2301      	moveq	r3, #1
 800398e:	2300      	movne	r3, #0
 8003990:	b2db      	uxtb	r3, r3
 8003992:	e012      	b.n	80039ba <HAL_I2C_Init+0x18e>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	1e58      	subs	r0, r3, #1
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6859      	ldr	r1, [r3, #4]
 800399c:	460b      	mov	r3, r1
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	440b      	add	r3, r1
 80039a2:	0099      	lsls	r1, r3, #2
 80039a4:	440b      	add	r3, r1
 80039a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80039aa:	3301      	adds	r3, #1
 80039ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	bf0c      	ite	eq
 80039b4:	2301      	moveq	r3, #1
 80039b6:	2300      	movne	r3, #0
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <HAL_I2C_Init+0x196>
 80039be:	2301      	movs	r3, #1
 80039c0:	e022      	b.n	8003a08 <HAL_I2C_Init+0x1dc>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10e      	bne.n	80039e8 <HAL_I2C_Init+0x1bc>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	1e58      	subs	r0, r3, #1
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6859      	ldr	r1, [r3, #4]
 80039d2:	460b      	mov	r3, r1
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	440b      	add	r3, r1
 80039d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80039dc:	3301      	adds	r3, #1
 80039de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039e6:	e00f      	b.n	8003a08 <HAL_I2C_Init+0x1dc>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	1e58      	subs	r0, r3, #1
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6859      	ldr	r1, [r3, #4]
 80039f0:	460b      	mov	r3, r1
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	440b      	add	r3, r1
 80039f6:	0099      	lsls	r1, r3, #2
 80039f8:	440b      	add	r3, r1
 80039fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80039fe:	3301      	adds	r3, #1
 8003a00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a08:	6879      	ldr	r1, [r7, #4]
 8003a0a:	6809      	ldr	r1, [r1, #0]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	69da      	ldr	r2, [r3, #28]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	431a      	orrs	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	6911      	ldr	r1, [r2, #16]
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	68d2      	ldr	r2, [r2, #12]
 8003a42:	4311      	orrs	r1, r2
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	6812      	ldr	r2, [r2, #0]
 8003a48:	430b      	orrs	r3, r1
 8003a4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	695a      	ldr	r2, [r3, #20]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	430a      	orrs	r2, r1
 8003a66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f042 0201 	orr.w	r2, r2, #1
 8003a76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2220      	movs	r2, #32
 8003a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3710      	adds	r7, #16
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	000186a0 	.word	0x000186a0
 8003aa4:	001e847f 	.word	0x001e847f
 8003aa8:	003d08ff 	.word	0x003d08ff
 8003aac:	431bde83 	.word	0x431bde83
 8003ab0:	10624dd3 	.word	0x10624dd3

08003ab4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b088      	sub	sp, #32
 8003ab8:	af02      	add	r7, sp, #8
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	4608      	mov	r0, r1
 8003abe:	4611      	mov	r1, r2
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	817b      	strh	r3, [r7, #10]
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	813b      	strh	r3, [r7, #8]
 8003aca:	4613      	mov	r3, r2
 8003acc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ace:	f7ff fb37 	bl	8003140 <HAL_GetTick>
 8003ad2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b20      	cmp	r3, #32
 8003ade:	f040 80d9 	bne.w	8003c94 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	9300      	str	r3, [sp, #0]
 8003ae6:	2319      	movs	r3, #25
 8003ae8:	2201      	movs	r2, #1
 8003aea:	496d      	ldr	r1, [pc, #436]	; (8003ca0 <HAL_I2C_Mem_Write+0x1ec>)
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f000 fc7f 	bl	80043f0 <I2C_WaitOnFlagUntilTimeout>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d001      	beq.n	8003afc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003af8:	2302      	movs	r3, #2
 8003afa:	e0cc      	b.n	8003c96 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d101      	bne.n	8003b0a <HAL_I2C_Mem_Write+0x56>
 8003b06:	2302      	movs	r3, #2
 8003b08:	e0c5      	b.n	8003c96 <HAL_I2C_Mem_Write+0x1e2>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d007      	beq.n	8003b30 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f042 0201 	orr.w	r2, r2, #1
 8003b2e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b3e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2221      	movs	r2, #33	; 0x21
 8003b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2240      	movs	r2, #64	; 0x40
 8003b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6a3a      	ldr	r2, [r7, #32]
 8003b5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003b60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	4a4d      	ldr	r2, [pc, #308]	; (8003ca4 <HAL_I2C_Mem_Write+0x1f0>)
 8003b70:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b72:	88f8      	ldrh	r0, [r7, #6]
 8003b74:	893a      	ldrh	r2, [r7, #8]
 8003b76:	8979      	ldrh	r1, [r7, #10]
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	9301      	str	r3, [sp, #4]
 8003b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b7e:	9300      	str	r3, [sp, #0]
 8003b80:	4603      	mov	r3, r0
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	f000 fab6 	bl	80040f4 <I2C_RequestMemoryWrite>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d052      	beq.n	8003c34 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e081      	b.n	8003c96 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b96:	68f8      	ldr	r0, [r7, #12]
 8003b98:	f000 fd00 	bl	800459c <I2C_WaitOnTXEFlagUntilTimeout>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00d      	beq.n	8003bbe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	2b04      	cmp	r3, #4
 8003ba8:	d107      	bne.n	8003bba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bb8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e06b      	b.n	8003c96 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc2:	781a      	ldrb	r2, [r3, #0]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bce:	1c5a      	adds	r2, r3, #1
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	3b01      	subs	r3, #1
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	695b      	ldr	r3, [r3, #20]
 8003bf4:	f003 0304 	and.w	r3, r3, #4
 8003bf8:	2b04      	cmp	r3, #4
 8003bfa:	d11b      	bne.n	8003c34 <HAL_I2C_Mem_Write+0x180>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d017      	beq.n	8003c34 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c08:	781a      	ldrb	r2, [r3, #0]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	1c5a      	adds	r2, r3, #1
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	b29a      	uxth	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1aa      	bne.n	8003b92 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f000 fcec 	bl	800461e <I2C_WaitOnBTFFlagUntilTimeout>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00d      	beq.n	8003c68 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c50:	2b04      	cmp	r3, #4
 8003c52:	d107      	bne.n	8003c64 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c62:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e016      	b.n	8003c96 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c90:	2300      	movs	r3, #0
 8003c92:	e000      	b.n	8003c96 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003c94:	2302      	movs	r3, #2
  }
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3718      	adds	r7, #24
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	00100002 	.word	0x00100002
 8003ca4:	ffff0000 	.word	0xffff0000

08003ca8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b08c      	sub	sp, #48	; 0x30
 8003cac:	af02      	add	r7, sp, #8
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	4608      	mov	r0, r1
 8003cb2:	4611      	mov	r1, r2
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	817b      	strh	r3, [r7, #10]
 8003cba:	460b      	mov	r3, r1
 8003cbc:	813b      	strh	r3, [r7, #8]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cc2:	f7ff fa3d 	bl	8003140 <HAL_GetTick>
 8003cc6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	2b20      	cmp	r3, #32
 8003cd2:	f040 8208 	bne.w	80040e6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd8:	9300      	str	r3, [sp, #0]
 8003cda:	2319      	movs	r3, #25
 8003cdc:	2201      	movs	r2, #1
 8003cde:	497b      	ldr	r1, [pc, #492]	; (8003ecc <HAL_I2C_Mem_Read+0x224>)
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f000 fb85 	bl	80043f0 <I2C_WaitOnFlagUntilTimeout>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d001      	beq.n	8003cf0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003cec:	2302      	movs	r3, #2
 8003cee:	e1fb      	b.n	80040e8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d101      	bne.n	8003cfe <HAL_I2C_Mem_Read+0x56>
 8003cfa:	2302      	movs	r3, #2
 8003cfc:	e1f4      	b.n	80040e8 <HAL_I2C_Mem_Read+0x440>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2201      	movs	r2, #1
 8003d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0301 	and.w	r3, r3, #1
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d007      	beq.n	8003d24 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f042 0201 	orr.w	r2, r2, #1
 8003d22:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d32:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2222      	movs	r2, #34	; 0x22
 8003d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2240      	movs	r2, #64	; 0x40
 8003d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2200      	movs	r2, #0
 8003d48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003d54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d5a:	b29a      	uxth	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	4a5b      	ldr	r2, [pc, #364]	; (8003ed0 <HAL_I2C_Mem_Read+0x228>)
 8003d64:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d66:	88f8      	ldrh	r0, [r7, #6]
 8003d68:	893a      	ldrh	r2, [r7, #8]
 8003d6a:	8979      	ldrh	r1, [r7, #10]
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6e:	9301      	str	r3, [sp, #4]
 8003d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d72:	9300      	str	r3, [sp, #0]
 8003d74:	4603      	mov	r3, r0
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f000 fa52 	bl	8004220 <I2C_RequestMemoryRead>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e1b0      	b.n	80040e8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d113      	bne.n	8003db6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d8e:	2300      	movs	r3, #0
 8003d90:	623b      	str	r3, [r7, #32]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	695b      	ldr	r3, [r3, #20]
 8003d98:	623b      	str	r3, [r7, #32]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	623b      	str	r3, [r7, #32]
 8003da2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	e184      	b.n	80040c0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d11b      	bne.n	8003df6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dcc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dce:	2300      	movs	r3, #0
 8003dd0:	61fb      	str	r3, [r7, #28]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	695b      	ldr	r3, [r3, #20]
 8003dd8:	61fb      	str	r3, [r7, #28]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	61fb      	str	r3, [r7, #28]
 8003de2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003df2:	601a      	str	r2, [r3, #0]
 8003df4:	e164      	b.n	80040c0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d11b      	bne.n	8003e36 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e0c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e1e:	2300      	movs	r3, #0
 8003e20:	61bb      	str	r3, [r7, #24]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	695b      	ldr	r3, [r3, #20]
 8003e28:	61bb      	str	r3, [r7, #24]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	61bb      	str	r3, [r7, #24]
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	e144      	b.n	80040c0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e36:	2300      	movs	r3, #0
 8003e38:	617b      	str	r3, [r7, #20]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	695b      	ldr	r3, [r3, #20]
 8003e40:	617b      	str	r3, [r7, #20]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	617b      	str	r3, [r7, #20]
 8003e4a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003e4c:	e138      	b.n	80040c0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e52:	2b03      	cmp	r3, #3
 8003e54:	f200 80f1 	bhi.w	800403a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d123      	bne.n	8003ea8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f000 fc1b 	bl	80046a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e139      	b.n	80040e8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	691a      	ldr	r2, [r3, #16]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7e:	b2d2      	uxtb	r2, r2
 8003e80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e86:	1c5a      	adds	r2, r3, #1
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e90:	3b01      	subs	r3, #1
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ea6:	e10b      	b.n	80040c0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d14e      	bne.n	8003f4e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb2:	9300      	str	r3, [sp, #0]
 8003eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	4906      	ldr	r1, [pc, #24]	; (8003ed4 <HAL_I2C_Mem_Read+0x22c>)
 8003eba:	68f8      	ldr	r0, [r7, #12]
 8003ebc:	f000 fa98 	bl	80043f0 <I2C_WaitOnFlagUntilTimeout>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d008      	beq.n	8003ed8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e10e      	b.n	80040e8 <HAL_I2C_Mem_Read+0x440>
 8003eca:	bf00      	nop
 8003ecc:	00100002 	.word	0x00100002
 8003ed0:	ffff0000 	.word	0xffff0000
 8003ed4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ee6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	691a      	ldr	r2, [r3, #16]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef2:	b2d2      	uxtb	r2, r2
 8003ef4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efa:	1c5a      	adds	r2, r3, #1
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f04:	3b01      	subs	r3, #1
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	3b01      	subs	r3, #1
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	691a      	ldr	r2, [r3, #16]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f24:	b2d2      	uxtb	r2, r2
 8003f26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	1c5a      	adds	r2, r3, #1
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f36:	3b01      	subs	r3, #1
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	3b01      	subs	r3, #1
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f4c:	e0b8      	b.n	80040c0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f50:	9300      	str	r3, [sp, #0]
 8003f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f54:	2200      	movs	r2, #0
 8003f56:	4966      	ldr	r1, [pc, #408]	; (80040f0 <HAL_I2C_Mem_Read+0x448>)
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f000 fa49 	bl	80043f0 <I2C_WaitOnFlagUntilTimeout>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d001      	beq.n	8003f68 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e0bf      	b.n	80040e8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	691a      	ldr	r2, [r3, #16]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f82:	b2d2      	uxtb	r2, r2
 8003f84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8a:	1c5a      	adds	r2, r3, #1
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f94:	3b01      	subs	r3, #1
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fac:	9300      	str	r3, [sp, #0]
 8003fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	494f      	ldr	r1, [pc, #316]	; (80040f0 <HAL_I2C_Mem_Read+0x448>)
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f000 fa1b 	bl	80043f0 <I2C_WaitOnFlagUntilTimeout>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d001      	beq.n	8003fc4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e091      	b.n	80040e8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	691a      	ldr	r2, [r3, #16]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fde:	b2d2      	uxtb	r2, r2
 8003fe0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe6:	1c5a      	adds	r2, r3, #1
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	3b01      	subs	r3, #1
 8004000:	b29a      	uxth	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	691a      	ldr	r2, [r3, #16]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004010:	b2d2      	uxtb	r2, r2
 8004012:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004018:	1c5a      	adds	r2, r3, #1
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004022:	3b01      	subs	r3, #1
 8004024:	b29a      	uxth	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800402e:	b29b      	uxth	r3, r3
 8004030:	3b01      	subs	r3, #1
 8004032:	b29a      	uxth	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004038:	e042      	b.n	80040c0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800403a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800403c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f000 fb2e 	bl	80046a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e04c      	b.n	80040e8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	691a      	ldr	r2, [r3, #16]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004058:	b2d2      	uxtb	r2, r2
 800405a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004060:	1c5a      	adds	r2, r3, #1
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800406a:	3b01      	subs	r3, #1
 800406c:	b29a      	uxth	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004076:	b29b      	uxth	r3, r3
 8004078:	3b01      	subs	r3, #1
 800407a:	b29a      	uxth	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	f003 0304 	and.w	r3, r3, #4
 800408a:	2b04      	cmp	r3, #4
 800408c:	d118      	bne.n	80040c0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	691a      	ldr	r2, [r3, #16]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004098:	b2d2      	uxtb	r2, r2
 800409a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a0:	1c5a      	adds	r2, r3, #1
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040aa:	3b01      	subs	r3, #1
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	3b01      	subs	r3, #1
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f47f aec2 	bne.w	8003e4e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2220      	movs	r2, #32
 80040ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80040e2:	2300      	movs	r3, #0
 80040e4:	e000      	b.n	80040e8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80040e6:	2302      	movs	r3, #2
  }
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3728      	adds	r7, #40	; 0x28
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	00010004 	.word	0x00010004

080040f4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b088      	sub	sp, #32
 80040f8:	af02      	add	r7, sp, #8
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	4608      	mov	r0, r1
 80040fe:	4611      	mov	r1, r2
 8004100:	461a      	mov	r2, r3
 8004102:	4603      	mov	r3, r0
 8004104:	817b      	strh	r3, [r7, #10]
 8004106:	460b      	mov	r3, r1
 8004108:	813b      	strh	r3, [r7, #8]
 800410a:	4613      	mov	r3, r2
 800410c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800411c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800411e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004120:	9300      	str	r3, [sp, #0]
 8004122:	6a3b      	ldr	r3, [r7, #32]
 8004124:	2200      	movs	r2, #0
 8004126:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800412a:	68f8      	ldr	r0, [r7, #12]
 800412c:	f000 f960 	bl	80043f0 <I2C_WaitOnFlagUntilTimeout>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00d      	beq.n	8004152 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004140:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004144:	d103      	bne.n	800414e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f44f 7200 	mov.w	r2, #512	; 0x200
 800414c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e05f      	b.n	8004212 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004152:	897b      	ldrh	r3, [r7, #10]
 8004154:	b2db      	uxtb	r3, r3
 8004156:	461a      	mov	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004160:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004164:	6a3a      	ldr	r2, [r7, #32]
 8004166:	492d      	ldr	r1, [pc, #180]	; (800421c <I2C_RequestMemoryWrite+0x128>)
 8004168:	68f8      	ldr	r0, [r7, #12]
 800416a:	f000 f998 	bl	800449e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d001      	beq.n	8004178 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e04c      	b.n	8004212 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004178:	2300      	movs	r3, #0
 800417a:	617b      	str	r3, [r7, #20]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	617b      	str	r3, [r7, #20]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	617b      	str	r3, [r7, #20]
 800418c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800418e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004190:	6a39      	ldr	r1, [r7, #32]
 8004192:	68f8      	ldr	r0, [r7, #12]
 8004194:	f000 fa02 	bl	800459c <I2C_WaitOnTXEFlagUntilTimeout>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00d      	beq.n	80041ba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a2:	2b04      	cmp	r3, #4
 80041a4:	d107      	bne.n	80041b6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e02b      	b.n	8004212 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041ba:	88fb      	ldrh	r3, [r7, #6]
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d105      	bne.n	80041cc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041c0:	893b      	ldrh	r3, [r7, #8]
 80041c2:	b2da      	uxtb	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	611a      	str	r2, [r3, #16]
 80041ca:	e021      	b.n	8004210 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80041cc:	893b      	ldrh	r3, [r7, #8]
 80041ce:	0a1b      	lsrs	r3, r3, #8
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	b2da      	uxtb	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041dc:	6a39      	ldr	r1, [r7, #32]
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f000 f9dc 	bl	800459c <I2C_WaitOnTXEFlagUntilTimeout>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00d      	beq.n	8004206 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ee:	2b04      	cmp	r3, #4
 80041f0:	d107      	bne.n	8004202 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004200:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e005      	b.n	8004212 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004206:	893b      	ldrh	r3, [r7, #8]
 8004208:	b2da      	uxtb	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3718      	adds	r7, #24
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	00010002 	.word	0x00010002

08004220 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b088      	sub	sp, #32
 8004224:	af02      	add	r7, sp, #8
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	4608      	mov	r0, r1
 800422a:	4611      	mov	r1, r2
 800422c:	461a      	mov	r2, r3
 800422e:	4603      	mov	r3, r0
 8004230:	817b      	strh	r3, [r7, #10]
 8004232:	460b      	mov	r3, r1
 8004234:	813b      	strh	r3, [r7, #8]
 8004236:	4613      	mov	r3, r2
 8004238:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004248:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004258:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800425a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425c:	9300      	str	r3, [sp, #0]
 800425e:	6a3b      	ldr	r3, [r7, #32]
 8004260:	2200      	movs	r2, #0
 8004262:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004266:	68f8      	ldr	r0, [r7, #12]
 8004268:	f000 f8c2 	bl	80043f0 <I2C_WaitOnFlagUntilTimeout>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00d      	beq.n	800428e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800427c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004280:	d103      	bne.n	800428a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004288:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e0aa      	b.n	80043e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800428e:	897b      	ldrh	r3, [r7, #10]
 8004290:	b2db      	uxtb	r3, r3
 8004292:	461a      	mov	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800429c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800429e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a0:	6a3a      	ldr	r2, [r7, #32]
 80042a2:	4952      	ldr	r1, [pc, #328]	; (80043ec <I2C_RequestMemoryRead+0x1cc>)
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	f000 f8fa 	bl	800449e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d001      	beq.n	80042b4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e097      	b.n	80043e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042b4:	2300      	movs	r3, #0
 80042b6:	617b      	str	r3, [r7, #20]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	617b      	str	r3, [r7, #20]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	617b      	str	r3, [r7, #20]
 80042c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042cc:	6a39      	ldr	r1, [r7, #32]
 80042ce:	68f8      	ldr	r0, [r7, #12]
 80042d0:	f000 f964 	bl	800459c <I2C_WaitOnTXEFlagUntilTimeout>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00d      	beq.n	80042f6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042de:	2b04      	cmp	r3, #4
 80042e0:	d107      	bne.n	80042f2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e076      	b.n	80043e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042f6:	88fb      	ldrh	r3, [r7, #6]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d105      	bne.n	8004308 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042fc:	893b      	ldrh	r3, [r7, #8]
 80042fe:	b2da      	uxtb	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	611a      	str	r2, [r3, #16]
 8004306:	e021      	b.n	800434c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004308:	893b      	ldrh	r3, [r7, #8]
 800430a:	0a1b      	lsrs	r3, r3, #8
 800430c:	b29b      	uxth	r3, r3
 800430e:	b2da      	uxtb	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004318:	6a39      	ldr	r1, [r7, #32]
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f000 f93e 	bl	800459c <I2C_WaitOnTXEFlagUntilTimeout>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00d      	beq.n	8004342 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432a:	2b04      	cmp	r3, #4
 800432c:	d107      	bne.n	800433e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800433c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e050      	b.n	80043e4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004342:	893b      	ldrh	r3, [r7, #8]
 8004344:	b2da      	uxtb	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800434c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800434e:	6a39      	ldr	r1, [r7, #32]
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f000 f923 	bl	800459c <I2C_WaitOnTXEFlagUntilTimeout>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00d      	beq.n	8004378 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004360:	2b04      	cmp	r3, #4
 8004362:	d107      	bne.n	8004374 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004372:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e035      	b.n	80043e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004386:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438a:	9300      	str	r3, [sp, #0]
 800438c:	6a3b      	ldr	r3, [r7, #32]
 800438e:	2200      	movs	r2, #0
 8004390:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f000 f82b 	bl	80043f0 <I2C_WaitOnFlagUntilTimeout>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d00d      	beq.n	80043bc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043ae:	d103      	bne.n	80043b8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e013      	b.n	80043e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80043bc:	897b      	ldrh	r3, [r7, #10]
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	f043 0301 	orr.w	r3, r3, #1
 80043c4:	b2da      	uxtb	r2, r3
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ce:	6a3a      	ldr	r2, [r7, #32]
 80043d0:	4906      	ldr	r1, [pc, #24]	; (80043ec <I2C_RequestMemoryRead+0x1cc>)
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f000 f863 	bl	800449e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d001      	beq.n	80043e2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e000      	b.n	80043e4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3718      	adds	r7, #24
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	00010002 	.word	0x00010002

080043f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	603b      	str	r3, [r7, #0]
 80043fc:	4613      	mov	r3, r2
 80043fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004400:	e025      	b.n	800444e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004408:	d021      	beq.n	800444e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800440a:	f7fe fe99 	bl	8003140 <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	683a      	ldr	r2, [r7, #0]
 8004416:	429a      	cmp	r2, r3
 8004418:	d302      	bcc.n	8004420 <I2C_WaitOnFlagUntilTimeout+0x30>
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d116      	bne.n	800444e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2220      	movs	r2, #32
 800442a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443a:	f043 0220 	orr.w	r2, r3, #32
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e023      	b.n	8004496 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	0c1b      	lsrs	r3, r3, #16
 8004452:	b2db      	uxtb	r3, r3
 8004454:	2b01      	cmp	r3, #1
 8004456:	d10d      	bne.n	8004474 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	43da      	mvns	r2, r3
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	4013      	ands	r3, r2
 8004464:	b29b      	uxth	r3, r3
 8004466:	2b00      	cmp	r3, #0
 8004468:	bf0c      	ite	eq
 800446a:	2301      	moveq	r3, #1
 800446c:	2300      	movne	r3, #0
 800446e:	b2db      	uxtb	r3, r3
 8004470:	461a      	mov	r2, r3
 8004472:	e00c      	b.n	800448e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	43da      	mvns	r2, r3
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	4013      	ands	r3, r2
 8004480:	b29b      	uxth	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	bf0c      	ite	eq
 8004486:	2301      	moveq	r3, #1
 8004488:	2300      	movne	r3, #0
 800448a:	b2db      	uxtb	r3, r3
 800448c:	461a      	mov	r2, r3
 800448e:	79fb      	ldrb	r3, [r7, #7]
 8004490:	429a      	cmp	r2, r3
 8004492:	d0b6      	beq.n	8004402 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800449e:	b580      	push	{r7, lr}
 80044a0:	b084      	sub	sp, #16
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	60f8      	str	r0, [r7, #12]
 80044a6:	60b9      	str	r1, [r7, #8]
 80044a8:	607a      	str	r2, [r7, #4]
 80044aa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044ac:	e051      	b.n	8004552 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	695b      	ldr	r3, [r3, #20]
 80044b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044bc:	d123      	bne.n	8004506 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044cc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044d6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2200      	movs	r2, #0
 80044dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2220      	movs	r2, #32
 80044e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f2:	f043 0204 	orr.w	r2, r3, #4
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e046      	b.n	8004594 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800450c:	d021      	beq.n	8004552 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800450e:	f7fe fe17 	bl	8003140 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	429a      	cmp	r2, r3
 800451c:	d302      	bcc.n	8004524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d116      	bne.n	8004552 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2220      	movs	r2, #32
 800452e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453e:	f043 0220 	orr.w	r2, r3, #32
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e020      	b.n	8004594 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	0c1b      	lsrs	r3, r3, #16
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b01      	cmp	r3, #1
 800455a:	d10c      	bne.n	8004576 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	43da      	mvns	r2, r3
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	4013      	ands	r3, r2
 8004568:	b29b      	uxth	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	bf14      	ite	ne
 800456e:	2301      	movne	r3, #1
 8004570:	2300      	moveq	r3, #0
 8004572:	b2db      	uxtb	r3, r3
 8004574:	e00b      	b.n	800458e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	43da      	mvns	r2, r3
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	4013      	ands	r3, r2
 8004582:	b29b      	uxth	r3, r3
 8004584:	2b00      	cmp	r3, #0
 8004586:	bf14      	ite	ne
 8004588:	2301      	movne	r3, #1
 800458a:	2300      	moveq	r3, #0
 800458c:	b2db      	uxtb	r3, r3
 800458e:	2b00      	cmp	r3, #0
 8004590:	d18d      	bne.n	80044ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3710      	adds	r7, #16
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045a8:	e02d      	b.n	8004606 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f000 f8ce 	bl	800474c <I2C_IsAcknowledgeFailed>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d001      	beq.n	80045ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e02d      	b.n	8004616 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c0:	d021      	beq.n	8004606 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045c2:	f7fe fdbd 	bl	8003140 <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	68ba      	ldr	r2, [r7, #8]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d302      	bcc.n	80045d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d116      	bne.n	8004606 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2220      	movs	r2, #32
 80045e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f2:	f043 0220 	orr.w	r2, r3, #32
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e007      	b.n	8004616 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	695b      	ldr	r3, [r3, #20]
 800460c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004610:	2b80      	cmp	r3, #128	; 0x80
 8004612:	d1ca      	bne.n	80045aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3710      	adds	r7, #16
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}

0800461e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800461e:	b580      	push	{r7, lr}
 8004620:	b084      	sub	sp, #16
 8004622:	af00      	add	r7, sp, #0
 8004624:	60f8      	str	r0, [r7, #12]
 8004626:	60b9      	str	r1, [r7, #8]
 8004628:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800462a:	e02d      	b.n	8004688 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f000 f88d 	bl	800474c <I2C_IsAcknowledgeFailed>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d001      	beq.n	800463c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e02d      	b.n	8004698 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004642:	d021      	beq.n	8004688 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004644:	f7fe fd7c 	bl	8003140 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	68ba      	ldr	r2, [r7, #8]
 8004650:	429a      	cmp	r2, r3
 8004652:	d302      	bcc.n	800465a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d116      	bne.n	8004688 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2220      	movs	r2, #32
 8004664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004674:	f043 0220 	orr.w	r2, r3, #32
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2200      	movs	r2, #0
 8004680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e007      	b.n	8004698 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	f003 0304 	and.w	r3, r3, #4
 8004692:	2b04      	cmp	r3, #4
 8004694:	d1ca      	bne.n	800462c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004696:	2300      	movs	r3, #0
}
 8004698:	4618      	mov	r0, r3
 800469a:	3710      	adds	r7, #16
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046ac:	e042      	b.n	8004734 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	695b      	ldr	r3, [r3, #20]
 80046b4:	f003 0310 	and.w	r3, r3, #16
 80046b8:	2b10      	cmp	r3, #16
 80046ba:	d119      	bne.n	80046f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f06f 0210 	mvn.w	r2, #16
 80046c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2220      	movs	r2, #32
 80046d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e029      	b.n	8004744 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046f0:	f7fe fd26 	bl	8003140 <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	68ba      	ldr	r2, [r7, #8]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d302      	bcc.n	8004706 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d116      	bne.n	8004734 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2220      	movs	r2, #32
 8004710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004720:	f043 0220 	orr.w	r2, r3, #32
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e007      	b.n	8004744 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	695b      	ldr	r3, [r3, #20]
 800473a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800473e:	2b40      	cmp	r3, #64	; 0x40
 8004740:	d1b5      	bne.n	80046ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3710      	adds	r7, #16
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800475e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004762:	d11b      	bne.n	800479c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800476c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2220      	movs	r2, #32
 8004778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004788:	f043 0204 	orr.w	r2, r3, #4
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e000      	b.n	800479e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	370c      	adds	r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr

080047aa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80047aa:	b480      	push	{r7}
 80047ac:	b083      	sub	sp, #12
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
 80047b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	2b20      	cmp	r3, #32
 80047be:	d129      	bne.n	8004814 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2224      	movs	r2, #36	; 0x24
 80047c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f022 0201 	bic.w	r2, r2, #1
 80047d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f022 0210 	bic.w	r2, r2, #16
 80047e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	683a      	ldr	r2, [r7, #0]
 80047f4:	430a      	orrs	r2, r1
 80047f6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f042 0201 	orr.w	r2, r2, #1
 8004806:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2220      	movs	r2, #32
 800480c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004810:	2300      	movs	r3, #0
 8004812:	e000      	b.n	8004816 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004814:	2302      	movs	r3, #2
  }
}
 8004816:	4618      	mov	r0, r3
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr

08004822 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004822:	b480      	push	{r7}
 8004824:	b085      	sub	sp, #20
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
 800482a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800482c:	2300      	movs	r3, #0
 800482e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004836:	b2db      	uxtb	r3, r3
 8004838:	2b20      	cmp	r3, #32
 800483a:	d12a      	bne.n	8004892 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2224      	movs	r2, #36	; 0x24
 8004840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f022 0201 	bic.w	r2, r2, #1
 8004852:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800485c:	89fb      	ldrh	r3, [r7, #14]
 800485e:	f023 030f 	bic.w	r3, r3, #15
 8004862:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	b29a      	uxth	r2, r3
 8004868:	89fb      	ldrh	r3, [r7, #14]
 800486a:	4313      	orrs	r3, r2
 800486c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	89fa      	ldrh	r2, [r7, #14]
 8004874:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f042 0201 	orr.w	r2, r2, #1
 8004884:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2220      	movs	r2, #32
 800488a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800488e:	2300      	movs	r3, #0
 8004890:	e000      	b.n	8004894 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004892:	2302      	movs	r3, #2
  }
}
 8004894:	4618      	mov	r0, r3
 8004896:	3714      	adds	r7, #20
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80048a6:	2300      	movs	r3, #0
 80048a8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80048aa:	2300      	movs	r3, #0
 80048ac:	603b      	str	r3, [r7, #0]
 80048ae:	4b20      	ldr	r3, [pc, #128]	; (8004930 <HAL_PWREx_EnableOverDrive+0x90>)
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	4a1f      	ldr	r2, [pc, #124]	; (8004930 <HAL_PWREx_EnableOverDrive+0x90>)
 80048b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048b8:	6413      	str	r3, [r2, #64]	; 0x40
 80048ba:	4b1d      	ldr	r3, [pc, #116]	; (8004930 <HAL_PWREx_EnableOverDrive+0x90>)
 80048bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c2:	603b      	str	r3, [r7, #0]
 80048c4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80048c6:	4b1b      	ldr	r3, [pc, #108]	; (8004934 <HAL_PWREx_EnableOverDrive+0x94>)
 80048c8:	2201      	movs	r2, #1
 80048ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048cc:	f7fe fc38 	bl	8003140 <HAL_GetTick>
 80048d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80048d2:	e009      	b.n	80048e8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80048d4:	f7fe fc34 	bl	8003140 <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048e2:	d901      	bls.n	80048e8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e01f      	b.n	8004928 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80048e8:	4b13      	ldr	r3, [pc, #76]	; (8004938 <HAL_PWREx_EnableOverDrive+0x98>)
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048f4:	d1ee      	bne.n	80048d4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80048f6:	4b11      	ldr	r3, [pc, #68]	; (800493c <HAL_PWREx_EnableOverDrive+0x9c>)
 80048f8:	2201      	movs	r2, #1
 80048fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048fc:	f7fe fc20 	bl	8003140 <HAL_GetTick>
 8004900:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004902:	e009      	b.n	8004918 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004904:	f7fe fc1c 	bl	8003140 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004912:	d901      	bls.n	8004918 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e007      	b.n	8004928 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004918:	4b07      	ldr	r3, [pc, #28]	; (8004938 <HAL_PWREx_EnableOverDrive+0x98>)
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004920:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004924:	d1ee      	bne.n	8004904 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3708      	adds	r7, #8
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	40023800 	.word	0x40023800
 8004934:	420e0040 	.word	0x420e0040
 8004938:	40007000 	.word	0x40007000
 800493c:	420e0044 	.word	0x420e0044

08004940 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b086      	sub	sp, #24
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e267      	b.n	8004e22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b00      	cmp	r3, #0
 800495c:	d075      	beq.n	8004a4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800495e:	4b88      	ldr	r3, [pc, #544]	; (8004b80 <HAL_RCC_OscConfig+0x240>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f003 030c 	and.w	r3, r3, #12
 8004966:	2b04      	cmp	r3, #4
 8004968:	d00c      	beq.n	8004984 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800496a:	4b85      	ldr	r3, [pc, #532]	; (8004b80 <HAL_RCC_OscConfig+0x240>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004972:	2b08      	cmp	r3, #8
 8004974:	d112      	bne.n	800499c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004976:	4b82      	ldr	r3, [pc, #520]	; (8004b80 <HAL_RCC_OscConfig+0x240>)
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800497e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004982:	d10b      	bne.n	800499c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004984:	4b7e      	ldr	r3, [pc, #504]	; (8004b80 <HAL_RCC_OscConfig+0x240>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d05b      	beq.n	8004a48 <HAL_RCC_OscConfig+0x108>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d157      	bne.n	8004a48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e242      	b.n	8004e22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049a4:	d106      	bne.n	80049b4 <HAL_RCC_OscConfig+0x74>
 80049a6:	4b76      	ldr	r3, [pc, #472]	; (8004b80 <HAL_RCC_OscConfig+0x240>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a75      	ldr	r2, [pc, #468]	; (8004b80 <HAL_RCC_OscConfig+0x240>)
 80049ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049b0:	6013      	str	r3, [r2, #0]
 80049b2:	e01d      	b.n	80049f0 <HAL_RCC_OscConfig+0xb0>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049bc:	d10c      	bne.n	80049d8 <HAL_RCC_OscConfig+0x98>
 80049be:	4b70      	ldr	r3, [pc, #448]	; (8004b80 <HAL_RCC_OscConfig+0x240>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a6f      	ldr	r2, [pc, #444]	; (8004b80 <HAL_RCC_OscConfig+0x240>)
 80049c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049c8:	6013      	str	r3, [r2, #0]
 80049ca:	4b6d      	ldr	r3, [pc, #436]	; (8004b80 <HAL_RCC_OscConfig+0x240>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a6c      	ldr	r2, [pc, #432]	; (8004b80 <HAL_RCC_OscConfig+0x240>)
 80049d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049d4:	6013      	str	r3, [r2, #0]
 80049d6:	e00b      	b.n	80049f0 <HAL_RCC_OscConfig+0xb0>
 80049d8:	4b69      	ldr	r3, [pc, #420]	; (8004b80 <HAL_RCC_OscConfig+0x240>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a68      	ldr	r2, [pc, #416]	; (8004b80 <HAL_RCC_OscConfig+0x240>)
 80049de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049e2:	6013      	str	r3, [r2, #0]
 80049e4:	4b66      	ldr	r3, [pc, #408]	; (8004b80 <HAL_RCC_OscConfig+0x240>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a65      	ldr	r2, [pc, #404]	; (8004b80 <HAL_RCC_OscConfig+0x240>)
 80049ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d013      	beq.n	8004a20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f8:	f7fe fba2 	bl	8003140 <HAL_GetTick>
 80049fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049fe:	e008      	b.n	8004a12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a00:	f7fe fb9e 	bl	8003140 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b64      	cmp	r3, #100	; 0x64
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e207      	b.n	8004e22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a12:	4b5b      	ldr	r3, [pc, #364]	; (8004b80 <HAL_RCC_OscConfig+0x240>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d0f0      	beq.n	8004a00 <HAL_RCC_OscConfig+0xc0>
 8004a1e:	e014      	b.n	8004a4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a20:	f7fe fb8e 	bl	8003140 <HAL_GetTick>
 8004a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a26:	e008      	b.n	8004a3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a28:	f7fe fb8a 	bl	8003140 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	2b64      	cmp	r3, #100	; 0x64
 8004a34:	d901      	bls.n	8004a3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e1f3      	b.n	8004e22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a3a:	4b51      	ldr	r3, [pc, #324]	; (8004b80 <HAL_RCC_OscConfig+0x240>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1f0      	bne.n	8004a28 <HAL_RCC_OscConfig+0xe8>
 8004a46:	e000      	b.n	8004a4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d063      	beq.n	8004b1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a56:	4b4a      	ldr	r3, [pc, #296]	; (8004b80 <HAL_RCC_OscConfig+0x240>)
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f003 030c 	and.w	r3, r3, #12
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00b      	beq.n	8004a7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a62:	4b47      	ldr	r3, [pc, #284]	; (8004b80 <HAL_RCC_OscConfig+0x240>)
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a6a:	2b08      	cmp	r3, #8
 8004a6c:	d11c      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a6e:	4b44      	ldr	r3, [pc, #272]	; (8004b80 <HAL_RCC_OscConfig+0x240>)
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d116      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a7a:	4b41      	ldr	r3, [pc, #260]	; (8004b80 <HAL_RCC_OscConfig+0x240>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d005      	beq.n	8004a92 <HAL_RCC_OscConfig+0x152>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d001      	beq.n	8004a92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e1c7      	b.n	8004e22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a92:	4b3b      	ldr	r3, [pc, #236]	; (8004b80 <HAL_RCC_OscConfig+0x240>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	00db      	lsls	r3, r3, #3
 8004aa0:	4937      	ldr	r1, [pc, #220]	; (8004b80 <HAL_RCC_OscConfig+0x240>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aa6:	e03a      	b.n	8004b1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d020      	beq.n	8004af2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ab0:	4b34      	ldr	r3, [pc, #208]	; (8004b84 <HAL_RCC_OscConfig+0x244>)
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab6:	f7fe fb43 	bl	8003140 <HAL_GetTick>
 8004aba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004abc:	e008      	b.n	8004ad0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004abe:	f7fe fb3f 	bl	8003140 <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d901      	bls.n	8004ad0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e1a8      	b.n	8004e22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ad0:	4b2b      	ldr	r3, [pc, #172]	; (8004b80 <HAL_RCC_OscConfig+0x240>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0302 	and.w	r3, r3, #2
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d0f0      	beq.n	8004abe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004adc:	4b28      	ldr	r3, [pc, #160]	; (8004b80 <HAL_RCC_OscConfig+0x240>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	00db      	lsls	r3, r3, #3
 8004aea:	4925      	ldr	r1, [pc, #148]	; (8004b80 <HAL_RCC_OscConfig+0x240>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	600b      	str	r3, [r1, #0]
 8004af0:	e015      	b.n	8004b1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004af2:	4b24      	ldr	r3, [pc, #144]	; (8004b84 <HAL_RCC_OscConfig+0x244>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af8:	f7fe fb22 	bl	8003140 <HAL_GetTick>
 8004afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004afe:	e008      	b.n	8004b12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b00:	f7fe fb1e 	bl	8003140 <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e187      	b.n	8004e22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b12:	4b1b      	ldr	r3, [pc, #108]	; (8004b80 <HAL_RCC_OscConfig+0x240>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1f0      	bne.n	8004b00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0308 	and.w	r3, r3, #8
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d036      	beq.n	8004b98 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d016      	beq.n	8004b60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b32:	4b15      	ldr	r3, [pc, #84]	; (8004b88 <HAL_RCC_OscConfig+0x248>)
 8004b34:	2201      	movs	r2, #1
 8004b36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b38:	f7fe fb02 	bl	8003140 <HAL_GetTick>
 8004b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b3e:	e008      	b.n	8004b52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b40:	f7fe fafe 	bl	8003140 <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d901      	bls.n	8004b52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e167      	b.n	8004e22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b52:	4b0b      	ldr	r3, [pc, #44]	; (8004b80 <HAL_RCC_OscConfig+0x240>)
 8004b54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d0f0      	beq.n	8004b40 <HAL_RCC_OscConfig+0x200>
 8004b5e:	e01b      	b.n	8004b98 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b60:	4b09      	ldr	r3, [pc, #36]	; (8004b88 <HAL_RCC_OscConfig+0x248>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b66:	f7fe faeb 	bl	8003140 <HAL_GetTick>
 8004b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b6c:	e00e      	b.n	8004b8c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b6e:	f7fe fae7 	bl	8003140 <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d907      	bls.n	8004b8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e150      	b.n	8004e22 <HAL_RCC_OscConfig+0x4e2>
 8004b80:	40023800 	.word	0x40023800
 8004b84:	42470000 	.word	0x42470000
 8004b88:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b8c:	4b88      	ldr	r3, [pc, #544]	; (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004b8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b90:	f003 0302 	and.w	r3, r3, #2
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d1ea      	bne.n	8004b6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0304 	and.w	r3, r3, #4
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f000 8097 	beq.w	8004cd4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004baa:	4b81      	ldr	r3, [pc, #516]	; (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d10f      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	60bb      	str	r3, [r7, #8]
 8004bba:	4b7d      	ldr	r3, [pc, #500]	; (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbe:	4a7c      	ldr	r2, [pc, #496]	; (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8004bc6:	4b7a      	ldr	r3, [pc, #488]	; (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bce:	60bb      	str	r3, [r7, #8]
 8004bd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bd6:	4b77      	ldr	r3, [pc, #476]	; (8004db4 <HAL_RCC_OscConfig+0x474>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d118      	bne.n	8004c14 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004be2:	4b74      	ldr	r3, [pc, #464]	; (8004db4 <HAL_RCC_OscConfig+0x474>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a73      	ldr	r2, [pc, #460]	; (8004db4 <HAL_RCC_OscConfig+0x474>)
 8004be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bee:	f7fe faa7 	bl	8003140 <HAL_GetTick>
 8004bf2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bf4:	e008      	b.n	8004c08 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bf6:	f7fe faa3 	bl	8003140 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d901      	bls.n	8004c08 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e10c      	b.n	8004e22 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c08:	4b6a      	ldr	r3, [pc, #424]	; (8004db4 <HAL_RCC_OscConfig+0x474>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d0f0      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d106      	bne.n	8004c2a <HAL_RCC_OscConfig+0x2ea>
 8004c1c:	4b64      	ldr	r3, [pc, #400]	; (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c20:	4a63      	ldr	r2, [pc, #396]	; (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004c22:	f043 0301 	orr.w	r3, r3, #1
 8004c26:	6713      	str	r3, [r2, #112]	; 0x70
 8004c28:	e01c      	b.n	8004c64 <HAL_RCC_OscConfig+0x324>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	2b05      	cmp	r3, #5
 8004c30:	d10c      	bne.n	8004c4c <HAL_RCC_OscConfig+0x30c>
 8004c32:	4b5f      	ldr	r3, [pc, #380]	; (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c36:	4a5e      	ldr	r2, [pc, #376]	; (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004c38:	f043 0304 	orr.w	r3, r3, #4
 8004c3c:	6713      	str	r3, [r2, #112]	; 0x70
 8004c3e:	4b5c      	ldr	r3, [pc, #368]	; (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c42:	4a5b      	ldr	r2, [pc, #364]	; (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004c44:	f043 0301 	orr.w	r3, r3, #1
 8004c48:	6713      	str	r3, [r2, #112]	; 0x70
 8004c4a:	e00b      	b.n	8004c64 <HAL_RCC_OscConfig+0x324>
 8004c4c:	4b58      	ldr	r3, [pc, #352]	; (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c50:	4a57      	ldr	r2, [pc, #348]	; (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004c52:	f023 0301 	bic.w	r3, r3, #1
 8004c56:	6713      	str	r3, [r2, #112]	; 0x70
 8004c58:	4b55      	ldr	r3, [pc, #340]	; (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c5c:	4a54      	ldr	r2, [pc, #336]	; (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004c5e:	f023 0304 	bic.w	r3, r3, #4
 8004c62:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d015      	beq.n	8004c98 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c6c:	f7fe fa68 	bl	8003140 <HAL_GetTick>
 8004c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c72:	e00a      	b.n	8004c8a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c74:	f7fe fa64 	bl	8003140 <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d901      	bls.n	8004c8a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e0cb      	b.n	8004e22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c8a:	4b49      	ldr	r3, [pc, #292]	; (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c8e:	f003 0302 	and.w	r3, r3, #2
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d0ee      	beq.n	8004c74 <HAL_RCC_OscConfig+0x334>
 8004c96:	e014      	b.n	8004cc2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c98:	f7fe fa52 	bl	8003140 <HAL_GetTick>
 8004c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c9e:	e00a      	b.n	8004cb6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ca0:	f7fe fa4e 	bl	8003140 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e0b5      	b.n	8004e22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cb6:	4b3e      	ldr	r3, [pc, #248]	; (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1ee      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cc2:	7dfb      	ldrb	r3, [r7, #23]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d105      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cc8:	4b39      	ldr	r3, [pc, #228]	; (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ccc:	4a38      	ldr	r2, [pc, #224]	; (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004cce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cd2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	699b      	ldr	r3, [r3, #24]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f000 80a1 	beq.w	8004e20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004cde:	4b34      	ldr	r3, [pc, #208]	; (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f003 030c 	and.w	r3, r3, #12
 8004ce6:	2b08      	cmp	r3, #8
 8004ce8:	d05c      	beq.n	8004da4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d141      	bne.n	8004d76 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cf2:	4b31      	ldr	r3, [pc, #196]	; (8004db8 <HAL_RCC_OscConfig+0x478>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cf8:	f7fe fa22 	bl	8003140 <HAL_GetTick>
 8004cfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cfe:	e008      	b.n	8004d12 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d00:	f7fe fa1e 	bl	8003140 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e087      	b.n	8004e22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d12:	4b27      	ldr	r3, [pc, #156]	; (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d1f0      	bne.n	8004d00 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	69da      	ldr	r2, [r3, #28]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	431a      	orrs	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2c:	019b      	lsls	r3, r3, #6
 8004d2e:	431a      	orrs	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d34:	085b      	lsrs	r3, r3, #1
 8004d36:	3b01      	subs	r3, #1
 8004d38:	041b      	lsls	r3, r3, #16
 8004d3a:	431a      	orrs	r2, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d40:	061b      	lsls	r3, r3, #24
 8004d42:	491b      	ldr	r1, [pc, #108]	; (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d48:	4b1b      	ldr	r3, [pc, #108]	; (8004db8 <HAL_RCC_OscConfig+0x478>)
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d4e:	f7fe f9f7 	bl	8003140 <HAL_GetTick>
 8004d52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d54:	e008      	b.n	8004d68 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d56:	f7fe f9f3 	bl	8003140 <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d901      	bls.n	8004d68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e05c      	b.n	8004e22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d68:	4b11      	ldr	r3, [pc, #68]	; (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d0f0      	beq.n	8004d56 <HAL_RCC_OscConfig+0x416>
 8004d74:	e054      	b.n	8004e20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d76:	4b10      	ldr	r3, [pc, #64]	; (8004db8 <HAL_RCC_OscConfig+0x478>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d7c:	f7fe f9e0 	bl	8003140 <HAL_GetTick>
 8004d80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d82:	e008      	b.n	8004d96 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d84:	f7fe f9dc 	bl	8003140 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d901      	bls.n	8004d96 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e045      	b.n	8004e22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d96:	4b06      	ldr	r3, [pc, #24]	; (8004db0 <HAL_RCC_OscConfig+0x470>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1f0      	bne.n	8004d84 <HAL_RCC_OscConfig+0x444>
 8004da2:	e03d      	b.n	8004e20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d107      	bne.n	8004dbc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e038      	b.n	8004e22 <HAL_RCC_OscConfig+0x4e2>
 8004db0:	40023800 	.word	0x40023800
 8004db4:	40007000 	.word	0x40007000
 8004db8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004dbc:	4b1b      	ldr	r3, [pc, #108]	; (8004e2c <HAL_RCC_OscConfig+0x4ec>)
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d028      	beq.n	8004e1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d121      	bne.n	8004e1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d11a      	bne.n	8004e1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004dec:	4013      	ands	r3, r2
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004df2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d111      	bne.n	8004e1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e02:	085b      	lsrs	r3, r3, #1
 8004e04:	3b01      	subs	r3, #1
 8004e06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d107      	bne.n	8004e1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d001      	beq.n	8004e20 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e000      	b.n	8004e22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3718      	adds	r7, #24
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	40023800 	.word	0x40023800

08004e30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d101      	bne.n	8004e44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e0cc      	b.n	8004fde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e44:	4b68      	ldr	r3, [pc, #416]	; (8004fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 030f 	and.w	r3, r3, #15
 8004e4c:	683a      	ldr	r2, [r7, #0]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d90c      	bls.n	8004e6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e52:	4b65      	ldr	r3, [pc, #404]	; (8004fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e54:	683a      	ldr	r2, [r7, #0]
 8004e56:	b2d2      	uxtb	r2, r2
 8004e58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e5a:	4b63      	ldr	r3, [pc, #396]	; (8004fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 030f 	and.w	r3, r3, #15
 8004e62:	683a      	ldr	r2, [r7, #0]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d001      	beq.n	8004e6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e0b8      	b.n	8004fde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0302 	and.w	r3, r3, #2
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d020      	beq.n	8004eba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0304 	and.w	r3, r3, #4
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d005      	beq.n	8004e90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e84:	4b59      	ldr	r3, [pc, #356]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	4a58      	ldr	r2, [pc, #352]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004e8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0308 	and.w	r3, r3, #8
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d005      	beq.n	8004ea8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e9c:	4b53      	ldr	r3, [pc, #332]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	4a52      	ldr	r2, [pc, #328]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004ea2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ea6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ea8:	4b50      	ldr	r3, [pc, #320]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	494d      	ldr	r1, [pc, #308]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d044      	beq.n	8004f50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d107      	bne.n	8004ede <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ece:	4b47      	ldr	r3, [pc, #284]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d119      	bne.n	8004f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e07f      	b.n	8004fde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d003      	beq.n	8004eee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004eea:	2b03      	cmp	r3, #3
 8004eec:	d107      	bne.n	8004efe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eee:	4b3f      	ldr	r3, [pc, #252]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d109      	bne.n	8004f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e06f      	b.n	8004fde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004efe:	4b3b      	ldr	r3, [pc, #236]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0302 	and.w	r3, r3, #2
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d101      	bne.n	8004f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e067      	b.n	8004fde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f0e:	4b37      	ldr	r3, [pc, #220]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f023 0203 	bic.w	r2, r3, #3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	4934      	ldr	r1, [pc, #208]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f20:	f7fe f90e 	bl	8003140 <HAL_GetTick>
 8004f24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f26:	e00a      	b.n	8004f3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f28:	f7fe f90a 	bl	8003140 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d901      	bls.n	8004f3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e04f      	b.n	8004fde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f3e:	4b2b      	ldr	r3, [pc, #172]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f003 020c 	and.w	r2, r3, #12
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d1eb      	bne.n	8004f28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f50:	4b25      	ldr	r3, [pc, #148]	; (8004fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 030f 	and.w	r3, r3, #15
 8004f58:	683a      	ldr	r2, [r7, #0]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d20c      	bcs.n	8004f78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f5e:	4b22      	ldr	r3, [pc, #136]	; (8004fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f60:	683a      	ldr	r2, [r7, #0]
 8004f62:	b2d2      	uxtb	r2, r2
 8004f64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f66:	4b20      	ldr	r3, [pc, #128]	; (8004fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 030f 	and.w	r3, r3, #15
 8004f6e:	683a      	ldr	r2, [r7, #0]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d001      	beq.n	8004f78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e032      	b.n	8004fde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0304 	and.w	r3, r3, #4
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d008      	beq.n	8004f96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f84:	4b19      	ldr	r3, [pc, #100]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	4916      	ldr	r1, [pc, #88]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0308 	and.w	r3, r3, #8
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d009      	beq.n	8004fb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fa2:	4b12      	ldr	r3, [pc, #72]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	00db      	lsls	r3, r3, #3
 8004fb0:	490e      	ldr	r1, [pc, #56]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004fb6:	f000 f821 	bl	8004ffc <HAL_RCC_GetSysClockFreq>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	4b0b      	ldr	r3, [pc, #44]	; (8004fec <HAL_RCC_ClockConfig+0x1bc>)
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	091b      	lsrs	r3, r3, #4
 8004fc2:	f003 030f 	and.w	r3, r3, #15
 8004fc6:	490a      	ldr	r1, [pc, #40]	; (8004ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8004fc8:	5ccb      	ldrb	r3, [r1, r3]
 8004fca:	fa22 f303 	lsr.w	r3, r2, r3
 8004fce:	4a09      	ldr	r2, [pc, #36]	; (8004ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8004fd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004fd2:	4b09      	ldr	r3, [pc, #36]	; (8004ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7fe f86e 	bl	80030b8 <HAL_InitTick>

  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3710      	adds	r7, #16
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	40023c00 	.word	0x40023c00
 8004fec:	40023800 	.word	0x40023800
 8004ff0:	0800d4d8 	.word	0x0800d4d8
 8004ff4:	20000000 	.word	0x20000000
 8004ff8:	20000004 	.word	0x20000004

08004ffc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ffc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005000:	b090      	sub	sp, #64	; 0x40
 8005002:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005004:	2300      	movs	r3, #0
 8005006:	637b      	str	r3, [r7, #52]	; 0x34
 8005008:	2300      	movs	r3, #0
 800500a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800500c:	2300      	movs	r3, #0
 800500e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005010:	2300      	movs	r3, #0
 8005012:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005014:	4b59      	ldr	r3, [pc, #356]	; (800517c <HAL_RCC_GetSysClockFreq+0x180>)
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f003 030c 	and.w	r3, r3, #12
 800501c:	2b08      	cmp	r3, #8
 800501e:	d00d      	beq.n	800503c <HAL_RCC_GetSysClockFreq+0x40>
 8005020:	2b08      	cmp	r3, #8
 8005022:	f200 80a1 	bhi.w	8005168 <HAL_RCC_GetSysClockFreq+0x16c>
 8005026:	2b00      	cmp	r3, #0
 8005028:	d002      	beq.n	8005030 <HAL_RCC_GetSysClockFreq+0x34>
 800502a:	2b04      	cmp	r3, #4
 800502c:	d003      	beq.n	8005036 <HAL_RCC_GetSysClockFreq+0x3a>
 800502e:	e09b      	b.n	8005168 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005030:	4b53      	ldr	r3, [pc, #332]	; (8005180 <HAL_RCC_GetSysClockFreq+0x184>)
 8005032:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005034:	e09b      	b.n	800516e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005036:	4b53      	ldr	r3, [pc, #332]	; (8005184 <HAL_RCC_GetSysClockFreq+0x188>)
 8005038:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800503a:	e098      	b.n	800516e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800503c:	4b4f      	ldr	r3, [pc, #316]	; (800517c <HAL_RCC_GetSysClockFreq+0x180>)
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005044:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005046:	4b4d      	ldr	r3, [pc, #308]	; (800517c <HAL_RCC_GetSysClockFreq+0x180>)
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800504e:	2b00      	cmp	r3, #0
 8005050:	d028      	beq.n	80050a4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005052:	4b4a      	ldr	r3, [pc, #296]	; (800517c <HAL_RCC_GetSysClockFreq+0x180>)
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	099b      	lsrs	r3, r3, #6
 8005058:	2200      	movs	r2, #0
 800505a:	623b      	str	r3, [r7, #32]
 800505c:	627a      	str	r2, [r7, #36]	; 0x24
 800505e:	6a3b      	ldr	r3, [r7, #32]
 8005060:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005064:	2100      	movs	r1, #0
 8005066:	4b47      	ldr	r3, [pc, #284]	; (8005184 <HAL_RCC_GetSysClockFreq+0x188>)
 8005068:	fb03 f201 	mul.w	r2, r3, r1
 800506c:	2300      	movs	r3, #0
 800506e:	fb00 f303 	mul.w	r3, r0, r3
 8005072:	4413      	add	r3, r2
 8005074:	4a43      	ldr	r2, [pc, #268]	; (8005184 <HAL_RCC_GetSysClockFreq+0x188>)
 8005076:	fba0 1202 	umull	r1, r2, r0, r2
 800507a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800507c:	460a      	mov	r2, r1
 800507e:	62ba      	str	r2, [r7, #40]	; 0x28
 8005080:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005082:	4413      	add	r3, r2
 8005084:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005088:	2200      	movs	r2, #0
 800508a:	61bb      	str	r3, [r7, #24]
 800508c:	61fa      	str	r2, [r7, #28]
 800508e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005092:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005096:	f7fb fe07 	bl	8000ca8 <__aeabi_uldivmod>
 800509a:	4602      	mov	r2, r0
 800509c:	460b      	mov	r3, r1
 800509e:	4613      	mov	r3, r2
 80050a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050a2:	e053      	b.n	800514c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050a4:	4b35      	ldr	r3, [pc, #212]	; (800517c <HAL_RCC_GetSysClockFreq+0x180>)
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	099b      	lsrs	r3, r3, #6
 80050aa:	2200      	movs	r2, #0
 80050ac:	613b      	str	r3, [r7, #16]
 80050ae:	617a      	str	r2, [r7, #20]
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80050b6:	f04f 0b00 	mov.w	fp, #0
 80050ba:	4652      	mov	r2, sl
 80050bc:	465b      	mov	r3, fp
 80050be:	f04f 0000 	mov.w	r0, #0
 80050c2:	f04f 0100 	mov.w	r1, #0
 80050c6:	0159      	lsls	r1, r3, #5
 80050c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050cc:	0150      	lsls	r0, r2, #5
 80050ce:	4602      	mov	r2, r0
 80050d0:	460b      	mov	r3, r1
 80050d2:	ebb2 080a 	subs.w	r8, r2, sl
 80050d6:	eb63 090b 	sbc.w	r9, r3, fp
 80050da:	f04f 0200 	mov.w	r2, #0
 80050de:	f04f 0300 	mov.w	r3, #0
 80050e2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80050e6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80050ea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80050ee:	ebb2 0408 	subs.w	r4, r2, r8
 80050f2:	eb63 0509 	sbc.w	r5, r3, r9
 80050f6:	f04f 0200 	mov.w	r2, #0
 80050fa:	f04f 0300 	mov.w	r3, #0
 80050fe:	00eb      	lsls	r3, r5, #3
 8005100:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005104:	00e2      	lsls	r2, r4, #3
 8005106:	4614      	mov	r4, r2
 8005108:	461d      	mov	r5, r3
 800510a:	eb14 030a 	adds.w	r3, r4, sl
 800510e:	603b      	str	r3, [r7, #0]
 8005110:	eb45 030b 	adc.w	r3, r5, fp
 8005114:	607b      	str	r3, [r7, #4]
 8005116:	f04f 0200 	mov.w	r2, #0
 800511a:	f04f 0300 	mov.w	r3, #0
 800511e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005122:	4629      	mov	r1, r5
 8005124:	028b      	lsls	r3, r1, #10
 8005126:	4621      	mov	r1, r4
 8005128:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800512c:	4621      	mov	r1, r4
 800512e:	028a      	lsls	r2, r1, #10
 8005130:	4610      	mov	r0, r2
 8005132:	4619      	mov	r1, r3
 8005134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005136:	2200      	movs	r2, #0
 8005138:	60bb      	str	r3, [r7, #8]
 800513a:	60fa      	str	r2, [r7, #12]
 800513c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005140:	f7fb fdb2 	bl	8000ca8 <__aeabi_uldivmod>
 8005144:	4602      	mov	r2, r0
 8005146:	460b      	mov	r3, r1
 8005148:	4613      	mov	r3, r2
 800514a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800514c:	4b0b      	ldr	r3, [pc, #44]	; (800517c <HAL_RCC_GetSysClockFreq+0x180>)
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	0c1b      	lsrs	r3, r3, #16
 8005152:	f003 0303 	and.w	r3, r3, #3
 8005156:	3301      	adds	r3, #1
 8005158:	005b      	lsls	r3, r3, #1
 800515a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800515c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800515e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005160:	fbb2 f3f3 	udiv	r3, r2, r3
 8005164:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005166:	e002      	b.n	800516e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005168:	4b05      	ldr	r3, [pc, #20]	; (8005180 <HAL_RCC_GetSysClockFreq+0x184>)
 800516a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800516c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800516e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005170:	4618      	mov	r0, r3
 8005172:	3740      	adds	r7, #64	; 0x40
 8005174:	46bd      	mov	sp, r7
 8005176:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800517a:	bf00      	nop
 800517c:	40023800 	.word	0x40023800
 8005180:	00f42400 	.word	0x00f42400
 8005184:	017d7840 	.word	0x017d7840

08005188 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005188:	b480      	push	{r7}
 800518a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800518c:	4b03      	ldr	r3, [pc, #12]	; (800519c <HAL_RCC_GetHCLKFreq+0x14>)
 800518e:	681b      	ldr	r3, [r3, #0]
}
 8005190:	4618      	mov	r0, r3
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	20000000 	.word	0x20000000

080051a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80051a4:	f7ff fff0 	bl	8005188 <HAL_RCC_GetHCLKFreq>
 80051a8:	4602      	mov	r2, r0
 80051aa:	4b05      	ldr	r3, [pc, #20]	; (80051c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	0a9b      	lsrs	r3, r3, #10
 80051b0:	f003 0307 	and.w	r3, r3, #7
 80051b4:	4903      	ldr	r1, [pc, #12]	; (80051c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051b6:	5ccb      	ldrb	r3, [r1, r3]
 80051b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051bc:	4618      	mov	r0, r3
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	40023800 	.word	0x40023800
 80051c4:	0800d4e8 	.word	0x0800d4e8

080051c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80051cc:	f7ff ffdc 	bl	8005188 <HAL_RCC_GetHCLKFreq>
 80051d0:	4602      	mov	r2, r0
 80051d2:	4b05      	ldr	r3, [pc, #20]	; (80051e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	0b5b      	lsrs	r3, r3, #13
 80051d8:	f003 0307 	and.w	r3, r3, #7
 80051dc:	4903      	ldr	r1, [pc, #12]	; (80051ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80051de:	5ccb      	ldrb	r3, [r1, r3]
 80051e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	40023800 	.word	0x40023800
 80051ec:	0800d4e8 	.word	0x0800d4e8

080051f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b086      	sub	sp, #24
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80051f8:	2300      	movs	r3, #0
 80051fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80051fc:	2300      	movs	r3, #0
 80051fe:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0301 	and.w	r3, r3, #1
 8005208:	2b00      	cmp	r3, #0
 800520a:	d10b      	bne.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005214:	2b00      	cmp	r3, #0
 8005216:	d105      	bne.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005220:	2b00      	cmp	r3, #0
 8005222:	d075      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005224:	4b91      	ldr	r3, [pc, #580]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005226:	2200      	movs	r2, #0
 8005228:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800522a:	f7fd ff89 	bl	8003140 <HAL_GetTick>
 800522e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005230:	e008      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005232:	f7fd ff85 	bl	8003140 <HAL_GetTick>
 8005236:	4602      	mov	r2, r0
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	2b02      	cmp	r3, #2
 800523e:	d901      	bls.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e189      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005244:	4b8a      	ldr	r3, [pc, #552]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1f0      	bne.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0301 	and.w	r3, r3, #1
 8005258:	2b00      	cmp	r3, #0
 800525a:	d009      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	019a      	lsls	r2, r3, #6
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	071b      	lsls	r3, r3, #28
 8005268:	4981      	ldr	r1, [pc, #516]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800526a:	4313      	orrs	r3, r2
 800526c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0302 	and.w	r3, r3, #2
 8005278:	2b00      	cmp	r3, #0
 800527a:	d01f      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800527c:	4b7c      	ldr	r3, [pc, #496]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800527e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005282:	0f1b      	lsrs	r3, r3, #28
 8005284:	f003 0307 	and.w	r3, r3, #7
 8005288:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	019a      	lsls	r2, r3, #6
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	061b      	lsls	r3, r3, #24
 8005296:	431a      	orrs	r2, r3
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	071b      	lsls	r3, r3, #28
 800529c:	4974      	ldr	r1, [pc, #464]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80052a4:	4b72      	ldr	r3, [pc, #456]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052aa:	f023 021f 	bic.w	r2, r3, #31
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	69db      	ldr	r3, [r3, #28]
 80052b2:	3b01      	subs	r3, #1
 80052b4:	496e      	ldr	r1, [pc, #440]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00d      	beq.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	019a      	lsls	r2, r3, #6
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	061b      	lsls	r3, r3, #24
 80052d4:	431a      	orrs	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	071b      	lsls	r3, r3, #28
 80052dc:	4964      	ldr	r1, [pc, #400]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80052e4:	4b61      	ldr	r3, [pc, #388]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80052e6:	2201      	movs	r2, #1
 80052e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80052ea:	f7fd ff29 	bl	8003140 <HAL_GetTick>
 80052ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052f0:	e008      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80052f2:	f7fd ff25 	bl	8003140 <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d901      	bls.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e129      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005304:	4b5a      	ldr	r3, [pc, #360]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d0f0      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0304 	and.w	r3, r3, #4
 8005318:	2b00      	cmp	r3, #0
 800531a:	d105      	bne.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005324:	2b00      	cmp	r3, #0
 8005326:	d079      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005328:	4b52      	ldr	r3, [pc, #328]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800532a:	2200      	movs	r2, #0
 800532c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800532e:	f7fd ff07 	bl	8003140 <HAL_GetTick>
 8005332:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005334:	e008      	b.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005336:	f7fd ff03 	bl	8003140 <HAL_GetTick>
 800533a:	4602      	mov	r2, r0
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	2b02      	cmp	r3, #2
 8005342:	d901      	bls.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005344:	2303      	movs	r3, #3
 8005346:	e107      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005348:	4b49      	ldr	r3, [pc, #292]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005350:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005354:	d0ef      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0304 	and.w	r3, r3, #4
 800535e:	2b00      	cmp	r3, #0
 8005360:	d020      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005362:	4b43      	ldr	r3, [pc, #268]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005368:	0f1b      	lsrs	r3, r3, #28
 800536a:	f003 0307 	and.w	r3, r3, #7
 800536e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	019a      	lsls	r2, r3, #6
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	695b      	ldr	r3, [r3, #20]
 800537a:	061b      	lsls	r3, r3, #24
 800537c:	431a      	orrs	r2, r3
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	071b      	lsls	r3, r3, #28
 8005382:	493b      	ldr	r1, [pc, #236]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005384:	4313      	orrs	r3, r2
 8005386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800538a:	4b39      	ldr	r3, [pc, #228]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800538c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005390:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a1b      	ldr	r3, [r3, #32]
 8005398:	3b01      	subs	r3, #1
 800539a:	021b      	lsls	r3, r3, #8
 800539c:	4934      	ldr	r1, [pc, #208]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0308 	and.w	r3, r3, #8
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d01e      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80053b0:	4b2f      	ldr	r3, [pc, #188]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b6:	0e1b      	lsrs	r3, r3, #24
 80053b8:	f003 030f 	and.w	r3, r3, #15
 80053bc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	019a      	lsls	r2, r3, #6
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	061b      	lsls	r3, r3, #24
 80053c8:	431a      	orrs	r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	071b      	lsls	r3, r3, #28
 80053d0:	4927      	ldr	r1, [pc, #156]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80053d8:	4b25      	ldr	r3, [pc, #148]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e6:	4922      	ldr	r1, [pc, #136]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80053ee:	4b21      	ldr	r3, [pc, #132]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80053f0:	2201      	movs	r2, #1
 80053f2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80053f4:	f7fd fea4 	bl	8003140 <HAL_GetTick>
 80053f8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80053fa:	e008      	b.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80053fc:	f7fd fea0 	bl	8003140 <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	2b02      	cmp	r3, #2
 8005408:	d901      	bls.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e0a4      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800540e:	4b18      	ldr	r3, [pc, #96]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005416:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800541a:	d1ef      	bne.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0320 	and.w	r3, r3, #32
 8005424:	2b00      	cmp	r3, #0
 8005426:	f000 808b 	beq.w	8005540 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800542a:	2300      	movs	r3, #0
 800542c:	60fb      	str	r3, [r7, #12]
 800542e:	4b10      	ldr	r3, [pc, #64]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005432:	4a0f      	ldr	r2, [pc, #60]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005438:	6413      	str	r3, [r2, #64]	; 0x40
 800543a:	4b0d      	ldr	r3, [pc, #52]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800543c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005442:	60fb      	str	r3, [r7, #12]
 8005444:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005446:	4b0c      	ldr	r3, [pc, #48]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a0b      	ldr	r2, [pc, #44]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800544c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005450:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005452:	f7fd fe75 	bl	8003140 <HAL_GetTick>
 8005456:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005458:	e010      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800545a:	f7fd fe71 	bl	8003140 <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	2b02      	cmp	r3, #2
 8005466:	d909      	bls.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e075      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800546c:	42470068 	.word	0x42470068
 8005470:	40023800 	.word	0x40023800
 8005474:	42470070 	.word	0x42470070
 8005478:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800547c:	4b38      	ldr	r3, [pc, #224]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005484:	2b00      	cmp	r3, #0
 8005486:	d0e8      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005488:	4b36      	ldr	r3, [pc, #216]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800548a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800548c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005490:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d02f      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800549c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d028      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80054a6:	4b2f      	ldr	r3, [pc, #188]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054ae:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80054b0:	4b2d      	ldr	r3, [pc, #180]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80054b2:	2201      	movs	r2, #1
 80054b4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80054b6:	4b2c      	ldr	r3, [pc, #176]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80054b8:	2200      	movs	r2, #0
 80054ba:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80054bc:	4a29      	ldr	r2, [pc, #164]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80054c2:	4b28      	ldr	r3, [pc, #160]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054c6:	f003 0301 	and.w	r3, r3, #1
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d114      	bne.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80054ce:	f7fd fe37 	bl	8003140 <HAL_GetTick>
 80054d2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054d4:	e00a      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054d6:	f7fd fe33 	bl	8003140 <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d901      	bls.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80054e8:	2303      	movs	r3, #3
 80054ea:	e035      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054ec:	4b1d      	ldr	r3, [pc, #116]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054f0:	f003 0302 	and.w	r3, r3, #2
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d0ee      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005500:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005504:	d10d      	bne.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005506:	4b17      	ldr	r3, [pc, #92]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005512:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005516:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800551a:	4912      	ldr	r1, [pc, #72]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800551c:	4313      	orrs	r3, r2
 800551e:	608b      	str	r3, [r1, #8]
 8005520:	e005      	b.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005522:	4b10      	ldr	r3, [pc, #64]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	4a0f      	ldr	r2, [pc, #60]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005528:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800552c:	6093      	str	r3, [r2, #8]
 800552e:	4b0d      	ldr	r3, [pc, #52]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005530:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005536:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800553a:	490a      	ldr	r1, [pc, #40]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800553c:	4313      	orrs	r3, r2
 800553e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0310 	and.w	r3, r3, #16
 8005548:	2b00      	cmp	r3, #0
 800554a:	d004      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005552:	4b06      	ldr	r3, [pc, #24]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005554:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3718      	adds	r7, #24
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	40007000 	.word	0x40007000
 8005564:	40023800 	.word	0x40023800
 8005568:	42470e40 	.word	0x42470e40
 800556c:	424711e0 	.word	0x424711e0

08005570 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d101      	bne.n	8005586 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e066      	b.n	8005654 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	7f5b      	ldrb	r3, [r3, #29]
 800558a:	b2db      	uxtb	r3, r3
 800558c:	2b00      	cmp	r3, #0
 800558e:	d105      	bne.n	800559c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f7fc ff08 	bl	80023ac <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2202      	movs	r2, #2
 80055a0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	22ca      	movs	r2, #202	; 0xca
 80055a8:	625a      	str	r2, [r3, #36]	; 0x24
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2253      	movs	r2, #83	; 0x53
 80055b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 f87a 	bl	80056ac <RTC_EnterInitMode>
 80055b8:	4603      	mov	r3, r0
 80055ba:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80055bc:	7bfb      	ldrb	r3, [r7, #15]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d12c      	bne.n	800561c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	6812      	ldr	r2, [r2, #0]
 80055cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80055d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055d4:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	6899      	ldr	r1, [r3, #8]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685a      	ldr	r2, [r3, #4]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	431a      	orrs	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	431a      	orrs	r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	430a      	orrs	r2, r1
 80055f2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	68d2      	ldr	r2, [r2, #12]
 80055fc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	6919      	ldr	r1, [r3, #16]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	041a      	lsls	r2, r3, #16
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	430a      	orrs	r2, r1
 8005610:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 f881 	bl	800571a <RTC_ExitInitMode>
 8005618:	4603      	mov	r3, r0
 800561a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800561c:	7bfb      	ldrb	r3, [r7, #15]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d113      	bne.n	800564a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005630:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	699a      	ldr	r2, [r3, #24]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	430a      	orrs	r2, r1
 8005642:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	22ff      	movs	r2, #255	; 0xff
 8005650:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005652:	7bfb      	ldrb	r3, [r7, #15]
}
 8005654:	4618      	mov	r0, r3
 8005656:	3710      	adds	r7, #16
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005664:	2300      	movs	r3, #0
 8005666:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68da      	ldr	r2, [r3, #12]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005676:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005678:	f7fd fd62 	bl	8003140 <HAL_GetTick>
 800567c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800567e:	e009      	b.n	8005694 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005680:	f7fd fd5e 	bl	8003140 <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800568e:	d901      	bls.n	8005694 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	e007      	b.n	80056a4 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	f003 0320 	and.w	r3, r3, #32
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d0ee      	beq.n	8005680 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3710      	adds	r7, #16
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80056b4:	2300      	movs	r3, #0
 80056b6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80056b8:	2300      	movs	r3, #0
 80056ba:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d122      	bne.n	8005710 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68da      	ldr	r2, [r3, #12]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80056d8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80056da:	f7fd fd31 	bl	8003140 <HAL_GetTick>
 80056de:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80056e0:	e00c      	b.n	80056fc <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80056e2:	f7fd fd2d 	bl	8003140 <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056f0:	d904      	bls.n	80056fc <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2204      	movs	r2, #4
 80056f6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005706:	2b00      	cmp	r3, #0
 8005708:	d102      	bne.n	8005710 <RTC_EnterInitMode+0x64>
 800570a:	7bfb      	ldrb	r3, [r7, #15]
 800570c:	2b01      	cmp	r3, #1
 800570e:	d1e8      	bne.n	80056e2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005710:	7bfb      	ldrb	r3, [r7, #15]
}
 8005712:	4618      	mov	r0, r3
 8005714:	3710      	adds	r7, #16
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800571a:	b580      	push	{r7, lr}
 800571c:	b084      	sub	sp, #16
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005722:	2300      	movs	r3, #0
 8005724:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68da      	ldr	r2, [r3, #12]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005734:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	f003 0320 	and.w	r3, r3, #32
 8005740:	2b00      	cmp	r3, #0
 8005742:	d10a      	bne.n	800575a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f7ff ff89 	bl	800565c <HAL_RTC_WaitForSynchro>
 800574a:	4603      	mov	r3, r0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d004      	beq.n	800575a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2204      	movs	r2, #4
 8005754:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800575a:	7bfb      	ldrb	r3, [r7, #15]
}
 800575c:	4618      	mov	r0, r3
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d101      	bne.n	8005776 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e041      	b.n	80057fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800577c:	b2db      	uxtb	r3, r3
 800577e:	2b00      	cmp	r3, #0
 8005780:	d106      	bne.n	8005790 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f7fd fa66 	bl	8002c5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2202      	movs	r2, #2
 8005794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	3304      	adds	r3, #4
 80057a0:	4619      	mov	r1, r3
 80057a2:	4610      	mov	r0, r2
 80057a4:	f000 fb48 	bl	8005e38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3708      	adds	r7, #8
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}

08005802 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005802:	b580      	push	{r7, lr}
 8005804:	b082      	sub	sp, #8
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d101      	bne.n	8005814 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e041      	b.n	8005898 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800581a:	b2db      	uxtb	r3, r3
 800581c:	2b00      	cmp	r3, #0
 800581e:	d106      	bne.n	800582e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 f839 	bl	80058a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2202      	movs	r2, #2
 8005832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	3304      	adds	r3, #4
 800583e:	4619      	mov	r1, r3
 8005840:	4610      	mov	r0, r2
 8005842:	f000 faf9 	bl	8005e38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2201      	movs	r2, #1
 800584a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2201      	movs	r2, #1
 8005852:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2201      	movs	r2, #1
 8005862:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2201      	movs	r2, #1
 800586a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2201      	movs	r2, #1
 8005872:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2201      	movs	r2, #1
 800587a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2201      	movs	r2, #1
 8005882:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2201      	movs	r2, #1
 800588a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2201      	movs	r2, #1
 8005892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	3708      	adds	r7, #8
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80058a8:	bf00      	nop
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d109      	bne.n	80058d8 <HAL_TIM_PWM_Start+0x24>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	bf14      	ite	ne
 80058d0:	2301      	movne	r3, #1
 80058d2:	2300      	moveq	r3, #0
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	e022      	b.n	800591e <HAL_TIM_PWM_Start+0x6a>
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	2b04      	cmp	r3, #4
 80058dc:	d109      	bne.n	80058f2 <HAL_TIM_PWM_Start+0x3e>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	bf14      	ite	ne
 80058ea:	2301      	movne	r3, #1
 80058ec:	2300      	moveq	r3, #0
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	e015      	b.n	800591e <HAL_TIM_PWM_Start+0x6a>
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	2b08      	cmp	r3, #8
 80058f6:	d109      	bne.n	800590c <HAL_TIM_PWM_Start+0x58>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	2b01      	cmp	r3, #1
 8005902:	bf14      	ite	ne
 8005904:	2301      	movne	r3, #1
 8005906:	2300      	moveq	r3, #0
 8005908:	b2db      	uxtb	r3, r3
 800590a:	e008      	b.n	800591e <HAL_TIM_PWM_Start+0x6a>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005912:	b2db      	uxtb	r3, r3
 8005914:	2b01      	cmp	r3, #1
 8005916:	bf14      	ite	ne
 8005918:	2301      	movne	r3, #1
 800591a:	2300      	moveq	r3, #0
 800591c:	b2db      	uxtb	r3, r3
 800591e:	2b00      	cmp	r3, #0
 8005920:	d001      	beq.n	8005926 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e07c      	b.n	8005a20 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d104      	bne.n	8005936 <HAL_TIM_PWM_Start+0x82>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2202      	movs	r2, #2
 8005930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005934:	e013      	b.n	800595e <HAL_TIM_PWM_Start+0xaa>
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	2b04      	cmp	r3, #4
 800593a:	d104      	bne.n	8005946 <HAL_TIM_PWM_Start+0x92>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2202      	movs	r2, #2
 8005940:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005944:	e00b      	b.n	800595e <HAL_TIM_PWM_Start+0xaa>
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	2b08      	cmp	r3, #8
 800594a:	d104      	bne.n	8005956 <HAL_TIM_PWM_Start+0xa2>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2202      	movs	r2, #2
 8005950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005954:	e003      	b.n	800595e <HAL_TIM_PWM_Start+0xaa>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2202      	movs	r2, #2
 800595a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2201      	movs	r2, #1
 8005964:	6839      	ldr	r1, [r7, #0]
 8005966:	4618      	mov	r0, r3
 8005968:	f000 fd50 	bl	800640c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a2d      	ldr	r2, [pc, #180]	; (8005a28 <HAL_TIM_PWM_Start+0x174>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d004      	beq.n	8005980 <HAL_TIM_PWM_Start+0xcc>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a2c      	ldr	r2, [pc, #176]	; (8005a2c <HAL_TIM_PWM_Start+0x178>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d101      	bne.n	8005984 <HAL_TIM_PWM_Start+0xd0>
 8005980:	2301      	movs	r3, #1
 8005982:	e000      	b.n	8005986 <HAL_TIM_PWM_Start+0xd2>
 8005984:	2300      	movs	r3, #0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d007      	beq.n	800599a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005998:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a22      	ldr	r2, [pc, #136]	; (8005a28 <HAL_TIM_PWM_Start+0x174>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d022      	beq.n	80059ea <HAL_TIM_PWM_Start+0x136>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ac:	d01d      	beq.n	80059ea <HAL_TIM_PWM_Start+0x136>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a1f      	ldr	r2, [pc, #124]	; (8005a30 <HAL_TIM_PWM_Start+0x17c>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d018      	beq.n	80059ea <HAL_TIM_PWM_Start+0x136>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a1d      	ldr	r2, [pc, #116]	; (8005a34 <HAL_TIM_PWM_Start+0x180>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d013      	beq.n	80059ea <HAL_TIM_PWM_Start+0x136>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a1c      	ldr	r2, [pc, #112]	; (8005a38 <HAL_TIM_PWM_Start+0x184>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d00e      	beq.n	80059ea <HAL_TIM_PWM_Start+0x136>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a16      	ldr	r2, [pc, #88]	; (8005a2c <HAL_TIM_PWM_Start+0x178>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d009      	beq.n	80059ea <HAL_TIM_PWM_Start+0x136>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a18      	ldr	r2, [pc, #96]	; (8005a3c <HAL_TIM_PWM_Start+0x188>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d004      	beq.n	80059ea <HAL_TIM_PWM_Start+0x136>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a16      	ldr	r2, [pc, #88]	; (8005a40 <HAL_TIM_PWM_Start+0x18c>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d111      	bne.n	8005a0e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	f003 0307 	and.w	r3, r3, #7
 80059f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2b06      	cmp	r3, #6
 80059fa:	d010      	beq.n	8005a1e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f042 0201 	orr.w	r2, r2, #1
 8005a0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a0c:	e007      	b.n	8005a1e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f042 0201 	orr.w	r2, r2, #1
 8005a1c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3710      	adds	r7, #16
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	40010000 	.word	0x40010000
 8005a2c:	40010400 	.word	0x40010400
 8005a30:	40000400 	.word	0x40000400
 8005a34:	40000800 	.word	0x40000800
 8005a38:	40000c00 	.word	0x40000c00
 8005a3c:	40014000 	.word	0x40014000
 8005a40:	40001800 	.word	0x40001800

08005a44 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2200      	movs	r2, #0
 8005a54:	6839      	ldr	r1, [r7, #0]
 8005a56:	4618      	mov	r0, r3
 8005a58:	f000 fcd8 	bl	800640c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a2e      	ldr	r2, [pc, #184]	; (8005b1c <HAL_TIM_PWM_Stop+0xd8>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d004      	beq.n	8005a70 <HAL_TIM_PWM_Stop+0x2c>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a2d      	ldr	r2, [pc, #180]	; (8005b20 <HAL_TIM_PWM_Stop+0xdc>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d101      	bne.n	8005a74 <HAL_TIM_PWM_Stop+0x30>
 8005a70:	2301      	movs	r3, #1
 8005a72:	e000      	b.n	8005a76 <HAL_TIM_PWM_Stop+0x32>
 8005a74:	2300      	movs	r3, #0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d017      	beq.n	8005aaa <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	6a1a      	ldr	r2, [r3, #32]
 8005a80:	f241 1311 	movw	r3, #4369	; 0x1111
 8005a84:	4013      	ands	r3, r2
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d10f      	bne.n	8005aaa <HAL_TIM_PWM_Stop+0x66>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	6a1a      	ldr	r2, [r3, #32]
 8005a90:	f240 4344 	movw	r3, #1092	; 0x444
 8005a94:	4013      	ands	r3, r2
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d107      	bne.n	8005aaa <HAL_TIM_PWM_Stop+0x66>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005aa8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	6a1a      	ldr	r2, [r3, #32]
 8005ab0:	f241 1311 	movw	r3, #4369	; 0x1111
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d10f      	bne.n	8005ada <HAL_TIM_PWM_Stop+0x96>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	6a1a      	ldr	r2, [r3, #32]
 8005ac0:	f240 4344 	movw	r3, #1092	; 0x444
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d107      	bne.n	8005ada <HAL_TIM_PWM_Stop+0x96>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f022 0201 	bic.w	r2, r2, #1
 8005ad8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d104      	bne.n	8005aea <HAL_TIM_PWM_Stop+0xa6>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ae8:	e013      	b.n	8005b12 <HAL_TIM_PWM_Stop+0xce>
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	2b04      	cmp	r3, #4
 8005aee:	d104      	bne.n	8005afa <HAL_TIM_PWM_Stop+0xb6>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005af8:	e00b      	b.n	8005b12 <HAL_TIM_PWM_Stop+0xce>
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	2b08      	cmp	r3, #8
 8005afe:	d104      	bne.n	8005b0a <HAL_TIM_PWM_Stop+0xc6>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b08:	e003      	b.n	8005b12 <HAL_TIM_PWM_Stop+0xce>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8005b12:	2300      	movs	r3, #0
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3708      	adds	r7, #8
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	40010000 	.word	0x40010000
 8005b20:	40010400 	.word	0x40010400

08005b24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b086      	sub	sp, #24
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	60b9      	str	r1, [r7, #8]
 8005b2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b30:	2300      	movs	r3, #0
 8005b32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d101      	bne.n	8005b42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b3e:	2302      	movs	r3, #2
 8005b40:	e0ae      	b.n	8005ca0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2b0c      	cmp	r3, #12
 8005b4e:	f200 809f 	bhi.w	8005c90 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005b52:	a201      	add	r2, pc, #4	; (adr r2, 8005b58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b58:	08005b8d 	.word	0x08005b8d
 8005b5c:	08005c91 	.word	0x08005c91
 8005b60:	08005c91 	.word	0x08005c91
 8005b64:	08005c91 	.word	0x08005c91
 8005b68:	08005bcd 	.word	0x08005bcd
 8005b6c:	08005c91 	.word	0x08005c91
 8005b70:	08005c91 	.word	0x08005c91
 8005b74:	08005c91 	.word	0x08005c91
 8005b78:	08005c0f 	.word	0x08005c0f
 8005b7c:	08005c91 	.word	0x08005c91
 8005b80:	08005c91 	.word	0x08005c91
 8005b84:	08005c91 	.word	0x08005c91
 8005b88:	08005c4f 	.word	0x08005c4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68b9      	ldr	r1, [r7, #8]
 8005b92:	4618      	mov	r0, r3
 8005b94:	f000 f9f0 	bl	8005f78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	699a      	ldr	r2, [r3, #24]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f042 0208 	orr.w	r2, r2, #8
 8005ba6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	699a      	ldr	r2, [r3, #24]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f022 0204 	bic.w	r2, r2, #4
 8005bb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	6999      	ldr	r1, [r3, #24]
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	691a      	ldr	r2, [r3, #16]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	430a      	orrs	r2, r1
 8005bc8:	619a      	str	r2, [r3, #24]
      break;
 8005bca:	e064      	b.n	8005c96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68b9      	ldr	r1, [r7, #8]
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f000 fa40 	bl	8006058 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	699a      	ldr	r2, [r3, #24]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005be6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	699a      	ldr	r2, [r3, #24]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bf6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	6999      	ldr	r1, [r3, #24]
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	021a      	lsls	r2, r3, #8
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	430a      	orrs	r2, r1
 8005c0a:	619a      	str	r2, [r3, #24]
      break;
 8005c0c:	e043      	b.n	8005c96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68b9      	ldr	r1, [r7, #8]
 8005c14:	4618      	mov	r0, r3
 8005c16:	f000 fa95 	bl	8006144 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	69da      	ldr	r2, [r3, #28]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f042 0208 	orr.w	r2, r2, #8
 8005c28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	69da      	ldr	r2, [r3, #28]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f022 0204 	bic.w	r2, r2, #4
 8005c38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	69d9      	ldr	r1, [r3, #28]
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	691a      	ldr	r2, [r3, #16]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	430a      	orrs	r2, r1
 8005c4a:	61da      	str	r2, [r3, #28]
      break;
 8005c4c:	e023      	b.n	8005c96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68b9      	ldr	r1, [r7, #8]
 8005c54:	4618      	mov	r0, r3
 8005c56:	f000 fae9 	bl	800622c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	69da      	ldr	r2, [r3, #28]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	69da      	ldr	r2, [r3, #28]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	69d9      	ldr	r1, [r3, #28]
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	021a      	lsls	r2, r3, #8
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	430a      	orrs	r2, r1
 8005c8c:	61da      	str	r2, [r3, #28]
      break;
 8005c8e:	e002      	b.n	8005c96 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	75fb      	strb	r3, [r7, #23]
      break;
 8005c94:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3718      	adds	r7, #24
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d101      	bne.n	8005cc4 <HAL_TIM_ConfigClockSource+0x1c>
 8005cc0:	2302      	movs	r3, #2
 8005cc2:	e0b4      	b.n	8005e2e <HAL_TIM_ConfigClockSource+0x186>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2202      	movs	r2, #2
 8005cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005ce2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cfc:	d03e      	beq.n	8005d7c <HAL_TIM_ConfigClockSource+0xd4>
 8005cfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d02:	f200 8087 	bhi.w	8005e14 <HAL_TIM_ConfigClockSource+0x16c>
 8005d06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d0a:	f000 8086 	beq.w	8005e1a <HAL_TIM_ConfigClockSource+0x172>
 8005d0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d12:	d87f      	bhi.n	8005e14 <HAL_TIM_ConfigClockSource+0x16c>
 8005d14:	2b70      	cmp	r3, #112	; 0x70
 8005d16:	d01a      	beq.n	8005d4e <HAL_TIM_ConfigClockSource+0xa6>
 8005d18:	2b70      	cmp	r3, #112	; 0x70
 8005d1a:	d87b      	bhi.n	8005e14 <HAL_TIM_ConfigClockSource+0x16c>
 8005d1c:	2b60      	cmp	r3, #96	; 0x60
 8005d1e:	d050      	beq.n	8005dc2 <HAL_TIM_ConfigClockSource+0x11a>
 8005d20:	2b60      	cmp	r3, #96	; 0x60
 8005d22:	d877      	bhi.n	8005e14 <HAL_TIM_ConfigClockSource+0x16c>
 8005d24:	2b50      	cmp	r3, #80	; 0x50
 8005d26:	d03c      	beq.n	8005da2 <HAL_TIM_ConfigClockSource+0xfa>
 8005d28:	2b50      	cmp	r3, #80	; 0x50
 8005d2a:	d873      	bhi.n	8005e14 <HAL_TIM_ConfigClockSource+0x16c>
 8005d2c:	2b40      	cmp	r3, #64	; 0x40
 8005d2e:	d058      	beq.n	8005de2 <HAL_TIM_ConfigClockSource+0x13a>
 8005d30:	2b40      	cmp	r3, #64	; 0x40
 8005d32:	d86f      	bhi.n	8005e14 <HAL_TIM_ConfigClockSource+0x16c>
 8005d34:	2b30      	cmp	r3, #48	; 0x30
 8005d36:	d064      	beq.n	8005e02 <HAL_TIM_ConfigClockSource+0x15a>
 8005d38:	2b30      	cmp	r3, #48	; 0x30
 8005d3a:	d86b      	bhi.n	8005e14 <HAL_TIM_ConfigClockSource+0x16c>
 8005d3c:	2b20      	cmp	r3, #32
 8005d3e:	d060      	beq.n	8005e02 <HAL_TIM_ConfigClockSource+0x15a>
 8005d40:	2b20      	cmp	r3, #32
 8005d42:	d867      	bhi.n	8005e14 <HAL_TIM_ConfigClockSource+0x16c>
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d05c      	beq.n	8005e02 <HAL_TIM_ConfigClockSource+0x15a>
 8005d48:	2b10      	cmp	r3, #16
 8005d4a:	d05a      	beq.n	8005e02 <HAL_TIM_ConfigClockSource+0x15a>
 8005d4c:	e062      	b.n	8005e14 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6818      	ldr	r0, [r3, #0]
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	6899      	ldr	r1, [r3, #8]
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	685a      	ldr	r2, [r3, #4]
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	f000 fb35 	bl	80063cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68ba      	ldr	r2, [r7, #8]
 8005d78:	609a      	str	r2, [r3, #8]
      break;
 8005d7a:	e04f      	b.n	8005e1c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6818      	ldr	r0, [r3, #0]
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	6899      	ldr	r1, [r3, #8]
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	685a      	ldr	r2, [r3, #4]
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	f000 fb1e 	bl	80063cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	689a      	ldr	r2, [r3, #8]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d9e:	609a      	str	r2, [r3, #8]
      break;
 8005da0:	e03c      	b.n	8005e1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6818      	ldr	r0, [r3, #0]
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	6859      	ldr	r1, [r3, #4]
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	461a      	mov	r2, r3
 8005db0:	f000 fa92 	bl	80062d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2150      	movs	r1, #80	; 0x50
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f000 faeb 	bl	8006396 <TIM_ITRx_SetConfig>
      break;
 8005dc0:	e02c      	b.n	8005e1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6818      	ldr	r0, [r3, #0]
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	6859      	ldr	r1, [r3, #4]
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	461a      	mov	r2, r3
 8005dd0:	f000 fab1 	bl	8006336 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2160      	movs	r1, #96	; 0x60
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f000 fadb 	bl	8006396 <TIM_ITRx_SetConfig>
      break;
 8005de0:	e01c      	b.n	8005e1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6818      	ldr	r0, [r3, #0]
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	6859      	ldr	r1, [r3, #4]
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	461a      	mov	r2, r3
 8005df0:	f000 fa72 	bl	80062d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2140      	movs	r1, #64	; 0x40
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f000 facb 	bl	8006396 <TIM_ITRx_SetConfig>
      break;
 8005e00:	e00c      	b.n	8005e1c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	4610      	mov	r0, r2
 8005e0e:	f000 fac2 	bl	8006396 <TIM_ITRx_SetConfig>
      break;
 8005e12:	e003      	b.n	8005e1c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	73fb      	strb	r3, [r7, #15]
      break;
 8005e18:	e000      	b.n	8005e1c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005e1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3710      	adds	r7, #16
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
	...

08005e38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b085      	sub	sp, #20
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a40      	ldr	r2, [pc, #256]	; (8005f4c <TIM_Base_SetConfig+0x114>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d013      	beq.n	8005e78 <TIM_Base_SetConfig+0x40>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e56:	d00f      	beq.n	8005e78 <TIM_Base_SetConfig+0x40>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a3d      	ldr	r2, [pc, #244]	; (8005f50 <TIM_Base_SetConfig+0x118>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d00b      	beq.n	8005e78 <TIM_Base_SetConfig+0x40>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a3c      	ldr	r2, [pc, #240]	; (8005f54 <TIM_Base_SetConfig+0x11c>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d007      	beq.n	8005e78 <TIM_Base_SetConfig+0x40>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a3b      	ldr	r2, [pc, #236]	; (8005f58 <TIM_Base_SetConfig+0x120>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d003      	beq.n	8005e78 <TIM_Base_SetConfig+0x40>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a3a      	ldr	r2, [pc, #232]	; (8005f5c <TIM_Base_SetConfig+0x124>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d108      	bne.n	8005e8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a2f      	ldr	r2, [pc, #188]	; (8005f4c <TIM_Base_SetConfig+0x114>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d02b      	beq.n	8005eea <TIM_Base_SetConfig+0xb2>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e98:	d027      	beq.n	8005eea <TIM_Base_SetConfig+0xb2>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a2c      	ldr	r2, [pc, #176]	; (8005f50 <TIM_Base_SetConfig+0x118>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d023      	beq.n	8005eea <TIM_Base_SetConfig+0xb2>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a2b      	ldr	r2, [pc, #172]	; (8005f54 <TIM_Base_SetConfig+0x11c>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d01f      	beq.n	8005eea <TIM_Base_SetConfig+0xb2>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a2a      	ldr	r2, [pc, #168]	; (8005f58 <TIM_Base_SetConfig+0x120>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d01b      	beq.n	8005eea <TIM_Base_SetConfig+0xb2>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a29      	ldr	r2, [pc, #164]	; (8005f5c <TIM_Base_SetConfig+0x124>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d017      	beq.n	8005eea <TIM_Base_SetConfig+0xb2>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a28      	ldr	r2, [pc, #160]	; (8005f60 <TIM_Base_SetConfig+0x128>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d013      	beq.n	8005eea <TIM_Base_SetConfig+0xb2>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a27      	ldr	r2, [pc, #156]	; (8005f64 <TIM_Base_SetConfig+0x12c>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d00f      	beq.n	8005eea <TIM_Base_SetConfig+0xb2>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a26      	ldr	r2, [pc, #152]	; (8005f68 <TIM_Base_SetConfig+0x130>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d00b      	beq.n	8005eea <TIM_Base_SetConfig+0xb2>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a25      	ldr	r2, [pc, #148]	; (8005f6c <TIM_Base_SetConfig+0x134>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d007      	beq.n	8005eea <TIM_Base_SetConfig+0xb2>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a24      	ldr	r2, [pc, #144]	; (8005f70 <TIM_Base_SetConfig+0x138>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d003      	beq.n	8005eea <TIM_Base_SetConfig+0xb2>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a23      	ldr	r2, [pc, #140]	; (8005f74 <TIM_Base_SetConfig+0x13c>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d108      	bne.n	8005efc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ef0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	695b      	ldr	r3, [r3, #20]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	689a      	ldr	r2, [r3, #8]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a0a      	ldr	r2, [pc, #40]	; (8005f4c <TIM_Base_SetConfig+0x114>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d003      	beq.n	8005f30 <TIM_Base_SetConfig+0xf8>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a0c      	ldr	r2, [pc, #48]	; (8005f5c <TIM_Base_SetConfig+0x124>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d103      	bne.n	8005f38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	691a      	ldr	r2, [r3, #16]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	615a      	str	r2, [r3, #20]
}
 8005f3e:	bf00      	nop
 8005f40:	3714      	adds	r7, #20
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop
 8005f4c:	40010000 	.word	0x40010000
 8005f50:	40000400 	.word	0x40000400
 8005f54:	40000800 	.word	0x40000800
 8005f58:	40000c00 	.word	0x40000c00
 8005f5c:	40010400 	.word	0x40010400
 8005f60:	40014000 	.word	0x40014000
 8005f64:	40014400 	.word	0x40014400
 8005f68:	40014800 	.word	0x40014800
 8005f6c:	40001800 	.word	0x40001800
 8005f70:	40001c00 	.word	0x40001c00
 8005f74:	40002000 	.word	0x40002000

08005f78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b087      	sub	sp, #28
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a1b      	ldr	r3, [r3, #32]
 8005f86:	f023 0201 	bic.w	r2, r3, #1
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a1b      	ldr	r3, [r3, #32]
 8005f92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f023 0303 	bic.w	r3, r3, #3
 8005fae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	f023 0302 	bic.w	r3, r3, #2
 8005fc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	697a      	ldr	r2, [r7, #20]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a20      	ldr	r2, [pc, #128]	; (8006050 <TIM_OC1_SetConfig+0xd8>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d003      	beq.n	8005fdc <TIM_OC1_SetConfig+0x64>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a1f      	ldr	r2, [pc, #124]	; (8006054 <TIM_OC1_SetConfig+0xdc>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d10c      	bne.n	8005ff6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	f023 0308 	bic.w	r3, r3, #8
 8005fe2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	697a      	ldr	r2, [r7, #20]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	f023 0304 	bic.w	r3, r3, #4
 8005ff4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4a15      	ldr	r2, [pc, #84]	; (8006050 <TIM_OC1_SetConfig+0xd8>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d003      	beq.n	8006006 <TIM_OC1_SetConfig+0x8e>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a14      	ldr	r2, [pc, #80]	; (8006054 <TIM_OC1_SetConfig+0xdc>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d111      	bne.n	800602a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800600c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006014:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	693a      	ldr	r2, [r7, #16]
 800601c:	4313      	orrs	r3, r2
 800601e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	699b      	ldr	r3, [r3, #24]
 8006024:	693a      	ldr	r2, [r7, #16]
 8006026:	4313      	orrs	r3, r2
 8006028:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	693a      	ldr	r2, [r7, #16]
 800602e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	685a      	ldr	r2, [r3, #4]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	697a      	ldr	r2, [r7, #20]
 8006042:	621a      	str	r2, [r3, #32]
}
 8006044:	bf00      	nop
 8006046:	371c      	adds	r7, #28
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr
 8006050:	40010000 	.word	0x40010000
 8006054:	40010400 	.word	0x40010400

08006058 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006058:	b480      	push	{r7}
 800605a:	b087      	sub	sp, #28
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a1b      	ldr	r3, [r3, #32]
 8006066:	f023 0210 	bic.w	r2, r3, #16
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6a1b      	ldr	r3, [r3, #32]
 8006072:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	699b      	ldr	r3, [r3, #24]
 800607e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800608e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	021b      	lsls	r3, r3, #8
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	4313      	orrs	r3, r2
 800609a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	f023 0320 	bic.w	r3, r3, #32
 80060a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	011b      	lsls	r3, r3, #4
 80060aa:	697a      	ldr	r2, [r7, #20]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4a22      	ldr	r2, [pc, #136]	; (800613c <TIM_OC2_SetConfig+0xe4>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d003      	beq.n	80060c0 <TIM_OC2_SetConfig+0x68>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4a21      	ldr	r2, [pc, #132]	; (8006140 <TIM_OC2_SetConfig+0xe8>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d10d      	bne.n	80060dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	011b      	lsls	r3, r3, #4
 80060ce:	697a      	ldr	r2, [r7, #20]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a17      	ldr	r2, [pc, #92]	; (800613c <TIM_OC2_SetConfig+0xe4>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d003      	beq.n	80060ec <TIM_OC2_SetConfig+0x94>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a16      	ldr	r2, [pc, #88]	; (8006140 <TIM_OC2_SetConfig+0xe8>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d113      	bne.n	8006114 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	695b      	ldr	r3, [r3, #20]
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	693a      	ldr	r2, [r7, #16]
 8006104:	4313      	orrs	r3, r2
 8006106:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	699b      	ldr	r3, [r3, #24]
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	693a      	ldr	r2, [r7, #16]
 8006110:	4313      	orrs	r3, r2
 8006112:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	693a      	ldr	r2, [r7, #16]
 8006118:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	685a      	ldr	r2, [r3, #4]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	621a      	str	r2, [r3, #32]
}
 800612e:	bf00      	nop
 8006130:	371c      	adds	r7, #28
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr
 800613a:	bf00      	nop
 800613c:	40010000 	.word	0x40010000
 8006140:	40010400 	.word	0x40010400

08006144 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006144:	b480      	push	{r7}
 8006146:	b087      	sub	sp, #28
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a1b      	ldr	r3, [r3, #32]
 8006152:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a1b      	ldr	r3, [r3, #32]
 800615e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	69db      	ldr	r3, [r3, #28]
 800616a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f023 0303 	bic.w	r3, r3, #3
 800617a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	4313      	orrs	r3, r2
 8006184:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800618c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	021b      	lsls	r3, r3, #8
 8006194:	697a      	ldr	r2, [r7, #20]
 8006196:	4313      	orrs	r3, r2
 8006198:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a21      	ldr	r2, [pc, #132]	; (8006224 <TIM_OC3_SetConfig+0xe0>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d003      	beq.n	80061aa <TIM_OC3_SetConfig+0x66>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a20      	ldr	r2, [pc, #128]	; (8006228 <TIM_OC3_SetConfig+0xe4>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d10d      	bne.n	80061c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	021b      	lsls	r3, r3, #8
 80061b8:	697a      	ldr	r2, [r7, #20]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a16      	ldr	r2, [pc, #88]	; (8006224 <TIM_OC3_SetConfig+0xe0>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d003      	beq.n	80061d6 <TIM_OC3_SetConfig+0x92>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a15      	ldr	r2, [pc, #84]	; (8006228 <TIM_OC3_SetConfig+0xe4>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d113      	bne.n	80061fe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	695b      	ldr	r3, [r3, #20]
 80061ea:	011b      	lsls	r3, r3, #4
 80061ec:	693a      	ldr	r2, [r7, #16]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	699b      	ldr	r3, [r3, #24]
 80061f6:	011b      	lsls	r3, r3, #4
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	693a      	ldr	r2, [r7, #16]
 8006202:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	685a      	ldr	r2, [r3, #4]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	697a      	ldr	r2, [r7, #20]
 8006216:	621a      	str	r2, [r3, #32]
}
 8006218:	bf00      	nop
 800621a:	371c      	adds	r7, #28
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr
 8006224:	40010000 	.word	0x40010000
 8006228:	40010400 	.word	0x40010400

0800622c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800622c:	b480      	push	{r7}
 800622e:	b087      	sub	sp, #28
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a1b      	ldr	r3, [r3, #32]
 800623a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a1b      	ldr	r3, [r3, #32]
 8006246:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	69db      	ldr	r3, [r3, #28]
 8006252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800625a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006262:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	021b      	lsls	r3, r3, #8
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	4313      	orrs	r3, r2
 800626e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006276:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	031b      	lsls	r3, r3, #12
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	4313      	orrs	r3, r2
 8006282:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a12      	ldr	r2, [pc, #72]	; (80062d0 <TIM_OC4_SetConfig+0xa4>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d003      	beq.n	8006294 <TIM_OC4_SetConfig+0x68>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a11      	ldr	r2, [pc, #68]	; (80062d4 <TIM_OC4_SetConfig+0xa8>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d109      	bne.n	80062a8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800629a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	695b      	ldr	r3, [r3, #20]
 80062a0:	019b      	lsls	r3, r3, #6
 80062a2:	697a      	ldr	r2, [r7, #20]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	697a      	ldr	r2, [r7, #20]
 80062ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	685a      	ldr	r2, [r3, #4]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	693a      	ldr	r2, [r7, #16]
 80062c0:	621a      	str	r2, [r3, #32]
}
 80062c2:	bf00      	nop
 80062c4:	371c      	adds	r7, #28
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop
 80062d0:	40010000 	.word	0x40010000
 80062d4:	40010400 	.word	0x40010400

080062d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062d8:	b480      	push	{r7}
 80062da:	b087      	sub	sp, #28
 80062dc:	af00      	add	r7, sp, #0
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6a1b      	ldr	r3, [r3, #32]
 80062e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6a1b      	ldr	r3, [r3, #32]
 80062ee:	f023 0201 	bic.w	r2, r3, #1
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	699b      	ldr	r3, [r3, #24]
 80062fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006302:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	011b      	lsls	r3, r3, #4
 8006308:	693a      	ldr	r2, [r7, #16]
 800630a:	4313      	orrs	r3, r2
 800630c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	f023 030a 	bic.w	r3, r3, #10
 8006314:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006316:	697a      	ldr	r2, [r7, #20]
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	4313      	orrs	r3, r2
 800631c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	693a      	ldr	r2, [r7, #16]
 8006322:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	697a      	ldr	r2, [r7, #20]
 8006328:	621a      	str	r2, [r3, #32]
}
 800632a:	bf00      	nop
 800632c:	371c      	adds	r7, #28
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr

08006336 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006336:	b480      	push	{r7}
 8006338:	b087      	sub	sp, #28
 800633a:	af00      	add	r7, sp, #0
 800633c:	60f8      	str	r0, [r7, #12]
 800633e:	60b9      	str	r1, [r7, #8]
 8006340:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6a1b      	ldr	r3, [r3, #32]
 8006346:	f023 0210 	bic.w	r2, r3, #16
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	699b      	ldr	r3, [r3, #24]
 8006352:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6a1b      	ldr	r3, [r3, #32]
 8006358:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006360:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	031b      	lsls	r3, r3, #12
 8006366:	697a      	ldr	r2, [r7, #20]
 8006368:	4313      	orrs	r3, r2
 800636a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006372:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	011b      	lsls	r3, r3, #4
 8006378:	693a      	ldr	r2, [r7, #16]
 800637a:	4313      	orrs	r3, r2
 800637c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	697a      	ldr	r2, [r7, #20]
 8006382:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	693a      	ldr	r2, [r7, #16]
 8006388:	621a      	str	r2, [r3, #32]
}
 800638a:	bf00      	nop
 800638c:	371c      	adds	r7, #28
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr

08006396 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006396:	b480      	push	{r7}
 8006398:	b085      	sub	sp, #20
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
 800639e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063ae:	683a      	ldr	r2, [r7, #0]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	f043 0307 	orr.w	r3, r3, #7
 80063b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	609a      	str	r2, [r3, #8]
}
 80063c0:	bf00      	nop
 80063c2:	3714      	adds	r7, #20
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b087      	sub	sp, #28
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
 80063d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	021a      	lsls	r2, r3, #8
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	431a      	orrs	r2, r3
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	697a      	ldr	r2, [r7, #20]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	697a      	ldr	r2, [r7, #20]
 80063fe:	609a      	str	r2, [r3, #8]
}
 8006400:	bf00      	nop
 8006402:	371c      	adds	r7, #28
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800640c:	b480      	push	{r7}
 800640e:	b087      	sub	sp, #28
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	f003 031f 	and.w	r3, r3, #31
 800641e:	2201      	movs	r2, #1
 8006420:	fa02 f303 	lsl.w	r3, r2, r3
 8006424:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6a1a      	ldr	r2, [r3, #32]
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	43db      	mvns	r3, r3
 800642e:	401a      	ands	r2, r3
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6a1a      	ldr	r2, [r3, #32]
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	f003 031f 	and.w	r3, r3, #31
 800643e:	6879      	ldr	r1, [r7, #4]
 8006440:	fa01 f303 	lsl.w	r3, r1, r3
 8006444:	431a      	orrs	r2, r3
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	621a      	str	r2, [r3, #32]
}
 800644a:	bf00      	nop
 800644c:	371c      	adds	r7, #28
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr
	...

08006458 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006458:	b480      	push	{r7}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006468:	2b01      	cmp	r3, #1
 800646a:	d101      	bne.n	8006470 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800646c:	2302      	movs	r3, #2
 800646e:	e05a      	b.n	8006526 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2202      	movs	r2, #2
 800647c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006496:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	4313      	orrs	r3, r2
 80064a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a21      	ldr	r2, [pc, #132]	; (8006534 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d022      	beq.n	80064fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064bc:	d01d      	beq.n	80064fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a1d      	ldr	r2, [pc, #116]	; (8006538 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d018      	beq.n	80064fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a1b      	ldr	r2, [pc, #108]	; (800653c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d013      	beq.n	80064fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a1a      	ldr	r2, [pc, #104]	; (8006540 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d00e      	beq.n	80064fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a18      	ldr	r2, [pc, #96]	; (8006544 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d009      	beq.n	80064fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a17      	ldr	r2, [pc, #92]	; (8006548 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d004      	beq.n	80064fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a15      	ldr	r2, [pc, #84]	; (800654c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d10c      	bne.n	8006514 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006500:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	68ba      	ldr	r2, [r7, #8]
 8006508:	4313      	orrs	r3, r2
 800650a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	68ba      	ldr	r2, [r7, #8]
 8006512:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	3714      	adds	r7, #20
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	40010000 	.word	0x40010000
 8006538:	40000400 	.word	0x40000400
 800653c:	40000800 	.word	0x40000800
 8006540:	40000c00 	.word	0x40000c00
 8006544:	40010400 	.word	0x40010400
 8006548:	40014000 	.word	0x40014000
 800654c:	40001800 	.word	0x40001800

08006550 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d101      	bne.n	8006562 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	e03f      	b.n	80065e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006568:	b2db      	uxtb	r3, r3
 800656a:	2b00      	cmp	r3, #0
 800656c:	d106      	bne.n	800657c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f7fc fc66 	bl	8002e48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2224      	movs	r2, #36	; 0x24
 8006580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	68da      	ldr	r2, [r3, #12]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006592:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f000 fddf 	bl	8007158 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	691a      	ldr	r2, [r3, #16]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	695a      	ldr	r2, [r3, #20]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	68da      	ldr	r2, [r3, #12]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2220      	movs	r2, #32
 80065d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2220      	movs	r2, #32
 80065dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3708      	adds	r7, #8
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}

080065ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b08a      	sub	sp, #40	; 0x28
 80065ee:	af02      	add	r7, sp, #8
 80065f0:	60f8      	str	r0, [r7, #12]
 80065f2:	60b9      	str	r1, [r7, #8]
 80065f4:	603b      	str	r3, [r7, #0]
 80065f6:	4613      	mov	r3, r2
 80065f8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80065fa:	2300      	movs	r3, #0
 80065fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006604:	b2db      	uxtb	r3, r3
 8006606:	2b20      	cmp	r3, #32
 8006608:	d17c      	bne.n	8006704 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d002      	beq.n	8006616 <HAL_UART_Transmit+0x2c>
 8006610:	88fb      	ldrh	r3, [r7, #6]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d101      	bne.n	800661a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e075      	b.n	8006706 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006620:	2b01      	cmp	r3, #1
 8006622:	d101      	bne.n	8006628 <HAL_UART_Transmit+0x3e>
 8006624:	2302      	movs	r3, #2
 8006626:	e06e      	b.n	8006706 <HAL_UART_Transmit+0x11c>
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2200      	movs	r2, #0
 8006634:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2221      	movs	r2, #33	; 0x21
 800663a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800663e:	f7fc fd7f 	bl	8003140 <HAL_GetTick>
 8006642:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	88fa      	ldrh	r2, [r7, #6]
 8006648:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	88fa      	ldrh	r2, [r7, #6]
 800664e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006658:	d108      	bne.n	800666c <HAL_UART_Transmit+0x82>
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d104      	bne.n	800666c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006662:	2300      	movs	r3, #0
 8006664:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	61bb      	str	r3, [r7, #24]
 800666a:	e003      	b.n	8006674 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006670:	2300      	movs	r3, #0
 8006672:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2200      	movs	r2, #0
 8006678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800667c:	e02a      	b.n	80066d4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	9300      	str	r3, [sp, #0]
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	2200      	movs	r2, #0
 8006686:	2180      	movs	r1, #128	; 0x80
 8006688:	68f8      	ldr	r0, [r7, #12]
 800668a:	f000 fb1f 	bl	8006ccc <UART_WaitOnFlagUntilTimeout>
 800668e:	4603      	mov	r3, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d001      	beq.n	8006698 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006694:	2303      	movs	r3, #3
 8006696:	e036      	b.n	8006706 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d10b      	bne.n	80066b6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	881b      	ldrh	r3, [r3, #0]
 80066a2:	461a      	mov	r2, r3
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	3302      	adds	r3, #2
 80066b2:	61bb      	str	r3, [r7, #24]
 80066b4:	e007      	b.n	80066c6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	781a      	ldrb	r2, [r3, #0]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	3301      	adds	r3, #1
 80066c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	3b01      	subs	r3, #1
 80066ce:	b29a      	uxth	r2, r3
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066d8:	b29b      	uxth	r3, r3
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d1cf      	bne.n	800667e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	9300      	str	r3, [sp, #0]
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	2200      	movs	r2, #0
 80066e6:	2140      	movs	r1, #64	; 0x40
 80066e8:	68f8      	ldr	r0, [r7, #12]
 80066ea:	f000 faef 	bl	8006ccc <UART_WaitOnFlagUntilTimeout>
 80066ee:	4603      	mov	r3, r0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d001      	beq.n	80066f8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80066f4:	2303      	movs	r3, #3
 80066f6:	e006      	b.n	8006706 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2220      	movs	r2, #32
 80066fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006700:	2300      	movs	r3, #0
 8006702:	e000      	b.n	8006706 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006704:	2302      	movs	r3, #2
  }
}
 8006706:	4618      	mov	r0, r3
 8006708:	3720      	adds	r7, #32
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}

0800670e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800670e:	b580      	push	{r7, lr}
 8006710:	b084      	sub	sp, #16
 8006712:	af00      	add	r7, sp, #0
 8006714:	60f8      	str	r0, [r7, #12]
 8006716:	60b9      	str	r1, [r7, #8]
 8006718:	4613      	mov	r3, r2
 800671a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006722:	b2db      	uxtb	r3, r3
 8006724:	2b20      	cmp	r3, #32
 8006726:	d11d      	bne.n	8006764 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d002      	beq.n	8006734 <HAL_UART_Receive_IT+0x26>
 800672e:	88fb      	ldrh	r3, [r7, #6]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d101      	bne.n	8006738 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	e016      	b.n	8006766 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800673e:	2b01      	cmp	r3, #1
 8006740:	d101      	bne.n	8006746 <HAL_UART_Receive_IT+0x38>
 8006742:	2302      	movs	r3, #2
 8006744:	e00f      	b.n	8006766 <HAL_UART_Receive_IT+0x58>
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2201      	movs	r2, #1
 800674a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2200      	movs	r2, #0
 8006752:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006754:	88fb      	ldrh	r3, [r7, #6]
 8006756:	461a      	mov	r2, r3
 8006758:	68b9      	ldr	r1, [r7, #8]
 800675a:	68f8      	ldr	r0, [r7, #12]
 800675c:	f000 fb24 	bl	8006da8 <UART_Start_Receive_IT>
 8006760:	4603      	mov	r3, r0
 8006762:	e000      	b.n	8006766 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006764:	2302      	movs	r3, #2
  }
}
 8006766:	4618      	mov	r0, r3
 8006768:	3710      	adds	r7, #16
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
	...

08006770 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b0ba      	sub	sp, #232	; 0xe8
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	695b      	ldr	r3, [r3, #20]
 8006792:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006796:	2300      	movs	r3, #0
 8006798:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800679c:	2300      	movs	r3, #0
 800679e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80067a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067a6:	f003 030f 	and.w	r3, r3, #15
 80067aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80067ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d10f      	bne.n	80067d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80067b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067ba:	f003 0320 	and.w	r3, r3, #32
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d009      	beq.n	80067d6 <HAL_UART_IRQHandler+0x66>
 80067c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067c6:	f003 0320 	and.w	r3, r3, #32
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d003      	beq.n	80067d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 fc07 	bl	8006fe2 <UART_Receive_IT>
      return;
 80067d4:	e256      	b.n	8006c84 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80067d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067da:	2b00      	cmp	r3, #0
 80067dc:	f000 80de 	beq.w	800699c <HAL_UART_IRQHandler+0x22c>
 80067e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067e4:	f003 0301 	and.w	r3, r3, #1
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d106      	bne.n	80067fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80067ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067f0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f000 80d1 	beq.w	800699c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80067fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067fe:	f003 0301 	and.w	r3, r3, #1
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00b      	beq.n	800681e <HAL_UART_IRQHandler+0xae>
 8006806:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800680a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800680e:	2b00      	cmp	r3, #0
 8006810:	d005      	beq.n	800681e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006816:	f043 0201 	orr.w	r2, r3, #1
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800681e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006822:	f003 0304 	and.w	r3, r3, #4
 8006826:	2b00      	cmp	r3, #0
 8006828:	d00b      	beq.n	8006842 <HAL_UART_IRQHandler+0xd2>
 800682a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800682e:	f003 0301 	and.w	r3, r3, #1
 8006832:	2b00      	cmp	r3, #0
 8006834:	d005      	beq.n	8006842 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683a:	f043 0202 	orr.w	r2, r3, #2
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006846:	f003 0302 	and.w	r3, r3, #2
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00b      	beq.n	8006866 <HAL_UART_IRQHandler+0xf6>
 800684e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006852:	f003 0301 	and.w	r3, r3, #1
 8006856:	2b00      	cmp	r3, #0
 8006858:	d005      	beq.n	8006866 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685e:	f043 0204 	orr.w	r2, r3, #4
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800686a:	f003 0308 	and.w	r3, r3, #8
 800686e:	2b00      	cmp	r3, #0
 8006870:	d011      	beq.n	8006896 <HAL_UART_IRQHandler+0x126>
 8006872:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006876:	f003 0320 	and.w	r3, r3, #32
 800687a:	2b00      	cmp	r3, #0
 800687c:	d105      	bne.n	800688a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800687e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006882:	f003 0301 	and.w	r3, r3, #1
 8006886:	2b00      	cmp	r3, #0
 8006888:	d005      	beq.n	8006896 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688e:	f043 0208 	orr.w	r2, r3, #8
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689a:	2b00      	cmp	r3, #0
 800689c:	f000 81ed 	beq.w	8006c7a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80068a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068a4:	f003 0320 	and.w	r3, r3, #32
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d008      	beq.n	80068be <HAL_UART_IRQHandler+0x14e>
 80068ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068b0:	f003 0320 	and.w	r3, r3, #32
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d002      	beq.n	80068be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 fb92 	bl	8006fe2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	695b      	ldr	r3, [r3, #20]
 80068c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068c8:	2b40      	cmp	r3, #64	; 0x40
 80068ca:	bf0c      	ite	eq
 80068cc:	2301      	moveq	r3, #1
 80068ce:	2300      	movne	r3, #0
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068da:	f003 0308 	and.w	r3, r3, #8
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d103      	bne.n	80068ea <HAL_UART_IRQHandler+0x17a>
 80068e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d04f      	beq.n	800698a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 fa9a 	bl	8006e24 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	695b      	ldr	r3, [r3, #20]
 80068f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068fa:	2b40      	cmp	r3, #64	; 0x40
 80068fc:	d141      	bne.n	8006982 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	3314      	adds	r3, #20
 8006904:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006908:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800690c:	e853 3f00 	ldrex	r3, [r3]
 8006910:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006914:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006918:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800691c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	3314      	adds	r3, #20
 8006926:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800692a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800692e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006932:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006936:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800693a:	e841 2300 	strex	r3, r2, [r1]
 800693e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006942:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006946:	2b00      	cmp	r3, #0
 8006948:	d1d9      	bne.n	80068fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800694e:	2b00      	cmp	r3, #0
 8006950:	d013      	beq.n	800697a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006956:	4a7d      	ldr	r2, [pc, #500]	; (8006b4c <HAL_UART_IRQHandler+0x3dc>)
 8006958:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800695e:	4618      	mov	r0, r3
 8006960:	f7fc fd7b 	bl	800345a <HAL_DMA_Abort_IT>
 8006964:	4603      	mov	r3, r0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d016      	beq.n	8006998 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800696e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006974:	4610      	mov	r0, r2
 8006976:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006978:	e00e      	b.n	8006998 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 f990 	bl	8006ca0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006980:	e00a      	b.n	8006998 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 f98c 	bl	8006ca0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006988:	e006      	b.n	8006998 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 f988 	bl	8006ca0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006996:	e170      	b.n	8006c7a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006998:	bf00      	nop
    return;
 800699a:	e16e      	b.n	8006c7a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	f040 814a 	bne.w	8006c3a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80069a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069aa:	f003 0310 	and.w	r3, r3, #16
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	f000 8143 	beq.w	8006c3a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80069b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069b8:	f003 0310 	and.w	r3, r3, #16
 80069bc:	2b00      	cmp	r3, #0
 80069be:	f000 813c 	beq.w	8006c3a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80069c2:	2300      	movs	r3, #0
 80069c4:	60bb      	str	r3, [r7, #8]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	60bb      	str	r3, [r7, #8]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	60bb      	str	r3, [r7, #8]
 80069d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	695b      	ldr	r3, [r3, #20]
 80069de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069e2:	2b40      	cmp	r3, #64	; 0x40
 80069e4:	f040 80b4 	bne.w	8006b50 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80069f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f000 8140 	beq.w	8006c7e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a06:	429a      	cmp	r2, r3
 8006a08:	f080 8139 	bcs.w	8006c7e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a12:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a18:	69db      	ldr	r3, [r3, #28]
 8006a1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a1e:	f000 8088 	beq.w	8006b32 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	330c      	adds	r3, #12
 8006a28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006a30:	e853 3f00 	ldrex	r3, [r3]
 8006a34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006a38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	330c      	adds	r3, #12
 8006a4a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006a4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006a52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a56:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006a5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006a5e:	e841 2300 	strex	r3, r2, [r1]
 8006a62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006a66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d1d9      	bne.n	8006a22 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	3314      	adds	r3, #20
 8006a74:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a78:	e853 3f00 	ldrex	r3, [r3]
 8006a7c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006a7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a80:	f023 0301 	bic.w	r3, r3, #1
 8006a84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	3314      	adds	r3, #20
 8006a8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006a92:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006a96:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a98:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006a9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006a9e:	e841 2300 	strex	r3, r2, [r1]
 8006aa2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006aa4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d1e1      	bne.n	8006a6e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	3314      	adds	r3, #20
 8006ab0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ab4:	e853 3f00 	ldrex	r3, [r3]
 8006ab8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006aba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006abc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ac0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	3314      	adds	r3, #20
 8006aca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006ace:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006ad0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006ad4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006ad6:	e841 2300 	strex	r3, r2, [r1]
 8006ada:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006adc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d1e3      	bne.n	8006aaa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2220      	movs	r2, #32
 8006ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	330c      	adds	r3, #12
 8006af6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006afa:	e853 3f00 	ldrex	r3, [r3]
 8006afe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b02:	f023 0310 	bic.w	r3, r3, #16
 8006b06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	330c      	adds	r3, #12
 8006b10:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006b14:	65ba      	str	r2, [r7, #88]	; 0x58
 8006b16:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b1c:	e841 2300 	strex	r3, r2, [r1]
 8006b20:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006b22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d1e3      	bne.n	8006af0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f7fc fc24 	bl	800337a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	1ad3      	subs	r3, r2, r3
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	4619      	mov	r1, r3
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 f8b6 	bl	8006cb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b48:	e099      	b.n	8006c7e <HAL_UART_IRQHandler+0x50e>
 8006b4a:	bf00      	nop
 8006b4c:	08006eeb 	.word	0x08006eeb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	1ad3      	subs	r3, r2, r3
 8006b5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	f000 808b 	beq.w	8006c82 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006b6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	f000 8086 	beq.w	8006c82 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	330c      	adds	r3, #12
 8006b7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b80:	e853 3f00 	ldrex	r3, [r3]
 8006b84:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	330c      	adds	r3, #12
 8006b96:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006b9a:	647a      	str	r2, [r7, #68]	; 0x44
 8006b9c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ba0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ba2:	e841 2300 	strex	r3, r2, [r1]
 8006ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d1e3      	bne.n	8006b76 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	3314      	adds	r3, #20
 8006bb4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb8:	e853 3f00 	ldrex	r3, [r3]
 8006bbc:	623b      	str	r3, [r7, #32]
   return(result);
 8006bbe:	6a3b      	ldr	r3, [r7, #32]
 8006bc0:	f023 0301 	bic.w	r3, r3, #1
 8006bc4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	3314      	adds	r3, #20
 8006bce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006bd2:	633a      	str	r2, [r7, #48]	; 0x30
 8006bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006bd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bda:	e841 2300 	strex	r3, r2, [r1]
 8006bde:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d1e3      	bne.n	8006bae <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2220      	movs	r2, #32
 8006bea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	330c      	adds	r3, #12
 8006bfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	e853 3f00 	ldrex	r3, [r3]
 8006c02:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f023 0310 	bic.w	r3, r3, #16
 8006c0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	330c      	adds	r3, #12
 8006c14:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006c18:	61fa      	str	r2, [r7, #28]
 8006c1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c1c:	69b9      	ldr	r1, [r7, #24]
 8006c1e:	69fa      	ldr	r2, [r7, #28]
 8006c20:	e841 2300 	strex	r3, r2, [r1]
 8006c24:	617b      	str	r3, [r7, #20]
   return(result);
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d1e3      	bne.n	8006bf4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c30:	4619      	mov	r1, r3
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 f83e 	bl	8006cb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c38:	e023      	b.n	8006c82 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d009      	beq.n	8006c5a <HAL_UART_IRQHandler+0x4ea>
 8006c46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d003      	beq.n	8006c5a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 f95d 	bl	8006f12 <UART_Transmit_IT>
    return;
 8006c58:	e014      	b.n	8006c84 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00e      	beq.n	8006c84 <HAL_UART_IRQHandler+0x514>
 8006c66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d008      	beq.n	8006c84 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 f99d 	bl	8006fb2 <UART_EndTransmit_IT>
    return;
 8006c78:	e004      	b.n	8006c84 <HAL_UART_IRQHandler+0x514>
    return;
 8006c7a:	bf00      	nop
 8006c7c:	e002      	b.n	8006c84 <HAL_UART_IRQHandler+0x514>
      return;
 8006c7e:	bf00      	nop
 8006c80:	e000      	b.n	8006c84 <HAL_UART_IRQHandler+0x514>
      return;
 8006c82:	bf00      	nop
  }
}
 8006c84:	37e8      	adds	r7, #232	; 0xe8
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	bf00      	nop

08006c8c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006c94:	bf00      	nop
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006ca8:	bf00      	nop
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	460b      	mov	r3, r1
 8006cbe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006cc0:	bf00      	nop
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b090      	sub	sp, #64	; 0x40
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	603b      	str	r3, [r7, #0]
 8006cd8:	4613      	mov	r3, r2
 8006cda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cdc:	e050      	b.n	8006d80 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ce4:	d04c      	beq.n	8006d80 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006ce6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d007      	beq.n	8006cfc <UART_WaitOnFlagUntilTimeout+0x30>
 8006cec:	f7fc fa28 	bl	8003140 <HAL_GetTick>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	1ad3      	subs	r3, r2, r3
 8006cf6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d241      	bcs.n	8006d80 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	330c      	adds	r3, #12
 8006d02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d06:	e853 3f00 	ldrex	r3, [r3]
 8006d0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	330c      	adds	r3, #12
 8006d1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006d1c:	637a      	str	r2, [r7, #52]	; 0x34
 8006d1e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d24:	e841 2300 	strex	r3, r2, [r1]
 8006d28:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d1e5      	bne.n	8006cfc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	3314      	adds	r3, #20
 8006d36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	e853 3f00 	ldrex	r3, [r3]
 8006d3e:	613b      	str	r3, [r7, #16]
   return(result);
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	f023 0301 	bic.w	r3, r3, #1
 8006d46:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	3314      	adds	r3, #20
 8006d4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d50:	623a      	str	r2, [r7, #32]
 8006d52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d54:	69f9      	ldr	r1, [r7, #28]
 8006d56:	6a3a      	ldr	r2, [r7, #32]
 8006d58:	e841 2300 	strex	r3, r2, [r1]
 8006d5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d1e5      	bne.n	8006d30 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2220      	movs	r2, #32
 8006d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2220      	movs	r2, #32
 8006d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006d7c:	2303      	movs	r3, #3
 8006d7e:	e00f      	b.n	8006da0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	4013      	ands	r3, r2
 8006d8a:	68ba      	ldr	r2, [r7, #8]
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	bf0c      	ite	eq
 8006d90:	2301      	moveq	r3, #1
 8006d92:	2300      	movne	r3, #0
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	461a      	mov	r2, r3
 8006d98:	79fb      	ldrb	r3, [r7, #7]
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d09f      	beq.n	8006cde <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3740      	adds	r7, #64	; 0x40
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b085      	sub	sp, #20
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	60b9      	str	r1, [r7, #8]
 8006db2:	4613      	mov	r3, r2
 8006db4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	68ba      	ldr	r2, [r7, #8]
 8006dba:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	88fa      	ldrh	r2, [r7, #6]
 8006dc0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	88fa      	ldrh	r2, [r7, #6]
 8006dc6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2222      	movs	r2, #34	; 0x22
 8006dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	691b      	ldr	r3, [r3, #16]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d007      	beq.n	8006df6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	68da      	ldr	r2, [r3, #12]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006df4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	695a      	ldr	r2, [r3, #20]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f042 0201 	orr.w	r2, r2, #1
 8006e04:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68da      	ldr	r2, [r3, #12]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f042 0220 	orr.w	r2, r2, #32
 8006e14:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006e16:	2300      	movs	r3, #0
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3714      	adds	r7, #20
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b095      	sub	sp, #84	; 0x54
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	330c      	adds	r3, #12
 8006e32:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e36:	e853 3f00 	ldrex	r3, [r3]
 8006e3a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	330c      	adds	r3, #12
 8006e4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e4c:	643a      	str	r2, [r7, #64]	; 0x40
 8006e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e50:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e54:	e841 2300 	strex	r3, r2, [r1]
 8006e58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d1e5      	bne.n	8006e2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	3314      	adds	r3, #20
 8006e66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e68:	6a3b      	ldr	r3, [r7, #32]
 8006e6a:	e853 3f00 	ldrex	r3, [r3]
 8006e6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	f023 0301 	bic.w	r3, r3, #1
 8006e76:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	3314      	adds	r3, #20
 8006e7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e80:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e88:	e841 2300 	strex	r3, r2, [r1]
 8006e8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d1e5      	bne.n	8006e60 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d119      	bne.n	8006ed0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	330c      	adds	r3, #12
 8006ea2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	e853 3f00 	ldrex	r3, [r3]
 8006eaa:	60bb      	str	r3, [r7, #8]
   return(result);
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	f023 0310 	bic.w	r3, r3, #16
 8006eb2:	647b      	str	r3, [r7, #68]	; 0x44
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	330c      	adds	r3, #12
 8006eba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ebc:	61ba      	str	r2, [r7, #24]
 8006ebe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec0:	6979      	ldr	r1, [r7, #20]
 8006ec2:	69ba      	ldr	r2, [r7, #24]
 8006ec4:	e841 2300 	strex	r3, r2, [r1]
 8006ec8:	613b      	str	r3, [r7, #16]
   return(result);
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d1e5      	bne.n	8006e9c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2220      	movs	r2, #32
 8006ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006ede:	bf00      	nop
 8006ee0:	3754      	adds	r7, #84	; 0x54
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr

08006eea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006eea:	b580      	push	{r7, lr}
 8006eec:	b084      	sub	sp, #16
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2200      	movs	r2, #0
 8006efc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f04:	68f8      	ldr	r0, [r7, #12]
 8006f06:	f7ff fecb 	bl	8006ca0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f0a:	bf00      	nop
 8006f0c:	3710      	adds	r7, #16
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}

08006f12 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006f12:	b480      	push	{r7}
 8006f14:	b085      	sub	sp, #20
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	2b21      	cmp	r3, #33	; 0x21
 8006f24:	d13e      	bne.n	8006fa4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f2e:	d114      	bne.n	8006f5a <UART_Transmit_IT+0x48>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	691b      	ldr	r3, [r3, #16]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d110      	bne.n	8006f5a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6a1b      	ldr	r3, [r3, #32]
 8006f3c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	881b      	ldrh	r3, [r3, #0]
 8006f42:	461a      	mov	r2, r3
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f4c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a1b      	ldr	r3, [r3, #32]
 8006f52:	1c9a      	adds	r2, r3, #2
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	621a      	str	r2, [r3, #32]
 8006f58:	e008      	b.n	8006f6c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6a1b      	ldr	r3, [r3, #32]
 8006f5e:	1c59      	adds	r1, r3, #1
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	6211      	str	r1, [r2, #32]
 8006f64:	781a      	ldrb	r2, [r3, #0]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	3b01      	subs	r3, #1
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	4619      	mov	r1, r3
 8006f7a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d10f      	bne.n	8006fa0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	68da      	ldr	r2, [r3, #12]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f8e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	68da      	ldr	r2, [r3, #12]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f9e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	e000      	b.n	8006fa6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006fa4:	2302      	movs	r3, #2
  }
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3714      	adds	r7, #20
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr

08006fb2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006fb2:	b580      	push	{r7, lr}
 8006fb4:	b082      	sub	sp, #8
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	68da      	ldr	r2, [r3, #12]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fc8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2220      	movs	r2, #32
 8006fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f7ff fe5a 	bl	8006c8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3708      	adds	r7, #8
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}

08006fe2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b08c      	sub	sp, #48	; 0x30
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	2b22      	cmp	r3, #34	; 0x22
 8006ff4:	f040 80ab 	bne.w	800714e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007000:	d117      	bne.n	8007032 <UART_Receive_IT+0x50>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d113      	bne.n	8007032 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800700a:	2300      	movs	r3, #0
 800700c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007012:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	b29b      	uxth	r3, r3
 800701c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007020:	b29a      	uxth	r2, r3
 8007022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007024:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800702a:	1c9a      	adds	r2, r3, #2
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	629a      	str	r2, [r3, #40]	; 0x28
 8007030:	e026      	b.n	8007080 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007036:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007038:	2300      	movs	r3, #0
 800703a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007044:	d007      	beq.n	8007056 <UART_Receive_IT+0x74>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d10a      	bne.n	8007064 <UART_Receive_IT+0x82>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d106      	bne.n	8007064 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	b2da      	uxtb	r2, r3
 800705e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007060:	701a      	strb	r2, [r3, #0]
 8007062:	e008      	b.n	8007076 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	b2db      	uxtb	r3, r3
 800706c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007070:	b2da      	uxtb	r2, r3
 8007072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007074:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800707a:	1c5a      	adds	r2, r3, #1
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007084:	b29b      	uxth	r3, r3
 8007086:	3b01      	subs	r3, #1
 8007088:	b29b      	uxth	r3, r3
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	4619      	mov	r1, r3
 800708e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007090:	2b00      	cmp	r3, #0
 8007092:	d15a      	bne.n	800714a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68da      	ldr	r2, [r3, #12]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f022 0220 	bic.w	r2, r2, #32
 80070a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	68da      	ldr	r2, [r3, #12]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80070b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	695a      	ldr	r2, [r3, #20]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f022 0201 	bic.w	r2, r2, #1
 80070c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2220      	movs	r2, #32
 80070c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d135      	bne.n	8007140 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	330c      	adds	r3, #12
 80070e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	e853 3f00 	ldrex	r3, [r3]
 80070e8:	613b      	str	r3, [r7, #16]
   return(result);
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	f023 0310 	bic.w	r3, r3, #16
 80070f0:	627b      	str	r3, [r7, #36]	; 0x24
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	330c      	adds	r3, #12
 80070f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070fa:	623a      	str	r2, [r7, #32]
 80070fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070fe:	69f9      	ldr	r1, [r7, #28]
 8007100:	6a3a      	ldr	r2, [r7, #32]
 8007102:	e841 2300 	strex	r3, r2, [r1]
 8007106:	61bb      	str	r3, [r7, #24]
   return(result);
 8007108:	69bb      	ldr	r3, [r7, #24]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d1e5      	bne.n	80070da <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f003 0310 	and.w	r3, r3, #16
 8007118:	2b10      	cmp	r3, #16
 800711a:	d10a      	bne.n	8007132 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800711c:	2300      	movs	r3, #0
 800711e:	60fb      	str	r3, [r7, #12]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	60fb      	str	r3, [r7, #12]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	60fb      	str	r3, [r7, #12]
 8007130:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007136:	4619      	mov	r1, r3
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f7ff fdbb 	bl	8006cb4 <HAL_UARTEx_RxEventCallback>
 800713e:	e002      	b.n	8007146 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f7fa fef3 	bl	8001f2c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007146:	2300      	movs	r3, #0
 8007148:	e002      	b.n	8007150 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800714a:	2300      	movs	r3, #0
 800714c:	e000      	b.n	8007150 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800714e:	2302      	movs	r3, #2
  }
}
 8007150:	4618      	mov	r0, r3
 8007152:	3730      	adds	r7, #48	; 0x30
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007158:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800715c:	b0c0      	sub	sp, #256	; 0x100
 800715e:	af00      	add	r7, sp, #0
 8007160:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	691b      	ldr	r3, [r3, #16]
 800716c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007174:	68d9      	ldr	r1, [r3, #12]
 8007176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	ea40 0301 	orr.w	r3, r0, r1
 8007180:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007186:	689a      	ldr	r2, [r3, #8]
 8007188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800718c:	691b      	ldr	r3, [r3, #16]
 800718e:	431a      	orrs	r2, r3
 8007190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007194:	695b      	ldr	r3, [r3, #20]
 8007196:	431a      	orrs	r2, r3
 8007198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800719c:	69db      	ldr	r3, [r3, #28]
 800719e:	4313      	orrs	r3, r2
 80071a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80071a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80071b0:	f021 010c 	bic.w	r1, r1, #12
 80071b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80071be:	430b      	orrs	r3, r1
 80071c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80071c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	695b      	ldr	r3, [r3, #20]
 80071ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80071ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071d2:	6999      	ldr	r1, [r3, #24]
 80071d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	ea40 0301 	orr.w	r3, r0, r1
 80071de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80071e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	4b8f      	ldr	r3, [pc, #572]	; (8007424 <UART_SetConfig+0x2cc>)
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d005      	beq.n	80071f8 <UART_SetConfig+0xa0>
 80071ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	4b8d      	ldr	r3, [pc, #564]	; (8007428 <UART_SetConfig+0x2d0>)
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d104      	bne.n	8007202 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80071f8:	f7fd ffe6 	bl	80051c8 <HAL_RCC_GetPCLK2Freq>
 80071fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007200:	e003      	b.n	800720a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007202:	f7fd ffcd 	bl	80051a0 <HAL_RCC_GetPCLK1Freq>
 8007206:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800720a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800720e:	69db      	ldr	r3, [r3, #28]
 8007210:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007214:	f040 810c 	bne.w	8007430 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007218:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800721c:	2200      	movs	r2, #0
 800721e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007222:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007226:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800722a:	4622      	mov	r2, r4
 800722c:	462b      	mov	r3, r5
 800722e:	1891      	adds	r1, r2, r2
 8007230:	65b9      	str	r1, [r7, #88]	; 0x58
 8007232:	415b      	adcs	r3, r3
 8007234:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007236:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800723a:	4621      	mov	r1, r4
 800723c:	eb12 0801 	adds.w	r8, r2, r1
 8007240:	4629      	mov	r1, r5
 8007242:	eb43 0901 	adc.w	r9, r3, r1
 8007246:	f04f 0200 	mov.w	r2, #0
 800724a:	f04f 0300 	mov.w	r3, #0
 800724e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007252:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007256:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800725a:	4690      	mov	r8, r2
 800725c:	4699      	mov	r9, r3
 800725e:	4623      	mov	r3, r4
 8007260:	eb18 0303 	adds.w	r3, r8, r3
 8007264:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007268:	462b      	mov	r3, r5
 800726a:	eb49 0303 	adc.w	r3, r9, r3
 800726e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800727e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007282:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007286:	460b      	mov	r3, r1
 8007288:	18db      	adds	r3, r3, r3
 800728a:	653b      	str	r3, [r7, #80]	; 0x50
 800728c:	4613      	mov	r3, r2
 800728e:	eb42 0303 	adc.w	r3, r2, r3
 8007292:	657b      	str	r3, [r7, #84]	; 0x54
 8007294:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007298:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800729c:	f7f9 fd04 	bl	8000ca8 <__aeabi_uldivmod>
 80072a0:	4602      	mov	r2, r0
 80072a2:	460b      	mov	r3, r1
 80072a4:	4b61      	ldr	r3, [pc, #388]	; (800742c <UART_SetConfig+0x2d4>)
 80072a6:	fba3 2302 	umull	r2, r3, r3, r2
 80072aa:	095b      	lsrs	r3, r3, #5
 80072ac:	011c      	lsls	r4, r3, #4
 80072ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072b2:	2200      	movs	r2, #0
 80072b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80072b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80072bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80072c0:	4642      	mov	r2, r8
 80072c2:	464b      	mov	r3, r9
 80072c4:	1891      	adds	r1, r2, r2
 80072c6:	64b9      	str	r1, [r7, #72]	; 0x48
 80072c8:	415b      	adcs	r3, r3
 80072ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80072d0:	4641      	mov	r1, r8
 80072d2:	eb12 0a01 	adds.w	sl, r2, r1
 80072d6:	4649      	mov	r1, r9
 80072d8:	eb43 0b01 	adc.w	fp, r3, r1
 80072dc:	f04f 0200 	mov.w	r2, #0
 80072e0:	f04f 0300 	mov.w	r3, #0
 80072e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80072e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80072ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072f0:	4692      	mov	sl, r2
 80072f2:	469b      	mov	fp, r3
 80072f4:	4643      	mov	r3, r8
 80072f6:	eb1a 0303 	adds.w	r3, sl, r3
 80072fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80072fe:	464b      	mov	r3, r9
 8007300:	eb4b 0303 	adc.w	r3, fp, r3
 8007304:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007314:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007318:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800731c:	460b      	mov	r3, r1
 800731e:	18db      	adds	r3, r3, r3
 8007320:	643b      	str	r3, [r7, #64]	; 0x40
 8007322:	4613      	mov	r3, r2
 8007324:	eb42 0303 	adc.w	r3, r2, r3
 8007328:	647b      	str	r3, [r7, #68]	; 0x44
 800732a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800732e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007332:	f7f9 fcb9 	bl	8000ca8 <__aeabi_uldivmod>
 8007336:	4602      	mov	r2, r0
 8007338:	460b      	mov	r3, r1
 800733a:	4611      	mov	r1, r2
 800733c:	4b3b      	ldr	r3, [pc, #236]	; (800742c <UART_SetConfig+0x2d4>)
 800733e:	fba3 2301 	umull	r2, r3, r3, r1
 8007342:	095b      	lsrs	r3, r3, #5
 8007344:	2264      	movs	r2, #100	; 0x64
 8007346:	fb02 f303 	mul.w	r3, r2, r3
 800734a:	1acb      	subs	r3, r1, r3
 800734c:	00db      	lsls	r3, r3, #3
 800734e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007352:	4b36      	ldr	r3, [pc, #216]	; (800742c <UART_SetConfig+0x2d4>)
 8007354:	fba3 2302 	umull	r2, r3, r3, r2
 8007358:	095b      	lsrs	r3, r3, #5
 800735a:	005b      	lsls	r3, r3, #1
 800735c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007360:	441c      	add	r4, r3
 8007362:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007366:	2200      	movs	r2, #0
 8007368:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800736c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007370:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007374:	4642      	mov	r2, r8
 8007376:	464b      	mov	r3, r9
 8007378:	1891      	adds	r1, r2, r2
 800737a:	63b9      	str	r1, [r7, #56]	; 0x38
 800737c:	415b      	adcs	r3, r3
 800737e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007380:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007384:	4641      	mov	r1, r8
 8007386:	1851      	adds	r1, r2, r1
 8007388:	6339      	str	r1, [r7, #48]	; 0x30
 800738a:	4649      	mov	r1, r9
 800738c:	414b      	adcs	r3, r1
 800738e:	637b      	str	r3, [r7, #52]	; 0x34
 8007390:	f04f 0200 	mov.w	r2, #0
 8007394:	f04f 0300 	mov.w	r3, #0
 8007398:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800739c:	4659      	mov	r1, fp
 800739e:	00cb      	lsls	r3, r1, #3
 80073a0:	4651      	mov	r1, sl
 80073a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073a6:	4651      	mov	r1, sl
 80073a8:	00ca      	lsls	r2, r1, #3
 80073aa:	4610      	mov	r0, r2
 80073ac:	4619      	mov	r1, r3
 80073ae:	4603      	mov	r3, r0
 80073b0:	4642      	mov	r2, r8
 80073b2:	189b      	adds	r3, r3, r2
 80073b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80073b8:	464b      	mov	r3, r9
 80073ba:	460a      	mov	r2, r1
 80073bc:	eb42 0303 	adc.w	r3, r2, r3
 80073c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80073c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80073d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80073d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80073d8:	460b      	mov	r3, r1
 80073da:	18db      	adds	r3, r3, r3
 80073dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80073de:	4613      	mov	r3, r2
 80073e0:	eb42 0303 	adc.w	r3, r2, r3
 80073e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80073ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80073ee:	f7f9 fc5b 	bl	8000ca8 <__aeabi_uldivmod>
 80073f2:	4602      	mov	r2, r0
 80073f4:	460b      	mov	r3, r1
 80073f6:	4b0d      	ldr	r3, [pc, #52]	; (800742c <UART_SetConfig+0x2d4>)
 80073f8:	fba3 1302 	umull	r1, r3, r3, r2
 80073fc:	095b      	lsrs	r3, r3, #5
 80073fe:	2164      	movs	r1, #100	; 0x64
 8007400:	fb01 f303 	mul.w	r3, r1, r3
 8007404:	1ad3      	subs	r3, r2, r3
 8007406:	00db      	lsls	r3, r3, #3
 8007408:	3332      	adds	r3, #50	; 0x32
 800740a:	4a08      	ldr	r2, [pc, #32]	; (800742c <UART_SetConfig+0x2d4>)
 800740c:	fba2 2303 	umull	r2, r3, r2, r3
 8007410:	095b      	lsrs	r3, r3, #5
 8007412:	f003 0207 	and.w	r2, r3, #7
 8007416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4422      	add	r2, r4
 800741e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007420:	e105      	b.n	800762e <UART_SetConfig+0x4d6>
 8007422:	bf00      	nop
 8007424:	40011000 	.word	0x40011000
 8007428:	40011400 	.word	0x40011400
 800742c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007430:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007434:	2200      	movs	r2, #0
 8007436:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800743a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800743e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007442:	4642      	mov	r2, r8
 8007444:	464b      	mov	r3, r9
 8007446:	1891      	adds	r1, r2, r2
 8007448:	6239      	str	r1, [r7, #32]
 800744a:	415b      	adcs	r3, r3
 800744c:	627b      	str	r3, [r7, #36]	; 0x24
 800744e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007452:	4641      	mov	r1, r8
 8007454:	1854      	adds	r4, r2, r1
 8007456:	4649      	mov	r1, r9
 8007458:	eb43 0501 	adc.w	r5, r3, r1
 800745c:	f04f 0200 	mov.w	r2, #0
 8007460:	f04f 0300 	mov.w	r3, #0
 8007464:	00eb      	lsls	r3, r5, #3
 8007466:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800746a:	00e2      	lsls	r2, r4, #3
 800746c:	4614      	mov	r4, r2
 800746e:	461d      	mov	r5, r3
 8007470:	4643      	mov	r3, r8
 8007472:	18e3      	adds	r3, r4, r3
 8007474:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007478:	464b      	mov	r3, r9
 800747a:	eb45 0303 	adc.w	r3, r5, r3
 800747e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800748e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007492:	f04f 0200 	mov.w	r2, #0
 8007496:	f04f 0300 	mov.w	r3, #0
 800749a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800749e:	4629      	mov	r1, r5
 80074a0:	008b      	lsls	r3, r1, #2
 80074a2:	4621      	mov	r1, r4
 80074a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074a8:	4621      	mov	r1, r4
 80074aa:	008a      	lsls	r2, r1, #2
 80074ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80074b0:	f7f9 fbfa 	bl	8000ca8 <__aeabi_uldivmod>
 80074b4:	4602      	mov	r2, r0
 80074b6:	460b      	mov	r3, r1
 80074b8:	4b60      	ldr	r3, [pc, #384]	; (800763c <UART_SetConfig+0x4e4>)
 80074ba:	fba3 2302 	umull	r2, r3, r3, r2
 80074be:	095b      	lsrs	r3, r3, #5
 80074c0:	011c      	lsls	r4, r3, #4
 80074c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074c6:	2200      	movs	r2, #0
 80074c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80074cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80074d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80074d4:	4642      	mov	r2, r8
 80074d6:	464b      	mov	r3, r9
 80074d8:	1891      	adds	r1, r2, r2
 80074da:	61b9      	str	r1, [r7, #24]
 80074dc:	415b      	adcs	r3, r3
 80074de:	61fb      	str	r3, [r7, #28]
 80074e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074e4:	4641      	mov	r1, r8
 80074e6:	1851      	adds	r1, r2, r1
 80074e8:	6139      	str	r1, [r7, #16]
 80074ea:	4649      	mov	r1, r9
 80074ec:	414b      	adcs	r3, r1
 80074ee:	617b      	str	r3, [r7, #20]
 80074f0:	f04f 0200 	mov.w	r2, #0
 80074f4:	f04f 0300 	mov.w	r3, #0
 80074f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80074fc:	4659      	mov	r1, fp
 80074fe:	00cb      	lsls	r3, r1, #3
 8007500:	4651      	mov	r1, sl
 8007502:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007506:	4651      	mov	r1, sl
 8007508:	00ca      	lsls	r2, r1, #3
 800750a:	4610      	mov	r0, r2
 800750c:	4619      	mov	r1, r3
 800750e:	4603      	mov	r3, r0
 8007510:	4642      	mov	r2, r8
 8007512:	189b      	adds	r3, r3, r2
 8007514:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007518:	464b      	mov	r3, r9
 800751a:	460a      	mov	r2, r1
 800751c:	eb42 0303 	adc.w	r3, r2, r3
 8007520:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	67bb      	str	r3, [r7, #120]	; 0x78
 800752e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007530:	f04f 0200 	mov.w	r2, #0
 8007534:	f04f 0300 	mov.w	r3, #0
 8007538:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800753c:	4649      	mov	r1, r9
 800753e:	008b      	lsls	r3, r1, #2
 8007540:	4641      	mov	r1, r8
 8007542:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007546:	4641      	mov	r1, r8
 8007548:	008a      	lsls	r2, r1, #2
 800754a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800754e:	f7f9 fbab 	bl	8000ca8 <__aeabi_uldivmod>
 8007552:	4602      	mov	r2, r0
 8007554:	460b      	mov	r3, r1
 8007556:	4b39      	ldr	r3, [pc, #228]	; (800763c <UART_SetConfig+0x4e4>)
 8007558:	fba3 1302 	umull	r1, r3, r3, r2
 800755c:	095b      	lsrs	r3, r3, #5
 800755e:	2164      	movs	r1, #100	; 0x64
 8007560:	fb01 f303 	mul.w	r3, r1, r3
 8007564:	1ad3      	subs	r3, r2, r3
 8007566:	011b      	lsls	r3, r3, #4
 8007568:	3332      	adds	r3, #50	; 0x32
 800756a:	4a34      	ldr	r2, [pc, #208]	; (800763c <UART_SetConfig+0x4e4>)
 800756c:	fba2 2303 	umull	r2, r3, r2, r3
 8007570:	095b      	lsrs	r3, r3, #5
 8007572:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007576:	441c      	add	r4, r3
 8007578:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800757c:	2200      	movs	r2, #0
 800757e:	673b      	str	r3, [r7, #112]	; 0x70
 8007580:	677a      	str	r2, [r7, #116]	; 0x74
 8007582:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007586:	4642      	mov	r2, r8
 8007588:	464b      	mov	r3, r9
 800758a:	1891      	adds	r1, r2, r2
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	415b      	adcs	r3, r3
 8007590:	60fb      	str	r3, [r7, #12]
 8007592:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007596:	4641      	mov	r1, r8
 8007598:	1851      	adds	r1, r2, r1
 800759a:	6039      	str	r1, [r7, #0]
 800759c:	4649      	mov	r1, r9
 800759e:	414b      	adcs	r3, r1
 80075a0:	607b      	str	r3, [r7, #4]
 80075a2:	f04f 0200 	mov.w	r2, #0
 80075a6:	f04f 0300 	mov.w	r3, #0
 80075aa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80075ae:	4659      	mov	r1, fp
 80075b0:	00cb      	lsls	r3, r1, #3
 80075b2:	4651      	mov	r1, sl
 80075b4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075b8:	4651      	mov	r1, sl
 80075ba:	00ca      	lsls	r2, r1, #3
 80075bc:	4610      	mov	r0, r2
 80075be:	4619      	mov	r1, r3
 80075c0:	4603      	mov	r3, r0
 80075c2:	4642      	mov	r2, r8
 80075c4:	189b      	adds	r3, r3, r2
 80075c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80075c8:	464b      	mov	r3, r9
 80075ca:	460a      	mov	r2, r1
 80075cc:	eb42 0303 	adc.w	r3, r2, r3
 80075d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80075d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	663b      	str	r3, [r7, #96]	; 0x60
 80075dc:	667a      	str	r2, [r7, #100]	; 0x64
 80075de:	f04f 0200 	mov.w	r2, #0
 80075e2:	f04f 0300 	mov.w	r3, #0
 80075e6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80075ea:	4649      	mov	r1, r9
 80075ec:	008b      	lsls	r3, r1, #2
 80075ee:	4641      	mov	r1, r8
 80075f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075f4:	4641      	mov	r1, r8
 80075f6:	008a      	lsls	r2, r1, #2
 80075f8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80075fc:	f7f9 fb54 	bl	8000ca8 <__aeabi_uldivmod>
 8007600:	4602      	mov	r2, r0
 8007602:	460b      	mov	r3, r1
 8007604:	4b0d      	ldr	r3, [pc, #52]	; (800763c <UART_SetConfig+0x4e4>)
 8007606:	fba3 1302 	umull	r1, r3, r3, r2
 800760a:	095b      	lsrs	r3, r3, #5
 800760c:	2164      	movs	r1, #100	; 0x64
 800760e:	fb01 f303 	mul.w	r3, r1, r3
 8007612:	1ad3      	subs	r3, r2, r3
 8007614:	011b      	lsls	r3, r3, #4
 8007616:	3332      	adds	r3, #50	; 0x32
 8007618:	4a08      	ldr	r2, [pc, #32]	; (800763c <UART_SetConfig+0x4e4>)
 800761a:	fba2 2303 	umull	r2, r3, r2, r3
 800761e:	095b      	lsrs	r3, r3, #5
 8007620:	f003 020f 	and.w	r2, r3, #15
 8007624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4422      	add	r2, r4
 800762c:	609a      	str	r2, [r3, #8]
}
 800762e:	bf00      	nop
 8007630:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007634:	46bd      	mov	sp, r7
 8007636:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800763a:	bf00      	nop
 800763c:	51eb851f 	.word	0x51eb851f

08007640 <__errno>:
 8007640:	4b01      	ldr	r3, [pc, #4]	; (8007648 <__errno+0x8>)
 8007642:	6818      	ldr	r0, [r3, #0]
 8007644:	4770      	bx	lr
 8007646:	bf00      	nop
 8007648:	2000000c 	.word	0x2000000c

0800764c <__libc_init_array>:
 800764c:	b570      	push	{r4, r5, r6, lr}
 800764e:	4d0d      	ldr	r5, [pc, #52]	; (8007684 <__libc_init_array+0x38>)
 8007650:	4c0d      	ldr	r4, [pc, #52]	; (8007688 <__libc_init_array+0x3c>)
 8007652:	1b64      	subs	r4, r4, r5
 8007654:	10a4      	asrs	r4, r4, #2
 8007656:	2600      	movs	r6, #0
 8007658:	42a6      	cmp	r6, r4
 800765a:	d109      	bne.n	8007670 <__libc_init_array+0x24>
 800765c:	4d0b      	ldr	r5, [pc, #44]	; (800768c <__libc_init_array+0x40>)
 800765e:	4c0c      	ldr	r4, [pc, #48]	; (8007690 <__libc_init_array+0x44>)
 8007660:	f005 feb0 	bl	800d3c4 <_init>
 8007664:	1b64      	subs	r4, r4, r5
 8007666:	10a4      	asrs	r4, r4, #2
 8007668:	2600      	movs	r6, #0
 800766a:	42a6      	cmp	r6, r4
 800766c:	d105      	bne.n	800767a <__libc_init_array+0x2e>
 800766e:	bd70      	pop	{r4, r5, r6, pc}
 8007670:	f855 3b04 	ldr.w	r3, [r5], #4
 8007674:	4798      	blx	r3
 8007676:	3601      	adds	r6, #1
 8007678:	e7ee      	b.n	8007658 <__libc_init_array+0xc>
 800767a:	f855 3b04 	ldr.w	r3, [r5], #4
 800767e:	4798      	blx	r3
 8007680:	3601      	adds	r6, #1
 8007682:	e7f2      	b.n	800766a <__libc_init_array+0x1e>
 8007684:	0800da28 	.word	0x0800da28
 8007688:	0800da28 	.word	0x0800da28
 800768c:	0800da28 	.word	0x0800da28
 8007690:	0800da2c 	.word	0x0800da2c

08007694 <memset>:
 8007694:	4402      	add	r2, r0
 8007696:	4603      	mov	r3, r0
 8007698:	4293      	cmp	r3, r2
 800769a:	d100      	bne.n	800769e <memset+0xa>
 800769c:	4770      	bx	lr
 800769e:	f803 1b01 	strb.w	r1, [r3], #1
 80076a2:	e7f9      	b.n	8007698 <memset+0x4>

080076a4 <__cvt>:
 80076a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076a8:	ec55 4b10 	vmov	r4, r5, d0
 80076ac:	2d00      	cmp	r5, #0
 80076ae:	460e      	mov	r6, r1
 80076b0:	4619      	mov	r1, r3
 80076b2:	462b      	mov	r3, r5
 80076b4:	bfbb      	ittet	lt
 80076b6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80076ba:	461d      	movlt	r5, r3
 80076bc:	2300      	movge	r3, #0
 80076be:	232d      	movlt	r3, #45	; 0x2d
 80076c0:	700b      	strb	r3, [r1, #0]
 80076c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076c4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80076c8:	4691      	mov	r9, r2
 80076ca:	f023 0820 	bic.w	r8, r3, #32
 80076ce:	bfbc      	itt	lt
 80076d0:	4622      	movlt	r2, r4
 80076d2:	4614      	movlt	r4, r2
 80076d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80076d8:	d005      	beq.n	80076e6 <__cvt+0x42>
 80076da:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80076de:	d100      	bne.n	80076e2 <__cvt+0x3e>
 80076e0:	3601      	adds	r6, #1
 80076e2:	2102      	movs	r1, #2
 80076e4:	e000      	b.n	80076e8 <__cvt+0x44>
 80076e6:	2103      	movs	r1, #3
 80076e8:	ab03      	add	r3, sp, #12
 80076ea:	9301      	str	r3, [sp, #4]
 80076ec:	ab02      	add	r3, sp, #8
 80076ee:	9300      	str	r3, [sp, #0]
 80076f0:	ec45 4b10 	vmov	d0, r4, r5
 80076f4:	4653      	mov	r3, sl
 80076f6:	4632      	mov	r2, r6
 80076f8:	f001 fe56 	bl	80093a8 <_dtoa_r>
 80076fc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007700:	4607      	mov	r7, r0
 8007702:	d102      	bne.n	800770a <__cvt+0x66>
 8007704:	f019 0f01 	tst.w	r9, #1
 8007708:	d022      	beq.n	8007750 <__cvt+0xac>
 800770a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800770e:	eb07 0906 	add.w	r9, r7, r6
 8007712:	d110      	bne.n	8007736 <__cvt+0x92>
 8007714:	783b      	ldrb	r3, [r7, #0]
 8007716:	2b30      	cmp	r3, #48	; 0x30
 8007718:	d10a      	bne.n	8007730 <__cvt+0x8c>
 800771a:	2200      	movs	r2, #0
 800771c:	2300      	movs	r3, #0
 800771e:	4620      	mov	r0, r4
 8007720:	4629      	mov	r1, r5
 8007722:	f7f9 f9e1 	bl	8000ae8 <__aeabi_dcmpeq>
 8007726:	b918      	cbnz	r0, 8007730 <__cvt+0x8c>
 8007728:	f1c6 0601 	rsb	r6, r6, #1
 800772c:	f8ca 6000 	str.w	r6, [sl]
 8007730:	f8da 3000 	ldr.w	r3, [sl]
 8007734:	4499      	add	r9, r3
 8007736:	2200      	movs	r2, #0
 8007738:	2300      	movs	r3, #0
 800773a:	4620      	mov	r0, r4
 800773c:	4629      	mov	r1, r5
 800773e:	f7f9 f9d3 	bl	8000ae8 <__aeabi_dcmpeq>
 8007742:	b108      	cbz	r0, 8007748 <__cvt+0xa4>
 8007744:	f8cd 900c 	str.w	r9, [sp, #12]
 8007748:	2230      	movs	r2, #48	; 0x30
 800774a:	9b03      	ldr	r3, [sp, #12]
 800774c:	454b      	cmp	r3, r9
 800774e:	d307      	bcc.n	8007760 <__cvt+0xbc>
 8007750:	9b03      	ldr	r3, [sp, #12]
 8007752:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007754:	1bdb      	subs	r3, r3, r7
 8007756:	4638      	mov	r0, r7
 8007758:	6013      	str	r3, [r2, #0]
 800775a:	b004      	add	sp, #16
 800775c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007760:	1c59      	adds	r1, r3, #1
 8007762:	9103      	str	r1, [sp, #12]
 8007764:	701a      	strb	r2, [r3, #0]
 8007766:	e7f0      	b.n	800774a <__cvt+0xa6>

08007768 <__exponent>:
 8007768:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800776a:	4603      	mov	r3, r0
 800776c:	2900      	cmp	r1, #0
 800776e:	bfb8      	it	lt
 8007770:	4249      	neglt	r1, r1
 8007772:	f803 2b02 	strb.w	r2, [r3], #2
 8007776:	bfb4      	ite	lt
 8007778:	222d      	movlt	r2, #45	; 0x2d
 800777a:	222b      	movge	r2, #43	; 0x2b
 800777c:	2909      	cmp	r1, #9
 800777e:	7042      	strb	r2, [r0, #1]
 8007780:	dd2a      	ble.n	80077d8 <__exponent+0x70>
 8007782:	f10d 0407 	add.w	r4, sp, #7
 8007786:	46a4      	mov	ip, r4
 8007788:	270a      	movs	r7, #10
 800778a:	46a6      	mov	lr, r4
 800778c:	460a      	mov	r2, r1
 800778e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007792:	fb07 1516 	mls	r5, r7, r6, r1
 8007796:	3530      	adds	r5, #48	; 0x30
 8007798:	2a63      	cmp	r2, #99	; 0x63
 800779a:	f104 34ff 	add.w	r4, r4, #4294967295
 800779e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80077a2:	4631      	mov	r1, r6
 80077a4:	dcf1      	bgt.n	800778a <__exponent+0x22>
 80077a6:	3130      	adds	r1, #48	; 0x30
 80077a8:	f1ae 0502 	sub.w	r5, lr, #2
 80077ac:	f804 1c01 	strb.w	r1, [r4, #-1]
 80077b0:	1c44      	adds	r4, r0, #1
 80077b2:	4629      	mov	r1, r5
 80077b4:	4561      	cmp	r1, ip
 80077b6:	d30a      	bcc.n	80077ce <__exponent+0x66>
 80077b8:	f10d 0209 	add.w	r2, sp, #9
 80077bc:	eba2 020e 	sub.w	r2, r2, lr
 80077c0:	4565      	cmp	r5, ip
 80077c2:	bf88      	it	hi
 80077c4:	2200      	movhi	r2, #0
 80077c6:	4413      	add	r3, r2
 80077c8:	1a18      	subs	r0, r3, r0
 80077ca:	b003      	add	sp, #12
 80077cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077d2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80077d6:	e7ed      	b.n	80077b4 <__exponent+0x4c>
 80077d8:	2330      	movs	r3, #48	; 0x30
 80077da:	3130      	adds	r1, #48	; 0x30
 80077dc:	7083      	strb	r3, [r0, #2]
 80077de:	70c1      	strb	r1, [r0, #3]
 80077e0:	1d03      	adds	r3, r0, #4
 80077e2:	e7f1      	b.n	80077c8 <__exponent+0x60>

080077e4 <_printf_float>:
 80077e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077e8:	ed2d 8b02 	vpush	{d8}
 80077ec:	b08d      	sub	sp, #52	; 0x34
 80077ee:	460c      	mov	r4, r1
 80077f0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80077f4:	4616      	mov	r6, r2
 80077f6:	461f      	mov	r7, r3
 80077f8:	4605      	mov	r5, r0
 80077fa:	f002 ff33 	bl	800a664 <_localeconv_r>
 80077fe:	f8d0 a000 	ldr.w	sl, [r0]
 8007802:	4650      	mov	r0, sl
 8007804:	f7f8 fcf4 	bl	80001f0 <strlen>
 8007808:	2300      	movs	r3, #0
 800780a:	930a      	str	r3, [sp, #40]	; 0x28
 800780c:	6823      	ldr	r3, [r4, #0]
 800780e:	9305      	str	r3, [sp, #20]
 8007810:	f8d8 3000 	ldr.w	r3, [r8]
 8007814:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007818:	3307      	adds	r3, #7
 800781a:	f023 0307 	bic.w	r3, r3, #7
 800781e:	f103 0208 	add.w	r2, r3, #8
 8007822:	f8c8 2000 	str.w	r2, [r8]
 8007826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800782e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007832:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007836:	9307      	str	r3, [sp, #28]
 8007838:	f8cd 8018 	str.w	r8, [sp, #24]
 800783c:	ee08 0a10 	vmov	s16, r0
 8007840:	4b9f      	ldr	r3, [pc, #636]	; (8007ac0 <_printf_float+0x2dc>)
 8007842:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007846:	f04f 32ff 	mov.w	r2, #4294967295
 800784a:	f7f9 f97f 	bl	8000b4c <__aeabi_dcmpun>
 800784e:	bb88      	cbnz	r0, 80078b4 <_printf_float+0xd0>
 8007850:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007854:	4b9a      	ldr	r3, [pc, #616]	; (8007ac0 <_printf_float+0x2dc>)
 8007856:	f04f 32ff 	mov.w	r2, #4294967295
 800785a:	f7f9 f959 	bl	8000b10 <__aeabi_dcmple>
 800785e:	bb48      	cbnz	r0, 80078b4 <_printf_float+0xd0>
 8007860:	2200      	movs	r2, #0
 8007862:	2300      	movs	r3, #0
 8007864:	4640      	mov	r0, r8
 8007866:	4649      	mov	r1, r9
 8007868:	f7f9 f948 	bl	8000afc <__aeabi_dcmplt>
 800786c:	b110      	cbz	r0, 8007874 <_printf_float+0x90>
 800786e:	232d      	movs	r3, #45	; 0x2d
 8007870:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007874:	4b93      	ldr	r3, [pc, #588]	; (8007ac4 <_printf_float+0x2e0>)
 8007876:	4894      	ldr	r0, [pc, #592]	; (8007ac8 <_printf_float+0x2e4>)
 8007878:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800787c:	bf94      	ite	ls
 800787e:	4698      	movls	r8, r3
 8007880:	4680      	movhi	r8, r0
 8007882:	2303      	movs	r3, #3
 8007884:	6123      	str	r3, [r4, #16]
 8007886:	9b05      	ldr	r3, [sp, #20]
 8007888:	f023 0204 	bic.w	r2, r3, #4
 800788c:	6022      	str	r2, [r4, #0]
 800788e:	f04f 0900 	mov.w	r9, #0
 8007892:	9700      	str	r7, [sp, #0]
 8007894:	4633      	mov	r3, r6
 8007896:	aa0b      	add	r2, sp, #44	; 0x2c
 8007898:	4621      	mov	r1, r4
 800789a:	4628      	mov	r0, r5
 800789c:	f000 f9d8 	bl	8007c50 <_printf_common>
 80078a0:	3001      	adds	r0, #1
 80078a2:	f040 8090 	bne.w	80079c6 <_printf_float+0x1e2>
 80078a6:	f04f 30ff 	mov.w	r0, #4294967295
 80078aa:	b00d      	add	sp, #52	; 0x34
 80078ac:	ecbd 8b02 	vpop	{d8}
 80078b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078b4:	4642      	mov	r2, r8
 80078b6:	464b      	mov	r3, r9
 80078b8:	4640      	mov	r0, r8
 80078ba:	4649      	mov	r1, r9
 80078bc:	f7f9 f946 	bl	8000b4c <__aeabi_dcmpun>
 80078c0:	b140      	cbz	r0, 80078d4 <_printf_float+0xf0>
 80078c2:	464b      	mov	r3, r9
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	bfbc      	itt	lt
 80078c8:	232d      	movlt	r3, #45	; 0x2d
 80078ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80078ce:	487f      	ldr	r0, [pc, #508]	; (8007acc <_printf_float+0x2e8>)
 80078d0:	4b7f      	ldr	r3, [pc, #508]	; (8007ad0 <_printf_float+0x2ec>)
 80078d2:	e7d1      	b.n	8007878 <_printf_float+0x94>
 80078d4:	6863      	ldr	r3, [r4, #4]
 80078d6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80078da:	9206      	str	r2, [sp, #24]
 80078dc:	1c5a      	adds	r2, r3, #1
 80078de:	d13f      	bne.n	8007960 <_printf_float+0x17c>
 80078e0:	2306      	movs	r3, #6
 80078e2:	6063      	str	r3, [r4, #4]
 80078e4:	9b05      	ldr	r3, [sp, #20]
 80078e6:	6861      	ldr	r1, [r4, #4]
 80078e8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80078ec:	2300      	movs	r3, #0
 80078ee:	9303      	str	r3, [sp, #12]
 80078f0:	ab0a      	add	r3, sp, #40	; 0x28
 80078f2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80078f6:	ab09      	add	r3, sp, #36	; 0x24
 80078f8:	ec49 8b10 	vmov	d0, r8, r9
 80078fc:	9300      	str	r3, [sp, #0]
 80078fe:	6022      	str	r2, [r4, #0]
 8007900:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007904:	4628      	mov	r0, r5
 8007906:	f7ff fecd 	bl	80076a4 <__cvt>
 800790a:	9b06      	ldr	r3, [sp, #24]
 800790c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800790e:	2b47      	cmp	r3, #71	; 0x47
 8007910:	4680      	mov	r8, r0
 8007912:	d108      	bne.n	8007926 <_printf_float+0x142>
 8007914:	1cc8      	adds	r0, r1, #3
 8007916:	db02      	blt.n	800791e <_printf_float+0x13a>
 8007918:	6863      	ldr	r3, [r4, #4]
 800791a:	4299      	cmp	r1, r3
 800791c:	dd41      	ble.n	80079a2 <_printf_float+0x1be>
 800791e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007922:	fa5f fb8b 	uxtb.w	fp, fp
 8007926:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800792a:	d820      	bhi.n	800796e <_printf_float+0x18a>
 800792c:	3901      	subs	r1, #1
 800792e:	465a      	mov	r2, fp
 8007930:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007934:	9109      	str	r1, [sp, #36]	; 0x24
 8007936:	f7ff ff17 	bl	8007768 <__exponent>
 800793a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800793c:	1813      	adds	r3, r2, r0
 800793e:	2a01      	cmp	r2, #1
 8007940:	4681      	mov	r9, r0
 8007942:	6123      	str	r3, [r4, #16]
 8007944:	dc02      	bgt.n	800794c <_printf_float+0x168>
 8007946:	6822      	ldr	r2, [r4, #0]
 8007948:	07d2      	lsls	r2, r2, #31
 800794a:	d501      	bpl.n	8007950 <_printf_float+0x16c>
 800794c:	3301      	adds	r3, #1
 800794e:	6123      	str	r3, [r4, #16]
 8007950:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007954:	2b00      	cmp	r3, #0
 8007956:	d09c      	beq.n	8007892 <_printf_float+0xae>
 8007958:	232d      	movs	r3, #45	; 0x2d
 800795a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800795e:	e798      	b.n	8007892 <_printf_float+0xae>
 8007960:	9a06      	ldr	r2, [sp, #24]
 8007962:	2a47      	cmp	r2, #71	; 0x47
 8007964:	d1be      	bne.n	80078e4 <_printf_float+0x100>
 8007966:	2b00      	cmp	r3, #0
 8007968:	d1bc      	bne.n	80078e4 <_printf_float+0x100>
 800796a:	2301      	movs	r3, #1
 800796c:	e7b9      	b.n	80078e2 <_printf_float+0xfe>
 800796e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007972:	d118      	bne.n	80079a6 <_printf_float+0x1c2>
 8007974:	2900      	cmp	r1, #0
 8007976:	6863      	ldr	r3, [r4, #4]
 8007978:	dd0b      	ble.n	8007992 <_printf_float+0x1ae>
 800797a:	6121      	str	r1, [r4, #16]
 800797c:	b913      	cbnz	r3, 8007984 <_printf_float+0x1a0>
 800797e:	6822      	ldr	r2, [r4, #0]
 8007980:	07d0      	lsls	r0, r2, #31
 8007982:	d502      	bpl.n	800798a <_printf_float+0x1a6>
 8007984:	3301      	adds	r3, #1
 8007986:	440b      	add	r3, r1
 8007988:	6123      	str	r3, [r4, #16]
 800798a:	65a1      	str	r1, [r4, #88]	; 0x58
 800798c:	f04f 0900 	mov.w	r9, #0
 8007990:	e7de      	b.n	8007950 <_printf_float+0x16c>
 8007992:	b913      	cbnz	r3, 800799a <_printf_float+0x1b6>
 8007994:	6822      	ldr	r2, [r4, #0]
 8007996:	07d2      	lsls	r2, r2, #31
 8007998:	d501      	bpl.n	800799e <_printf_float+0x1ba>
 800799a:	3302      	adds	r3, #2
 800799c:	e7f4      	b.n	8007988 <_printf_float+0x1a4>
 800799e:	2301      	movs	r3, #1
 80079a0:	e7f2      	b.n	8007988 <_printf_float+0x1a4>
 80079a2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80079a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079a8:	4299      	cmp	r1, r3
 80079aa:	db05      	blt.n	80079b8 <_printf_float+0x1d4>
 80079ac:	6823      	ldr	r3, [r4, #0]
 80079ae:	6121      	str	r1, [r4, #16]
 80079b0:	07d8      	lsls	r0, r3, #31
 80079b2:	d5ea      	bpl.n	800798a <_printf_float+0x1a6>
 80079b4:	1c4b      	adds	r3, r1, #1
 80079b6:	e7e7      	b.n	8007988 <_printf_float+0x1a4>
 80079b8:	2900      	cmp	r1, #0
 80079ba:	bfd4      	ite	le
 80079bc:	f1c1 0202 	rsble	r2, r1, #2
 80079c0:	2201      	movgt	r2, #1
 80079c2:	4413      	add	r3, r2
 80079c4:	e7e0      	b.n	8007988 <_printf_float+0x1a4>
 80079c6:	6823      	ldr	r3, [r4, #0]
 80079c8:	055a      	lsls	r2, r3, #21
 80079ca:	d407      	bmi.n	80079dc <_printf_float+0x1f8>
 80079cc:	6923      	ldr	r3, [r4, #16]
 80079ce:	4642      	mov	r2, r8
 80079d0:	4631      	mov	r1, r6
 80079d2:	4628      	mov	r0, r5
 80079d4:	47b8      	blx	r7
 80079d6:	3001      	adds	r0, #1
 80079d8:	d12c      	bne.n	8007a34 <_printf_float+0x250>
 80079da:	e764      	b.n	80078a6 <_printf_float+0xc2>
 80079dc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80079e0:	f240 80e0 	bls.w	8007ba4 <_printf_float+0x3c0>
 80079e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80079e8:	2200      	movs	r2, #0
 80079ea:	2300      	movs	r3, #0
 80079ec:	f7f9 f87c 	bl	8000ae8 <__aeabi_dcmpeq>
 80079f0:	2800      	cmp	r0, #0
 80079f2:	d034      	beq.n	8007a5e <_printf_float+0x27a>
 80079f4:	4a37      	ldr	r2, [pc, #220]	; (8007ad4 <_printf_float+0x2f0>)
 80079f6:	2301      	movs	r3, #1
 80079f8:	4631      	mov	r1, r6
 80079fa:	4628      	mov	r0, r5
 80079fc:	47b8      	blx	r7
 80079fe:	3001      	adds	r0, #1
 8007a00:	f43f af51 	beq.w	80078a6 <_printf_float+0xc2>
 8007a04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	db02      	blt.n	8007a12 <_printf_float+0x22e>
 8007a0c:	6823      	ldr	r3, [r4, #0]
 8007a0e:	07d8      	lsls	r0, r3, #31
 8007a10:	d510      	bpl.n	8007a34 <_printf_float+0x250>
 8007a12:	ee18 3a10 	vmov	r3, s16
 8007a16:	4652      	mov	r2, sl
 8007a18:	4631      	mov	r1, r6
 8007a1a:	4628      	mov	r0, r5
 8007a1c:	47b8      	blx	r7
 8007a1e:	3001      	adds	r0, #1
 8007a20:	f43f af41 	beq.w	80078a6 <_printf_float+0xc2>
 8007a24:	f04f 0800 	mov.w	r8, #0
 8007a28:	f104 091a 	add.w	r9, r4, #26
 8007a2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a2e:	3b01      	subs	r3, #1
 8007a30:	4543      	cmp	r3, r8
 8007a32:	dc09      	bgt.n	8007a48 <_printf_float+0x264>
 8007a34:	6823      	ldr	r3, [r4, #0]
 8007a36:	079b      	lsls	r3, r3, #30
 8007a38:	f100 8105 	bmi.w	8007c46 <_printf_float+0x462>
 8007a3c:	68e0      	ldr	r0, [r4, #12]
 8007a3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a40:	4298      	cmp	r0, r3
 8007a42:	bfb8      	it	lt
 8007a44:	4618      	movlt	r0, r3
 8007a46:	e730      	b.n	80078aa <_printf_float+0xc6>
 8007a48:	2301      	movs	r3, #1
 8007a4a:	464a      	mov	r2, r9
 8007a4c:	4631      	mov	r1, r6
 8007a4e:	4628      	mov	r0, r5
 8007a50:	47b8      	blx	r7
 8007a52:	3001      	adds	r0, #1
 8007a54:	f43f af27 	beq.w	80078a6 <_printf_float+0xc2>
 8007a58:	f108 0801 	add.w	r8, r8, #1
 8007a5c:	e7e6      	b.n	8007a2c <_printf_float+0x248>
 8007a5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	dc39      	bgt.n	8007ad8 <_printf_float+0x2f4>
 8007a64:	4a1b      	ldr	r2, [pc, #108]	; (8007ad4 <_printf_float+0x2f0>)
 8007a66:	2301      	movs	r3, #1
 8007a68:	4631      	mov	r1, r6
 8007a6a:	4628      	mov	r0, r5
 8007a6c:	47b8      	blx	r7
 8007a6e:	3001      	adds	r0, #1
 8007a70:	f43f af19 	beq.w	80078a6 <_printf_float+0xc2>
 8007a74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	d102      	bne.n	8007a82 <_printf_float+0x29e>
 8007a7c:	6823      	ldr	r3, [r4, #0]
 8007a7e:	07d9      	lsls	r1, r3, #31
 8007a80:	d5d8      	bpl.n	8007a34 <_printf_float+0x250>
 8007a82:	ee18 3a10 	vmov	r3, s16
 8007a86:	4652      	mov	r2, sl
 8007a88:	4631      	mov	r1, r6
 8007a8a:	4628      	mov	r0, r5
 8007a8c:	47b8      	blx	r7
 8007a8e:	3001      	adds	r0, #1
 8007a90:	f43f af09 	beq.w	80078a6 <_printf_float+0xc2>
 8007a94:	f04f 0900 	mov.w	r9, #0
 8007a98:	f104 0a1a 	add.w	sl, r4, #26
 8007a9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a9e:	425b      	negs	r3, r3
 8007aa0:	454b      	cmp	r3, r9
 8007aa2:	dc01      	bgt.n	8007aa8 <_printf_float+0x2c4>
 8007aa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007aa6:	e792      	b.n	80079ce <_printf_float+0x1ea>
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	4652      	mov	r2, sl
 8007aac:	4631      	mov	r1, r6
 8007aae:	4628      	mov	r0, r5
 8007ab0:	47b8      	blx	r7
 8007ab2:	3001      	adds	r0, #1
 8007ab4:	f43f aef7 	beq.w	80078a6 <_printf_float+0xc2>
 8007ab8:	f109 0901 	add.w	r9, r9, #1
 8007abc:	e7ee      	b.n	8007a9c <_printf_float+0x2b8>
 8007abe:	bf00      	nop
 8007ac0:	7fefffff 	.word	0x7fefffff
 8007ac4:	0800d4f4 	.word	0x0800d4f4
 8007ac8:	0800d4f8 	.word	0x0800d4f8
 8007acc:	0800d500 	.word	0x0800d500
 8007ad0:	0800d4fc 	.word	0x0800d4fc
 8007ad4:	0800d8f9 	.word	0x0800d8f9
 8007ad8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ada:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007adc:	429a      	cmp	r2, r3
 8007ade:	bfa8      	it	ge
 8007ae0:	461a      	movge	r2, r3
 8007ae2:	2a00      	cmp	r2, #0
 8007ae4:	4691      	mov	r9, r2
 8007ae6:	dc37      	bgt.n	8007b58 <_printf_float+0x374>
 8007ae8:	f04f 0b00 	mov.w	fp, #0
 8007aec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007af0:	f104 021a 	add.w	r2, r4, #26
 8007af4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007af6:	9305      	str	r3, [sp, #20]
 8007af8:	eba3 0309 	sub.w	r3, r3, r9
 8007afc:	455b      	cmp	r3, fp
 8007afe:	dc33      	bgt.n	8007b68 <_printf_float+0x384>
 8007b00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b04:	429a      	cmp	r2, r3
 8007b06:	db3b      	blt.n	8007b80 <_printf_float+0x39c>
 8007b08:	6823      	ldr	r3, [r4, #0]
 8007b0a:	07da      	lsls	r2, r3, #31
 8007b0c:	d438      	bmi.n	8007b80 <_printf_float+0x39c>
 8007b0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b10:	9a05      	ldr	r2, [sp, #20]
 8007b12:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b14:	1a9a      	subs	r2, r3, r2
 8007b16:	eba3 0901 	sub.w	r9, r3, r1
 8007b1a:	4591      	cmp	r9, r2
 8007b1c:	bfa8      	it	ge
 8007b1e:	4691      	movge	r9, r2
 8007b20:	f1b9 0f00 	cmp.w	r9, #0
 8007b24:	dc35      	bgt.n	8007b92 <_printf_float+0x3ae>
 8007b26:	f04f 0800 	mov.w	r8, #0
 8007b2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b2e:	f104 0a1a 	add.w	sl, r4, #26
 8007b32:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b36:	1a9b      	subs	r3, r3, r2
 8007b38:	eba3 0309 	sub.w	r3, r3, r9
 8007b3c:	4543      	cmp	r3, r8
 8007b3e:	f77f af79 	ble.w	8007a34 <_printf_float+0x250>
 8007b42:	2301      	movs	r3, #1
 8007b44:	4652      	mov	r2, sl
 8007b46:	4631      	mov	r1, r6
 8007b48:	4628      	mov	r0, r5
 8007b4a:	47b8      	blx	r7
 8007b4c:	3001      	adds	r0, #1
 8007b4e:	f43f aeaa 	beq.w	80078a6 <_printf_float+0xc2>
 8007b52:	f108 0801 	add.w	r8, r8, #1
 8007b56:	e7ec      	b.n	8007b32 <_printf_float+0x34e>
 8007b58:	4613      	mov	r3, r2
 8007b5a:	4631      	mov	r1, r6
 8007b5c:	4642      	mov	r2, r8
 8007b5e:	4628      	mov	r0, r5
 8007b60:	47b8      	blx	r7
 8007b62:	3001      	adds	r0, #1
 8007b64:	d1c0      	bne.n	8007ae8 <_printf_float+0x304>
 8007b66:	e69e      	b.n	80078a6 <_printf_float+0xc2>
 8007b68:	2301      	movs	r3, #1
 8007b6a:	4631      	mov	r1, r6
 8007b6c:	4628      	mov	r0, r5
 8007b6e:	9205      	str	r2, [sp, #20]
 8007b70:	47b8      	blx	r7
 8007b72:	3001      	adds	r0, #1
 8007b74:	f43f ae97 	beq.w	80078a6 <_printf_float+0xc2>
 8007b78:	9a05      	ldr	r2, [sp, #20]
 8007b7a:	f10b 0b01 	add.w	fp, fp, #1
 8007b7e:	e7b9      	b.n	8007af4 <_printf_float+0x310>
 8007b80:	ee18 3a10 	vmov	r3, s16
 8007b84:	4652      	mov	r2, sl
 8007b86:	4631      	mov	r1, r6
 8007b88:	4628      	mov	r0, r5
 8007b8a:	47b8      	blx	r7
 8007b8c:	3001      	adds	r0, #1
 8007b8e:	d1be      	bne.n	8007b0e <_printf_float+0x32a>
 8007b90:	e689      	b.n	80078a6 <_printf_float+0xc2>
 8007b92:	9a05      	ldr	r2, [sp, #20]
 8007b94:	464b      	mov	r3, r9
 8007b96:	4442      	add	r2, r8
 8007b98:	4631      	mov	r1, r6
 8007b9a:	4628      	mov	r0, r5
 8007b9c:	47b8      	blx	r7
 8007b9e:	3001      	adds	r0, #1
 8007ba0:	d1c1      	bne.n	8007b26 <_printf_float+0x342>
 8007ba2:	e680      	b.n	80078a6 <_printf_float+0xc2>
 8007ba4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ba6:	2a01      	cmp	r2, #1
 8007ba8:	dc01      	bgt.n	8007bae <_printf_float+0x3ca>
 8007baa:	07db      	lsls	r3, r3, #31
 8007bac:	d538      	bpl.n	8007c20 <_printf_float+0x43c>
 8007bae:	2301      	movs	r3, #1
 8007bb0:	4642      	mov	r2, r8
 8007bb2:	4631      	mov	r1, r6
 8007bb4:	4628      	mov	r0, r5
 8007bb6:	47b8      	blx	r7
 8007bb8:	3001      	adds	r0, #1
 8007bba:	f43f ae74 	beq.w	80078a6 <_printf_float+0xc2>
 8007bbe:	ee18 3a10 	vmov	r3, s16
 8007bc2:	4652      	mov	r2, sl
 8007bc4:	4631      	mov	r1, r6
 8007bc6:	4628      	mov	r0, r5
 8007bc8:	47b8      	blx	r7
 8007bca:	3001      	adds	r0, #1
 8007bcc:	f43f ae6b 	beq.w	80078a6 <_printf_float+0xc2>
 8007bd0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	f7f8 ff86 	bl	8000ae8 <__aeabi_dcmpeq>
 8007bdc:	b9d8      	cbnz	r0, 8007c16 <_printf_float+0x432>
 8007bde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007be0:	f108 0201 	add.w	r2, r8, #1
 8007be4:	3b01      	subs	r3, #1
 8007be6:	4631      	mov	r1, r6
 8007be8:	4628      	mov	r0, r5
 8007bea:	47b8      	blx	r7
 8007bec:	3001      	adds	r0, #1
 8007bee:	d10e      	bne.n	8007c0e <_printf_float+0x42a>
 8007bf0:	e659      	b.n	80078a6 <_printf_float+0xc2>
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	4652      	mov	r2, sl
 8007bf6:	4631      	mov	r1, r6
 8007bf8:	4628      	mov	r0, r5
 8007bfa:	47b8      	blx	r7
 8007bfc:	3001      	adds	r0, #1
 8007bfe:	f43f ae52 	beq.w	80078a6 <_printf_float+0xc2>
 8007c02:	f108 0801 	add.w	r8, r8, #1
 8007c06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c08:	3b01      	subs	r3, #1
 8007c0a:	4543      	cmp	r3, r8
 8007c0c:	dcf1      	bgt.n	8007bf2 <_printf_float+0x40e>
 8007c0e:	464b      	mov	r3, r9
 8007c10:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007c14:	e6dc      	b.n	80079d0 <_printf_float+0x1ec>
 8007c16:	f04f 0800 	mov.w	r8, #0
 8007c1a:	f104 0a1a 	add.w	sl, r4, #26
 8007c1e:	e7f2      	b.n	8007c06 <_printf_float+0x422>
 8007c20:	2301      	movs	r3, #1
 8007c22:	4642      	mov	r2, r8
 8007c24:	e7df      	b.n	8007be6 <_printf_float+0x402>
 8007c26:	2301      	movs	r3, #1
 8007c28:	464a      	mov	r2, r9
 8007c2a:	4631      	mov	r1, r6
 8007c2c:	4628      	mov	r0, r5
 8007c2e:	47b8      	blx	r7
 8007c30:	3001      	adds	r0, #1
 8007c32:	f43f ae38 	beq.w	80078a6 <_printf_float+0xc2>
 8007c36:	f108 0801 	add.w	r8, r8, #1
 8007c3a:	68e3      	ldr	r3, [r4, #12]
 8007c3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007c3e:	1a5b      	subs	r3, r3, r1
 8007c40:	4543      	cmp	r3, r8
 8007c42:	dcf0      	bgt.n	8007c26 <_printf_float+0x442>
 8007c44:	e6fa      	b.n	8007a3c <_printf_float+0x258>
 8007c46:	f04f 0800 	mov.w	r8, #0
 8007c4a:	f104 0919 	add.w	r9, r4, #25
 8007c4e:	e7f4      	b.n	8007c3a <_printf_float+0x456>

08007c50 <_printf_common>:
 8007c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c54:	4616      	mov	r6, r2
 8007c56:	4699      	mov	r9, r3
 8007c58:	688a      	ldr	r2, [r1, #8]
 8007c5a:	690b      	ldr	r3, [r1, #16]
 8007c5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c60:	4293      	cmp	r3, r2
 8007c62:	bfb8      	it	lt
 8007c64:	4613      	movlt	r3, r2
 8007c66:	6033      	str	r3, [r6, #0]
 8007c68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c6c:	4607      	mov	r7, r0
 8007c6e:	460c      	mov	r4, r1
 8007c70:	b10a      	cbz	r2, 8007c76 <_printf_common+0x26>
 8007c72:	3301      	adds	r3, #1
 8007c74:	6033      	str	r3, [r6, #0]
 8007c76:	6823      	ldr	r3, [r4, #0]
 8007c78:	0699      	lsls	r1, r3, #26
 8007c7a:	bf42      	ittt	mi
 8007c7c:	6833      	ldrmi	r3, [r6, #0]
 8007c7e:	3302      	addmi	r3, #2
 8007c80:	6033      	strmi	r3, [r6, #0]
 8007c82:	6825      	ldr	r5, [r4, #0]
 8007c84:	f015 0506 	ands.w	r5, r5, #6
 8007c88:	d106      	bne.n	8007c98 <_printf_common+0x48>
 8007c8a:	f104 0a19 	add.w	sl, r4, #25
 8007c8e:	68e3      	ldr	r3, [r4, #12]
 8007c90:	6832      	ldr	r2, [r6, #0]
 8007c92:	1a9b      	subs	r3, r3, r2
 8007c94:	42ab      	cmp	r3, r5
 8007c96:	dc26      	bgt.n	8007ce6 <_printf_common+0x96>
 8007c98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007c9c:	1e13      	subs	r3, r2, #0
 8007c9e:	6822      	ldr	r2, [r4, #0]
 8007ca0:	bf18      	it	ne
 8007ca2:	2301      	movne	r3, #1
 8007ca4:	0692      	lsls	r2, r2, #26
 8007ca6:	d42b      	bmi.n	8007d00 <_printf_common+0xb0>
 8007ca8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007cac:	4649      	mov	r1, r9
 8007cae:	4638      	mov	r0, r7
 8007cb0:	47c0      	blx	r8
 8007cb2:	3001      	adds	r0, #1
 8007cb4:	d01e      	beq.n	8007cf4 <_printf_common+0xa4>
 8007cb6:	6823      	ldr	r3, [r4, #0]
 8007cb8:	68e5      	ldr	r5, [r4, #12]
 8007cba:	6832      	ldr	r2, [r6, #0]
 8007cbc:	f003 0306 	and.w	r3, r3, #6
 8007cc0:	2b04      	cmp	r3, #4
 8007cc2:	bf08      	it	eq
 8007cc4:	1aad      	subeq	r5, r5, r2
 8007cc6:	68a3      	ldr	r3, [r4, #8]
 8007cc8:	6922      	ldr	r2, [r4, #16]
 8007cca:	bf0c      	ite	eq
 8007ccc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007cd0:	2500      	movne	r5, #0
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	bfc4      	itt	gt
 8007cd6:	1a9b      	subgt	r3, r3, r2
 8007cd8:	18ed      	addgt	r5, r5, r3
 8007cda:	2600      	movs	r6, #0
 8007cdc:	341a      	adds	r4, #26
 8007cde:	42b5      	cmp	r5, r6
 8007ce0:	d11a      	bne.n	8007d18 <_printf_common+0xc8>
 8007ce2:	2000      	movs	r0, #0
 8007ce4:	e008      	b.n	8007cf8 <_printf_common+0xa8>
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	4652      	mov	r2, sl
 8007cea:	4649      	mov	r1, r9
 8007cec:	4638      	mov	r0, r7
 8007cee:	47c0      	blx	r8
 8007cf0:	3001      	adds	r0, #1
 8007cf2:	d103      	bne.n	8007cfc <_printf_common+0xac>
 8007cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8007cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cfc:	3501      	adds	r5, #1
 8007cfe:	e7c6      	b.n	8007c8e <_printf_common+0x3e>
 8007d00:	18e1      	adds	r1, r4, r3
 8007d02:	1c5a      	adds	r2, r3, #1
 8007d04:	2030      	movs	r0, #48	; 0x30
 8007d06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d0a:	4422      	add	r2, r4
 8007d0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d14:	3302      	adds	r3, #2
 8007d16:	e7c7      	b.n	8007ca8 <_printf_common+0x58>
 8007d18:	2301      	movs	r3, #1
 8007d1a:	4622      	mov	r2, r4
 8007d1c:	4649      	mov	r1, r9
 8007d1e:	4638      	mov	r0, r7
 8007d20:	47c0      	blx	r8
 8007d22:	3001      	adds	r0, #1
 8007d24:	d0e6      	beq.n	8007cf4 <_printf_common+0xa4>
 8007d26:	3601      	adds	r6, #1
 8007d28:	e7d9      	b.n	8007cde <_printf_common+0x8e>
	...

08007d2c <_printf_i>:
 8007d2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d30:	7e0f      	ldrb	r7, [r1, #24]
 8007d32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007d34:	2f78      	cmp	r7, #120	; 0x78
 8007d36:	4691      	mov	r9, r2
 8007d38:	4680      	mov	r8, r0
 8007d3a:	460c      	mov	r4, r1
 8007d3c:	469a      	mov	sl, r3
 8007d3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007d42:	d807      	bhi.n	8007d54 <_printf_i+0x28>
 8007d44:	2f62      	cmp	r7, #98	; 0x62
 8007d46:	d80a      	bhi.n	8007d5e <_printf_i+0x32>
 8007d48:	2f00      	cmp	r7, #0
 8007d4a:	f000 80d8 	beq.w	8007efe <_printf_i+0x1d2>
 8007d4e:	2f58      	cmp	r7, #88	; 0x58
 8007d50:	f000 80a3 	beq.w	8007e9a <_printf_i+0x16e>
 8007d54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d5c:	e03a      	b.n	8007dd4 <_printf_i+0xa8>
 8007d5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d62:	2b15      	cmp	r3, #21
 8007d64:	d8f6      	bhi.n	8007d54 <_printf_i+0x28>
 8007d66:	a101      	add	r1, pc, #4	; (adr r1, 8007d6c <_printf_i+0x40>)
 8007d68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d6c:	08007dc5 	.word	0x08007dc5
 8007d70:	08007dd9 	.word	0x08007dd9
 8007d74:	08007d55 	.word	0x08007d55
 8007d78:	08007d55 	.word	0x08007d55
 8007d7c:	08007d55 	.word	0x08007d55
 8007d80:	08007d55 	.word	0x08007d55
 8007d84:	08007dd9 	.word	0x08007dd9
 8007d88:	08007d55 	.word	0x08007d55
 8007d8c:	08007d55 	.word	0x08007d55
 8007d90:	08007d55 	.word	0x08007d55
 8007d94:	08007d55 	.word	0x08007d55
 8007d98:	08007ee5 	.word	0x08007ee5
 8007d9c:	08007e09 	.word	0x08007e09
 8007da0:	08007ec7 	.word	0x08007ec7
 8007da4:	08007d55 	.word	0x08007d55
 8007da8:	08007d55 	.word	0x08007d55
 8007dac:	08007f07 	.word	0x08007f07
 8007db0:	08007d55 	.word	0x08007d55
 8007db4:	08007e09 	.word	0x08007e09
 8007db8:	08007d55 	.word	0x08007d55
 8007dbc:	08007d55 	.word	0x08007d55
 8007dc0:	08007ecf 	.word	0x08007ecf
 8007dc4:	682b      	ldr	r3, [r5, #0]
 8007dc6:	1d1a      	adds	r2, r3, #4
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	602a      	str	r2, [r5, #0]
 8007dcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007dd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	e0a3      	b.n	8007f20 <_printf_i+0x1f4>
 8007dd8:	6820      	ldr	r0, [r4, #0]
 8007dda:	6829      	ldr	r1, [r5, #0]
 8007ddc:	0606      	lsls	r6, r0, #24
 8007dde:	f101 0304 	add.w	r3, r1, #4
 8007de2:	d50a      	bpl.n	8007dfa <_printf_i+0xce>
 8007de4:	680e      	ldr	r6, [r1, #0]
 8007de6:	602b      	str	r3, [r5, #0]
 8007de8:	2e00      	cmp	r6, #0
 8007dea:	da03      	bge.n	8007df4 <_printf_i+0xc8>
 8007dec:	232d      	movs	r3, #45	; 0x2d
 8007dee:	4276      	negs	r6, r6
 8007df0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007df4:	485e      	ldr	r0, [pc, #376]	; (8007f70 <_printf_i+0x244>)
 8007df6:	230a      	movs	r3, #10
 8007df8:	e019      	b.n	8007e2e <_printf_i+0x102>
 8007dfa:	680e      	ldr	r6, [r1, #0]
 8007dfc:	602b      	str	r3, [r5, #0]
 8007dfe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007e02:	bf18      	it	ne
 8007e04:	b236      	sxthne	r6, r6
 8007e06:	e7ef      	b.n	8007de8 <_printf_i+0xbc>
 8007e08:	682b      	ldr	r3, [r5, #0]
 8007e0a:	6820      	ldr	r0, [r4, #0]
 8007e0c:	1d19      	adds	r1, r3, #4
 8007e0e:	6029      	str	r1, [r5, #0]
 8007e10:	0601      	lsls	r1, r0, #24
 8007e12:	d501      	bpl.n	8007e18 <_printf_i+0xec>
 8007e14:	681e      	ldr	r6, [r3, #0]
 8007e16:	e002      	b.n	8007e1e <_printf_i+0xf2>
 8007e18:	0646      	lsls	r6, r0, #25
 8007e1a:	d5fb      	bpl.n	8007e14 <_printf_i+0xe8>
 8007e1c:	881e      	ldrh	r6, [r3, #0]
 8007e1e:	4854      	ldr	r0, [pc, #336]	; (8007f70 <_printf_i+0x244>)
 8007e20:	2f6f      	cmp	r7, #111	; 0x6f
 8007e22:	bf0c      	ite	eq
 8007e24:	2308      	moveq	r3, #8
 8007e26:	230a      	movne	r3, #10
 8007e28:	2100      	movs	r1, #0
 8007e2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e2e:	6865      	ldr	r5, [r4, #4]
 8007e30:	60a5      	str	r5, [r4, #8]
 8007e32:	2d00      	cmp	r5, #0
 8007e34:	bfa2      	ittt	ge
 8007e36:	6821      	ldrge	r1, [r4, #0]
 8007e38:	f021 0104 	bicge.w	r1, r1, #4
 8007e3c:	6021      	strge	r1, [r4, #0]
 8007e3e:	b90e      	cbnz	r6, 8007e44 <_printf_i+0x118>
 8007e40:	2d00      	cmp	r5, #0
 8007e42:	d04d      	beq.n	8007ee0 <_printf_i+0x1b4>
 8007e44:	4615      	mov	r5, r2
 8007e46:	fbb6 f1f3 	udiv	r1, r6, r3
 8007e4a:	fb03 6711 	mls	r7, r3, r1, r6
 8007e4e:	5dc7      	ldrb	r7, [r0, r7]
 8007e50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007e54:	4637      	mov	r7, r6
 8007e56:	42bb      	cmp	r3, r7
 8007e58:	460e      	mov	r6, r1
 8007e5a:	d9f4      	bls.n	8007e46 <_printf_i+0x11a>
 8007e5c:	2b08      	cmp	r3, #8
 8007e5e:	d10b      	bne.n	8007e78 <_printf_i+0x14c>
 8007e60:	6823      	ldr	r3, [r4, #0]
 8007e62:	07de      	lsls	r6, r3, #31
 8007e64:	d508      	bpl.n	8007e78 <_printf_i+0x14c>
 8007e66:	6923      	ldr	r3, [r4, #16]
 8007e68:	6861      	ldr	r1, [r4, #4]
 8007e6a:	4299      	cmp	r1, r3
 8007e6c:	bfde      	ittt	le
 8007e6e:	2330      	movle	r3, #48	; 0x30
 8007e70:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e74:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007e78:	1b52      	subs	r2, r2, r5
 8007e7a:	6122      	str	r2, [r4, #16]
 8007e7c:	f8cd a000 	str.w	sl, [sp]
 8007e80:	464b      	mov	r3, r9
 8007e82:	aa03      	add	r2, sp, #12
 8007e84:	4621      	mov	r1, r4
 8007e86:	4640      	mov	r0, r8
 8007e88:	f7ff fee2 	bl	8007c50 <_printf_common>
 8007e8c:	3001      	adds	r0, #1
 8007e8e:	d14c      	bne.n	8007f2a <_printf_i+0x1fe>
 8007e90:	f04f 30ff 	mov.w	r0, #4294967295
 8007e94:	b004      	add	sp, #16
 8007e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e9a:	4835      	ldr	r0, [pc, #212]	; (8007f70 <_printf_i+0x244>)
 8007e9c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007ea0:	6829      	ldr	r1, [r5, #0]
 8007ea2:	6823      	ldr	r3, [r4, #0]
 8007ea4:	f851 6b04 	ldr.w	r6, [r1], #4
 8007ea8:	6029      	str	r1, [r5, #0]
 8007eaa:	061d      	lsls	r5, r3, #24
 8007eac:	d514      	bpl.n	8007ed8 <_printf_i+0x1ac>
 8007eae:	07df      	lsls	r7, r3, #31
 8007eb0:	bf44      	itt	mi
 8007eb2:	f043 0320 	orrmi.w	r3, r3, #32
 8007eb6:	6023      	strmi	r3, [r4, #0]
 8007eb8:	b91e      	cbnz	r6, 8007ec2 <_printf_i+0x196>
 8007eba:	6823      	ldr	r3, [r4, #0]
 8007ebc:	f023 0320 	bic.w	r3, r3, #32
 8007ec0:	6023      	str	r3, [r4, #0]
 8007ec2:	2310      	movs	r3, #16
 8007ec4:	e7b0      	b.n	8007e28 <_printf_i+0xfc>
 8007ec6:	6823      	ldr	r3, [r4, #0]
 8007ec8:	f043 0320 	orr.w	r3, r3, #32
 8007ecc:	6023      	str	r3, [r4, #0]
 8007ece:	2378      	movs	r3, #120	; 0x78
 8007ed0:	4828      	ldr	r0, [pc, #160]	; (8007f74 <_printf_i+0x248>)
 8007ed2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ed6:	e7e3      	b.n	8007ea0 <_printf_i+0x174>
 8007ed8:	0659      	lsls	r1, r3, #25
 8007eda:	bf48      	it	mi
 8007edc:	b2b6      	uxthmi	r6, r6
 8007ede:	e7e6      	b.n	8007eae <_printf_i+0x182>
 8007ee0:	4615      	mov	r5, r2
 8007ee2:	e7bb      	b.n	8007e5c <_printf_i+0x130>
 8007ee4:	682b      	ldr	r3, [r5, #0]
 8007ee6:	6826      	ldr	r6, [r4, #0]
 8007ee8:	6961      	ldr	r1, [r4, #20]
 8007eea:	1d18      	adds	r0, r3, #4
 8007eec:	6028      	str	r0, [r5, #0]
 8007eee:	0635      	lsls	r5, r6, #24
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	d501      	bpl.n	8007ef8 <_printf_i+0x1cc>
 8007ef4:	6019      	str	r1, [r3, #0]
 8007ef6:	e002      	b.n	8007efe <_printf_i+0x1d2>
 8007ef8:	0670      	lsls	r0, r6, #25
 8007efa:	d5fb      	bpl.n	8007ef4 <_printf_i+0x1c8>
 8007efc:	8019      	strh	r1, [r3, #0]
 8007efe:	2300      	movs	r3, #0
 8007f00:	6123      	str	r3, [r4, #16]
 8007f02:	4615      	mov	r5, r2
 8007f04:	e7ba      	b.n	8007e7c <_printf_i+0x150>
 8007f06:	682b      	ldr	r3, [r5, #0]
 8007f08:	1d1a      	adds	r2, r3, #4
 8007f0a:	602a      	str	r2, [r5, #0]
 8007f0c:	681d      	ldr	r5, [r3, #0]
 8007f0e:	6862      	ldr	r2, [r4, #4]
 8007f10:	2100      	movs	r1, #0
 8007f12:	4628      	mov	r0, r5
 8007f14:	f7f8 f974 	bl	8000200 <memchr>
 8007f18:	b108      	cbz	r0, 8007f1e <_printf_i+0x1f2>
 8007f1a:	1b40      	subs	r0, r0, r5
 8007f1c:	6060      	str	r0, [r4, #4]
 8007f1e:	6863      	ldr	r3, [r4, #4]
 8007f20:	6123      	str	r3, [r4, #16]
 8007f22:	2300      	movs	r3, #0
 8007f24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f28:	e7a8      	b.n	8007e7c <_printf_i+0x150>
 8007f2a:	6923      	ldr	r3, [r4, #16]
 8007f2c:	462a      	mov	r2, r5
 8007f2e:	4649      	mov	r1, r9
 8007f30:	4640      	mov	r0, r8
 8007f32:	47d0      	blx	sl
 8007f34:	3001      	adds	r0, #1
 8007f36:	d0ab      	beq.n	8007e90 <_printf_i+0x164>
 8007f38:	6823      	ldr	r3, [r4, #0]
 8007f3a:	079b      	lsls	r3, r3, #30
 8007f3c:	d413      	bmi.n	8007f66 <_printf_i+0x23a>
 8007f3e:	68e0      	ldr	r0, [r4, #12]
 8007f40:	9b03      	ldr	r3, [sp, #12]
 8007f42:	4298      	cmp	r0, r3
 8007f44:	bfb8      	it	lt
 8007f46:	4618      	movlt	r0, r3
 8007f48:	e7a4      	b.n	8007e94 <_printf_i+0x168>
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	4632      	mov	r2, r6
 8007f4e:	4649      	mov	r1, r9
 8007f50:	4640      	mov	r0, r8
 8007f52:	47d0      	blx	sl
 8007f54:	3001      	adds	r0, #1
 8007f56:	d09b      	beq.n	8007e90 <_printf_i+0x164>
 8007f58:	3501      	adds	r5, #1
 8007f5a:	68e3      	ldr	r3, [r4, #12]
 8007f5c:	9903      	ldr	r1, [sp, #12]
 8007f5e:	1a5b      	subs	r3, r3, r1
 8007f60:	42ab      	cmp	r3, r5
 8007f62:	dcf2      	bgt.n	8007f4a <_printf_i+0x21e>
 8007f64:	e7eb      	b.n	8007f3e <_printf_i+0x212>
 8007f66:	2500      	movs	r5, #0
 8007f68:	f104 0619 	add.w	r6, r4, #25
 8007f6c:	e7f5      	b.n	8007f5a <_printf_i+0x22e>
 8007f6e:	bf00      	nop
 8007f70:	0800d504 	.word	0x0800d504
 8007f74:	0800d515 	.word	0x0800d515

08007f78 <_scanf_float>:
 8007f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f7c:	b087      	sub	sp, #28
 8007f7e:	4617      	mov	r7, r2
 8007f80:	9303      	str	r3, [sp, #12]
 8007f82:	688b      	ldr	r3, [r1, #8]
 8007f84:	1e5a      	subs	r2, r3, #1
 8007f86:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007f8a:	bf83      	ittte	hi
 8007f8c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007f90:	195b      	addhi	r3, r3, r5
 8007f92:	9302      	strhi	r3, [sp, #8]
 8007f94:	2300      	movls	r3, #0
 8007f96:	bf86      	itte	hi
 8007f98:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007f9c:	608b      	strhi	r3, [r1, #8]
 8007f9e:	9302      	strls	r3, [sp, #8]
 8007fa0:	680b      	ldr	r3, [r1, #0]
 8007fa2:	468b      	mov	fp, r1
 8007fa4:	2500      	movs	r5, #0
 8007fa6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007faa:	f84b 3b1c 	str.w	r3, [fp], #28
 8007fae:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007fb2:	4680      	mov	r8, r0
 8007fb4:	460c      	mov	r4, r1
 8007fb6:	465e      	mov	r6, fp
 8007fb8:	46aa      	mov	sl, r5
 8007fba:	46a9      	mov	r9, r5
 8007fbc:	9501      	str	r5, [sp, #4]
 8007fbe:	68a2      	ldr	r2, [r4, #8]
 8007fc0:	b152      	cbz	r2, 8007fd8 <_scanf_float+0x60>
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	2b4e      	cmp	r3, #78	; 0x4e
 8007fc8:	d864      	bhi.n	8008094 <_scanf_float+0x11c>
 8007fca:	2b40      	cmp	r3, #64	; 0x40
 8007fcc:	d83c      	bhi.n	8008048 <_scanf_float+0xd0>
 8007fce:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007fd2:	b2c8      	uxtb	r0, r1
 8007fd4:	280e      	cmp	r0, #14
 8007fd6:	d93a      	bls.n	800804e <_scanf_float+0xd6>
 8007fd8:	f1b9 0f00 	cmp.w	r9, #0
 8007fdc:	d003      	beq.n	8007fe6 <_scanf_float+0x6e>
 8007fde:	6823      	ldr	r3, [r4, #0]
 8007fe0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007fe4:	6023      	str	r3, [r4, #0]
 8007fe6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007fea:	f1ba 0f01 	cmp.w	sl, #1
 8007fee:	f200 8113 	bhi.w	8008218 <_scanf_float+0x2a0>
 8007ff2:	455e      	cmp	r6, fp
 8007ff4:	f200 8105 	bhi.w	8008202 <_scanf_float+0x28a>
 8007ff8:	2501      	movs	r5, #1
 8007ffa:	4628      	mov	r0, r5
 8007ffc:	b007      	add	sp, #28
 8007ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008002:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008006:	2a0d      	cmp	r2, #13
 8008008:	d8e6      	bhi.n	8007fd8 <_scanf_float+0x60>
 800800a:	a101      	add	r1, pc, #4	; (adr r1, 8008010 <_scanf_float+0x98>)
 800800c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008010:	0800814f 	.word	0x0800814f
 8008014:	08007fd9 	.word	0x08007fd9
 8008018:	08007fd9 	.word	0x08007fd9
 800801c:	08007fd9 	.word	0x08007fd9
 8008020:	080081af 	.word	0x080081af
 8008024:	08008187 	.word	0x08008187
 8008028:	08007fd9 	.word	0x08007fd9
 800802c:	08007fd9 	.word	0x08007fd9
 8008030:	0800815d 	.word	0x0800815d
 8008034:	08007fd9 	.word	0x08007fd9
 8008038:	08007fd9 	.word	0x08007fd9
 800803c:	08007fd9 	.word	0x08007fd9
 8008040:	08007fd9 	.word	0x08007fd9
 8008044:	08008115 	.word	0x08008115
 8008048:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800804c:	e7db      	b.n	8008006 <_scanf_float+0x8e>
 800804e:	290e      	cmp	r1, #14
 8008050:	d8c2      	bhi.n	8007fd8 <_scanf_float+0x60>
 8008052:	a001      	add	r0, pc, #4	; (adr r0, 8008058 <_scanf_float+0xe0>)
 8008054:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008058:	08008107 	.word	0x08008107
 800805c:	08007fd9 	.word	0x08007fd9
 8008060:	08008107 	.word	0x08008107
 8008064:	0800819b 	.word	0x0800819b
 8008068:	08007fd9 	.word	0x08007fd9
 800806c:	080080b5 	.word	0x080080b5
 8008070:	080080f1 	.word	0x080080f1
 8008074:	080080f1 	.word	0x080080f1
 8008078:	080080f1 	.word	0x080080f1
 800807c:	080080f1 	.word	0x080080f1
 8008080:	080080f1 	.word	0x080080f1
 8008084:	080080f1 	.word	0x080080f1
 8008088:	080080f1 	.word	0x080080f1
 800808c:	080080f1 	.word	0x080080f1
 8008090:	080080f1 	.word	0x080080f1
 8008094:	2b6e      	cmp	r3, #110	; 0x6e
 8008096:	d809      	bhi.n	80080ac <_scanf_float+0x134>
 8008098:	2b60      	cmp	r3, #96	; 0x60
 800809a:	d8b2      	bhi.n	8008002 <_scanf_float+0x8a>
 800809c:	2b54      	cmp	r3, #84	; 0x54
 800809e:	d077      	beq.n	8008190 <_scanf_float+0x218>
 80080a0:	2b59      	cmp	r3, #89	; 0x59
 80080a2:	d199      	bne.n	8007fd8 <_scanf_float+0x60>
 80080a4:	2d07      	cmp	r5, #7
 80080a6:	d197      	bne.n	8007fd8 <_scanf_float+0x60>
 80080a8:	2508      	movs	r5, #8
 80080aa:	e029      	b.n	8008100 <_scanf_float+0x188>
 80080ac:	2b74      	cmp	r3, #116	; 0x74
 80080ae:	d06f      	beq.n	8008190 <_scanf_float+0x218>
 80080b0:	2b79      	cmp	r3, #121	; 0x79
 80080b2:	e7f6      	b.n	80080a2 <_scanf_float+0x12a>
 80080b4:	6821      	ldr	r1, [r4, #0]
 80080b6:	05c8      	lsls	r0, r1, #23
 80080b8:	d51a      	bpl.n	80080f0 <_scanf_float+0x178>
 80080ba:	9b02      	ldr	r3, [sp, #8]
 80080bc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80080c0:	6021      	str	r1, [r4, #0]
 80080c2:	f109 0901 	add.w	r9, r9, #1
 80080c6:	b11b      	cbz	r3, 80080d0 <_scanf_float+0x158>
 80080c8:	3b01      	subs	r3, #1
 80080ca:	3201      	adds	r2, #1
 80080cc:	9302      	str	r3, [sp, #8]
 80080ce:	60a2      	str	r2, [r4, #8]
 80080d0:	68a3      	ldr	r3, [r4, #8]
 80080d2:	3b01      	subs	r3, #1
 80080d4:	60a3      	str	r3, [r4, #8]
 80080d6:	6923      	ldr	r3, [r4, #16]
 80080d8:	3301      	adds	r3, #1
 80080da:	6123      	str	r3, [r4, #16]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	3b01      	subs	r3, #1
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	607b      	str	r3, [r7, #4]
 80080e4:	f340 8084 	ble.w	80081f0 <_scanf_float+0x278>
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	3301      	adds	r3, #1
 80080ec:	603b      	str	r3, [r7, #0]
 80080ee:	e766      	b.n	8007fbe <_scanf_float+0x46>
 80080f0:	eb1a 0f05 	cmn.w	sl, r5
 80080f4:	f47f af70 	bne.w	8007fd8 <_scanf_float+0x60>
 80080f8:	6822      	ldr	r2, [r4, #0]
 80080fa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80080fe:	6022      	str	r2, [r4, #0]
 8008100:	f806 3b01 	strb.w	r3, [r6], #1
 8008104:	e7e4      	b.n	80080d0 <_scanf_float+0x158>
 8008106:	6822      	ldr	r2, [r4, #0]
 8008108:	0610      	lsls	r0, r2, #24
 800810a:	f57f af65 	bpl.w	8007fd8 <_scanf_float+0x60>
 800810e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008112:	e7f4      	b.n	80080fe <_scanf_float+0x186>
 8008114:	f1ba 0f00 	cmp.w	sl, #0
 8008118:	d10e      	bne.n	8008138 <_scanf_float+0x1c0>
 800811a:	f1b9 0f00 	cmp.w	r9, #0
 800811e:	d10e      	bne.n	800813e <_scanf_float+0x1c6>
 8008120:	6822      	ldr	r2, [r4, #0]
 8008122:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008126:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800812a:	d108      	bne.n	800813e <_scanf_float+0x1c6>
 800812c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008130:	6022      	str	r2, [r4, #0]
 8008132:	f04f 0a01 	mov.w	sl, #1
 8008136:	e7e3      	b.n	8008100 <_scanf_float+0x188>
 8008138:	f1ba 0f02 	cmp.w	sl, #2
 800813c:	d055      	beq.n	80081ea <_scanf_float+0x272>
 800813e:	2d01      	cmp	r5, #1
 8008140:	d002      	beq.n	8008148 <_scanf_float+0x1d0>
 8008142:	2d04      	cmp	r5, #4
 8008144:	f47f af48 	bne.w	8007fd8 <_scanf_float+0x60>
 8008148:	3501      	adds	r5, #1
 800814a:	b2ed      	uxtb	r5, r5
 800814c:	e7d8      	b.n	8008100 <_scanf_float+0x188>
 800814e:	f1ba 0f01 	cmp.w	sl, #1
 8008152:	f47f af41 	bne.w	8007fd8 <_scanf_float+0x60>
 8008156:	f04f 0a02 	mov.w	sl, #2
 800815a:	e7d1      	b.n	8008100 <_scanf_float+0x188>
 800815c:	b97d      	cbnz	r5, 800817e <_scanf_float+0x206>
 800815e:	f1b9 0f00 	cmp.w	r9, #0
 8008162:	f47f af3c 	bne.w	8007fde <_scanf_float+0x66>
 8008166:	6822      	ldr	r2, [r4, #0]
 8008168:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800816c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008170:	f47f af39 	bne.w	8007fe6 <_scanf_float+0x6e>
 8008174:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008178:	6022      	str	r2, [r4, #0]
 800817a:	2501      	movs	r5, #1
 800817c:	e7c0      	b.n	8008100 <_scanf_float+0x188>
 800817e:	2d03      	cmp	r5, #3
 8008180:	d0e2      	beq.n	8008148 <_scanf_float+0x1d0>
 8008182:	2d05      	cmp	r5, #5
 8008184:	e7de      	b.n	8008144 <_scanf_float+0x1cc>
 8008186:	2d02      	cmp	r5, #2
 8008188:	f47f af26 	bne.w	8007fd8 <_scanf_float+0x60>
 800818c:	2503      	movs	r5, #3
 800818e:	e7b7      	b.n	8008100 <_scanf_float+0x188>
 8008190:	2d06      	cmp	r5, #6
 8008192:	f47f af21 	bne.w	8007fd8 <_scanf_float+0x60>
 8008196:	2507      	movs	r5, #7
 8008198:	e7b2      	b.n	8008100 <_scanf_float+0x188>
 800819a:	6822      	ldr	r2, [r4, #0]
 800819c:	0591      	lsls	r1, r2, #22
 800819e:	f57f af1b 	bpl.w	8007fd8 <_scanf_float+0x60>
 80081a2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80081a6:	6022      	str	r2, [r4, #0]
 80081a8:	f8cd 9004 	str.w	r9, [sp, #4]
 80081ac:	e7a8      	b.n	8008100 <_scanf_float+0x188>
 80081ae:	6822      	ldr	r2, [r4, #0]
 80081b0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80081b4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80081b8:	d006      	beq.n	80081c8 <_scanf_float+0x250>
 80081ba:	0550      	lsls	r0, r2, #21
 80081bc:	f57f af0c 	bpl.w	8007fd8 <_scanf_float+0x60>
 80081c0:	f1b9 0f00 	cmp.w	r9, #0
 80081c4:	f43f af0f 	beq.w	8007fe6 <_scanf_float+0x6e>
 80081c8:	0591      	lsls	r1, r2, #22
 80081ca:	bf58      	it	pl
 80081cc:	9901      	ldrpl	r1, [sp, #4]
 80081ce:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80081d2:	bf58      	it	pl
 80081d4:	eba9 0101 	subpl.w	r1, r9, r1
 80081d8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80081dc:	bf58      	it	pl
 80081de:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80081e2:	6022      	str	r2, [r4, #0]
 80081e4:	f04f 0900 	mov.w	r9, #0
 80081e8:	e78a      	b.n	8008100 <_scanf_float+0x188>
 80081ea:	f04f 0a03 	mov.w	sl, #3
 80081ee:	e787      	b.n	8008100 <_scanf_float+0x188>
 80081f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80081f4:	4639      	mov	r1, r7
 80081f6:	4640      	mov	r0, r8
 80081f8:	4798      	blx	r3
 80081fa:	2800      	cmp	r0, #0
 80081fc:	f43f aedf 	beq.w	8007fbe <_scanf_float+0x46>
 8008200:	e6ea      	b.n	8007fd8 <_scanf_float+0x60>
 8008202:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008206:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800820a:	463a      	mov	r2, r7
 800820c:	4640      	mov	r0, r8
 800820e:	4798      	blx	r3
 8008210:	6923      	ldr	r3, [r4, #16]
 8008212:	3b01      	subs	r3, #1
 8008214:	6123      	str	r3, [r4, #16]
 8008216:	e6ec      	b.n	8007ff2 <_scanf_float+0x7a>
 8008218:	1e6b      	subs	r3, r5, #1
 800821a:	2b06      	cmp	r3, #6
 800821c:	d825      	bhi.n	800826a <_scanf_float+0x2f2>
 800821e:	2d02      	cmp	r5, #2
 8008220:	d836      	bhi.n	8008290 <_scanf_float+0x318>
 8008222:	455e      	cmp	r6, fp
 8008224:	f67f aee8 	bls.w	8007ff8 <_scanf_float+0x80>
 8008228:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800822c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008230:	463a      	mov	r2, r7
 8008232:	4640      	mov	r0, r8
 8008234:	4798      	blx	r3
 8008236:	6923      	ldr	r3, [r4, #16]
 8008238:	3b01      	subs	r3, #1
 800823a:	6123      	str	r3, [r4, #16]
 800823c:	e7f1      	b.n	8008222 <_scanf_float+0x2aa>
 800823e:	9802      	ldr	r0, [sp, #8]
 8008240:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008244:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008248:	9002      	str	r0, [sp, #8]
 800824a:	463a      	mov	r2, r7
 800824c:	4640      	mov	r0, r8
 800824e:	4798      	blx	r3
 8008250:	6923      	ldr	r3, [r4, #16]
 8008252:	3b01      	subs	r3, #1
 8008254:	6123      	str	r3, [r4, #16]
 8008256:	f10a 3aff 	add.w	sl, sl, #4294967295
 800825a:	fa5f fa8a 	uxtb.w	sl, sl
 800825e:	f1ba 0f02 	cmp.w	sl, #2
 8008262:	d1ec      	bne.n	800823e <_scanf_float+0x2c6>
 8008264:	3d03      	subs	r5, #3
 8008266:	b2ed      	uxtb	r5, r5
 8008268:	1b76      	subs	r6, r6, r5
 800826a:	6823      	ldr	r3, [r4, #0]
 800826c:	05da      	lsls	r2, r3, #23
 800826e:	d52f      	bpl.n	80082d0 <_scanf_float+0x358>
 8008270:	055b      	lsls	r3, r3, #21
 8008272:	d510      	bpl.n	8008296 <_scanf_float+0x31e>
 8008274:	455e      	cmp	r6, fp
 8008276:	f67f aebf 	bls.w	8007ff8 <_scanf_float+0x80>
 800827a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800827e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008282:	463a      	mov	r2, r7
 8008284:	4640      	mov	r0, r8
 8008286:	4798      	blx	r3
 8008288:	6923      	ldr	r3, [r4, #16]
 800828a:	3b01      	subs	r3, #1
 800828c:	6123      	str	r3, [r4, #16]
 800828e:	e7f1      	b.n	8008274 <_scanf_float+0x2fc>
 8008290:	46aa      	mov	sl, r5
 8008292:	9602      	str	r6, [sp, #8]
 8008294:	e7df      	b.n	8008256 <_scanf_float+0x2de>
 8008296:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800829a:	6923      	ldr	r3, [r4, #16]
 800829c:	2965      	cmp	r1, #101	; 0x65
 800829e:	f103 33ff 	add.w	r3, r3, #4294967295
 80082a2:	f106 35ff 	add.w	r5, r6, #4294967295
 80082a6:	6123      	str	r3, [r4, #16]
 80082a8:	d00c      	beq.n	80082c4 <_scanf_float+0x34c>
 80082aa:	2945      	cmp	r1, #69	; 0x45
 80082ac:	d00a      	beq.n	80082c4 <_scanf_float+0x34c>
 80082ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80082b2:	463a      	mov	r2, r7
 80082b4:	4640      	mov	r0, r8
 80082b6:	4798      	blx	r3
 80082b8:	6923      	ldr	r3, [r4, #16]
 80082ba:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80082be:	3b01      	subs	r3, #1
 80082c0:	1eb5      	subs	r5, r6, #2
 80082c2:	6123      	str	r3, [r4, #16]
 80082c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80082c8:	463a      	mov	r2, r7
 80082ca:	4640      	mov	r0, r8
 80082cc:	4798      	blx	r3
 80082ce:	462e      	mov	r6, r5
 80082d0:	6825      	ldr	r5, [r4, #0]
 80082d2:	f015 0510 	ands.w	r5, r5, #16
 80082d6:	d159      	bne.n	800838c <_scanf_float+0x414>
 80082d8:	7035      	strb	r5, [r6, #0]
 80082da:	6823      	ldr	r3, [r4, #0]
 80082dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80082e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082e4:	d11b      	bne.n	800831e <_scanf_float+0x3a6>
 80082e6:	9b01      	ldr	r3, [sp, #4]
 80082e8:	454b      	cmp	r3, r9
 80082ea:	eba3 0209 	sub.w	r2, r3, r9
 80082ee:	d123      	bne.n	8008338 <_scanf_float+0x3c0>
 80082f0:	2200      	movs	r2, #0
 80082f2:	4659      	mov	r1, fp
 80082f4:	4640      	mov	r0, r8
 80082f6:	f000 ff1d 	bl	8009134 <_strtod_r>
 80082fa:	6822      	ldr	r2, [r4, #0]
 80082fc:	9b03      	ldr	r3, [sp, #12]
 80082fe:	f012 0f02 	tst.w	r2, #2
 8008302:	ec57 6b10 	vmov	r6, r7, d0
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	d021      	beq.n	800834e <_scanf_float+0x3d6>
 800830a:	9903      	ldr	r1, [sp, #12]
 800830c:	1d1a      	adds	r2, r3, #4
 800830e:	600a      	str	r2, [r1, #0]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	e9c3 6700 	strd	r6, r7, [r3]
 8008316:	68e3      	ldr	r3, [r4, #12]
 8008318:	3301      	adds	r3, #1
 800831a:	60e3      	str	r3, [r4, #12]
 800831c:	e66d      	b.n	8007ffa <_scanf_float+0x82>
 800831e:	9b04      	ldr	r3, [sp, #16]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d0e5      	beq.n	80082f0 <_scanf_float+0x378>
 8008324:	9905      	ldr	r1, [sp, #20]
 8008326:	230a      	movs	r3, #10
 8008328:	462a      	mov	r2, r5
 800832a:	3101      	adds	r1, #1
 800832c:	4640      	mov	r0, r8
 800832e:	f000 ff89 	bl	8009244 <_strtol_r>
 8008332:	9b04      	ldr	r3, [sp, #16]
 8008334:	9e05      	ldr	r6, [sp, #20]
 8008336:	1ac2      	subs	r2, r0, r3
 8008338:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800833c:	429e      	cmp	r6, r3
 800833e:	bf28      	it	cs
 8008340:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008344:	4912      	ldr	r1, [pc, #72]	; (8008390 <_scanf_float+0x418>)
 8008346:	4630      	mov	r0, r6
 8008348:	f000 f82c 	bl	80083a4 <siprintf>
 800834c:	e7d0      	b.n	80082f0 <_scanf_float+0x378>
 800834e:	9903      	ldr	r1, [sp, #12]
 8008350:	f012 0f04 	tst.w	r2, #4
 8008354:	f103 0204 	add.w	r2, r3, #4
 8008358:	600a      	str	r2, [r1, #0]
 800835a:	d1d9      	bne.n	8008310 <_scanf_float+0x398>
 800835c:	f8d3 8000 	ldr.w	r8, [r3]
 8008360:	ee10 2a10 	vmov	r2, s0
 8008364:	ee10 0a10 	vmov	r0, s0
 8008368:	463b      	mov	r3, r7
 800836a:	4639      	mov	r1, r7
 800836c:	f7f8 fbee 	bl	8000b4c <__aeabi_dcmpun>
 8008370:	b128      	cbz	r0, 800837e <_scanf_float+0x406>
 8008372:	4808      	ldr	r0, [pc, #32]	; (8008394 <_scanf_float+0x41c>)
 8008374:	f000 f810 	bl	8008398 <nanf>
 8008378:	ed88 0a00 	vstr	s0, [r8]
 800837c:	e7cb      	b.n	8008316 <_scanf_float+0x39e>
 800837e:	4630      	mov	r0, r6
 8008380:	4639      	mov	r1, r7
 8008382:	f7f8 fc41 	bl	8000c08 <__aeabi_d2f>
 8008386:	f8c8 0000 	str.w	r0, [r8]
 800838a:	e7c4      	b.n	8008316 <_scanf_float+0x39e>
 800838c:	2500      	movs	r5, #0
 800838e:	e634      	b.n	8007ffa <_scanf_float+0x82>
 8008390:	0800d526 	.word	0x0800d526
 8008394:	0800d94b 	.word	0x0800d94b

08008398 <nanf>:
 8008398:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80083a0 <nanf+0x8>
 800839c:	4770      	bx	lr
 800839e:	bf00      	nop
 80083a0:	7fc00000 	.word	0x7fc00000

080083a4 <siprintf>:
 80083a4:	b40e      	push	{r1, r2, r3}
 80083a6:	b500      	push	{lr}
 80083a8:	b09c      	sub	sp, #112	; 0x70
 80083aa:	ab1d      	add	r3, sp, #116	; 0x74
 80083ac:	9002      	str	r0, [sp, #8]
 80083ae:	9006      	str	r0, [sp, #24]
 80083b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80083b4:	4809      	ldr	r0, [pc, #36]	; (80083dc <siprintf+0x38>)
 80083b6:	9107      	str	r1, [sp, #28]
 80083b8:	9104      	str	r1, [sp, #16]
 80083ba:	4909      	ldr	r1, [pc, #36]	; (80083e0 <siprintf+0x3c>)
 80083bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80083c0:	9105      	str	r1, [sp, #20]
 80083c2:	6800      	ldr	r0, [r0, #0]
 80083c4:	9301      	str	r3, [sp, #4]
 80083c6:	a902      	add	r1, sp, #8
 80083c8:	f002 ff9e 	bl	800b308 <_svfiprintf_r>
 80083cc:	9b02      	ldr	r3, [sp, #8]
 80083ce:	2200      	movs	r2, #0
 80083d0:	701a      	strb	r2, [r3, #0]
 80083d2:	b01c      	add	sp, #112	; 0x70
 80083d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80083d8:	b003      	add	sp, #12
 80083da:	4770      	bx	lr
 80083dc:	2000000c 	.word	0x2000000c
 80083e0:	ffff0208 	.word	0xffff0208

080083e4 <siscanf>:
 80083e4:	b40e      	push	{r1, r2, r3}
 80083e6:	b510      	push	{r4, lr}
 80083e8:	b09f      	sub	sp, #124	; 0x7c
 80083ea:	ac21      	add	r4, sp, #132	; 0x84
 80083ec:	f44f 7101 	mov.w	r1, #516	; 0x204
 80083f0:	f854 2b04 	ldr.w	r2, [r4], #4
 80083f4:	9201      	str	r2, [sp, #4]
 80083f6:	f8ad 101c 	strh.w	r1, [sp, #28]
 80083fa:	9004      	str	r0, [sp, #16]
 80083fc:	9008      	str	r0, [sp, #32]
 80083fe:	f7f7 fef7 	bl	80001f0 <strlen>
 8008402:	4b0c      	ldr	r3, [pc, #48]	; (8008434 <siscanf+0x50>)
 8008404:	9005      	str	r0, [sp, #20]
 8008406:	9009      	str	r0, [sp, #36]	; 0x24
 8008408:	930d      	str	r3, [sp, #52]	; 0x34
 800840a:	480b      	ldr	r0, [pc, #44]	; (8008438 <siscanf+0x54>)
 800840c:	9a01      	ldr	r2, [sp, #4]
 800840e:	6800      	ldr	r0, [r0, #0]
 8008410:	9403      	str	r4, [sp, #12]
 8008412:	2300      	movs	r3, #0
 8008414:	9311      	str	r3, [sp, #68]	; 0x44
 8008416:	9316      	str	r3, [sp, #88]	; 0x58
 8008418:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800841c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008420:	a904      	add	r1, sp, #16
 8008422:	4623      	mov	r3, r4
 8008424:	f003 f8ca 	bl	800b5bc <__ssvfiscanf_r>
 8008428:	b01f      	add	sp, #124	; 0x7c
 800842a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800842e:	b003      	add	sp, #12
 8008430:	4770      	bx	lr
 8008432:	bf00      	nop
 8008434:	0800845f 	.word	0x0800845f
 8008438:	2000000c 	.word	0x2000000c

0800843c <__sread>:
 800843c:	b510      	push	{r4, lr}
 800843e:	460c      	mov	r4, r1
 8008440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008444:	f003 fb84 	bl	800bb50 <_read_r>
 8008448:	2800      	cmp	r0, #0
 800844a:	bfab      	itete	ge
 800844c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800844e:	89a3      	ldrhlt	r3, [r4, #12]
 8008450:	181b      	addge	r3, r3, r0
 8008452:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008456:	bfac      	ite	ge
 8008458:	6563      	strge	r3, [r4, #84]	; 0x54
 800845a:	81a3      	strhlt	r3, [r4, #12]
 800845c:	bd10      	pop	{r4, pc}

0800845e <__seofread>:
 800845e:	2000      	movs	r0, #0
 8008460:	4770      	bx	lr

08008462 <__swrite>:
 8008462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008466:	461f      	mov	r7, r3
 8008468:	898b      	ldrh	r3, [r1, #12]
 800846a:	05db      	lsls	r3, r3, #23
 800846c:	4605      	mov	r5, r0
 800846e:	460c      	mov	r4, r1
 8008470:	4616      	mov	r6, r2
 8008472:	d505      	bpl.n	8008480 <__swrite+0x1e>
 8008474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008478:	2302      	movs	r3, #2
 800847a:	2200      	movs	r2, #0
 800847c:	f002 f8f6 	bl	800a66c <_lseek_r>
 8008480:	89a3      	ldrh	r3, [r4, #12]
 8008482:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008486:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800848a:	81a3      	strh	r3, [r4, #12]
 800848c:	4632      	mov	r2, r6
 800848e:	463b      	mov	r3, r7
 8008490:	4628      	mov	r0, r5
 8008492:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008496:	f000 bed7 	b.w	8009248 <_write_r>

0800849a <__sseek>:
 800849a:	b510      	push	{r4, lr}
 800849c:	460c      	mov	r4, r1
 800849e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084a2:	f002 f8e3 	bl	800a66c <_lseek_r>
 80084a6:	1c43      	adds	r3, r0, #1
 80084a8:	89a3      	ldrh	r3, [r4, #12]
 80084aa:	bf15      	itete	ne
 80084ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80084ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80084b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80084b6:	81a3      	strheq	r3, [r4, #12]
 80084b8:	bf18      	it	ne
 80084ba:	81a3      	strhne	r3, [r4, #12]
 80084bc:	bd10      	pop	{r4, pc}

080084be <__sclose>:
 80084be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084c2:	f000 bed3 	b.w	800926c <_close_r>

080084c6 <strncmp>:
 80084c6:	b510      	push	{r4, lr}
 80084c8:	b17a      	cbz	r2, 80084ea <strncmp+0x24>
 80084ca:	4603      	mov	r3, r0
 80084cc:	3901      	subs	r1, #1
 80084ce:	1884      	adds	r4, r0, r2
 80084d0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80084d4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80084d8:	4290      	cmp	r0, r2
 80084da:	d101      	bne.n	80084e0 <strncmp+0x1a>
 80084dc:	42a3      	cmp	r3, r4
 80084de:	d101      	bne.n	80084e4 <strncmp+0x1e>
 80084e0:	1a80      	subs	r0, r0, r2
 80084e2:	bd10      	pop	{r4, pc}
 80084e4:	2800      	cmp	r0, #0
 80084e6:	d1f3      	bne.n	80084d0 <strncmp+0xa>
 80084e8:	e7fa      	b.n	80084e0 <strncmp+0x1a>
 80084ea:	4610      	mov	r0, r2
 80084ec:	e7f9      	b.n	80084e2 <strncmp+0x1c>

080084ee <sulp>:
 80084ee:	b570      	push	{r4, r5, r6, lr}
 80084f0:	4604      	mov	r4, r0
 80084f2:	460d      	mov	r5, r1
 80084f4:	ec45 4b10 	vmov	d0, r4, r5
 80084f8:	4616      	mov	r6, r2
 80084fa:	f002 fc63 	bl	800adc4 <__ulp>
 80084fe:	ec51 0b10 	vmov	r0, r1, d0
 8008502:	b17e      	cbz	r6, 8008524 <sulp+0x36>
 8008504:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008508:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800850c:	2b00      	cmp	r3, #0
 800850e:	dd09      	ble.n	8008524 <sulp+0x36>
 8008510:	051b      	lsls	r3, r3, #20
 8008512:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008516:	2400      	movs	r4, #0
 8008518:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800851c:	4622      	mov	r2, r4
 800851e:	462b      	mov	r3, r5
 8008520:	f7f8 f87a 	bl	8000618 <__aeabi_dmul>
 8008524:	bd70      	pop	{r4, r5, r6, pc}
	...

08008528 <_strtod_l>:
 8008528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800852c:	ed2d 8b02 	vpush	{d8}
 8008530:	b09d      	sub	sp, #116	; 0x74
 8008532:	461f      	mov	r7, r3
 8008534:	2300      	movs	r3, #0
 8008536:	9318      	str	r3, [sp, #96]	; 0x60
 8008538:	4ba2      	ldr	r3, [pc, #648]	; (80087c4 <_strtod_l+0x29c>)
 800853a:	9213      	str	r2, [sp, #76]	; 0x4c
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	9305      	str	r3, [sp, #20]
 8008540:	4604      	mov	r4, r0
 8008542:	4618      	mov	r0, r3
 8008544:	4688      	mov	r8, r1
 8008546:	f7f7 fe53 	bl	80001f0 <strlen>
 800854a:	f04f 0a00 	mov.w	sl, #0
 800854e:	4605      	mov	r5, r0
 8008550:	f04f 0b00 	mov.w	fp, #0
 8008554:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008558:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800855a:	781a      	ldrb	r2, [r3, #0]
 800855c:	2a2b      	cmp	r2, #43	; 0x2b
 800855e:	d04e      	beq.n	80085fe <_strtod_l+0xd6>
 8008560:	d83b      	bhi.n	80085da <_strtod_l+0xb2>
 8008562:	2a0d      	cmp	r2, #13
 8008564:	d834      	bhi.n	80085d0 <_strtod_l+0xa8>
 8008566:	2a08      	cmp	r2, #8
 8008568:	d834      	bhi.n	80085d4 <_strtod_l+0xac>
 800856a:	2a00      	cmp	r2, #0
 800856c:	d03e      	beq.n	80085ec <_strtod_l+0xc4>
 800856e:	2300      	movs	r3, #0
 8008570:	930a      	str	r3, [sp, #40]	; 0x28
 8008572:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008574:	7833      	ldrb	r3, [r6, #0]
 8008576:	2b30      	cmp	r3, #48	; 0x30
 8008578:	f040 80b0 	bne.w	80086dc <_strtod_l+0x1b4>
 800857c:	7873      	ldrb	r3, [r6, #1]
 800857e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008582:	2b58      	cmp	r3, #88	; 0x58
 8008584:	d168      	bne.n	8008658 <_strtod_l+0x130>
 8008586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008588:	9301      	str	r3, [sp, #4]
 800858a:	ab18      	add	r3, sp, #96	; 0x60
 800858c:	9702      	str	r7, [sp, #8]
 800858e:	9300      	str	r3, [sp, #0]
 8008590:	4a8d      	ldr	r2, [pc, #564]	; (80087c8 <_strtod_l+0x2a0>)
 8008592:	ab19      	add	r3, sp, #100	; 0x64
 8008594:	a917      	add	r1, sp, #92	; 0x5c
 8008596:	4620      	mov	r0, r4
 8008598:	f001 fd5c 	bl	800a054 <__gethex>
 800859c:	f010 0707 	ands.w	r7, r0, #7
 80085a0:	4605      	mov	r5, r0
 80085a2:	d005      	beq.n	80085b0 <_strtod_l+0x88>
 80085a4:	2f06      	cmp	r7, #6
 80085a6:	d12c      	bne.n	8008602 <_strtod_l+0xda>
 80085a8:	3601      	adds	r6, #1
 80085aa:	2300      	movs	r3, #0
 80085ac:	9617      	str	r6, [sp, #92]	; 0x5c
 80085ae:	930a      	str	r3, [sp, #40]	; 0x28
 80085b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	f040 8590 	bne.w	80090d8 <_strtod_l+0xbb0>
 80085b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085ba:	b1eb      	cbz	r3, 80085f8 <_strtod_l+0xd0>
 80085bc:	4652      	mov	r2, sl
 80085be:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80085c2:	ec43 2b10 	vmov	d0, r2, r3
 80085c6:	b01d      	add	sp, #116	; 0x74
 80085c8:	ecbd 8b02 	vpop	{d8}
 80085cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085d0:	2a20      	cmp	r2, #32
 80085d2:	d1cc      	bne.n	800856e <_strtod_l+0x46>
 80085d4:	3301      	adds	r3, #1
 80085d6:	9317      	str	r3, [sp, #92]	; 0x5c
 80085d8:	e7be      	b.n	8008558 <_strtod_l+0x30>
 80085da:	2a2d      	cmp	r2, #45	; 0x2d
 80085dc:	d1c7      	bne.n	800856e <_strtod_l+0x46>
 80085de:	2201      	movs	r2, #1
 80085e0:	920a      	str	r2, [sp, #40]	; 0x28
 80085e2:	1c5a      	adds	r2, r3, #1
 80085e4:	9217      	str	r2, [sp, #92]	; 0x5c
 80085e6:	785b      	ldrb	r3, [r3, #1]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d1c2      	bne.n	8008572 <_strtod_l+0x4a>
 80085ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80085ee:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	f040 856e 	bne.w	80090d4 <_strtod_l+0xbac>
 80085f8:	4652      	mov	r2, sl
 80085fa:	465b      	mov	r3, fp
 80085fc:	e7e1      	b.n	80085c2 <_strtod_l+0x9a>
 80085fe:	2200      	movs	r2, #0
 8008600:	e7ee      	b.n	80085e0 <_strtod_l+0xb8>
 8008602:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008604:	b13a      	cbz	r2, 8008616 <_strtod_l+0xee>
 8008606:	2135      	movs	r1, #53	; 0x35
 8008608:	a81a      	add	r0, sp, #104	; 0x68
 800860a:	f002 fce6 	bl	800afda <__copybits>
 800860e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008610:	4620      	mov	r0, r4
 8008612:	f002 f8a5 	bl	800a760 <_Bfree>
 8008616:	3f01      	subs	r7, #1
 8008618:	2f04      	cmp	r7, #4
 800861a:	d806      	bhi.n	800862a <_strtod_l+0x102>
 800861c:	e8df f007 	tbb	[pc, r7]
 8008620:	1714030a 	.word	0x1714030a
 8008624:	0a          	.byte	0x0a
 8008625:	00          	.byte	0x00
 8008626:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800862a:	0728      	lsls	r0, r5, #28
 800862c:	d5c0      	bpl.n	80085b0 <_strtod_l+0x88>
 800862e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008632:	e7bd      	b.n	80085b0 <_strtod_l+0x88>
 8008634:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008638:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800863a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800863e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008642:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008646:	e7f0      	b.n	800862a <_strtod_l+0x102>
 8008648:	f8df b180 	ldr.w	fp, [pc, #384]	; 80087cc <_strtod_l+0x2a4>
 800864c:	e7ed      	b.n	800862a <_strtod_l+0x102>
 800864e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008652:	f04f 3aff 	mov.w	sl, #4294967295
 8008656:	e7e8      	b.n	800862a <_strtod_l+0x102>
 8008658:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800865a:	1c5a      	adds	r2, r3, #1
 800865c:	9217      	str	r2, [sp, #92]	; 0x5c
 800865e:	785b      	ldrb	r3, [r3, #1]
 8008660:	2b30      	cmp	r3, #48	; 0x30
 8008662:	d0f9      	beq.n	8008658 <_strtod_l+0x130>
 8008664:	2b00      	cmp	r3, #0
 8008666:	d0a3      	beq.n	80085b0 <_strtod_l+0x88>
 8008668:	2301      	movs	r3, #1
 800866a:	f04f 0900 	mov.w	r9, #0
 800866e:	9304      	str	r3, [sp, #16]
 8008670:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008672:	9308      	str	r3, [sp, #32]
 8008674:	f8cd 901c 	str.w	r9, [sp, #28]
 8008678:	464f      	mov	r7, r9
 800867a:	220a      	movs	r2, #10
 800867c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800867e:	7806      	ldrb	r6, [r0, #0]
 8008680:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008684:	b2d9      	uxtb	r1, r3
 8008686:	2909      	cmp	r1, #9
 8008688:	d92a      	bls.n	80086e0 <_strtod_l+0x1b8>
 800868a:	9905      	ldr	r1, [sp, #20]
 800868c:	462a      	mov	r2, r5
 800868e:	f7ff ff1a 	bl	80084c6 <strncmp>
 8008692:	b398      	cbz	r0, 80086fc <_strtod_l+0x1d4>
 8008694:	2000      	movs	r0, #0
 8008696:	4632      	mov	r2, r6
 8008698:	463d      	mov	r5, r7
 800869a:	9005      	str	r0, [sp, #20]
 800869c:	4603      	mov	r3, r0
 800869e:	2a65      	cmp	r2, #101	; 0x65
 80086a0:	d001      	beq.n	80086a6 <_strtod_l+0x17e>
 80086a2:	2a45      	cmp	r2, #69	; 0x45
 80086a4:	d118      	bne.n	80086d8 <_strtod_l+0x1b0>
 80086a6:	b91d      	cbnz	r5, 80086b0 <_strtod_l+0x188>
 80086a8:	9a04      	ldr	r2, [sp, #16]
 80086aa:	4302      	orrs	r2, r0
 80086ac:	d09e      	beq.n	80085ec <_strtod_l+0xc4>
 80086ae:	2500      	movs	r5, #0
 80086b0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80086b4:	f108 0201 	add.w	r2, r8, #1
 80086b8:	9217      	str	r2, [sp, #92]	; 0x5c
 80086ba:	f898 2001 	ldrb.w	r2, [r8, #1]
 80086be:	2a2b      	cmp	r2, #43	; 0x2b
 80086c0:	d075      	beq.n	80087ae <_strtod_l+0x286>
 80086c2:	2a2d      	cmp	r2, #45	; 0x2d
 80086c4:	d07b      	beq.n	80087be <_strtod_l+0x296>
 80086c6:	f04f 0c00 	mov.w	ip, #0
 80086ca:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80086ce:	2909      	cmp	r1, #9
 80086d0:	f240 8082 	bls.w	80087d8 <_strtod_l+0x2b0>
 80086d4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80086d8:	2600      	movs	r6, #0
 80086da:	e09d      	b.n	8008818 <_strtod_l+0x2f0>
 80086dc:	2300      	movs	r3, #0
 80086de:	e7c4      	b.n	800866a <_strtod_l+0x142>
 80086e0:	2f08      	cmp	r7, #8
 80086e2:	bfd8      	it	le
 80086e4:	9907      	ldrle	r1, [sp, #28]
 80086e6:	f100 0001 	add.w	r0, r0, #1
 80086ea:	bfda      	itte	le
 80086ec:	fb02 3301 	mlale	r3, r2, r1, r3
 80086f0:	9307      	strle	r3, [sp, #28]
 80086f2:	fb02 3909 	mlagt	r9, r2, r9, r3
 80086f6:	3701      	adds	r7, #1
 80086f8:	9017      	str	r0, [sp, #92]	; 0x5c
 80086fa:	e7bf      	b.n	800867c <_strtod_l+0x154>
 80086fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80086fe:	195a      	adds	r2, r3, r5
 8008700:	9217      	str	r2, [sp, #92]	; 0x5c
 8008702:	5d5a      	ldrb	r2, [r3, r5]
 8008704:	2f00      	cmp	r7, #0
 8008706:	d037      	beq.n	8008778 <_strtod_l+0x250>
 8008708:	9005      	str	r0, [sp, #20]
 800870a:	463d      	mov	r5, r7
 800870c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008710:	2b09      	cmp	r3, #9
 8008712:	d912      	bls.n	800873a <_strtod_l+0x212>
 8008714:	2301      	movs	r3, #1
 8008716:	e7c2      	b.n	800869e <_strtod_l+0x176>
 8008718:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800871a:	1c5a      	adds	r2, r3, #1
 800871c:	9217      	str	r2, [sp, #92]	; 0x5c
 800871e:	785a      	ldrb	r2, [r3, #1]
 8008720:	3001      	adds	r0, #1
 8008722:	2a30      	cmp	r2, #48	; 0x30
 8008724:	d0f8      	beq.n	8008718 <_strtod_l+0x1f0>
 8008726:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800872a:	2b08      	cmp	r3, #8
 800872c:	f200 84d9 	bhi.w	80090e2 <_strtod_l+0xbba>
 8008730:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008732:	9005      	str	r0, [sp, #20]
 8008734:	2000      	movs	r0, #0
 8008736:	9308      	str	r3, [sp, #32]
 8008738:	4605      	mov	r5, r0
 800873a:	3a30      	subs	r2, #48	; 0x30
 800873c:	f100 0301 	add.w	r3, r0, #1
 8008740:	d014      	beq.n	800876c <_strtod_l+0x244>
 8008742:	9905      	ldr	r1, [sp, #20]
 8008744:	4419      	add	r1, r3
 8008746:	9105      	str	r1, [sp, #20]
 8008748:	462b      	mov	r3, r5
 800874a:	eb00 0e05 	add.w	lr, r0, r5
 800874e:	210a      	movs	r1, #10
 8008750:	4573      	cmp	r3, lr
 8008752:	d113      	bne.n	800877c <_strtod_l+0x254>
 8008754:	182b      	adds	r3, r5, r0
 8008756:	2b08      	cmp	r3, #8
 8008758:	f105 0501 	add.w	r5, r5, #1
 800875c:	4405      	add	r5, r0
 800875e:	dc1c      	bgt.n	800879a <_strtod_l+0x272>
 8008760:	9907      	ldr	r1, [sp, #28]
 8008762:	230a      	movs	r3, #10
 8008764:	fb03 2301 	mla	r3, r3, r1, r2
 8008768:	9307      	str	r3, [sp, #28]
 800876a:	2300      	movs	r3, #0
 800876c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800876e:	1c51      	adds	r1, r2, #1
 8008770:	9117      	str	r1, [sp, #92]	; 0x5c
 8008772:	7852      	ldrb	r2, [r2, #1]
 8008774:	4618      	mov	r0, r3
 8008776:	e7c9      	b.n	800870c <_strtod_l+0x1e4>
 8008778:	4638      	mov	r0, r7
 800877a:	e7d2      	b.n	8008722 <_strtod_l+0x1fa>
 800877c:	2b08      	cmp	r3, #8
 800877e:	dc04      	bgt.n	800878a <_strtod_l+0x262>
 8008780:	9e07      	ldr	r6, [sp, #28]
 8008782:	434e      	muls	r6, r1
 8008784:	9607      	str	r6, [sp, #28]
 8008786:	3301      	adds	r3, #1
 8008788:	e7e2      	b.n	8008750 <_strtod_l+0x228>
 800878a:	f103 0c01 	add.w	ip, r3, #1
 800878e:	f1bc 0f10 	cmp.w	ip, #16
 8008792:	bfd8      	it	le
 8008794:	fb01 f909 	mulle.w	r9, r1, r9
 8008798:	e7f5      	b.n	8008786 <_strtod_l+0x25e>
 800879a:	2d10      	cmp	r5, #16
 800879c:	bfdc      	itt	le
 800879e:	230a      	movle	r3, #10
 80087a0:	fb03 2909 	mlale	r9, r3, r9, r2
 80087a4:	e7e1      	b.n	800876a <_strtod_l+0x242>
 80087a6:	2300      	movs	r3, #0
 80087a8:	9305      	str	r3, [sp, #20]
 80087aa:	2301      	movs	r3, #1
 80087ac:	e77c      	b.n	80086a8 <_strtod_l+0x180>
 80087ae:	f04f 0c00 	mov.w	ip, #0
 80087b2:	f108 0202 	add.w	r2, r8, #2
 80087b6:	9217      	str	r2, [sp, #92]	; 0x5c
 80087b8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80087bc:	e785      	b.n	80086ca <_strtod_l+0x1a2>
 80087be:	f04f 0c01 	mov.w	ip, #1
 80087c2:	e7f6      	b.n	80087b2 <_strtod_l+0x28a>
 80087c4:	0800d778 	.word	0x0800d778
 80087c8:	0800d52c 	.word	0x0800d52c
 80087cc:	7ff00000 	.word	0x7ff00000
 80087d0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80087d2:	1c51      	adds	r1, r2, #1
 80087d4:	9117      	str	r1, [sp, #92]	; 0x5c
 80087d6:	7852      	ldrb	r2, [r2, #1]
 80087d8:	2a30      	cmp	r2, #48	; 0x30
 80087da:	d0f9      	beq.n	80087d0 <_strtod_l+0x2a8>
 80087dc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80087e0:	2908      	cmp	r1, #8
 80087e2:	f63f af79 	bhi.w	80086d8 <_strtod_l+0x1b0>
 80087e6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80087ea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80087ec:	9206      	str	r2, [sp, #24]
 80087ee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80087f0:	1c51      	adds	r1, r2, #1
 80087f2:	9117      	str	r1, [sp, #92]	; 0x5c
 80087f4:	7852      	ldrb	r2, [r2, #1]
 80087f6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80087fa:	2e09      	cmp	r6, #9
 80087fc:	d937      	bls.n	800886e <_strtod_l+0x346>
 80087fe:	9e06      	ldr	r6, [sp, #24]
 8008800:	1b89      	subs	r1, r1, r6
 8008802:	2908      	cmp	r1, #8
 8008804:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008808:	dc02      	bgt.n	8008810 <_strtod_l+0x2e8>
 800880a:	4576      	cmp	r6, lr
 800880c:	bfa8      	it	ge
 800880e:	4676      	movge	r6, lr
 8008810:	f1bc 0f00 	cmp.w	ip, #0
 8008814:	d000      	beq.n	8008818 <_strtod_l+0x2f0>
 8008816:	4276      	negs	r6, r6
 8008818:	2d00      	cmp	r5, #0
 800881a:	d14d      	bne.n	80088b8 <_strtod_l+0x390>
 800881c:	9904      	ldr	r1, [sp, #16]
 800881e:	4301      	orrs	r1, r0
 8008820:	f47f aec6 	bne.w	80085b0 <_strtod_l+0x88>
 8008824:	2b00      	cmp	r3, #0
 8008826:	f47f aee1 	bne.w	80085ec <_strtod_l+0xc4>
 800882a:	2a69      	cmp	r2, #105	; 0x69
 800882c:	d027      	beq.n	800887e <_strtod_l+0x356>
 800882e:	dc24      	bgt.n	800887a <_strtod_l+0x352>
 8008830:	2a49      	cmp	r2, #73	; 0x49
 8008832:	d024      	beq.n	800887e <_strtod_l+0x356>
 8008834:	2a4e      	cmp	r2, #78	; 0x4e
 8008836:	f47f aed9 	bne.w	80085ec <_strtod_l+0xc4>
 800883a:	499f      	ldr	r1, [pc, #636]	; (8008ab8 <_strtod_l+0x590>)
 800883c:	a817      	add	r0, sp, #92	; 0x5c
 800883e:	f001 fe61 	bl	800a504 <__match>
 8008842:	2800      	cmp	r0, #0
 8008844:	f43f aed2 	beq.w	80085ec <_strtod_l+0xc4>
 8008848:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	2b28      	cmp	r3, #40	; 0x28
 800884e:	d12d      	bne.n	80088ac <_strtod_l+0x384>
 8008850:	499a      	ldr	r1, [pc, #616]	; (8008abc <_strtod_l+0x594>)
 8008852:	aa1a      	add	r2, sp, #104	; 0x68
 8008854:	a817      	add	r0, sp, #92	; 0x5c
 8008856:	f001 fe69 	bl	800a52c <__hexnan>
 800885a:	2805      	cmp	r0, #5
 800885c:	d126      	bne.n	80088ac <_strtod_l+0x384>
 800885e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008860:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8008864:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008868:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800886c:	e6a0      	b.n	80085b0 <_strtod_l+0x88>
 800886e:	210a      	movs	r1, #10
 8008870:	fb01 2e0e 	mla	lr, r1, lr, r2
 8008874:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008878:	e7b9      	b.n	80087ee <_strtod_l+0x2c6>
 800887a:	2a6e      	cmp	r2, #110	; 0x6e
 800887c:	e7db      	b.n	8008836 <_strtod_l+0x30e>
 800887e:	4990      	ldr	r1, [pc, #576]	; (8008ac0 <_strtod_l+0x598>)
 8008880:	a817      	add	r0, sp, #92	; 0x5c
 8008882:	f001 fe3f 	bl	800a504 <__match>
 8008886:	2800      	cmp	r0, #0
 8008888:	f43f aeb0 	beq.w	80085ec <_strtod_l+0xc4>
 800888c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800888e:	498d      	ldr	r1, [pc, #564]	; (8008ac4 <_strtod_l+0x59c>)
 8008890:	3b01      	subs	r3, #1
 8008892:	a817      	add	r0, sp, #92	; 0x5c
 8008894:	9317      	str	r3, [sp, #92]	; 0x5c
 8008896:	f001 fe35 	bl	800a504 <__match>
 800889a:	b910      	cbnz	r0, 80088a2 <_strtod_l+0x37a>
 800889c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800889e:	3301      	adds	r3, #1
 80088a0:	9317      	str	r3, [sp, #92]	; 0x5c
 80088a2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8008ad4 <_strtod_l+0x5ac>
 80088a6:	f04f 0a00 	mov.w	sl, #0
 80088aa:	e681      	b.n	80085b0 <_strtod_l+0x88>
 80088ac:	4886      	ldr	r0, [pc, #536]	; (8008ac8 <_strtod_l+0x5a0>)
 80088ae:	f003 f963 	bl	800bb78 <nan>
 80088b2:	ec5b ab10 	vmov	sl, fp, d0
 80088b6:	e67b      	b.n	80085b0 <_strtod_l+0x88>
 80088b8:	9b05      	ldr	r3, [sp, #20]
 80088ba:	9807      	ldr	r0, [sp, #28]
 80088bc:	1af3      	subs	r3, r6, r3
 80088be:	2f00      	cmp	r7, #0
 80088c0:	bf08      	it	eq
 80088c2:	462f      	moveq	r7, r5
 80088c4:	2d10      	cmp	r5, #16
 80088c6:	9306      	str	r3, [sp, #24]
 80088c8:	46a8      	mov	r8, r5
 80088ca:	bfa8      	it	ge
 80088cc:	f04f 0810 	movge.w	r8, #16
 80088d0:	f7f7 fe28 	bl	8000524 <__aeabi_ui2d>
 80088d4:	2d09      	cmp	r5, #9
 80088d6:	4682      	mov	sl, r0
 80088d8:	468b      	mov	fp, r1
 80088da:	dd13      	ble.n	8008904 <_strtod_l+0x3dc>
 80088dc:	4b7b      	ldr	r3, [pc, #492]	; (8008acc <_strtod_l+0x5a4>)
 80088de:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80088e2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80088e6:	f7f7 fe97 	bl	8000618 <__aeabi_dmul>
 80088ea:	4682      	mov	sl, r0
 80088ec:	4648      	mov	r0, r9
 80088ee:	468b      	mov	fp, r1
 80088f0:	f7f7 fe18 	bl	8000524 <__aeabi_ui2d>
 80088f4:	4602      	mov	r2, r0
 80088f6:	460b      	mov	r3, r1
 80088f8:	4650      	mov	r0, sl
 80088fa:	4659      	mov	r1, fp
 80088fc:	f7f7 fcd6 	bl	80002ac <__adddf3>
 8008900:	4682      	mov	sl, r0
 8008902:	468b      	mov	fp, r1
 8008904:	2d0f      	cmp	r5, #15
 8008906:	dc38      	bgt.n	800897a <_strtod_l+0x452>
 8008908:	9b06      	ldr	r3, [sp, #24]
 800890a:	2b00      	cmp	r3, #0
 800890c:	f43f ae50 	beq.w	80085b0 <_strtod_l+0x88>
 8008910:	dd24      	ble.n	800895c <_strtod_l+0x434>
 8008912:	2b16      	cmp	r3, #22
 8008914:	dc0b      	bgt.n	800892e <_strtod_l+0x406>
 8008916:	496d      	ldr	r1, [pc, #436]	; (8008acc <_strtod_l+0x5a4>)
 8008918:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800891c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008920:	4652      	mov	r2, sl
 8008922:	465b      	mov	r3, fp
 8008924:	f7f7 fe78 	bl	8000618 <__aeabi_dmul>
 8008928:	4682      	mov	sl, r0
 800892a:	468b      	mov	fp, r1
 800892c:	e640      	b.n	80085b0 <_strtod_l+0x88>
 800892e:	9a06      	ldr	r2, [sp, #24]
 8008930:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008934:	4293      	cmp	r3, r2
 8008936:	db20      	blt.n	800897a <_strtod_l+0x452>
 8008938:	4c64      	ldr	r4, [pc, #400]	; (8008acc <_strtod_l+0x5a4>)
 800893a:	f1c5 050f 	rsb	r5, r5, #15
 800893e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008942:	4652      	mov	r2, sl
 8008944:	465b      	mov	r3, fp
 8008946:	e9d1 0100 	ldrd	r0, r1, [r1]
 800894a:	f7f7 fe65 	bl	8000618 <__aeabi_dmul>
 800894e:	9b06      	ldr	r3, [sp, #24]
 8008950:	1b5d      	subs	r5, r3, r5
 8008952:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008956:	e9d4 2300 	ldrd	r2, r3, [r4]
 800895a:	e7e3      	b.n	8008924 <_strtod_l+0x3fc>
 800895c:	9b06      	ldr	r3, [sp, #24]
 800895e:	3316      	adds	r3, #22
 8008960:	db0b      	blt.n	800897a <_strtod_l+0x452>
 8008962:	9b05      	ldr	r3, [sp, #20]
 8008964:	1b9e      	subs	r6, r3, r6
 8008966:	4b59      	ldr	r3, [pc, #356]	; (8008acc <_strtod_l+0x5a4>)
 8008968:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800896c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008970:	4650      	mov	r0, sl
 8008972:	4659      	mov	r1, fp
 8008974:	f7f7 ff7a 	bl	800086c <__aeabi_ddiv>
 8008978:	e7d6      	b.n	8008928 <_strtod_l+0x400>
 800897a:	9b06      	ldr	r3, [sp, #24]
 800897c:	eba5 0808 	sub.w	r8, r5, r8
 8008980:	4498      	add	r8, r3
 8008982:	f1b8 0f00 	cmp.w	r8, #0
 8008986:	dd74      	ble.n	8008a72 <_strtod_l+0x54a>
 8008988:	f018 030f 	ands.w	r3, r8, #15
 800898c:	d00a      	beq.n	80089a4 <_strtod_l+0x47c>
 800898e:	494f      	ldr	r1, [pc, #316]	; (8008acc <_strtod_l+0x5a4>)
 8008990:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008994:	4652      	mov	r2, sl
 8008996:	465b      	mov	r3, fp
 8008998:	e9d1 0100 	ldrd	r0, r1, [r1]
 800899c:	f7f7 fe3c 	bl	8000618 <__aeabi_dmul>
 80089a0:	4682      	mov	sl, r0
 80089a2:	468b      	mov	fp, r1
 80089a4:	f038 080f 	bics.w	r8, r8, #15
 80089a8:	d04f      	beq.n	8008a4a <_strtod_l+0x522>
 80089aa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80089ae:	dd22      	ble.n	80089f6 <_strtod_l+0x4ce>
 80089b0:	2500      	movs	r5, #0
 80089b2:	462e      	mov	r6, r5
 80089b4:	9507      	str	r5, [sp, #28]
 80089b6:	9505      	str	r5, [sp, #20]
 80089b8:	2322      	movs	r3, #34	; 0x22
 80089ba:	f8df b118 	ldr.w	fp, [pc, #280]	; 8008ad4 <_strtod_l+0x5ac>
 80089be:	6023      	str	r3, [r4, #0]
 80089c0:	f04f 0a00 	mov.w	sl, #0
 80089c4:	9b07      	ldr	r3, [sp, #28]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	f43f adf2 	beq.w	80085b0 <_strtod_l+0x88>
 80089cc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80089ce:	4620      	mov	r0, r4
 80089d0:	f001 fec6 	bl	800a760 <_Bfree>
 80089d4:	9905      	ldr	r1, [sp, #20]
 80089d6:	4620      	mov	r0, r4
 80089d8:	f001 fec2 	bl	800a760 <_Bfree>
 80089dc:	4631      	mov	r1, r6
 80089de:	4620      	mov	r0, r4
 80089e0:	f001 febe 	bl	800a760 <_Bfree>
 80089e4:	9907      	ldr	r1, [sp, #28]
 80089e6:	4620      	mov	r0, r4
 80089e8:	f001 feba 	bl	800a760 <_Bfree>
 80089ec:	4629      	mov	r1, r5
 80089ee:	4620      	mov	r0, r4
 80089f0:	f001 feb6 	bl	800a760 <_Bfree>
 80089f4:	e5dc      	b.n	80085b0 <_strtod_l+0x88>
 80089f6:	4b36      	ldr	r3, [pc, #216]	; (8008ad0 <_strtod_l+0x5a8>)
 80089f8:	9304      	str	r3, [sp, #16]
 80089fa:	2300      	movs	r3, #0
 80089fc:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008a00:	4650      	mov	r0, sl
 8008a02:	4659      	mov	r1, fp
 8008a04:	4699      	mov	r9, r3
 8008a06:	f1b8 0f01 	cmp.w	r8, #1
 8008a0a:	dc21      	bgt.n	8008a50 <_strtod_l+0x528>
 8008a0c:	b10b      	cbz	r3, 8008a12 <_strtod_l+0x4ea>
 8008a0e:	4682      	mov	sl, r0
 8008a10:	468b      	mov	fp, r1
 8008a12:	4b2f      	ldr	r3, [pc, #188]	; (8008ad0 <_strtod_l+0x5a8>)
 8008a14:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008a18:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008a1c:	4652      	mov	r2, sl
 8008a1e:	465b      	mov	r3, fp
 8008a20:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008a24:	f7f7 fdf8 	bl	8000618 <__aeabi_dmul>
 8008a28:	4b2a      	ldr	r3, [pc, #168]	; (8008ad4 <_strtod_l+0x5ac>)
 8008a2a:	460a      	mov	r2, r1
 8008a2c:	400b      	ands	r3, r1
 8008a2e:	492a      	ldr	r1, [pc, #168]	; (8008ad8 <_strtod_l+0x5b0>)
 8008a30:	428b      	cmp	r3, r1
 8008a32:	4682      	mov	sl, r0
 8008a34:	d8bc      	bhi.n	80089b0 <_strtod_l+0x488>
 8008a36:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008a3a:	428b      	cmp	r3, r1
 8008a3c:	bf86      	itte	hi
 8008a3e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8008adc <_strtod_l+0x5b4>
 8008a42:	f04f 3aff 	movhi.w	sl, #4294967295
 8008a46:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	9304      	str	r3, [sp, #16]
 8008a4e:	e084      	b.n	8008b5a <_strtod_l+0x632>
 8008a50:	f018 0f01 	tst.w	r8, #1
 8008a54:	d005      	beq.n	8008a62 <_strtod_l+0x53a>
 8008a56:	9b04      	ldr	r3, [sp, #16]
 8008a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a5c:	f7f7 fddc 	bl	8000618 <__aeabi_dmul>
 8008a60:	2301      	movs	r3, #1
 8008a62:	9a04      	ldr	r2, [sp, #16]
 8008a64:	3208      	adds	r2, #8
 8008a66:	f109 0901 	add.w	r9, r9, #1
 8008a6a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008a6e:	9204      	str	r2, [sp, #16]
 8008a70:	e7c9      	b.n	8008a06 <_strtod_l+0x4de>
 8008a72:	d0ea      	beq.n	8008a4a <_strtod_l+0x522>
 8008a74:	f1c8 0800 	rsb	r8, r8, #0
 8008a78:	f018 020f 	ands.w	r2, r8, #15
 8008a7c:	d00a      	beq.n	8008a94 <_strtod_l+0x56c>
 8008a7e:	4b13      	ldr	r3, [pc, #76]	; (8008acc <_strtod_l+0x5a4>)
 8008a80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a84:	4650      	mov	r0, sl
 8008a86:	4659      	mov	r1, fp
 8008a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a8c:	f7f7 feee 	bl	800086c <__aeabi_ddiv>
 8008a90:	4682      	mov	sl, r0
 8008a92:	468b      	mov	fp, r1
 8008a94:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008a98:	d0d7      	beq.n	8008a4a <_strtod_l+0x522>
 8008a9a:	f1b8 0f1f 	cmp.w	r8, #31
 8008a9e:	dd1f      	ble.n	8008ae0 <_strtod_l+0x5b8>
 8008aa0:	2500      	movs	r5, #0
 8008aa2:	462e      	mov	r6, r5
 8008aa4:	9507      	str	r5, [sp, #28]
 8008aa6:	9505      	str	r5, [sp, #20]
 8008aa8:	2322      	movs	r3, #34	; 0x22
 8008aaa:	f04f 0a00 	mov.w	sl, #0
 8008aae:	f04f 0b00 	mov.w	fp, #0
 8008ab2:	6023      	str	r3, [r4, #0]
 8008ab4:	e786      	b.n	80089c4 <_strtod_l+0x49c>
 8008ab6:	bf00      	nop
 8008ab8:	0800d501 	.word	0x0800d501
 8008abc:	0800d540 	.word	0x0800d540
 8008ac0:	0800d4f9 	.word	0x0800d4f9
 8008ac4:	0800d684 	.word	0x0800d684
 8008ac8:	0800d94b 	.word	0x0800d94b
 8008acc:	0800d810 	.word	0x0800d810
 8008ad0:	0800d7e8 	.word	0x0800d7e8
 8008ad4:	7ff00000 	.word	0x7ff00000
 8008ad8:	7ca00000 	.word	0x7ca00000
 8008adc:	7fefffff 	.word	0x7fefffff
 8008ae0:	f018 0310 	ands.w	r3, r8, #16
 8008ae4:	bf18      	it	ne
 8008ae6:	236a      	movne	r3, #106	; 0x6a
 8008ae8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8008e98 <_strtod_l+0x970>
 8008aec:	9304      	str	r3, [sp, #16]
 8008aee:	4650      	mov	r0, sl
 8008af0:	4659      	mov	r1, fp
 8008af2:	2300      	movs	r3, #0
 8008af4:	f018 0f01 	tst.w	r8, #1
 8008af8:	d004      	beq.n	8008b04 <_strtod_l+0x5dc>
 8008afa:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008afe:	f7f7 fd8b 	bl	8000618 <__aeabi_dmul>
 8008b02:	2301      	movs	r3, #1
 8008b04:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008b08:	f109 0908 	add.w	r9, r9, #8
 8008b0c:	d1f2      	bne.n	8008af4 <_strtod_l+0x5cc>
 8008b0e:	b10b      	cbz	r3, 8008b14 <_strtod_l+0x5ec>
 8008b10:	4682      	mov	sl, r0
 8008b12:	468b      	mov	fp, r1
 8008b14:	9b04      	ldr	r3, [sp, #16]
 8008b16:	b1c3      	cbz	r3, 8008b4a <_strtod_l+0x622>
 8008b18:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008b1c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	4659      	mov	r1, fp
 8008b24:	dd11      	ble.n	8008b4a <_strtod_l+0x622>
 8008b26:	2b1f      	cmp	r3, #31
 8008b28:	f340 8124 	ble.w	8008d74 <_strtod_l+0x84c>
 8008b2c:	2b34      	cmp	r3, #52	; 0x34
 8008b2e:	bfde      	ittt	le
 8008b30:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008b34:	f04f 33ff 	movle.w	r3, #4294967295
 8008b38:	fa03 f202 	lslle.w	r2, r3, r2
 8008b3c:	f04f 0a00 	mov.w	sl, #0
 8008b40:	bfcc      	ite	gt
 8008b42:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008b46:	ea02 0b01 	andle.w	fp, r2, r1
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	4650      	mov	r0, sl
 8008b50:	4659      	mov	r1, fp
 8008b52:	f7f7 ffc9 	bl	8000ae8 <__aeabi_dcmpeq>
 8008b56:	2800      	cmp	r0, #0
 8008b58:	d1a2      	bne.n	8008aa0 <_strtod_l+0x578>
 8008b5a:	9b07      	ldr	r3, [sp, #28]
 8008b5c:	9300      	str	r3, [sp, #0]
 8008b5e:	9908      	ldr	r1, [sp, #32]
 8008b60:	462b      	mov	r3, r5
 8008b62:	463a      	mov	r2, r7
 8008b64:	4620      	mov	r0, r4
 8008b66:	f001 fe63 	bl	800a830 <__s2b>
 8008b6a:	9007      	str	r0, [sp, #28]
 8008b6c:	2800      	cmp	r0, #0
 8008b6e:	f43f af1f 	beq.w	80089b0 <_strtod_l+0x488>
 8008b72:	9b05      	ldr	r3, [sp, #20]
 8008b74:	1b9e      	subs	r6, r3, r6
 8008b76:	9b06      	ldr	r3, [sp, #24]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	bfb4      	ite	lt
 8008b7c:	4633      	movlt	r3, r6
 8008b7e:	2300      	movge	r3, #0
 8008b80:	930c      	str	r3, [sp, #48]	; 0x30
 8008b82:	9b06      	ldr	r3, [sp, #24]
 8008b84:	2500      	movs	r5, #0
 8008b86:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008b8a:	9312      	str	r3, [sp, #72]	; 0x48
 8008b8c:	462e      	mov	r6, r5
 8008b8e:	9b07      	ldr	r3, [sp, #28]
 8008b90:	4620      	mov	r0, r4
 8008b92:	6859      	ldr	r1, [r3, #4]
 8008b94:	f001 fda4 	bl	800a6e0 <_Balloc>
 8008b98:	9005      	str	r0, [sp, #20]
 8008b9a:	2800      	cmp	r0, #0
 8008b9c:	f43f af0c 	beq.w	80089b8 <_strtod_l+0x490>
 8008ba0:	9b07      	ldr	r3, [sp, #28]
 8008ba2:	691a      	ldr	r2, [r3, #16]
 8008ba4:	3202      	adds	r2, #2
 8008ba6:	f103 010c 	add.w	r1, r3, #12
 8008baa:	0092      	lsls	r2, r2, #2
 8008bac:	300c      	adds	r0, #12
 8008bae:	f001 fd89 	bl	800a6c4 <memcpy>
 8008bb2:	ec4b ab10 	vmov	d0, sl, fp
 8008bb6:	aa1a      	add	r2, sp, #104	; 0x68
 8008bb8:	a919      	add	r1, sp, #100	; 0x64
 8008bba:	4620      	mov	r0, r4
 8008bbc:	f002 f97e 	bl	800aebc <__d2b>
 8008bc0:	ec4b ab18 	vmov	d8, sl, fp
 8008bc4:	9018      	str	r0, [sp, #96]	; 0x60
 8008bc6:	2800      	cmp	r0, #0
 8008bc8:	f43f aef6 	beq.w	80089b8 <_strtod_l+0x490>
 8008bcc:	2101      	movs	r1, #1
 8008bce:	4620      	mov	r0, r4
 8008bd0:	f001 fec8 	bl	800a964 <__i2b>
 8008bd4:	4606      	mov	r6, r0
 8008bd6:	2800      	cmp	r0, #0
 8008bd8:	f43f aeee 	beq.w	80089b8 <_strtod_l+0x490>
 8008bdc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008bde:	9904      	ldr	r1, [sp, #16]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	bfab      	itete	ge
 8008be4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8008be6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8008be8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008bea:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8008bee:	bfac      	ite	ge
 8008bf0:	eb03 0902 	addge.w	r9, r3, r2
 8008bf4:	1ad7      	sublt	r7, r2, r3
 8008bf6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008bf8:	eba3 0801 	sub.w	r8, r3, r1
 8008bfc:	4490      	add	r8, r2
 8008bfe:	4ba1      	ldr	r3, [pc, #644]	; (8008e84 <_strtod_l+0x95c>)
 8008c00:	f108 38ff 	add.w	r8, r8, #4294967295
 8008c04:	4598      	cmp	r8, r3
 8008c06:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008c0a:	f280 80c7 	bge.w	8008d9c <_strtod_l+0x874>
 8008c0e:	eba3 0308 	sub.w	r3, r3, r8
 8008c12:	2b1f      	cmp	r3, #31
 8008c14:	eba2 0203 	sub.w	r2, r2, r3
 8008c18:	f04f 0101 	mov.w	r1, #1
 8008c1c:	f300 80b1 	bgt.w	8008d82 <_strtod_l+0x85a>
 8008c20:	fa01 f303 	lsl.w	r3, r1, r3
 8008c24:	930d      	str	r3, [sp, #52]	; 0x34
 8008c26:	2300      	movs	r3, #0
 8008c28:	9308      	str	r3, [sp, #32]
 8008c2a:	eb09 0802 	add.w	r8, r9, r2
 8008c2e:	9b04      	ldr	r3, [sp, #16]
 8008c30:	45c1      	cmp	r9, r8
 8008c32:	4417      	add	r7, r2
 8008c34:	441f      	add	r7, r3
 8008c36:	464b      	mov	r3, r9
 8008c38:	bfa8      	it	ge
 8008c3a:	4643      	movge	r3, r8
 8008c3c:	42bb      	cmp	r3, r7
 8008c3e:	bfa8      	it	ge
 8008c40:	463b      	movge	r3, r7
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	bfc2      	ittt	gt
 8008c46:	eba8 0803 	subgt.w	r8, r8, r3
 8008c4a:	1aff      	subgt	r7, r7, r3
 8008c4c:	eba9 0903 	subgt.w	r9, r9, r3
 8008c50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	dd17      	ble.n	8008c86 <_strtod_l+0x75e>
 8008c56:	4631      	mov	r1, r6
 8008c58:	461a      	mov	r2, r3
 8008c5a:	4620      	mov	r0, r4
 8008c5c:	f001 ff42 	bl	800aae4 <__pow5mult>
 8008c60:	4606      	mov	r6, r0
 8008c62:	2800      	cmp	r0, #0
 8008c64:	f43f aea8 	beq.w	80089b8 <_strtod_l+0x490>
 8008c68:	4601      	mov	r1, r0
 8008c6a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008c6c:	4620      	mov	r0, r4
 8008c6e:	f001 fe8f 	bl	800a990 <__multiply>
 8008c72:	900b      	str	r0, [sp, #44]	; 0x2c
 8008c74:	2800      	cmp	r0, #0
 8008c76:	f43f ae9f 	beq.w	80089b8 <_strtod_l+0x490>
 8008c7a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008c7c:	4620      	mov	r0, r4
 8008c7e:	f001 fd6f 	bl	800a760 <_Bfree>
 8008c82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c84:	9318      	str	r3, [sp, #96]	; 0x60
 8008c86:	f1b8 0f00 	cmp.w	r8, #0
 8008c8a:	f300 808c 	bgt.w	8008da6 <_strtod_l+0x87e>
 8008c8e:	9b06      	ldr	r3, [sp, #24]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	dd08      	ble.n	8008ca6 <_strtod_l+0x77e>
 8008c94:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008c96:	9905      	ldr	r1, [sp, #20]
 8008c98:	4620      	mov	r0, r4
 8008c9a:	f001 ff23 	bl	800aae4 <__pow5mult>
 8008c9e:	9005      	str	r0, [sp, #20]
 8008ca0:	2800      	cmp	r0, #0
 8008ca2:	f43f ae89 	beq.w	80089b8 <_strtod_l+0x490>
 8008ca6:	2f00      	cmp	r7, #0
 8008ca8:	dd08      	ble.n	8008cbc <_strtod_l+0x794>
 8008caa:	9905      	ldr	r1, [sp, #20]
 8008cac:	463a      	mov	r2, r7
 8008cae:	4620      	mov	r0, r4
 8008cb0:	f001 ff72 	bl	800ab98 <__lshift>
 8008cb4:	9005      	str	r0, [sp, #20]
 8008cb6:	2800      	cmp	r0, #0
 8008cb8:	f43f ae7e 	beq.w	80089b8 <_strtod_l+0x490>
 8008cbc:	f1b9 0f00 	cmp.w	r9, #0
 8008cc0:	dd08      	ble.n	8008cd4 <_strtod_l+0x7ac>
 8008cc2:	4631      	mov	r1, r6
 8008cc4:	464a      	mov	r2, r9
 8008cc6:	4620      	mov	r0, r4
 8008cc8:	f001 ff66 	bl	800ab98 <__lshift>
 8008ccc:	4606      	mov	r6, r0
 8008cce:	2800      	cmp	r0, #0
 8008cd0:	f43f ae72 	beq.w	80089b8 <_strtod_l+0x490>
 8008cd4:	9a05      	ldr	r2, [sp, #20]
 8008cd6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008cd8:	4620      	mov	r0, r4
 8008cda:	f001 ffe9 	bl	800acb0 <__mdiff>
 8008cde:	4605      	mov	r5, r0
 8008ce0:	2800      	cmp	r0, #0
 8008ce2:	f43f ae69 	beq.w	80089b8 <_strtod_l+0x490>
 8008ce6:	68c3      	ldr	r3, [r0, #12]
 8008ce8:	930b      	str	r3, [sp, #44]	; 0x2c
 8008cea:	2300      	movs	r3, #0
 8008cec:	60c3      	str	r3, [r0, #12]
 8008cee:	4631      	mov	r1, r6
 8008cf0:	f001 ffc2 	bl	800ac78 <__mcmp>
 8008cf4:	2800      	cmp	r0, #0
 8008cf6:	da60      	bge.n	8008dba <_strtod_l+0x892>
 8008cf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cfa:	ea53 030a 	orrs.w	r3, r3, sl
 8008cfe:	f040 8082 	bne.w	8008e06 <_strtod_l+0x8de>
 8008d02:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d17d      	bne.n	8008e06 <_strtod_l+0x8de>
 8008d0a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008d0e:	0d1b      	lsrs	r3, r3, #20
 8008d10:	051b      	lsls	r3, r3, #20
 8008d12:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008d16:	d976      	bls.n	8008e06 <_strtod_l+0x8de>
 8008d18:	696b      	ldr	r3, [r5, #20]
 8008d1a:	b913      	cbnz	r3, 8008d22 <_strtod_l+0x7fa>
 8008d1c:	692b      	ldr	r3, [r5, #16]
 8008d1e:	2b01      	cmp	r3, #1
 8008d20:	dd71      	ble.n	8008e06 <_strtod_l+0x8de>
 8008d22:	4629      	mov	r1, r5
 8008d24:	2201      	movs	r2, #1
 8008d26:	4620      	mov	r0, r4
 8008d28:	f001 ff36 	bl	800ab98 <__lshift>
 8008d2c:	4631      	mov	r1, r6
 8008d2e:	4605      	mov	r5, r0
 8008d30:	f001 ffa2 	bl	800ac78 <__mcmp>
 8008d34:	2800      	cmp	r0, #0
 8008d36:	dd66      	ble.n	8008e06 <_strtod_l+0x8de>
 8008d38:	9904      	ldr	r1, [sp, #16]
 8008d3a:	4a53      	ldr	r2, [pc, #332]	; (8008e88 <_strtod_l+0x960>)
 8008d3c:	465b      	mov	r3, fp
 8008d3e:	2900      	cmp	r1, #0
 8008d40:	f000 8081 	beq.w	8008e46 <_strtod_l+0x91e>
 8008d44:	ea02 010b 	and.w	r1, r2, fp
 8008d48:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008d4c:	dc7b      	bgt.n	8008e46 <_strtod_l+0x91e>
 8008d4e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008d52:	f77f aea9 	ble.w	8008aa8 <_strtod_l+0x580>
 8008d56:	4b4d      	ldr	r3, [pc, #308]	; (8008e8c <_strtod_l+0x964>)
 8008d58:	4650      	mov	r0, sl
 8008d5a:	4659      	mov	r1, fp
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	f7f7 fc5b 	bl	8000618 <__aeabi_dmul>
 8008d62:	460b      	mov	r3, r1
 8008d64:	4303      	orrs	r3, r0
 8008d66:	bf08      	it	eq
 8008d68:	2322      	moveq	r3, #34	; 0x22
 8008d6a:	4682      	mov	sl, r0
 8008d6c:	468b      	mov	fp, r1
 8008d6e:	bf08      	it	eq
 8008d70:	6023      	streq	r3, [r4, #0]
 8008d72:	e62b      	b.n	80089cc <_strtod_l+0x4a4>
 8008d74:	f04f 32ff 	mov.w	r2, #4294967295
 8008d78:	fa02 f303 	lsl.w	r3, r2, r3
 8008d7c:	ea03 0a0a 	and.w	sl, r3, sl
 8008d80:	e6e3      	b.n	8008b4a <_strtod_l+0x622>
 8008d82:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008d86:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008d8a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008d8e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8008d92:	fa01 f308 	lsl.w	r3, r1, r8
 8008d96:	9308      	str	r3, [sp, #32]
 8008d98:	910d      	str	r1, [sp, #52]	; 0x34
 8008d9a:	e746      	b.n	8008c2a <_strtod_l+0x702>
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	9308      	str	r3, [sp, #32]
 8008da0:	2301      	movs	r3, #1
 8008da2:	930d      	str	r3, [sp, #52]	; 0x34
 8008da4:	e741      	b.n	8008c2a <_strtod_l+0x702>
 8008da6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008da8:	4642      	mov	r2, r8
 8008daa:	4620      	mov	r0, r4
 8008dac:	f001 fef4 	bl	800ab98 <__lshift>
 8008db0:	9018      	str	r0, [sp, #96]	; 0x60
 8008db2:	2800      	cmp	r0, #0
 8008db4:	f47f af6b 	bne.w	8008c8e <_strtod_l+0x766>
 8008db8:	e5fe      	b.n	80089b8 <_strtod_l+0x490>
 8008dba:	465f      	mov	r7, fp
 8008dbc:	d16e      	bne.n	8008e9c <_strtod_l+0x974>
 8008dbe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008dc0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008dc4:	b342      	cbz	r2, 8008e18 <_strtod_l+0x8f0>
 8008dc6:	4a32      	ldr	r2, [pc, #200]	; (8008e90 <_strtod_l+0x968>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d128      	bne.n	8008e1e <_strtod_l+0x8f6>
 8008dcc:	9b04      	ldr	r3, [sp, #16]
 8008dce:	4651      	mov	r1, sl
 8008dd0:	b1eb      	cbz	r3, 8008e0e <_strtod_l+0x8e6>
 8008dd2:	4b2d      	ldr	r3, [pc, #180]	; (8008e88 <_strtod_l+0x960>)
 8008dd4:	403b      	ands	r3, r7
 8008dd6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008dda:	f04f 32ff 	mov.w	r2, #4294967295
 8008dde:	d819      	bhi.n	8008e14 <_strtod_l+0x8ec>
 8008de0:	0d1b      	lsrs	r3, r3, #20
 8008de2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008de6:	fa02 f303 	lsl.w	r3, r2, r3
 8008dea:	4299      	cmp	r1, r3
 8008dec:	d117      	bne.n	8008e1e <_strtod_l+0x8f6>
 8008dee:	4b29      	ldr	r3, [pc, #164]	; (8008e94 <_strtod_l+0x96c>)
 8008df0:	429f      	cmp	r7, r3
 8008df2:	d102      	bne.n	8008dfa <_strtod_l+0x8d2>
 8008df4:	3101      	adds	r1, #1
 8008df6:	f43f addf 	beq.w	80089b8 <_strtod_l+0x490>
 8008dfa:	4b23      	ldr	r3, [pc, #140]	; (8008e88 <_strtod_l+0x960>)
 8008dfc:	403b      	ands	r3, r7
 8008dfe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008e02:	f04f 0a00 	mov.w	sl, #0
 8008e06:	9b04      	ldr	r3, [sp, #16]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d1a4      	bne.n	8008d56 <_strtod_l+0x82e>
 8008e0c:	e5de      	b.n	80089cc <_strtod_l+0x4a4>
 8008e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8008e12:	e7ea      	b.n	8008dea <_strtod_l+0x8c2>
 8008e14:	4613      	mov	r3, r2
 8008e16:	e7e8      	b.n	8008dea <_strtod_l+0x8c2>
 8008e18:	ea53 030a 	orrs.w	r3, r3, sl
 8008e1c:	d08c      	beq.n	8008d38 <_strtod_l+0x810>
 8008e1e:	9b08      	ldr	r3, [sp, #32]
 8008e20:	b1db      	cbz	r3, 8008e5a <_strtod_l+0x932>
 8008e22:	423b      	tst	r3, r7
 8008e24:	d0ef      	beq.n	8008e06 <_strtod_l+0x8de>
 8008e26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e28:	9a04      	ldr	r2, [sp, #16]
 8008e2a:	4650      	mov	r0, sl
 8008e2c:	4659      	mov	r1, fp
 8008e2e:	b1c3      	cbz	r3, 8008e62 <_strtod_l+0x93a>
 8008e30:	f7ff fb5d 	bl	80084ee <sulp>
 8008e34:	4602      	mov	r2, r0
 8008e36:	460b      	mov	r3, r1
 8008e38:	ec51 0b18 	vmov	r0, r1, d8
 8008e3c:	f7f7 fa36 	bl	80002ac <__adddf3>
 8008e40:	4682      	mov	sl, r0
 8008e42:	468b      	mov	fp, r1
 8008e44:	e7df      	b.n	8008e06 <_strtod_l+0x8de>
 8008e46:	4013      	ands	r3, r2
 8008e48:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008e4c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008e50:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008e54:	f04f 3aff 	mov.w	sl, #4294967295
 8008e58:	e7d5      	b.n	8008e06 <_strtod_l+0x8de>
 8008e5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e5c:	ea13 0f0a 	tst.w	r3, sl
 8008e60:	e7e0      	b.n	8008e24 <_strtod_l+0x8fc>
 8008e62:	f7ff fb44 	bl	80084ee <sulp>
 8008e66:	4602      	mov	r2, r0
 8008e68:	460b      	mov	r3, r1
 8008e6a:	ec51 0b18 	vmov	r0, r1, d8
 8008e6e:	f7f7 fa1b 	bl	80002a8 <__aeabi_dsub>
 8008e72:	2200      	movs	r2, #0
 8008e74:	2300      	movs	r3, #0
 8008e76:	4682      	mov	sl, r0
 8008e78:	468b      	mov	fp, r1
 8008e7a:	f7f7 fe35 	bl	8000ae8 <__aeabi_dcmpeq>
 8008e7e:	2800      	cmp	r0, #0
 8008e80:	d0c1      	beq.n	8008e06 <_strtod_l+0x8de>
 8008e82:	e611      	b.n	8008aa8 <_strtod_l+0x580>
 8008e84:	fffffc02 	.word	0xfffffc02
 8008e88:	7ff00000 	.word	0x7ff00000
 8008e8c:	39500000 	.word	0x39500000
 8008e90:	000fffff 	.word	0x000fffff
 8008e94:	7fefffff 	.word	0x7fefffff
 8008e98:	0800d558 	.word	0x0800d558
 8008e9c:	4631      	mov	r1, r6
 8008e9e:	4628      	mov	r0, r5
 8008ea0:	f002 f868 	bl	800af74 <__ratio>
 8008ea4:	ec59 8b10 	vmov	r8, r9, d0
 8008ea8:	ee10 0a10 	vmov	r0, s0
 8008eac:	2200      	movs	r2, #0
 8008eae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008eb2:	4649      	mov	r1, r9
 8008eb4:	f7f7 fe2c 	bl	8000b10 <__aeabi_dcmple>
 8008eb8:	2800      	cmp	r0, #0
 8008eba:	d07a      	beq.n	8008fb2 <_strtod_l+0xa8a>
 8008ebc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d04a      	beq.n	8008f58 <_strtod_l+0xa30>
 8008ec2:	4b95      	ldr	r3, [pc, #596]	; (8009118 <_strtod_l+0xbf0>)
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008eca:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009118 <_strtod_l+0xbf0>
 8008ece:	f04f 0800 	mov.w	r8, #0
 8008ed2:	4b92      	ldr	r3, [pc, #584]	; (800911c <_strtod_l+0xbf4>)
 8008ed4:	403b      	ands	r3, r7
 8008ed6:	930d      	str	r3, [sp, #52]	; 0x34
 8008ed8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008eda:	4b91      	ldr	r3, [pc, #580]	; (8009120 <_strtod_l+0xbf8>)
 8008edc:	429a      	cmp	r2, r3
 8008ede:	f040 80b0 	bne.w	8009042 <_strtod_l+0xb1a>
 8008ee2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008ee6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008eea:	ec4b ab10 	vmov	d0, sl, fp
 8008eee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008ef2:	f001 ff67 	bl	800adc4 <__ulp>
 8008ef6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008efa:	ec53 2b10 	vmov	r2, r3, d0
 8008efe:	f7f7 fb8b 	bl	8000618 <__aeabi_dmul>
 8008f02:	4652      	mov	r2, sl
 8008f04:	465b      	mov	r3, fp
 8008f06:	f7f7 f9d1 	bl	80002ac <__adddf3>
 8008f0a:	460b      	mov	r3, r1
 8008f0c:	4983      	ldr	r1, [pc, #524]	; (800911c <_strtod_l+0xbf4>)
 8008f0e:	4a85      	ldr	r2, [pc, #532]	; (8009124 <_strtod_l+0xbfc>)
 8008f10:	4019      	ands	r1, r3
 8008f12:	4291      	cmp	r1, r2
 8008f14:	4682      	mov	sl, r0
 8008f16:	d960      	bls.n	8008fda <_strtod_l+0xab2>
 8008f18:	ee18 3a90 	vmov	r3, s17
 8008f1c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d104      	bne.n	8008f2e <_strtod_l+0xa06>
 8008f24:	ee18 3a10 	vmov	r3, s16
 8008f28:	3301      	adds	r3, #1
 8008f2a:	f43f ad45 	beq.w	80089b8 <_strtod_l+0x490>
 8008f2e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009130 <_strtod_l+0xc08>
 8008f32:	f04f 3aff 	mov.w	sl, #4294967295
 8008f36:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008f38:	4620      	mov	r0, r4
 8008f3a:	f001 fc11 	bl	800a760 <_Bfree>
 8008f3e:	9905      	ldr	r1, [sp, #20]
 8008f40:	4620      	mov	r0, r4
 8008f42:	f001 fc0d 	bl	800a760 <_Bfree>
 8008f46:	4631      	mov	r1, r6
 8008f48:	4620      	mov	r0, r4
 8008f4a:	f001 fc09 	bl	800a760 <_Bfree>
 8008f4e:	4629      	mov	r1, r5
 8008f50:	4620      	mov	r0, r4
 8008f52:	f001 fc05 	bl	800a760 <_Bfree>
 8008f56:	e61a      	b.n	8008b8e <_strtod_l+0x666>
 8008f58:	f1ba 0f00 	cmp.w	sl, #0
 8008f5c:	d11b      	bne.n	8008f96 <_strtod_l+0xa6e>
 8008f5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008f62:	b9f3      	cbnz	r3, 8008fa2 <_strtod_l+0xa7a>
 8008f64:	4b6c      	ldr	r3, [pc, #432]	; (8009118 <_strtod_l+0xbf0>)
 8008f66:	2200      	movs	r2, #0
 8008f68:	4640      	mov	r0, r8
 8008f6a:	4649      	mov	r1, r9
 8008f6c:	f7f7 fdc6 	bl	8000afc <__aeabi_dcmplt>
 8008f70:	b9d0      	cbnz	r0, 8008fa8 <_strtod_l+0xa80>
 8008f72:	4640      	mov	r0, r8
 8008f74:	4649      	mov	r1, r9
 8008f76:	4b6c      	ldr	r3, [pc, #432]	; (8009128 <_strtod_l+0xc00>)
 8008f78:	2200      	movs	r2, #0
 8008f7a:	f7f7 fb4d 	bl	8000618 <__aeabi_dmul>
 8008f7e:	4680      	mov	r8, r0
 8008f80:	4689      	mov	r9, r1
 8008f82:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008f86:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8008f8a:	9315      	str	r3, [sp, #84]	; 0x54
 8008f8c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008f90:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008f94:	e79d      	b.n	8008ed2 <_strtod_l+0x9aa>
 8008f96:	f1ba 0f01 	cmp.w	sl, #1
 8008f9a:	d102      	bne.n	8008fa2 <_strtod_l+0xa7a>
 8008f9c:	2f00      	cmp	r7, #0
 8008f9e:	f43f ad83 	beq.w	8008aa8 <_strtod_l+0x580>
 8008fa2:	4b62      	ldr	r3, [pc, #392]	; (800912c <_strtod_l+0xc04>)
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	e78e      	b.n	8008ec6 <_strtod_l+0x99e>
 8008fa8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009128 <_strtod_l+0xc00>
 8008fac:	f04f 0800 	mov.w	r8, #0
 8008fb0:	e7e7      	b.n	8008f82 <_strtod_l+0xa5a>
 8008fb2:	4b5d      	ldr	r3, [pc, #372]	; (8009128 <_strtod_l+0xc00>)
 8008fb4:	4640      	mov	r0, r8
 8008fb6:	4649      	mov	r1, r9
 8008fb8:	2200      	movs	r2, #0
 8008fba:	f7f7 fb2d 	bl	8000618 <__aeabi_dmul>
 8008fbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fc0:	4680      	mov	r8, r0
 8008fc2:	4689      	mov	r9, r1
 8008fc4:	b933      	cbnz	r3, 8008fd4 <_strtod_l+0xaac>
 8008fc6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008fca:	900e      	str	r0, [sp, #56]	; 0x38
 8008fcc:	930f      	str	r3, [sp, #60]	; 0x3c
 8008fce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008fd2:	e7dd      	b.n	8008f90 <_strtod_l+0xa68>
 8008fd4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8008fd8:	e7f9      	b.n	8008fce <_strtod_l+0xaa6>
 8008fda:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008fde:	9b04      	ldr	r3, [sp, #16]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d1a8      	bne.n	8008f36 <_strtod_l+0xa0e>
 8008fe4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008fe8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008fea:	0d1b      	lsrs	r3, r3, #20
 8008fec:	051b      	lsls	r3, r3, #20
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d1a1      	bne.n	8008f36 <_strtod_l+0xa0e>
 8008ff2:	4640      	mov	r0, r8
 8008ff4:	4649      	mov	r1, r9
 8008ff6:	f7f7 fe6f 	bl	8000cd8 <__aeabi_d2lz>
 8008ffa:	f7f7 fadf 	bl	80005bc <__aeabi_l2d>
 8008ffe:	4602      	mov	r2, r0
 8009000:	460b      	mov	r3, r1
 8009002:	4640      	mov	r0, r8
 8009004:	4649      	mov	r1, r9
 8009006:	f7f7 f94f 	bl	80002a8 <__aeabi_dsub>
 800900a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800900c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009010:	ea43 030a 	orr.w	r3, r3, sl
 8009014:	4313      	orrs	r3, r2
 8009016:	4680      	mov	r8, r0
 8009018:	4689      	mov	r9, r1
 800901a:	d055      	beq.n	80090c8 <_strtod_l+0xba0>
 800901c:	a336      	add	r3, pc, #216	; (adr r3, 80090f8 <_strtod_l+0xbd0>)
 800901e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009022:	f7f7 fd6b 	bl	8000afc <__aeabi_dcmplt>
 8009026:	2800      	cmp	r0, #0
 8009028:	f47f acd0 	bne.w	80089cc <_strtod_l+0x4a4>
 800902c:	a334      	add	r3, pc, #208	; (adr r3, 8009100 <_strtod_l+0xbd8>)
 800902e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009032:	4640      	mov	r0, r8
 8009034:	4649      	mov	r1, r9
 8009036:	f7f7 fd7f 	bl	8000b38 <__aeabi_dcmpgt>
 800903a:	2800      	cmp	r0, #0
 800903c:	f43f af7b 	beq.w	8008f36 <_strtod_l+0xa0e>
 8009040:	e4c4      	b.n	80089cc <_strtod_l+0x4a4>
 8009042:	9b04      	ldr	r3, [sp, #16]
 8009044:	b333      	cbz	r3, 8009094 <_strtod_l+0xb6c>
 8009046:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009048:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800904c:	d822      	bhi.n	8009094 <_strtod_l+0xb6c>
 800904e:	a32e      	add	r3, pc, #184	; (adr r3, 8009108 <_strtod_l+0xbe0>)
 8009050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009054:	4640      	mov	r0, r8
 8009056:	4649      	mov	r1, r9
 8009058:	f7f7 fd5a 	bl	8000b10 <__aeabi_dcmple>
 800905c:	b1a0      	cbz	r0, 8009088 <_strtod_l+0xb60>
 800905e:	4649      	mov	r1, r9
 8009060:	4640      	mov	r0, r8
 8009062:	f7f7 fdb1 	bl	8000bc8 <__aeabi_d2uiz>
 8009066:	2801      	cmp	r0, #1
 8009068:	bf38      	it	cc
 800906a:	2001      	movcc	r0, #1
 800906c:	f7f7 fa5a 	bl	8000524 <__aeabi_ui2d>
 8009070:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009072:	4680      	mov	r8, r0
 8009074:	4689      	mov	r9, r1
 8009076:	bb23      	cbnz	r3, 80090c2 <_strtod_l+0xb9a>
 8009078:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800907c:	9010      	str	r0, [sp, #64]	; 0x40
 800907e:	9311      	str	r3, [sp, #68]	; 0x44
 8009080:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009084:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800908a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800908c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009090:	1a9b      	subs	r3, r3, r2
 8009092:	9309      	str	r3, [sp, #36]	; 0x24
 8009094:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009098:	eeb0 0a48 	vmov.f32	s0, s16
 800909c:	eef0 0a68 	vmov.f32	s1, s17
 80090a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80090a4:	f001 fe8e 	bl	800adc4 <__ulp>
 80090a8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80090ac:	ec53 2b10 	vmov	r2, r3, d0
 80090b0:	f7f7 fab2 	bl	8000618 <__aeabi_dmul>
 80090b4:	ec53 2b18 	vmov	r2, r3, d8
 80090b8:	f7f7 f8f8 	bl	80002ac <__adddf3>
 80090bc:	4682      	mov	sl, r0
 80090be:	468b      	mov	fp, r1
 80090c0:	e78d      	b.n	8008fde <_strtod_l+0xab6>
 80090c2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80090c6:	e7db      	b.n	8009080 <_strtod_l+0xb58>
 80090c8:	a311      	add	r3, pc, #68	; (adr r3, 8009110 <_strtod_l+0xbe8>)
 80090ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ce:	f7f7 fd15 	bl	8000afc <__aeabi_dcmplt>
 80090d2:	e7b2      	b.n	800903a <_strtod_l+0xb12>
 80090d4:	2300      	movs	r3, #0
 80090d6:	930a      	str	r3, [sp, #40]	; 0x28
 80090d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80090da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80090dc:	6013      	str	r3, [r2, #0]
 80090de:	f7ff ba6b 	b.w	80085b8 <_strtod_l+0x90>
 80090e2:	2a65      	cmp	r2, #101	; 0x65
 80090e4:	f43f ab5f 	beq.w	80087a6 <_strtod_l+0x27e>
 80090e8:	2a45      	cmp	r2, #69	; 0x45
 80090ea:	f43f ab5c 	beq.w	80087a6 <_strtod_l+0x27e>
 80090ee:	2301      	movs	r3, #1
 80090f0:	f7ff bb94 	b.w	800881c <_strtod_l+0x2f4>
 80090f4:	f3af 8000 	nop.w
 80090f8:	94a03595 	.word	0x94a03595
 80090fc:	3fdfffff 	.word	0x3fdfffff
 8009100:	35afe535 	.word	0x35afe535
 8009104:	3fe00000 	.word	0x3fe00000
 8009108:	ffc00000 	.word	0xffc00000
 800910c:	41dfffff 	.word	0x41dfffff
 8009110:	94a03595 	.word	0x94a03595
 8009114:	3fcfffff 	.word	0x3fcfffff
 8009118:	3ff00000 	.word	0x3ff00000
 800911c:	7ff00000 	.word	0x7ff00000
 8009120:	7fe00000 	.word	0x7fe00000
 8009124:	7c9fffff 	.word	0x7c9fffff
 8009128:	3fe00000 	.word	0x3fe00000
 800912c:	bff00000 	.word	0xbff00000
 8009130:	7fefffff 	.word	0x7fefffff

08009134 <_strtod_r>:
 8009134:	4b01      	ldr	r3, [pc, #4]	; (800913c <_strtod_r+0x8>)
 8009136:	f7ff b9f7 	b.w	8008528 <_strtod_l>
 800913a:	bf00      	nop
 800913c:	20000074 	.word	0x20000074

08009140 <_strtol_l.constprop.0>:
 8009140:	2b01      	cmp	r3, #1
 8009142:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009146:	d001      	beq.n	800914c <_strtol_l.constprop.0+0xc>
 8009148:	2b24      	cmp	r3, #36	; 0x24
 800914a:	d906      	bls.n	800915a <_strtol_l.constprop.0+0x1a>
 800914c:	f7fe fa78 	bl	8007640 <__errno>
 8009150:	2316      	movs	r3, #22
 8009152:	6003      	str	r3, [r0, #0]
 8009154:	2000      	movs	r0, #0
 8009156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800915a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009240 <_strtol_l.constprop.0+0x100>
 800915e:	460d      	mov	r5, r1
 8009160:	462e      	mov	r6, r5
 8009162:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009166:	f814 700c 	ldrb.w	r7, [r4, ip]
 800916a:	f017 0708 	ands.w	r7, r7, #8
 800916e:	d1f7      	bne.n	8009160 <_strtol_l.constprop.0+0x20>
 8009170:	2c2d      	cmp	r4, #45	; 0x2d
 8009172:	d132      	bne.n	80091da <_strtol_l.constprop.0+0x9a>
 8009174:	782c      	ldrb	r4, [r5, #0]
 8009176:	2701      	movs	r7, #1
 8009178:	1cb5      	adds	r5, r6, #2
 800917a:	2b00      	cmp	r3, #0
 800917c:	d05b      	beq.n	8009236 <_strtol_l.constprop.0+0xf6>
 800917e:	2b10      	cmp	r3, #16
 8009180:	d109      	bne.n	8009196 <_strtol_l.constprop.0+0x56>
 8009182:	2c30      	cmp	r4, #48	; 0x30
 8009184:	d107      	bne.n	8009196 <_strtol_l.constprop.0+0x56>
 8009186:	782c      	ldrb	r4, [r5, #0]
 8009188:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800918c:	2c58      	cmp	r4, #88	; 0x58
 800918e:	d14d      	bne.n	800922c <_strtol_l.constprop.0+0xec>
 8009190:	786c      	ldrb	r4, [r5, #1]
 8009192:	2310      	movs	r3, #16
 8009194:	3502      	adds	r5, #2
 8009196:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800919a:	f108 38ff 	add.w	r8, r8, #4294967295
 800919e:	f04f 0c00 	mov.w	ip, #0
 80091a2:	fbb8 f9f3 	udiv	r9, r8, r3
 80091a6:	4666      	mov	r6, ip
 80091a8:	fb03 8a19 	mls	sl, r3, r9, r8
 80091ac:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80091b0:	f1be 0f09 	cmp.w	lr, #9
 80091b4:	d816      	bhi.n	80091e4 <_strtol_l.constprop.0+0xa4>
 80091b6:	4674      	mov	r4, lr
 80091b8:	42a3      	cmp	r3, r4
 80091ba:	dd24      	ble.n	8009206 <_strtol_l.constprop.0+0xc6>
 80091bc:	f1bc 0f00 	cmp.w	ip, #0
 80091c0:	db1e      	blt.n	8009200 <_strtol_l.constprop.0+0xc0>
 80091c2:	45b1      	cmp	r9, r6
 80091c4:	d31c      	bcc.n	8009200 <_strtol_l.constprop.0+0xc0>
 80091c6:	d101      	bne.n	80091cc <_strtol_l.constprop.0+0x8c>
 80091c8:	45a2      	cmp	sl, r4
 80091ca:	db19      	blt.n	8009200 <_strtol_l.constprop.0+0xc0>
 80091cc:	fb06 4603 	mla	r6, r6, r3, r4
 80091d0:	f04f 0c01 	mov.w	ip, #1
 80091d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80091d8:	e7e8      	b.n	80091ac <_strtol_l.constprop.0+0x6c>
 80091da:	2c2b      	cmp	r4, #43	; 0x2b
 80091dc:	bf04      	itt	eq
 80091de:	782c      	ldrbeq	r4, [r5, #0]
 80091e0:	1cb5      	addeq	r5, r6, #2
 80091e2:	e7ca      	b.n	800917a <_strtol_l.constprop.0+0x3a>
 80091e4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80091e8:	f1be 0f19 	cmp.w	lr, #25
 80091ec:	d801      	bhi.n	80091f2 <_strtol_l.constprop.0+0xb2>
 80091ee:	3c37      	subs	r4, #55	; 0x37
 80091f0:	e7e2      	b.n	80091b8 <_strtol_l.constprop.0+0x78>
 80091f2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80091f6:	f1be 0f19 	cmp.w	lr, #25
 80091fa:	d804      	bhi.n	8009206 <_strtol_l.constprop.0+0xc6>
 80091fc:	3c57      	subs	r4, #87	; 0x57
 80091fe:	e7db      	b.n	80091b8 <_strtol_l.constprop.0+0x78>
 8009200:	f04f 3cff 	mov.w	ip, #4294967295
 8009204:	e7e6      	b.n	80091d4 <_strtol_l.constprop.0+0x94>
 8009206:	f1bc 0f00 	cmp.w	ip, #0
 800920a:	da05      	bge.n	8009218 <_strtol_l.constprop.0+0xd8>
 800920c:	2322      	movs	r3, #34	; 0x22
 800920e:	6003      	str	r3, [r0, #0]
 8009210:	4646      	mov	r6, r8
 8009212:	b942      	cbnz	r2, 8009226 <_strtol_l.constprop.0+0xe6>
 8009214:	4630      	mov	r0, r6
 8009216:	e79e      	b.n	8009156 <_strtol_l.constprop.0+0x16>
 8009218:	b107      	cbz	r7, 800921c <_strtol_l.constprop.0+0xdc>
 800921a:	4276      	negs	r6, r6
 800921c:	2a00      	cmp	r2, #0
 800921e:	d0f9      	beq.n	8009214 <_strtol_l.constprop.0+0xd4>
 8009220:	f1bc 0f00 	cmp.w	ip, #0
 8009224:	d000      	beq.n	8009228 <_strtol_l.constprop.0+0xe8>
 8009226:	1e69      	subs	r1, r5, #1
 8009228:	6011      	str	r1, [r2, #0]
 800922a:	e7f3      	b.n	8009214 <_strtol_l.constprop.0+0xd4>
 800922c:	2430      	movs	r4, #48	; 0x30
 800922e:	2b00      	cmp	r3, #0
 8009230:	d1b1      	bne.n	8009196 <_strtol_l.constprop.0+0x56>
 8009232:	2308      	movs	r3, #8
 8009234:	e7af      	b.n	8009196 <_strtol_l.constprop.0+0x56>
 8009236:	2c30      	cmp	r4, #48	; 0x30
 8009238:	d0a5      	beq.n	8009186 <_strtol_l.constprop.0+0x46>
 800923a:	230a      	movs	r3, #10
 800923c:	e7ab      	b.n	8009196 <_strtol_l.constprop.0+0x56>
 800923e:	bf00      	nop
 8009240:	0800d581 	.word	0x0800d581

08009244 <_strtol_r>:
 8009244:	f7ff bf7c 	b.w	8009140 <_strtol_l.constprop.0>

08009248 <_write_r>:
 8009248:	b538      	push	{r3, r4, r5, lr}
 800924a:	4d07      	ldr	r5, [pc, #28]	; (8009268 <_write_r+0x20>)
 800924c:	4604      	mov	r4, r0
 800924e:	4608      	mov	r0, r1
 8009250:	4611      	mov	r1, r2
 8009252:	2200      	movs	r2, #0
 8009254:	602a      	str	r2, [r5, #0]
 8009256:	461a      	mov	r2, r3
 8009258:	f7f9 fbd1 	bl	80029fe <_write>
 800925c:	1c43      	adds	r3, r0, #1
 800925e:	d102      	bne.n	8009266 <_write_r+0x1e>
 8009260:	682b      	ldr	r3, [r5, #0]
 8009262:	b103      	cbz	r3, 8009266 <_write_r+0x1e>
 8009264:	6023      	str	r3, [r4, #0]
 8009266:	bd38      	pop	{r3, r4, r5, pc}
 8009268:	20000508 	.word	0x20000508

0800926c <_close_r>:
 800926c:	b538      	push	{r3, r4, r5, lr}
 800926e:	4d06      	ldr	r5, [pc, #24]	; (8009288 <_close_r+0x1c>)
 8009270:	2300      	movs	r3, #0
 8009272:	4604      	mov	r4, r0
 8009274:	4608      	mov	r0, r1
 8009276:	602b      	str	r3, [r5, #0]
 8009278:	f7f9 fbdd 	bl	8002a36 <_close>
 800927c:	1c43      	adds	r3, r0, #1
 800927e:	d102      	bne.n	8009286 <_close_r+0x1a>
 8009280:	682b      	ldr	r3, [r5, #0]
 8009282:	b103      	cbz	r3, 8009286 <_close_r+0x1a>
 8009284:	6023      	str	r3, [r4, #0]
 8009286:	bd38      	pop	{r3, r4, r5, pc}
 8009288:	20000508 	.word	0x20000508

0800928c <quorem>:
 800928c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009290:	6903      	ldr	r3, [r0, #16]
 8009292:	690c      	ldr	r4, [r1, #16]
 8009294:	42a3      	cmp	r3, r4
 8009296:	4607      	mov	r7, r0
 8009298:	f2c0 8081 	blt.w	800939e <quorem+0x112>
 800929c:	3c01      	subs	r4, #1
 800929e:	f101 0814 	add.w	r8, r1, #20
 80092a2:	f100 0514 	add.w	r5, r0, #20
 80092a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80092aa:	9301      	str	r3, [sp, #4]
 80092ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80092b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80092b4:	3301      	adds	r3, #1
 80092b6:	429a      	cmp	r2, r3
 80092b8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80092bc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80092c0:	fbb2 f6f3 	udiv	r6, r2, r3
 80092c4:	d331      	bcc.n	800932a <quorem+0x9e>
 80092c6:	f04f 0e00 	mov.w	lr, #0
 80092ca:	4640      	mov	r0, r8
 80092cc:	46ac      	mov	ip, r5
 80092ce:	46f2      	mov	sl, lr
 80092d0:	f850 2b04 	ldr.w	r2, [r0], #4
 80092d4:	b293      	uxth	r3, r2
 80092d6:	fb06 e303 	mla	r3, r6, r3, lr
 80092da:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80092de:	b29b      	uxth	r3, r3
 80092e0:	ebaa 0303 	sub.w	r3, sl, r3
 80092e4:	f8dc a000 	ldr.w	sl, [ip]
 80092e8:	0c12      	lsrs	r2, r2, #16
 80092ea:	fa13 f38a 	uxtah	r3, r3, sl
 80092ee:	fb06 e202 	mla	r2, r6, r2, lr
 80092f2:	9300      	str	r3, [sp, #0]
 80092f4:	9b00      	ldr	r3, [sp, #0]
 80092f6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80092fa:	b292      	uxth	r2, r2
 80092fc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009300:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009304:	f8bd 3000 	ldrh.w	r3, [sp]
 8009308:	4581      	cmp	r9, r0
 800930a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800930e:	f84c 3b04 	str.w	r3, [ip], #4
 8009312:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009316:	d2db      	bcs.n	80092d0 <quorem+0x44>
 8009318:	f855 300b 	ldr.w	r3, [r5, fp]
 800931c:	b92b      	cbnz	r3, 800932a <quorem+0x9e>
 800931e:	9b01      	ldr	r3, [sp, #4]
 8009320:	3b04      	subs	r3, #4
 8009322:	429d      	cmp	r5, r3
 8009324:	461a      	mov	r2, r3
 8009326:	d32e      	bcc.n	8009386 <quorem+0xfa>
 8009328:	613c      	str	r4, [r7, #16]
 800932a:	4638      	mov	r0, r7
 800932c:	f001 fca4 	bl	800ac78 <__mcmp>
 8009330:	2800      	cmp	r0, #0
 8009332:	db24      	blt.n	800937e <quorem+0xf2>
 8009334:	3601      	adds	r6, #1
 8009336:	4628      	mov	r0, r5
 8009338:	f04f 0c00 	mov.w	ip, #0
 800933c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009340:	f8d0 e000 	ldr.w	lr, [r0]
 8009344:	b293      	uxth	r3, r2
 8009346:	ebac 0303 	sub.w	r3, ip, r3
 800934a:	0c12      	lsrs	r2, r2, #16
 800934c:	fa13 f38e 	uxtah	r3, r3, lr
 8009350:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009354:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009358:	b29b      	uxth	r3, r3
 800935a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800935e:	45c1      	cmp	r9, r8
 8009360:	f840 3b04 	str.w	r3, [r0], #4
 8009364:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009368:	d2e8      	bcs.n	800933c <quorem+0xb0>
 800936a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800936e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009372:	b922      	cbnz	r2, 800937e <quorem+0xf2>
 8009374:	3b04      	subs	r3, #4
 8009376:	429d      	cmp	r5, r3
 8009378:	461a      	mov	r2, r3
 800937a:	d30a      	bcc.n	8009392 <quorem+0x106>
 800937c:	613c      	str	r4, [r7, #16]
 800937e:	4630      	mov	r0, r6
 8009380:	b003      	add	sp, #12
 8009382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009386:	6812      	ldr	r2, [r2, #0]
 8009388:	3b04      	subs	r3, #4
 800938a:	2a00      	cmp	r2, #0
 800938c:	d1cc      	bne.n	8009328 <quorem+0x9c>
 800938e:	3c01      	subs	r4, #1
 8009390:	e7c7      	b.n	8009322 <quorem+0x96>
 8009392:	6812      	ldr	r2, [r2, #0]
 8009394:	3b04      	subs	r3, #4
 8009396:	2a00      	cmp	r2, #0
 8009398:	d1f0      	bne.n	800937c <quorem+0xf0>
 800939a:	3c01      	subs	r4, #1
 800939c:	e7eb      	b.n	8009376 <quorem+0xea>
 800939e:	2000      	movs	r0, #0
 80093a0:	e7ee      	b.n	8009380 <quorem+0xf4>
 80093a2:	0000      	movs	r0, r0
 80093a4:	0000      	movs	r0, r0
	...

080093a8 <_dtoa_r>:
 80093a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093ac:	ed2d 8b04 	vpush	{d8-d9}
 80093b0:	ec57 6b10 	vmov	r6, r7, d0
 80093b4:	b093      	sub	sp, #76	; 0x4c
 80093b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80093b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80093bc:	9106      	str	r1, [sp, #24]
 80093be:	ee10 aa10 	vmov	sl, s0
 80093c2:	4604      	mov	r4, r0
 80093c4:	9209      	str	r2, [sp, #36]	; 0x24
 80093c6:	930c      	str	r3, [sp, #48]	; 0x30
 80093c8:	46bb      	mov	fp, r7
 80093ca:	b975      	cbnz	r5, 80093ea <_dtoa_r+0x42>
 80093cc:	2010      	movs	r0, #16
 80093ce:	f001 f95f 	bl	800a690 <malloc>
 80093d2:	4602      	mov	r2, r0
 80093d4:	6260      	str	r0, [r4, #36]	; 0x24
 80093d6:	b920      	cbnz	r0, 80093e2 <_dtoa_r+0x3a>
 80093d8:	4ba7      	ldr	r3, [pc, #668]	; (8009678 <_dtoa_r+0x2d0>)
 80093da:	21ea      	movs	r1, #234	; 0xea
 80093dc:	48a7      	ldr	r0, [pc, #668]	; (800967c <_dtoa_r+0x2d4>)
 80093de:	f002 fcd7 	bl	800bd90 <__assert_func>
 80093e2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80093e6:	6005      	str	r5, [r0, #0]
 80093e8:	60c5      	str	r5, [r0, #12]
 80093ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093ec:	6819      	ldr	r1, [r3, #0]
 80093ee:	b151      	cbz	r1, 8009406 <_dtoa_r+0x5e>
 80093f0:	685a      	ldr	r2, [r3, #4]
 80093f2:	604a      	str	r2, [r1, #4]
 80093f4:	2301      	movs	r3, #1
 80093f6:	4093      	lsls	r3, r2
 80093f8:	608b      	str	r3, [r1, #8]
 80093fa:	4620      	mov	r0, r4
 80093fc:	f001 f9b0 	bl	800a760 <_Bfree>
 8009400:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009402:	2200      	movs	r2, #0
 8009404:	601a      	str	r2, [r3, #0]
 8009406:	1e3b      	subs	r3, r7, #0
 8009408:	bfaa      	itet	ge
 800940a:	2300      	movge	r3, #0
 800940c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009410:	f8c8 3000 	strge.w	r3, [r8]
 8009414:	4b9a      	ldr	r3, [pc, #616]	; (8009680 <_dtoa_r+0x2d8>)
 8009416:	bfbc      	itt	lt
 8009418:	2201      	movlt	r2, #1
 800941a:	f8c8 2000 	strlt.w	r2, [r8]
 800941e:	ea33 030b 	bics.w	r3, r3, fp
 8009422:	d11b      	bne.n	800945c <_dtoa_r+0xb4>
 8009424:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009426:	f242 730f 	movw	r3, #9999	; 0x270f
 800942a:	6013      	str	r3, [r2, #0]
 800942c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009430:	4333      	orrs	r3, r6
 8009432:	f000 8592 	beq.w	8009f5a <_dtoa_r+0xbb2>
 8009436:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009438:	b963      	cbnz	r3, 8009454 <_dtoa_r+0xac>
 800943a:	4b92      	ldr	r3, [pc, #584]	; (8009684 <_dtoa_r+0x2dc>)
 800943c:	e022      	b.n	8009484 <_dtoa_r+0xdc>
 800943e:	4b92      	ldr	r3, [pc, #584]	; (8009688 <_dtoa_r+0x2e0>)
 8009440:	9301      	str	r3, [sp, #4]
 8009442:	3308      	adds	r3, #8
 8009444:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009446:	6013      	str	r3, [r2, #0]
 8009448:	9801      	ldr	r0, [sp, #4]
 800944a:	b013      	add	sp, #76	; 0x4c
 800944c:	ecbd 8b04 	vpop	{d8-d9}
 8009450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009454:	4b8b      	ldr	r3, [pc, #556]	; (8009684 <_dtoa_r+0x2dc>)
 8009456:	9301      	str	r3, [sp, #4]
 8009458:	3303      	adds	r3, #3
 800945a:	e7f3      	b.n	8009444 <_dtoa_r+0x9c>
 800945c:	2200      	movs	r2, #0
 800945e:	2300      	movs	r3, #0
 8009460:	4650      	mov	r0, sl
 8009462:	4659      	mov	r1, fp
 8009464:	f7f7 fb40 	bl	8000ae8 <__aeabi_dcmpeq>
 8009468:	ec4b ab19 	vmov	d9, sl, fp
 800946c:	4680      	mov	r8, r0
 800946e:	b158      	cbz	r0, 8009488 <_dtoa_r+0xe0>
 8009470:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009472:	2301      	movs	r3, #1
 8009474:	6013      	str	r3, [r2, #0]
 8009476:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009478:	2b00      	cmp	r3, #0
 800947a:	f000 856b 	beq.w	8009f54 <_dtoa_r+0xbac>
 800947e:	4883      	ldr	r0, [pc, #524]	; (800968c <_dtoa_r+0x2e4>)
 8009480:	6018      	str	r0, [r3, #0]
 8009482:	1e43      	subs	r3, r0, #1
 8009484:	9301      	str	r3, [sp, #4]
 8009486:	e7df      	b.n	8009448 <_dtoa_r+0xa0>
 8009488:	ec4b ab10 	vmov	d0, sl, fp
 800948c:	aa10      	add	r2, sp, #64	; 0x40
 800948e:	a911      	add	r1, sp, #68	; 0x44
 8009490:	4620      	mov	r0, r4
 8009492:	f001 fd13 	bl	800aebc <__d2b>
 8009496:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800949a:	ee08 0a10 	vmov	s16, r0
 800949e:	2d00      	cmp	r5, #0
 80094a0:	f000 8084 	beq.w	80095ac <_dtoa_r+0x204>
 80094a4:	ee19 3a90 	vmov	r3, s19
 80094a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80094ac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80094b0:	4656      	mov	r6, sl
 80094b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80094b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80094ba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80094be:	4b74      	ldr	r3, [pc, #464]	; (8009690 <_dtoa_r+0x2e8>)
 80094c0:	2200      	movs	r2, #0
 80094c2:	4630      	mov	r0, r6
 80094c4:	4639      	mov	r1, r7
 80094c6:	f7f6 feef 	bl	80002a8 <__aeabi_dsub>
 80094ca:	a365      	add	r3, pc, #404	; (adr r3, 8009660 <_dtoa_r+0x2b8>)
 80094cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d0:	f7f7 f8a2 	bl	8000618 <__aeabi_dmul>
 80094d4:	a364      	add	r3, pc, #400	; (adr r3, 8009668 <_dtoa_r+0x2c0>)
 80094d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094da:	f7f6 fee7 	bl	80002ac <__adddf3>
 80094de:	4606      	mov	r6, r0
 80094e0:	4628      	mov	r0, r5
 80094e2:	460f      	mov	r7, r1
 80094e4:	f7f7 f82e 	bl	8000544 <__aeabi_i2d>
 80094e8:	a361      	add	r3, pc, #388	; (adr r3, 8009670 <_dtoa_r+0x2c8>)
 80094ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ee:	f7f7 f893 	bl	8000618 <__aeabi_dmul>
 80094f2:	4602      	mov	r2, r0
 80094f4:	460b      	mov	r3, r1
 80094f6:	4630      	mov	r0, r6
 80094f8:	4639      	mov	r1, r7
 80094fa:	f7f6 fed7 	bl	80002ac <__adddf3>
 80094fe:	4606      	mov	r6, r0
 8009500:	460f      	mov	r7, r1
 8009502:	f7f7 fb39 	bl	8000b78 <__aeabi_d2iz>
 8009506:	2200      	movs	r2, #0
 8009508:	9000      	str	r0, [sp, #0]
 800950a:	2300      	movs	r3, #0
 800950c:	4630      	mov	r0, r6
 800950e:	4639      	mov	r1, r7
 8009510:	f7f7 faf4 	bl	8000afc <__aeabi_dcmplt>
 8009514:	b150      	cbz	r0, 800952c <_dtoa_r+0x184>
 8009516:	9800      	ldr	r0, [sp, #0]
 8009518:	f7f7 f814 	bl	8000544 <__aeabi_i2d>
 800951c:	4632      	mov	r2, r6
 800951e:	463b      	mov	r3, r7
 8009520:	f7f7 fae2 	bl	8000ae8 <__aeabi_dcmpeq>
 8009524:	b910      	cbnz	r0, 800952c <_dtoa_r+0x184>
 8009526:	9b00      	ldr	r3, [sp, #0]
 8009528:	3b01      	subs	r3, #1
 800952a:	9300      	str	r3, [sp, #0]
 800952c:	9b00      	ldr	r3, [sp, #0]
 800952e:	2b16      	cmp	r3, #22
 8009530:	d85a      	bhi.n	80095e8 <_dtoa_r+0x240>
 8009532:	9a00      	ldr	r2, [sp, #0]
 8009534:	4b57      	ldr	r3, [pc, #348]	; (8009694 <_dtoa_r+0x2ec>)
 8009536:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800953a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953e:	ec51 0b19 	vmov	r0, r1, d9
 8009542:	f7f7 fadb 	bl	8000afc <__aeabi_dcmplt>
 8009546:	2800      	cmp	r0, #0
 8009548:	d050      	beq.n	80095ec <_dtoa_r+0x244>
 800954a:	9b00      	ldr	r3, [sp, #0]
 800954c:	3b01      	subs	r3, #1
 800954e:	9300      	str	r3, [sp, #0]
 8009550:	2300      	movs	r3, #0
 8009552:	930b      	str	r3, [sp, #44]	; 0x2c
 8009554:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009556:	1b5d      	subs	r5, r3, r5
 8009558:	1e6b      	subs	r3, r5, #1
 800955a:	9305      	str	r3, [sp, #20]
 800955c:	bf45      	ittet	mi
 800955e:	f1c5 0301 	rsbmi	r3, r5, #1
 8009562:	9304      	strmi	r3, [sp, #16]
 8009564:	2300      	movpl	r3, #0
 8009566:	2300      	movmi	r3, #0
 8009568:	bf4c      	ite	mi
 800956a:	9305      	strmi	r3, [sp, #20]
 800956c:	9304      	strpl	r3, [sp, #16]
 800956e:	9b00      	ldr	r3, [sp, #0]
 8009570:	2b00      	cmp	r3, #0
 8009572:	db3d      	blt.n	80095f0 <_dtoa_r+0x248>
 8009574:	9b05      	ldr	r3, [sp, #20]
 8009576:	9a00      	ldr	r2, [sp, #0]
 8009578:	920a      	str	r2, [sp, #40]	; 0x28
 800957a:	4413      	add	r3, r2
 800957c:	9305      	str	r3, [sp, #20]
 800957e:	2300      	movs	r3, #0
 8009580:	9307      	str	r3, [sp, #28]
 8009582:	9b06      	ldr	r3, [sp, #24]
 8009584:	2b09      	cmp	r3, #9
 8009586:	f200 8089 	bhi.w	800969c <_dtoa_r+0x2f4>
 800958a:	2b05      	cmp	r3, #5
 800958c:	bfc4      	itt	gt
 800958e:	3b04      	subgt	r3, #4
 8009590:	9306      	strgt	r3, [sp, #24]
 8009592:	9b06      	ldr	r3, [sp, #24]
 8009594:	f1a3 0302 	sub.w	r3, r3, #2
 8009598:	bfcc      	ite	gt
 800959a:	2500      	movgt	r5, #0
 800959c:	2501      	movle	r5, #1
 800959e:	2b03      	cmp	r3, #3
 80095a0:	f200 8087 	bhi.w	80096b2 <_dtoa_r+0x30a>
 80095a4:	e8df f003 	tbb	[pc, r3]
 80095a8:	59383a2d 	.word	0x59383a2d
 80095ac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80095b0:	441d      	add	r5, r3
 80095b2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80095b6:	2b20      	cmp	r3, #32
 80095b8:	bfc1      	itttt	gt
 80095ba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80095be:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80095c2:	fa0b f303 	lslgt.w	r3, fp, r3
 80095c6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80095ca:	bfda      	itte	le
 80095cc:	f1c3 0320 	rsble	r3, r3, #32
 80095d0:	fa06 f003 	lslle.w	r0, r6, r3
 80095d4:	4318      	orrgt	r0, r3
 80095d6:	f7f6 ffa5 	bl	8000524 <__aeabi_ui2d>
 80095da:	2301      	movs	r3, #1
 80095dc:	4606      	mov	r6, r0
 80095de:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80095e2:	3d01      	subs	r5, #1
 80095e4:	930e      	str	r3, [sp, #56]	; 0x38
 80095e6:	e76a      	b.n	80094be <_dtoa_r+0x116>
 80095e8:	2301      	movs	r3, #1
 80095ea:	e7b2      	b.n	8009552 <_dtoa_r+0x1aa>
 80095ec:	900b      	str	r0, [sp, #44]	; 0x2c
 80095ee:	e7b1      	b.n	8009554 <_dtoa_r+0x1ac>
 80095f0:	9b04      	ldr	r3, [sp, #16]
 80095f2:	9a00      	ldr	r2, [sp, #0]
 80095f4:	1a9b      	subs	r3, r3, r2
 80095f6:	9304      	str	r3, [sp, #16]
 80095f8:	4253      	negs	r3, r2
 80095fa:	9307      	str	r3, [sp, #28]
 80095fc:	2300      	movs	r3, #0
 80095fe:	930a      	str	r3, [sp, #40]	; 0x28
 8009600:	e7bf      	b.n	8009582 <_dtoa_r+0x1da>
 8009602:	2300      	movs	r3, #0
 8009604:	9308      	str	r3, [sp, #32]
 8009606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009608:	2b00      	cmp	r3, #0
 800960a:	dc55      	bgt.n	80096b8 <_dtoa_r+0x310>
 800960c:	2301      	movs	r3, #1
 800960e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009612:	461a      	mov	r2, r3
 8009614:	9209      	str	r2, [sp, #36]	; 0x24
 8009616:	e00c      	b.n	8009632 <_dtoa_r+0x28a>
 8009618:	2301      	movs	r3, #1
 800961a:	e7f3      	b.n	8009604 <_dtoa_r+0x25c>
 800961c:	2300      	movs	r3, #0
 800961e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009620:	9308      	str	r3, [sp, #32]
 8009622:	9b00      	ldr	r3, [sp, #0]
 8009624:	4413      	add	r3, r2
 8009626:	9302      	str	r3, [sp, #8]
 8009628:	3301      	adds	r3, #1
 800962a:	2b01      	cmp	r3, #1
 800962c:	9303      	str	r3, [sp, #12]
 800962e:	bfb8      	it	lt
 8009630:	2301      	movlt	r3, #1
 8009632:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009634:	2200      	movs	r2, #0
 8009636:	6042      	str	r2, [r0, #4]
 8009638:	2204      	movs	r2, #4
 800963a:	f102 0614 	add.w	r6, r2, #20
 800963e:	429e      	cmp	r6, r3
 8009640:	6841      	ldr	r1, [r0, #4]
 8009642:	d93d      	bls.n	80096c0 <_dtoa_r+0x318>
 8009644:	4620      	mov	r0, r4
 8009646:	f001 f84b 	bl	800a6e0 <_Balloc>
 800964a:	9001      	str	r0, [sp, #4]
 800964c:	2800      	cmp	r0, #0
 800964e:	d13b      	bne.n	80096c8 <_dtoa_r+0x320>
 8009650:	4b11      	ldr	r3, [pc, #68]	; (8009698 <_dtoa_r+0x2f0>)
 8009652:	4602      	mov	r2, r0
 8009654:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009658:	e6c0      	b.n	80093dc <_dtoa_r+0x34>
 800965a:	2301      	movs	r3, #1
 800965c:	e7df      	b.n	800961e <_dtoa_r+0x276>
 800965e:	bf00      	nop
 8009660:	636f4361 	.word	0x636f4361
 8009664:	3fd287a7 	.word	0x3fd287a7
 8009668:	8b60c8b3 	.word	0x8b60c8b3
 800966c:	3fc68a28 	.word	0x3fc68a28
 8009670:	509f79fb 	.word	0x509f79fb
 8009674:	3fd34413 	.word	0x3fd34413
 8009678:	0800d68e 	.word	0x0800d68e
 800967c:	0800d6a5 	.word	0x0800d6a5
 8009680:	7ff00000 	.word	0x7ff00000
 8009684:	0800d68a 	.word	0x0800d68a
 8009688:	0800d681 	.word	0x0800d681
 800968c:	0800d8fa 	.word	0x0800d8fa
 8009690:	3ff80000 	.word	0x3ff80000
 8009694:	0800d810 	.word	0x0800d810
 8009698:	0800d700 	.word	0x0800d700
 800969c:	2501      	movs	r5, #1
 800969e:	2300      	movs	r3, #0
 80096a0:	9306      	str	r3, [sp, #24]
 80096a2:	9508      	str	r5, [sp, #32]
 80096a4:	f04f 33ff 	mov.w	r3, #4294967295
 80096a8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80096ac:	2200      	movs	r2, #0
 80096ae:	2312      	movs	r3, #18
 80096b0:	e7b0      	b.n	8009614 <_dtoa_r+0x26c>
 80096b2:	2301      	movs	r3, #1
 80096b4:	9308      	str	r3, [sp, #32]
 80096b6:	e7f5      	b.n	80096a4 <_dtoa_r+0x2fc>
 80096b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096ba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80096be:	e7b8      	b.n	8009632 <_dtoa_r+0x28a>
 80096c0:	3101      	adds	r1, #1
 80096c2:	6041      	str	r1, [r0, #4]
 80096c4:	0052      	lsls	r2, r2, #1
 80096c6:	e7b8      	b.n	800963a <_dtoa_r+0x292>
 80096c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096ca:	9a01      	ldr	r2, [sp, #4]
 80096cc:	601a      	str	r2, [r3, #0]
 80096ce:	9b03      	ldr	r3, [sp, #12]
 80096d0:	2b0e      	cmp	r3, #14
 80096d2:	f200 809d 	bhi.w	8009810 <_dtoa_r+0x468>
 80096d6:	2d00      	cmp	r5, #0
 80096d8:	f000 809a 	beq.w	8009810 <_dtoa_r+0x468>
 80096dc:	9b00      	ldr	r3, [sp, #0]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	dd32      	ble.n	8009748 <_dtoa_r+0x3a0>
 80096e2:	4ab7      	ldr	r2, [pc, #732]	; (80099c0 <_dtoa_r+0x618>)
 80096e4:	f003 030f 	and.w	r3, r3, #15
 80096e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80096ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80096f0:	9b00      	ldr	r3, [sp, #0]
 80096f2:	05d8      	lsls	r0, r3, #23
 80096f4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80096f8:	d516      	bpl.n	8009728 <_dtoa_r+0x380>
 80096fa:	4bb2      	ldr	r3, [pc, #712]	; (80099c4 <_dtoa_r+0x61c>)
 80096fc:	ec51 0b19 	vmov	r0, r1, d9
 8009700:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009704:	f7f7 f8b2 	bl	800086c <__aeabi_ddiv>
 8009708:	f007 070f 	and.w	r7, r7, #15
 800970c:	4682      	mov	sl, r0
 800970e:	468b      	mov	fp, r1
 8009710:	2503      	movs	r5, #3
 8009712:	4eac      	ldr	r6, [pc, #688]	; (80099c4 <_dtoa_r+0x61c>)
 8009714:	b957      	cbnz	r7, 800972c <_dtoa_r+0x384>
 8009716:	4642      	mov	r2, r8
 8009718:	464b      	mov	r3, r9
 800971a:	4650      	mov	r0, sl
 800971c:	4659      	mov	r1, fp
 800971e:	f7f7 f8a5 	bl	800086c <__aeabi_ddiv>
 8009722:	4682      	mov	sl, r0
 8009724:	468b      	mov	fp, r1
 8009726:	e028      	b.n	800977a <_dtoa_r+0x3d2>
 8009728:	2502      	movs	r5, #2
 800972a:	e7f2      	b.n	8009712 <_dtoa_r+0x36a>
 800972c:	07f9      	lsls	r1, r7, #31
 800972e:	d508      	bpl.n	8009742 <_dtoa_r+0x39a>
 8009730:	4640      	mov	r0, r8
 8009732:	4649      	mov	r1, r9
 8009734:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009738:	f7f6 ff6e 	bl	8000618 <__aeabi_dmul>
 800973c:	3501      	adds	r5, #1
 800973e:	4680      	mov	r8, r0
 8009740:	4689      	mov	r9, r1
 8009742:	107f      	asrs	r7, r7, #1
 8009744:	3608      	adds	r6, #8
 8009746:	e7e5      	b.n	8009714 <_dtoa_r+0x36c>
 8009748:	f000 809b 	beq.w	8009882 <_dtoa_r+0x4da>
 800974c:	9b00      	ldr	r3, [sp, #0]
 800974e:	4f9d      	ldr	r7, [pc, #628]	; (80099c4 <_dtoa_r+0x61c>)
 8009750:	425e      	negs	r6, r3
 8009752:	4b9b      	ldr	r3, [pc, #620]	; (80099c0 <_dtoa_r+0x618>)
 8009754:	f006 020f 	and.w	r2, r6, #15
 8009758:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800975c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009760:	ec51 0b19 	vmov	r0, r1, d9
 8009764:	f7f6 ff58 	bl	8000618 <__aeabi_dmul>
 8009768:	1136      	asrs	r6, r6, #4
 800976a:	4682      	mov	sl, r0
 800976c:	468b      	mov	fp, r1
 800976e:	2300      	movs	r3, #0
 8009770:	2502      	movs	r5, #2
 8009772:	2e00      	cmp	r6, #0
 8009774:	d17a      	bne.n	800986c <_dtoa_r+0x4c4>
 8009776:	2b00      	cmp	r3, #0
 8009778:	d1d3      	bne.n	8009722 <_dtoa_r+0x37a>
 800977a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800977c:	2b00      	cmp	r3, #0
 800977e:	f000 8082 	beq.w	8009886 <_dtoa_r+0x4de>
 8009782:	4b91      	ldr	r3, [pc, #580]	; (80099c8 <_dtoa_r+0x620>)
 8009784:	2200      	movs	r2, #0
 8009786:	4650      	mov	r0, sl
 8009788:	4659      	mov	r1, fp
 800978a:	f7f7 f9b7 	bl	8000afc <__aeabi_dcmplt>
 800978e:	2800      	cmp	r0, #0
 8009790:	d079      	beq.n	8009886 <_dtoa_r+0x4de>
 8009792:	9b03      	ldr	r3, [sp, #12]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d076      	beq.n	8009886 <_dtoa_r+0x4de>
 8009798:	9b02      	ldr	r3, [sp, #8]
 800979a:	2b00      	cmp	r3, #0
 800979c:	dd36      	ble.n	800980c <_dtoa_r+0x464>
 800979e:	9b00      	ldr	r3, [sp, #0]
 80097a0:	4650      	mov	r0, sl
 80097a2:	4659      	mov	r1, fp
 80097a4:	1e5f      	subs	r7, r3, #1
 80097a6:	2200      	movs	r2, #0
 80097a8:	4b88      	ldr	r3, [pc, #544]	; (80099cc <_dtoa_r+0x624>)
 80097aa:	f7f6 ff35 	bl	8000618 <__aeabi_dmul>
 80097ae:	9e02      	ldr	r6, [sp, #8]
 80097b0:	4682      	mov	sl, r0
 80097b2:	468b      	mov	fp, r1
 80097b4:	3501      	adds	r5, #1
 80097b6:	4628      	mov	r0, r5
 80097b8:	f7f6 fec4 	bl	8000544 <__aeabi_i2d>
 80097bc:	4652      	mov	r2, sl
 80097be:	465b      	mov	r3, fp
 80097c0:	f7f6 ff2a 	bl	8000618 <__aeabi_dmul>
 80097c4:	4b82      	ldr	r3, [pc, #520]	; (80099d0 <_dtoa_r+0x628>)
 80097c6:	2200      	movs	r2, #0
 80097c8:	f7f6 fd70 	bl	80002ac <__adddf3>
 80097cc:	46d0      	mov	r8, sl
 80097ce:	46d9      	mov	r9, fp
 80097d0:	4682      	mov	sl, r0
 80097d2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80097d6:	2e00      	cmp	r6, #0
 80097d8:	d158      	bne.n	800988c <_dtoa_r+0x4e4>
 80097da:	4b7e      	ldr	r3, [pc, #504]	; (80099d4 <_dtoa_r+0x62c>)
 80097dc:	2200      	movs	r2, #0
 80097de:	4640      	mov	r0, r8
 80097e0:	4649      	mov	r1, r9
 80097e2:	f7f6 fd61 	bl	80002a8 <__aeabi_dsub>
 80097e6:	4652      	mov	r2, sl
 80097e8:	465b      	mov	r3, fp
 80097ea:	4680      	mov	r8, r0
 80097ec:	4689      	mov	r9, r1
 80097ee:	f7f7 f9a3 	bl	8000b38 <__aeabi_dcmpgt>
 80097f2:	2800      	cmp	r0, #0
 80097f4:	f040 8295 	bne.w	8009d22 <_dtoa_r+0x97a>
 80097f8:	4652      	mov	r2, sl
 80097fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80097fe:	4640      	mov	r0, r8
 8009800:	4649      	mov	r1, r9
 8009802:	f7f7 f97b 	bl	8000afc <__aeabi_dcmplt>
 8009806:	2800      	cmp	r0, #0
 8009808:	f040 8289 	bne.w	8009d1e <_dtoa_r+0x976>
 800980c:	ec5b ab19 	vmov	sl, fp, d9
 8009810:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009812:	2b00      	cmp	r3, #0
 8009814:	f2c0 8148 	blt.w	8009aa8 <_dtoa_r+0x700>
 8009818:	9a00      	ldr	r2, [sp, #0]
 800981a:	2a0e      	cmp	r2, #14
 800981c:	f300 8144 	bgt.w	8009aa8 <_dtoa_r+0x700>
 8009820:	4b67      	ldr	r3, [pc, #412]	; (80099c0 <_dtoa_r+0x618>)
 8009822:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009826:	e9d3 8900 	ldrd	r8, r9, [r3]
 800982a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800982c:	2b00      	cmp	r3, #0
 800982e:	f280 80d5 	bge.w	80099dc <_dtoa_r+0x634>
 8009832:	9b03      	ldr	r3, [sp, #12]
 8009834:	2b00      	cmp	r3, #0
 8009836:	f300 80d1 	bgt.w	80099dc <_dtoa_r+0x634>
 800983a:	f040 826f 	bne.w	8009d1c <_dtoa_r+0x974>
 800983e:	4b65      	ldr	r3, [pc, #404]	; (80099d4 <_dtoa_r+0x62c>)
 8009840:	2200      	movs	r2, #0
 8009842:	4640      	mov	r0, r8
 8009844:	4649      	mov	r1, r9
 8009846:	f7f6 fee7 	bl	8000618 <__aeabi_dmul>
 800984a:	4652      	mov	r2, sl
 800984c:	465b      	mov	r3, fp
 800984e:	f7f7 f969 	bl	8000b24 <__aeabi_dcmpge>
 8009852:	9e03      	ldr	r6, [sp, #12]
 8009854:	4637      	mov	r7, r6
 8009856:	2800      	cmp	r0, #0
 8009858:	f040 8245 	bne.w	8009ce6 <_dtoa_r+0x93e>
 800985c:	9d01      	ldr	r5, [sp, #4]
 800985e:	2331      	movs	r3, #49	; 0x31
 8009860:	f805 3b01 	strb.w	r3, [r5], #1
 8009864:	9b00      	ldr	r3, [sp, #0]
 8009866:	3301      	adds	r3, #1
 8009868:	9300      	str	r3, [sp, #0]
 800986a:	e240      	b.n	8009cee <_dtoa_r+0x946>
 800986c:	07f2      	lsls	r2, r6, #31
 800986e:	d505      	bpl.n	800987c <_dtoa_r+0x4d4>
 8009870:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009874:	f7f6 fed0 	bl	8000618 <__aeabi_dmul>
 8009878:	3501      	adds	r5, #1
 800987a:	2301      	movs	r3, #1
 800987c:	1076      	asrs	r6, r6, #1
 800987e:	3708      	adds	r7, #8
 8009880:	e777      	b.n	8009772 <_dtoa_r+0x3ca>
 8009882:	2502      	movs	r5, #2
 8009884:	e779      	b.n	800977a <_dtoa_r+0x3d2>
 8009886:	9f00      	ldr	r7, [sp, #0]
 8009888:	9e03      	ldr	r6, [sp, #12]
 800988a:	e794      	b.n	80097b6 <_dtoa_r+0x40e>
 800988c:	9901      	ldr	r1, [sp, #4]
 800988e:	4b4c      	ldr	r3, [pc, #304]	; (80099c0 <_dtoa_r+0x618>)
 8009890:	4431      	add	r1, r6
 8009892:	910d      	str	r1, [sp, #52]	; 0x34
 8009894:	9908      	ldr	r1, [sp, #32]
 8009896:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800989a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800989e:	2900      	cmp	r1, #0
 80098a0:	d043      	beq.n	800992a <_dtoa_r+0x582>
 80098a2:	494d      	ldr	r1, [pc, #308]	; (80099d8 <_dtoa_r+0x630>)
 80098a4:	2000      	movs	r0, #0
 80098a6:	f7f6 ffe1 	bl	800086c <__aeabi_ddiv>
 80098aa:	4652      	mov	r2, sl
 80098ac:	465b      	mov	r3, fp
 80098ae:	f7f6 fcfb 	bl	80002a8 <__aeabi_dsub>
 80098b2:	9d01      	ldr	r5, [sp, #4]
 80098b4:	4682      	mov	sl, r0
 80098b6:	468b      	mov	fp, r1
 80098b8:	4649      	mov	r1, r9
 80098ba:	4640      	mov	r0, r8
 80098bc:	f7f7 f95c 	bl	8000b78 <__aeabi_d2iz>
 80098c0:	4606      	mov	r6, r0
 80098c2:	f7f6 fe3f 	bl	8000544 <__aeabi_i2d>
 80098c6:	4602      	mov	r2, r0
 80098c8:	460b      	mov	r3, r1
 80098ca:	4640      	mov	r0, r8
 80098cc:	4649      	mov	r1, r9
 80098ce:	f7f6 fceb 	bl	80002a8 <__aeabi_dsub>
 80098d2:	3630      	adds	r6, #48	; 0x30
 80098d4:	f805 6b01 	strb.w	r6, [r5], #1
 80098d8:	4652      	mov	r2, sl
 80098da:	465b      	mov	r3, fp
 80098dc:	4680      	mov	r8, r0
 80098de:	4689      	mov	r9, r1
 80098e0:	f7f7 f90c 	bl	8000afc <__aeabi_dcmplt>
 80098e4:	2800      	cmp	r0, #0
 80098e6:	d163      	bne.n	80099b0 <_dtoa_r+0x608>
 80098e8:	4642      	mov	r2, r8
 80098ea:	464b      	mov	r3, r9
 80098ec:	4936      	ldr	r1, [pc, #216]	; (80099c8 <_dtoa_r+0x620>)
 80098ee:	2000      	movs	r0, #0
 80098f0:	f7f6 fcda 	bl	80002a8 <__aeabi_dsub>
 80098f4:	4652      	mov	r2, sl
 80098f6:	465b      	mov	r3, fp
 80098f8:	f7f7 f900 	bl	8000afc <__aeabi_dcmplt>
 80098fc:	2800      	cmp	r0, #0
 80098fe:	f040 80b5 	bne.w	8009a6c <_dtoa_r+0x6c4>
 8009902:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009904:	429d      	cmp	r5, r3
 8009906:	d081      	beq.n	800980c <_dtoa_r+0x464>
 8009908:	4b30      	ldr	r3, [pc, #192]	; (80099cc <_dtoa_r+0x624>)
 800990a:	2200      	movs	r2, #0
 800990c:	4650      	mov	r0, sl
 800990e:	4659      	mov	r1, fp
 8009910:	f7f6 fe82 	bl	8000618 <__aeabi_dmul>
 8009914:	4b2d      	ldr	r3, [pc, #180]	; (80099cc <_dtoa_r+0x624>)
 8009916:	4682      	mov	sl, r0
 8009918:	468b      	mov	fp, r1
 800991a:	4640      	mov	r0, r8
 800991c:	4649      	mov	r1, r9
 800991e:	2200      	movs	r2, #0
 8009920:	f7f6 fe7a 	bl	8000618 <__aeabi_dmul>
 8009924:	4680      	mov	r8, r0
 8009926:	4689      	mov	r9, r1
 8009928:	e7c6      	b.n	80098b8 <_dtoa_r+0x510>
 800992a:	4650      	mov	r0, sl
 800992c:	4659      	mov	r1, fp
 800992e:	f7f6 fe73 	bl	8000618 <__aeabi_dmul>
 8009932:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009934:	9d01      	ldr	r5, [sp, #4]
 8009936:	930f      	str	r3, [sp, #60]	; 0x3c
 8009938:	4682      	mov	sl, r0
 800993a:	468b      	mov	fp, r1
 800993c:	4649      	mov	r1, r9
 800993e:	4640      	mov	r0, r8
 8009940:	f7f7 f91a 	bl	8000b78 <__aeabi_d2iz>
 8009944:	4606      	mov	r6, r0
 8009946:	f7f6 fdfd 	bl	8000544 <__aeabi_i2d>
 800994a:	3630      	adds	r6, #48	; 0x30
 800994c:	4602      	mov	r2, r0
 800994e:	460b      	mov	r3, r1
 8009950:	4640      	mov	r0, r8
 8009952:	4649      	mov	r1, r9
 8009954:	f7f6 fca8 	bl	80002a8 <__aeabi_dsub>
 8009958:	f805 6b01 	strb.w	r6, [r5], #1
 800995c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800995e:	429d      	cmp	r5, r3
 8009960:	4680      	mov	r8, r0
 8009962:	4689      	mov	r9, r1
 8009964:	f04f 0200 	mov.w	r2, #0
 8009968:	d124      	bne.n	80099b4 <_dtoa_r+0x60c>
 800996a:	4b1b      	ldr	r3, [pc, #108]	; (80099d8 <_dtoa_r+0x630>)
 800996c:	4650      	mov	r0, sl
 800996e:	4659      	mov	r1, fp
 8009970:	f7f6 fc9c 	bl	80002ac <__adddf3>
 8009974:	4602      	mov	r2, r0
 8009976:	460b      	mov	r3, r1
 8009978:	4640      	mov	r0, r8
 800997a:	4649      	mov	r1, r9
 800997c:	f7f7 f8dc 	bl	8000b38 <__aeabi_dcmpgt>
 8009980:	2800      	cmp	r0, #0
 8009982:	d173      	bne.n	8009a6c <_dtoa_r+0x6c4>
 8009984:	4652      	mov	r2, sl
 8009986:	465b      	mov	r3, fp
 8009988:	4913      	ldr	r1, [pc, #76]	; (80099d8 <_dtoa_r+0x630>)
 800998a:	2000      	movs	r0, #0
 800998c:	f7f6 fc8c 	bl	80002a8 <__aeabi_dsub>
 8009990:	4602      	mov	r2, r0
 8009992:	460b      	mov	r3, r1
 8009994:	4640      	mov	r0, r8
 8009996:	4649      	mov	r1, r9
 8009998:	f7f7 f8b0 	bl	8000afc <__aeabi_dcmplt>
 800999c:	2800      	cmp	r0, #0
 800999e:	f43f af35 	beq.w	800980c <_dtoa_r+0x464>
 80099a2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80099a4:	1e6b      	subs	r3, r5, #1
 80099a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80099a8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80099ac:	2b30      	cmp	r3, #48	; 0x30
 80099ae:	d0f8      	beq.n	80099a2 <_dtoa_r+0x5fa>
 80099b0:	9700      	str	r7, [sp, #0]
 80099b2:	e049      	b.n	8009a48 <_dtoa_r+0x6a0>
 80099b4:	4b05      	ldr	r3, [pc, #20]	; (80099cc <_dtoa_r+0x624>)
 80099b6:	f7f6 fe2f 	bl	8000618 <__aeabi_dmul>
 80099ba:	4680      	mov	r8, r0
 80099bc:	4689      	mov	r9, r1
 80099be:	e7bd      	b.n	800993c <_dtoa_r+0x594>
 80099c0:	0800d810 	.word	0x0800d810
 80099c4:	0800d7e8 	.word	0x0800d7e8
 80099c8:	3ff00000 	.word	0x3ff00000
 80099cc:	40240000 	.word	0x40240000
 80099d0:	401c0000 	.word	0x401c0000
 80099d4:	40140000 	.word	0x40140000
 80099d8:	3fe00000 	.word	0x3fe00000
 80099dc:	9d01      	ldr	r5, [sp, #4]
 80099de:	4656      	mov	r6, sl
 80099e0:	465f      	mov	r7, fp
 80099e2:	4642      	mov	r2, r8
 80099e4:	464b      	mov	r3, r9
 80099e6:	4630      	mov	r0, r6
 80099e8:	4639      	mov	r1, r7
 80099ea:	f7f6 ff3f 	bl	800086c <__aeabi_ddiv>
 80099ee:	f7f7 f8c3 	bl	8000b78 <__aeabi_d2iz>
 80099f2:	4682      	mov	sl, r0
 80099f4:	f7f6 fda6 	bl	8000544 <__aeabi_i2d>
 80099f8:	4642      	mov	r2, r8
 80099fa:	464b      	mov	r3, r9
 80099fc:	f7f6 fe0c 	bl	8000618 <__aeabi_dmul>
 8009a00:	4602      	mov	r2, r0
 8009a02:	460b      	mov	r3, r1
 8009a04:	4630      	mov	r0, r6
 8009a06:	4639      	mov	r1, r7
 8009a08:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009a0c:	f7f6 fc4c 	bl	80002a8 <__aeabi_dsub>
 8009a10:	f805 6b01 	strb.w	r6, [r5], #1
 8009a14:	9e01      	ldr	r6, [sp, #4]
 8009a16:	9f03      	ldr	r7, [sp, #12]
 8009a18:	1bae      	subs	r6, r5, r6
 8009a1a:	42b7      	cmp	r7, r6
 8009a1c:	4602      	mov	r2, r0
 8009a1e:	460b      	mov	r3, r1
 8009a20:	d135      	bne.n	8009a8e <_dtoa_r+0x6e6>
 8009a22:	f7f6 fc43 	bl	80002ac <__adddf3>
 8009a26:	4642      	mov	r2, r8
 8009a28:	464b      	mov	r3, r9
 8009a2a:	4606      	mov	r6, r0
 8009a2c:	460f      	mov	r7, r1
 8009a2e:	f7f7 f883 	bl	8000b38 <__aeabi_dcmpgt>
 8009a32:	b9d0      	cbnz	r0, 8009a6a <_dtoa_r+0x6c2>
 8009a34:	4642      	mov	r2, r8
 8009a36:	464b      	mov	r3, r9
 8009a38:	4630      	mov	r0, r6
 8009a3a:	4639      	mov	r1, r7
 8009a3c:	f7f7 f854 	bl	8000ae8 <__aeabi_dcmpeq>
 8009a40:	b110      	cbz	r0, 8009a48 <_dtoa_r+0x6a0>
 8009a42:	f01a 0f01 	tst.w	sl, #1
 8009a46:	d110      	bne.n	8009a6a <_dtoa_r+0x6c2>
 8009a48:	4620      	mov	r0, r4
 8009a4a:	ee18 1a10 	vmov	r1, s16
 8009a4e:	f000 fe87 	bl	800a760 <_Bfree>
 8009a52:	2300      	movs	r3, #0
 8009a54:	9800      	ldr	r0, [sp, #0]
 8009a56:	702b      	strb	r3, [r5, #0]
 8009a58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a5a:	3001      	adds	r0, #1
 8009a5c:	6018      	str	r0, [r3, #0]
 8009a5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	f43f acf1 	beq.w	8009448 <_dtoa_r+0xa0>
 8009a66:	601d      	str	r5, [r3, #0]
 8009a68:	e4ee      	b.n	8009448 <_dtoa_r+0xa0>
 8009a6a:	9f00      	ldr	r7, [sp, #0]
 8009a6c:	462b      	mov	r3, r5
 8009a6e:	461d      	mov	r5, r3
 8009a70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a74:	2a39      	cmp	r2, #57	; 0x39
 8009a76:	d106      	bne.n	8009a86 <_dtoa_r+0x6de>
 8009a78:	9a01      	ldr	r2, [sp, #4]
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	d1f7      	bne.n	8009a6e <_dtoa_r+0x6c6>
 8009a7e:	9901      	ldr	r1, [sp, #4]
 8009a80:	2230      	movs	r2, #48	; 0x30
 8009a82:	3701      	adds	r7, #1
 8009a84:	700a      	strb	r2, [r1, #0]
 8009a86:	781a      	ldrb	r2, [r3, #0]
 8009a88:	3201      	adds	r2, #1
 8009a8a:	701a      	strb	r2, [r3, #0]
 8009a8c:	e790      	b.n	80099b0 <_dtoa_r+0x608>
 8009a8e:	4ba6      	ldr	r3, [pc, #664]	; (8009d28 <_dtoa_r+0x980>)
 8009a90:	2200      	movs	r2, #0
 8009a92:	f7f6 fdc1 	bl	8000618 <__aeabi_dmul>
 8009a96:	2200      	movs	r2, #0
 8009a98:	2300      	movs	r3, #0
 8009a9a:	4606      	mov	r6, r0
 8009a9c:	460f      	mov	r7, r1
 8009a9e:	f7f7 f823 	bl	8000ae8 <__aeabi_dcmpeq>
 8009aa2:	2800      	cmp	r0, #0
 8009aa4:	d09d      	beq.n	80099e2 <_dtoa_r+0x63a>
 8009aa6:	e7cf      	b.n	8009a48 <_dtoa_r+0x6a0>
 8009aa8:	9a08      	ldr	r2, [sp, #32]
 8009aaa:	2a00      	cmp	r2, #0
 8009aac:	f000 80d7 	beq.w	8009c5e <_dtoa_r+0x8b6>
 8009ab0:	9a06      	ldr	r2, [sp, #24]
 8009ab2:	2a01      	cmp	r2, #1
 8009ab4:	f300 80ba 	bgt.w	8009c2c <_dtoa_r+0x884>
 8009ab8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009aba:	2a00      	cmp	r2, #0
 8009abc:	f000 80b2 	beq.w	8009c24 <_dtoa_r+0x87c>
 8009ac0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009ac4:	9e07      	ldr	r6, [sp, #28]
 8009ac6:	9d04      	ldr	r5, [sp, #16]
 8009ac8:	9a04      	ldr	r2, [sp, #16]
 8009aca:	441a      	add	r2, r3
 8009acc:	9204      	str	r2, [sp, #16]
 8009ace:	9a05      	ldr	r2, [sp, #20]
 8009ad0:	2101      	movs	r1, #1
 8009ad2:	441a      	add	r2, r3
 8009ad4:	4620      	mov	r0, r4
 8009ad6:	9205      	str	r2, [sp, #20]
 8009ad8:	f000 ff44 	bl	800a964 <__i2b>
 8009adc:	4607      	mov	r7, r0
 8009ade:	2d00      	cmp	r5, #0
 8009ae0:	dd0c      	ble.n	8009afc <_dtoa_r+0x754>
 8009ae2:	9b05      	ldr	r3, [sp, #20]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	dd09      	ble.n	8009afc <_dtoa_r+0x754>
 8009ae8:	42ab      	cmp	r3, r5
 8009aea:	9a04      	ldr	r2, [sp, #16]
 8009aec:	bfa8      	it	ge
 8009aee:	462b      	movge	r3, r5
 8009af0:	1ad2      	subs	r2, r2, r3
 8009af2:	9204      	str	r2, [sp, #16]
 8009af4:	9a05      	ldr	r2, [sp, #20]
 8009af6:	1aed      	subs	r5, r5, r3
 8009af8:	1ad3      	subs	r3, r2, r3
 8009afa:	9305      	str	r3, [sp, #20]
 8009afc:	9b07      	ldr	r3, [sp, #28]
 8009afe:	b31b      	cbz	r3, 8009b48 <_dtoa_r+0x7a0>
 8009b00:	9b08      	ldr	r3, [sp, #32]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	f000 80af 	beq.w	8009c66 <_dtoa_r+0x8be>
 8009b08:	2e00      	cmp	r6, #0
 8009b0a:	dd13      	ble.n	8009b34 <_dtoa_r+0x78c>
 8009b0c:	4639      	mov	r1, r7
 8009b0e:	4632      	mov	r2, r6
 8009b10:	4620      	mov	r0, r4
 8009b12:	f000 ffe7 	bl	800aae4 <__pow5mult>
 8009b16:	ee18 2a10 	vmov	r2, s16
 8009b1a:	4601      	mov	r1, r0
 8009b1c:	4607      	mov	r7, r0
 8009b1e:	4620      	mov	r0, r4
 8009b20:	f000 ff36 	bl	800a990 <__multiply>
 8009b24:	ee18 1a10 	vmov	r1, s16
 8009b28:	4680      	mov	r8, r0
 8009b2a:	4620      	mov	r0, r4
 8009b2c:	f000 fe18 	bl	800a760 <_Bfree>
 8009b30:	ee08 8a10 	vmov	s16, r8
 8009b34:	9b07      	ldr	r3, [sp, #28]
 8009b36:	1b9a      	subs	r2, r3, r6
 8009b38:	d006      	beq.n	8009b48 <_dtoa_r+0x7a0>
 8009b3a:	ee18 1a10 	vmov	r1, s16
 8009b3e:	4620      	mov	r0, r4
 8009b40:	f000 ffd0 	bl	800aae4 <__pow5mult>
 8009b44:	ee08 0a10 	vmov	s16, r0
 8009b48:	2101      	movs	r1, #1
 8009b4a:	4620      	mov	r0, r4
 8009b4c:	f000 ff0a 	bl	800a964 <__i2b>
 8009b50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	4606      	mov	r6, r0
 8009b56:	f340 8088 	ble.w	8009c6a <_dtoa_r+0x8c2>
 8009b5a:	461a      	mov	r2, r3
 8009b5c:	4601      	mov	r1, r0
 8009b5e:	4620      	mov	r0, r4
 8009b60:	f000 ffc0 	bl	800aae4 <__pow5mult>
 8009b64:	9b06      	ldr	r3, [sp, #24]
 8009b66:	2b01      	cmp	r3, #1
 8009b68:	4606      	mov	r6, r0
 8009b6a:	f340 8081 	ble.w	8009c70 <_dtoa_r+0x8c8>
 8009b6e:	f04f 0800 	mov.w	r8, #0
 8009b72:	6933      	ldr	r3, [r6, #16]
 8009b74:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009b78:	6918      	ldr	r0, [r3, #16]
 8009b7a:	f000 fea3 	bl	800a8c4 <__hi0bits>
 8009b7e:	f1c0 0020 	rsb	r0, r0, #32
 8009b82:	9b05      	ldr	r3, [sp, #20]
 8009b84:	4418      	add	r0, r3
 8009b86:	f010 001f 	ands.w	r0, r0, #31
 8009b8a:	f000 8092 	beq.w	8009cb2 <_dtoa_r+0x90a>
 8009b8e:	f1c0 0320 	rsb	r3, r0, #32
 8009b92:	2b04      	cmp	r3, #4
 8009b94:	f340 808a 	ble.w	8009cac <_dtoa_r+0x904>
 8009b98:	f1c0 001c 	rsb	r0, r0, #28
 8009b9c:	9b04      	ldr	r3, [sp, #16]
 8009b9e:	4403      	add	r3, r0
 8009ba0:	9304      	str	r3, [sp, #16]
 8009ba2:	9b05      	ldr	r3, [sp, #20]
 8009ba4:	4403      	add	r3, r0
 8009ba6:	4405      	add	r5, r0
 8009ba8:	9305      	str	r3, [sp, #20]
 8009baa:	9b04      	ldr	r3, [sp, #16]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	dd07      	ble.n	8009bc0 <_dtoa_r+0x818>
 8009bb0:	ee18 1a10 	vmov	r1, s16
 8009bb4:	461a      	mov	r2, r3
 8009bb6:	4620      	mov	r0, r4
 8009bb8:	f000 ffee 	bl	800ab98 <__lshift>
 8009bbc:	ee08 0a10 	vmov	s16, r0
 8009bc0:	9b05      	ldr	r3, [sp, #20]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	dd05      	ble.n	8009bd2 <_dtoa_r+0x82a>
 8009bc6:	4631      	mov	r1, r6
 8009bc8:	461a      	mov	r2, r3
 8009bca:	4620      	mov	r0, r4
 8009bcc:	f000 ffe4 	bl	800ab98 <__lshift>
 8009bd0:	4606      	mov	r6, r0
 8009bd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d06e      	beq.n	8009cb6 <_dtoa_r+0x90e>
 8009bd8:	ee18 0a10 	vmov	r0, s16
 8009bdc:	4631      	mov	r1, r6
 8009bde:	f001 f84b 	bl	800ac78 <__mcmp>
 8009be2:	2800      	cmp	r0, #0
 8009be4:	da67      	bge.n	8009cb6 <_dtoa_r+0x90e>
 8009be6:	9b00      	ldr	r3, [sp, #0]
 8009be8:	3b01      	subs	r3, #1
 8009bea:	ee18 1a10 	vmov	r1, s16
 8009bee:	9300      	str	r3, [sp, #0]
 8009bf0:	220a      	movs	r2, #10
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	4620      	mov	r0, r4
 8009bf6:	f000 fdd5 	bl	800a7a4 <__multadd>
 8009bfa:	9b08      	ldr	r3, [sp, #32]
 8009bfc:	ee08 0a10 	vmov	s16, r0
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	f000 81b1 	beq.w	8009f68 <_dtoa_r+0xbc0>
 8009c06:	2300      	movs	r3, #0
 8009c08:	4639      	mov	r1, r7
 8009c0a:	220a      	movs	r2, #10
 8009c0c:	4620      	mov	r0, r4
 8009c0e:	f000 fdc9 	bl	800a7a4 <__multadd>
 8009c12:	9b02      	ldr	r3, [sp, #8]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	4607      	mov	r7, r0
 8009c18:	f300 808e 	bgt.w	8009d38 <_dtoa_r+0x990>
 8009c1c:	9b06      	ldr	r3, [sp, #24]
 8009c1e:	2b02      	cmp	r3, #2
 8009c20:	dc51      	bgt.n	8009cc6 <_dtoa_r+0x91e>
 8009c22:	e089      	b.n	8009d38 <_dtoa_r+0x990>
 8009c24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009c26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009c2a:	e74b      	b.n	8009ac4 <_dtoa_r+0x71c>
 8009c2c:	9b03      	ldr	r3, [sp, #12]
 8009c2e:	1e5e      	subs	r6, r3, #1
 8009c30:	9b07      	ldr	r3, [sp, #28]
 8009c32:	42b3      	cmp	r3, r6
 8009c34:	bfbf      	itttt	lt
 8009c36:	9b07      	ldrlt	r3, [sp, #28]
 8009c38:	9607      	strlt	r6, [sp, #28]
 8009c3a:	1af2      	sublt	r2, r6, r3
 8009c3c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009c3e:	bfb6      	itet	lt
 8009c40:	189b      	addlt	r3, r3, r2
 8009c42:	1b9e      	subge	r6, r3, r6
 8009c44:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009c46:	9b03      	ldr	r3, [sp, #12]
 8009c48:	bfb8      	it	lt
 8009c4a:	2600      	movlt	r6, #0
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	bfb7      	itett	lt
 8009c50:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009c54:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009c58:	1a9d      	sublt	r5, r3, r2
 8009c5a:	2300      	movlt	r3, #0
 8009c5c:	e734      	b.n	8009ac8 <_dtoa_r+0x720>
 8009c5e:	9e07      	ldr	r6, [sp, #28]
 8009c60:	9d04      	ldr	r5, [sp, #16]
 8009c62:	9f08      	ldr	r7, [sp, #32]
 8009c64:	e73b      	b.n	8009ade <_dtoa_r+0x736>
 8009c66:	9a07      	ldr	r2, [sp, #28]
 8009c68:	e767      	b.n	8009b3a <_dtoa_r+0x792>
 8009c6a:	9b06      	ldr	r3, [sp, #24]
 8009c6c:	2b01      	cmp	r3, #1
 8009c6e:	dc18      	bgt.n	8009ca2 <_dtoa_r+0x8fa>
 8009c70:	f1ba 0f00 	cmp.w	sl, #0
 8009c74:	d115      	bne.n	8009ca2 <_dtoa_r+0x8fa>
 8009c76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009c7a:	b993      	cbnz	r3, 8009ca2 <_dtoa_r+0x8fa>
 8009c7c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009c80:	0d1b      	lsrs	r3, r3, #20
 8009c82:	051b      	lsls	r3, r3, #20
 8009c84:	b183      	cbz	r3, 8009ca8 <_dtoa_r+0x900>
 8009c86:	9b04      	ldr	r3, [sp, #16]
 8009c88:	3301      	adds	r3, #1
 8009c8a:	9304      	str	r3, [sp, #16]
 8009c8c:	9b05      	ldr	r3, [sp, #20]
 8009c8e:	3301      	adds	r3, #1
 8009c90:	9305      	str	r3, [sp, #20]
 8009c92:	f04f 0801 	mov.w	r8, #1
 8009c96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	f47f af6a 	bne.w	8009b72 <_dtoa_r+0x7ca>
 8009c9e:	2001      	movs	r0, #1
 8009ca0:	e76f      	b.n	8009b82 <_dtoa_r+0x7da>
 8009ca2:	f04f 0800 	mov.w	r8, #0
 8009ca6:	e7f6      	b.n	8009c96 <_dtoa_r+0x8ee>
 8009ca8:	4698      	mov	r8, r3
 8009caa:	e7f4      	b.n	8009c96 <_dtoa_r+0x8ee>
 8009cac:	f43f af7d 	beq.w	8009baa <_dtoa_r+0x802>
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	301c      	adds	r0, #28
 8009cb4:	e772      	b.n	8009b9c <_dtoa_r+0x7f4>
 8009cb6:	9b03      	ldr	r3, [sp, #12]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	dc37      	bgt.n	8009d2c <_dtoa_r+0x984>
 8009cbc:	9b06      	ldr	r3, [sp, #24]
 8009cbe:	2b02      	cmp	r3, #2
 8009cc0:	dd34      	ble.n	8009d2c <_dtoa_r+0x984>
 8009cc2:	9b03      	ldr	r3, [sp, #12]
 8009cc4:	9302      	str	r3, [sp, #8]
 8009cc6:	9b02      	ldr	r3, [sp, #8]
 8009cc8:	b96b      	cbnz	r3, 8009ce6 <_dtoa_r+0x93e>
 8009cca:	4631      	mov	r1, r6
 8009ccc:	2205      	movs	r2, #5
 8009cce:	4620      	mov	r0, r4
 8009cd0:	f000 fd68 	bl	800a7a4 <__multadd>
 8009cd4:	4601      	mov	r1, r0
 8009cd6:	4606      	mov	r6, r0
 8009cd8:	ee18 0a10 	vmov	r0, s16
 8009cdc:	f000 ffcc 	bl	800ac78 <__mcmp>
 8009ce0:	2800      	cmp	r0, #0
 8009ce2:	f73f adbb 	bgt.w	800985c <_dtoa_r+0x4b4>
 8009ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ce8:	9d01      	ldr	r5, [sp, #4]
 8009cea:	43db      	mvns	r3, r3
 8009cec:	9300      	str	r3, [sp, #0]
 8009cee:	f04f 0800 	mov.w	r8, #0
 8009cf2:	4631      	mov	r1, r6
 8009cf4:	4620      	mov	r0, r4
 8009cf6:	f000 fd33 	bl	800a760 <_Bfree>
 8009cfa:	2f00      	cmp	r7, #0
 8009cfc:	f43f aea4 	beq.w	8009a48 <_dtoa_r+0x6a0>
 8009d00:	f1b8 0f00 	cmp.w	r8, #0
 8009d04:	d005      	beq.n	8009d12 <_dtoa_r+0x96a>
 8009d06:	45b8      	cmp	r8, r7
 8009d08:	d003      	beq.n	8009d12 <_dtoa_r+0x96a>
 8009d0a:	4641      	mov	r1, r8
 8009d0c:	4620      	mov	r0, r4
 8009d0e:	f000 fd27 	bl	800a760 <_Bfree>
 8009d12:	4639      	mov	r1, r7
 8009d14:	4620      	mov	r0, r4
 8009d16:	f000 fd23 	bl	800a760 <_Bfree>
 8009d1a:	e695      	b.n	8009a48 <_dtoa_r+0x6a0>
 8009d1c:	2600      	movs	r6, #0
 8009d1e:	4637      	mov	r7, r6
 8009d20:	e7e1      	b.n	8009ce6 <_dtoa_r+0x93e>
 8009d22:	9700      	str	r7, [sp, #0]
 8009d24:	4637      	mov	r7, r6
 8009d26:	e599      	b.n	800985c <_dtoa_r+0x4b4>
 8009d28:	40240000 	.word	0x40240000
 8009d2c:	9b08      	ldr	r3, [sp, #32]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	f000 80ca 	beq.w	8009ec8 <_dtoa_r+0xb20>
 8009d34:	9b03      	ldr	r3, [sp, #12]
 8009d36:	9302      	str	r3, [sp, #8]
 8009d38:	2d00      	cmp	r5, #0
 8009d3a:	dd05      	ble.n	8009d48 <_dtoa_r+0x9a0>
 8009d3c:	4639      	mov	r1, r7
 8009d3e:	462a      	mov	r2, r5
 8009d40:	4620      	mov	r0, r4
 8009d42:	f000 ff29 	bl	800ab98 <__lshift>
 8009d46:	4607      	mov	r7, r0
 8009d48:	f1b8 0f00 	cmp.w	r8, #0
 8009d4c:	d05b      	beq.n	8009e06 <_dtoa_r+0xa5e>
 8009d4e:	6879      	ldr	r1, [r7, #4]
 8009d50:	4620      	mov	r0, r4
 8009d52:	f000 fcc5 	bl	800a6e0 <_Balloc>
 8009d56:	4605      	mov	r5, r0
 8009d58:	b928      	cbnz	r0, 8009d66 <_dtoa_r+0x9be>
 8009d5a:	4b87      	ldr	r3, [pc, #540]	; (8009f78 <_dtoa_r+0xbd0>)
 8009d5c:	4602      	mov	r2, r0
 8009d5e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009d62:	f7ff bb3b 	b.w	80093dc <_dtoa_r+0x34>
 8009d66:	693a      	ldr	r2, [r7, #16]
 8009d68:	3202      	adds	r2, #2
 8009d6a:	0092      	lsls	r2, r2, #2
 8009d6c:	f107 010c 	add.w	r1, r7, #12
 8009d70:	300c      	adds	r0, #12
 8009d72:	f000 fca7 	bl	800a6c4 <memcpy>
 8009d76:	2201      	movs	r2, #1
 8009d78:	4629      	mov	r1, r5
 8009d7a:	4620      	mov	r0, r4
 8009d7c:	f000 ff0c 	bl	800ab98 <__lshift>
 8009d80:	9b01      	ldr	r3, [sp, #4]
 8009d82:	f103 0901 	add.w	r9, r3, #1
 8009d86:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009d8a:	4413      	add	r3, r2
 8009d8c:	9305      	str	r3, [sp, #20]
 8009d8e:	f00a 0301 	and.w	r3, sl, #1
 8009d92:	46b8      	mov	r8, r7
 8009d94:	9304      	str	r3, [sp, #16]
 8009d96:	4607      	mov	r7, r0
 8009d98:	4631      	mov	r1, r6
 8009d9a:	ee18 0a10 	vmov	r0, s16
 8009d9e:	f7ff fa75 	bl	800928c <quorem>
 8009da2:	4641      	mov	r1, r8
 8009da4:	9002      	str	r0, [sp, #8]
 8009da6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009daa:	ee18 0a10 	vmov	r0, s16
 8009dae:	f000 ff63 	bl	800ac78 <__mcmp>
 8009db2:	463a      	mov	r2, r7
 8009db4:	9003      	str	r0, [sp, #12]
 8009db6:	4631      	mov	r1, r6
 8009db8:	4620      	mov	r0, r4
 8009dba:	f000 ff79 	bl	800acb0 <__mdiff>
 8009dbe:	68c2      	ldr	r2, [r0, #12]
 8009dc0:	f109 3bff 	add.w	fp, r9, #4294967295
 8009dc4:	4605      	mov	r5, r0
 8009dc6:	bb02      	cbnz	r2, 8009e0a <_dtoa_r+0xa62>
 8009dc8:	4601      	mov	r1, r0
 8009dca:	ee18 0a10 	vmov	r0, s16
 8009dce:	f000 ff53 	bl	800ac78 <__mcmp>
 8009dd2:	4602      	mov	r2, r0
 8009dd4:	4629      	mov	r1, r5
 8009dd6:	4620      	mov	r0, r4
 8009dd8:	9207      	str	r2, [sp, #28]
 8009dda:	f000 fcc1 	bl	800a760 <_Bfree>
 8009dde:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009de2:	ea43 0102 	orr.w	r1, r3, r2
 8009de6:	9b04      	ldr	r3, [sp, #16]
 8009de8:	430b      	orrs	r3, r1
 8009dea:	464d      	mov	r5, r9
 8009dec:	d10f      	bne.n	8009e0e <_dtoa_r+0xa66>
 8009dee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009df2:	d02a      	beq.n	8009e4a <_dtoa_r+0xaa2>
 8009df4:	9b03      	ldr	r3, [sp, #12]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	dd02      	ble.n	8009e00 <_dtoa_r+0xa58>
 8009dfa:	9b02      	ldr	r3, [sp, #8]
 8009dfc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009e00:	f88b a000 	strb.w	sl, [fp]
 8009e04:	e775      	b.n	8009cf2 <_dtoa_r+0x94a>
 8009e06:	4638      	mov	r0, r7
 8009e08:	e7ba      	b.n	8009d80 <_dtoa_r+0x9d8>
 8009e0a:	2201      	movs	r2, #1
 8009e0c:	e7e2      	b.n	8009dd4 <_dtoa_r+0xa2c>
 8009e0e:	9b03      	ldr	r3, [sp, #12]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	db04      	blt.n	8009e1e <_dtoa_r+0xa76>
 8009e14:	9906      	ldr	r1, [sp, #24]
 8009e16:	430b      	orrs	r3, r1
 8009e18:	9904      	ldr	r1, [sp, #16]
 8009e1a:	430b      	orrs	r3, r1
 8009e1c:	d122      	bne.n	8009e64 <_dtoa_r+0xabc>
 8009e1e:	2a00      	cmp	r2, #0
 8009e20:	ddee      	ble.n	8009e00 <_dtoa_r+0xa58>
 8009e22:	ee18 1a10 	vmov	r1, s16
 8009e26:	2201      	movs	r2, #1
 8009e28:	4620      	mov	r0, r4
 8009e2a:	f000 feb5 	bl	800ab98 <__lshift>
 8009e2e:	4631      	mov	r1, r6
 8009e30:	ee08 0a10 	vmov	s16, r0
 8009e34:	f000 ff20 	bl	800ac78 <__mcmp>
 8009e38:	2800      	cmp	r0, #0
 8009e3a:	dc03      	bgt.n	8009e44 <_dtoa_r+0xa9c>
 8009e3c:	d1e0      	bne.n	8009e00 <_dtoa_r+0xa58>
 8009e3e:	f01a 0f01 	tst.w	sl, #1
 8009e42:	d0dd      	beq.n	8009e00 <_dtoa_r+0xa58>
 8009e44:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009e48:	d1d7      	bne.n	8009dfa <_dtoa_r+0xa52>
 8009e4a:	2339      	movs	r3, #57	; 0x39
 8009e4c:	f88b 3000 	strb.w	r3, [fp]
 8009e50:	462b      	mov	r3, r5
 8009e52:	461d      	mov	r5, r3
 8009e54:	3b01      	subs	r3, #1
 8009e56:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009e5a:	2a39      	cmp	r2, #57	; 0x39
 8009e5c:	d071      	beq.n	8009f42 <_dtoa_r+0xb9a>
 8009e5e:	3201      	adds	r2, #1
 8009e60:	701a      	strb	r2, [r3, #0]
 8009e62:	e746      	b.n	8009cf2 <_dtoa_r+0x94a>
 8009e64:	2a00      	cmp	r2, #0
 8009e66:	dd07      	ble.n	8009e78 <_dtoa_r+0xad0>
 8009e68:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009e6c:	d0ed      	beq.n	8009e4a <_dtoa_r+0xaa2>
 8009e6e:	f10a 0301 	add.w	r3, sl, #1
 8009e72:	f88b 3000 	strb.w	r3, [fp]
 8009e76:	e73c      	b.n	8009cf2 <_dtoa_r+0x94a>
 8009e78:	9b05      	ldr	r3, [sp, #20]
 8009e7a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009e7e:	4599      	cmp	r9, r3
 8009e80:	d047      	beq.n	8009f12 <_dtoa_r+0xb6a>
 8009e82:	ee18 1a10 	vmov	r1, s16
 8009e86:	2300      	movs	r3, #0
 8009e88:	220a      	movs	r2, #10
 8009e8a:	4620      	mov	r0, r4
 8009e8c:	f000 fc8a 	bl	800a7a4 <__multadd>
 8009e90:	45b8      	cmp	r8, r7
 8009e92:	ee08 0a10 	vmov	s16, r0
 8009e96:	f04f 0300 	mov.w	r3, #0
 8009e9a:	f04f 020a 	mov.w	r2, #10
 8009e9e:	4641      	mov	r1, r8
 8009ea0:	4620      	mov	r0, r4
 8009ea2:	d106      	bne.n	8009eb2 <_dtoa_r+0xb0a>
 8009ea4:	f000 fc7e 	bl	800a7a4 <__multadd>
 8009ea8:	4680      	mov	r8, r0
 8009eaa:	4607      	mov	r7, r0
 8009eac:	f109 0901 	add.w	r9, r9, #1
 8009eb0:	e772      	b.n	8009d98 <_dtoa_r+0x9f0>
 8009eb2:	f000 fc77 	bl	800a7a4 <__multadd>
 8009eb6:	4639      	mov	r1, r7
 8009eb8:	4680      	mov	r8, r0
 8009eba:	2300      	movs	r3, #0
 8009ebc:	220a      	movs	r2, #10
 8009ebe:	4620      	mov	r0, r4
 8009ec0:	f000 fc70 	bl	800a7a4 <__multadd>
 8009ec4:	4607      	mov	r7, r0
 8009ec6:	e7f1      	b.n	8009eac <_dtoa_r+0xb04>
 8009ec8:	9b03      	ldr	r3, [sp, #12]
 8009eca:	9302      	str	r3, [sp, #8]
 8009ecc:	9d01      	ldr	r5, [sp, #4]
 8009ece:	ee18 0a10 	vmov	r0, s16
 8009ed2:	4631      	mov	r1, r6
 8009ed4:	f7ff f9da 	bl	800928c <quorem>
 8009ed8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009edc:	9b01      	ldr	r3, [sp, #4]
 8009ede:	f805 ab01 	strb.w	sl, [r5], #1
 8009ee2:	1aea      	subs	r2, r5, r3
 8009ee4:	9b02      	ldr	r3, [sp, #8]
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	dd09      	ble.n	8009efe <_dtoa_r+0xb56>
 8009eea:	ee18 1a10 	vmov	r1, s16
 8009eee:	2300      	movs	r3, #0
 8009ef0:	220a      	movs	r2, #10
 8009ef2:	4620      	mov	r0, r4
 8009ef4:	f000 fc56 	bl	800a7a4 <__multadd>
 8009ef8:	ee08 0a10 	vmov	s16, r0
 8009efc:	e7e7      	b.n	8009ece <_dtoa_r+0xb26>
 8009efe:	9b02      	ldr	r3, [sp, #8]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	bfc8      	it	gt
 8009f04:	461d      	movgt	r5, r3
 8009f06:	9b01      	ldr	r3, [sp, #4]
 8009f08:	bfd8      	it	le
 8009f0a:	2501      	movle	r5, #1
 8009f0c:	441d      	add	r5, r3
 8009f0e:	f04f 0800 	mov.w	r8, #0
 8009f12:	ee18 1a10 	vmov	r1, s16
 8009f16:	2201      	movs	r2, #1
 8009f18:	4620      	mov	r0, r4
 8009f1a:	f000 fe3d 	bl	800ab98 <__lshift>
 8009f1e:	4631      	mov	r1, r6
 8009f20:	ee08 0a10 	vmov	s16, r0
 8009f24:	f000 fea8 	bl	800ac78 <__mcmp>
 8009f28:	2800      	cmp	r0, #0
 8009f2a:	dc91      	bgt.n	8009e50 <_dtoa_r+0xaa8>
 8009f2c:	d102      	bne.n	8009f34 <_dtoa_r+0xb8c>
 8009f2e:	f01a 0f01 	tst.w	sl, #1
 8009f32:	d18d      	bne.n	8009e50 <_dtoa_r+0xaa8>
 8009f34:	462b      	mov	r3, r5
 8009f36:	461d      	mov	r5, r3
 8009f38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f3c:	2a30      	cmp	r2, #48	; 0x30
 8009f3e:	d0fa      	beq.n	8009f36 <_dtoa_r+0xb8e>
 8009f40:	e6d7      	b.n	8009cf2 <_dtoa_r+0x94a>
 8009f42:	9a01      	ldr	r2, [sp, #4]
 8009f44:	429a      	cmp	r2, r3
 8009f46:	d184      	bne.n	8009e52 <_dtoa_r+0xaaa>
 8009f48:	9b00      	ldr	r3, [sp, #0]
 8009f4a:	3301      	adds	r3, #1
 8009f4c:	9300      	str	r3, [sp, #0]
 8009f4e:	2331      	movs	r3, #49	; 0x31
 8009f50:	7013      	strb	r3, [r2, #0]
 8009f52:	e6ce      	b.n	8009cf2 <_dtoa_r+0x94a>
 8009f54:	4b09      	ldr	r3, [pc, #36]	; (8009f7c <_dtoa_r+0xbd4>)
 8009f56:	f7ff ba95 	b.w	8009484 <_dtoa_r+0xdc>
 8009f5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	f47f aa6e 	bne.w	800943e <_dtoa_r+0x96>
 8009f62:	4b07      	ldr	r3, [pc, #28]	; (8009f80 <_dtoa_r+0xbd8>)
 8009f64:	f7ff ba8e 	b.w	8009484 <_dtoa_r+0xdc>
 8009f68:	9b02      	ldr	r3, [sp, #8]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	dcae      	bgt.n	8009ecc <_dtoa_r+0xb24>
 8009f6e:	9b06      	ldr	r3, [sp, #24]
 8009f70:	2b02      	cmp	r3, #2
 8009f72:	f73f aea8 	bgt.w	8009cc6 <_dtoa_r+0x91e>
 8009f76:	e7a9      	b.n	8009ecc <_dtoa_r+0xb24>
 8009f78:	0800d700 	.word	0x0800d700
 8009f7c:	0800d8f9 	.word	0x0800d8f9
 8009f80:	0800d681 	.word	0x0800d681

08009f84 <rshift>:
 8009f84:	6903      	ldr	r3, [r0, #16]
 8009f86:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009f8a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009f8e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009f92:	f100 0414 	add.w	r4, r0, #20
 8009f96:	dd45      	ble.n	800a024 <rshift+0xa0>
 8009f98:	f011 011f 	ands.w	r1, r1, #31
 8009f9c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009fa0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009fa4:	d10c      	bne.n	8009fc0 <rshift+0x3c>
 8009fa6:	f100 0710 	add.w	r7, r0, #16
 8009faa:	4629      	mov	r1, r5
 8009fac:	42b1      	cmp	r1, r6
 8009fae:	d334      	bcc.n	800a01a <rshift+0x96>
 8009fb0:	1a9b      	subs	r3, r3, r2
 8009fb2:	009b      	lsls	r3, r3, #2
 8009fb4:	1eea      	subs	r2, r5, #3
 8009fb6:	4296      	cmp	r6, r2
 8009fb8:	bf38      	it	cc
 8009fba:	2300      	movcc	r3, #0
 8009fbc:	4423      	add	r3, r4
 8009fbe:	e015      	b.n	8009fec <rshift+0x68>
 8009fc0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009fc4:	f1c1 0820 	rsb	r8, r1, #32
 8009fc8:	40cf      	lsrs	r7, r1
 8009fca:	f105 0e04 	add.w	lr, r5, #4
 8009fce:	46a1      	mov	r9, r4
 8009fd0:	4576      	cmp	r6, lr
 8009fd2:	46f4      	mov	ip, lr
 8009fd4:	d815      	bhi.n	800a002 <rshift+0x7e>
 8009fd6:	1a9a      	subs	r2, r3, r2
 8009fd8:	0092      	lsls	r2, r2, #2
 8009fda:	3a04      	subs	r2, #4
 8009fdc:	3501      	adds	r5, #1
 8009fde:	42ae      	cmp	r6, r5
 8009fe0:	bf38      	it	cc
 8009fe2:	2200      	movcc	r2, #0
 8009fe4:	18a3      	adds	r3, r4, r2
 8009fe6:	50a7      	str	r7, [r4, r2]
 8009fe8:	b107      	cbz	r7, 8009fec <rshift+0x68>
 8009fea:	3304      	adds	r3, #4
 8009fec:	1b1a      	subs	r2, r3, r4
 8009fee:	42a3      	cmp	r3, r4
 8009ff0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009ff4:	bf08      	it	eq
 8009ff6:	2300      	moveq	r3, #0
 8009ff8:	6102      	str	r2, [r0, #16]
 8009ffa:	bf08      	it	eq
 8009ffc:	6143      	streq	r3, [r0, #20]
 8009ffe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a002:	f8dc c000 	ldr.w	ip, [ip]
 800a006:	fa0c fc08 	lsl.w	ip, ip, r8
 800a00a:	ea4c 0707 	orr.w	r7, ip, r7
 800a00e:	f849 7b04 	str.w	r7, [r9], #4
 800a012:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a016:	40cf      	lsrs	r7, r1
 800a018:	e7da      	b.n	8009fd0 <rshift+0x4c>
 800a01a:	f851 cb04 	ldr.w	ip, [r1], #4
 800a01e:	f847 cf04 	str.w	ip, [r7, #4]!
 800a022:	e7c3      	b.n	8009fac <rshift+0x28>
 800a024:	4623      	mov	r3, r4
 800a026:	e7e1      	b.n	8009fec <rshift+0x68>

0800a028 <__hexdig_fun>:
 800a028:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a02c:	2b09      	cmp	r3, #9
 800a02e:	d802      	bhi.n	800a036 <__hexdig_fun+0xe>
 800a030:	3820      	subs	r0, #32
 800a032:	b2c0      	uxtb	r0, r0
 800a034:	4770      	bx	lr
 800a036:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a03a:	2b05      	cmp	r3, #5
 800a03c:	d801      	bhi.n	800a042 <__hexdig_fun+0x1a>
 800a03e:	3847      	subs	r0, #71	; 0x47
 800a040:	e7f7      	b.n	800a032 <__hexdig_fun+0xa>
 800a042:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a046:	2b05      	cmp	r3, #5
 800a048:	d801      	bhi.n	800a04e <__hexdig_fun+0x26>
 800a04a:	3827      	subs	r0, #39	; 0x27
 800a04c:	e7f1      	b.n	800a032 <__hexdig_fun+0xa>
 800a04e:	2000      	movs	r0, #0
 800a050:	4770      	bx	lr
	...

0800a054 <__gethex>:
 800a054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a058:	ed2d 8b02 	vpush	{d8}
 800a05c:	b089      	sub	sp, #36	; 0x24
 800a05e:	ee08 0a10 	vmov	s16, r0
 800a062:	9304      	str	r3, [sp, #16]
 800a064:	4bb4      	ldr	r3, [pc, #720]	; (800a338 <__gethex+0x2e4>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	9301      	str	r3, [sp, #4]
 800a06a:	4618      	mov	r0, r3
 800a06c:	468b      	mov	fp, r1
 800a06e:	4690      	mov	r8, r2
 800a070:	f7f6 f8be 	bl	80001f0 <strlen>
 800a074:	9b01      	ldr	r3, [sp, #4]
 800a076:	f8db 2000 	ldr.w	r2, [fp]
 800a07a:	4403      	add	r3, r0
 800a07c:	4682      	mov	sl, r0
 800a07e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a082:	9305      	str	r3, [sp, #20]
 800a084:	1c93      	adds	r3, r2, #2
 800a086:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a08a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a08e:	32fe      	adds	r2, #254	; 0xfe
 800a090:	18d1      	adds	r1, r2, r3
 800a092:	461f      	mov	r7, r3
 800a094:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a098:	9100      	str	r1, [sp, #0]
 800a09a:	2830      	cmp	r0, #48	; 0x30
 800a09c:	d0f8      	beq.n	800a090 <__gethex+0x3c>
 800a09e:	f7ff ffc3 	bl	800a028 <__hexdig_fun>
 800a0a2:	4604      	mov	r4, r0
 800a0a4:	2800      	cmp	r0, #0
 800a0a6:	d13a      	bne.n	800a11e <__gethex+0xca>
 800a0a8:	9901      	ldr	r1, [sp, #4]
 800a0aa:	4652      	mov	r2, sl
 800a0ac:	4638      	mov	r0, r7
 800a0ae:	f7fe fa0a 	bl	80084c6 <strncmp>
 800a0b2:	4605      	mov	r5, r0
 800a0b4:	2800      	cmp	r0, #0
 800a0b6:	d168      	bne.n	800a18a <__gethex+0x136>
 800a0b8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a0bc:	eb07 060a 	add.w	r6, r7, sl
 800a0c0:	f7ff ffb2 	bl	800a028 <__hexdig_fun>
 800a0c4:	2800      	cmp	r0, #0
 800a0c6:	d062      	beq.n	800a18e <__gethex+0x13a>
 800a0c8:	4633      	mov	r3, r6
 800a0ca:	7818      	ldrb	r0, [r3, #0]
 800a0cc:	2830      	cmp	r0, #48	; 0x30
 800a0ce:	461f      	mov	r7, r3
 800a0d0:	f103 0301 	add.w	r3, r3, #1
 800a0d4:	d0f9      	beq.n	800a0ca <__gethex+0x76>
 800a0d6:	f7ff ffa7 	bl	800a028 <__hexdig_fun>
 800a0da:	2301      	movs	r3, #1
 800a0dc:	fab0 f480 	clz	r4, r0
 800a0e0:	0964      	lsrs	r4, r4, #5
 800a0e2:	4635      	mov	r5, r6
 800a0e4:	9300      	str	r3, [sp, #0]
 800a0e6:	463a      	mov	r2, r7
 800a0e8:	4616      	mov	r6, r2
 800a0ea:	3201      	adds	r2, #1
 800a0ec:	7830      	ldrb	r0, [r6, #0]
 800a0ee:	f7ff ff9b 	bl	800a028 <__hexdig_fun>
 800a0f2:	2800      	cmp	r0, #0
 800a0f4:	d1f8      	bne.n	800a0e8 <__gethex+0x94>
 800a0f6:	9901      	ldr	r1, [sp, #4]
 800a0f8:	4652      	mov	r2, sl
 800a0fa:	4630      	mov	r0, r6
 800a0fc:	f7fe f9e3 	bl	80084c6 <strncmp>
 800a100:	b980      	cbnz	r0, 800a124 <__gethex+0xd0>
 800a102:	b94d      	cbnz	r5, 800a118 <__gethex+0xc4>
 800a104:	eb06 050a 	add.w	r5, r6, sl
 800a108:	462a      	mov	r2, r5
 800a10a:	4616      	mov	r6, r2
 800a10c:	3201      	adds	r2, #1
 800a10e:	7830      	ldrb	r0, [r6, #0]
 800a110:	f7ff ff8a 	bl	800a028 <__hexdig_fun>
 800a114:	2800      	cmp	r0, #0
 800a116:	d1f8      	bne.n	800a10a <__gethex+0xb6>
 800a118:	1bad      	subs	r5, r5, r6
 800a11a:	00ad      	lsls	r5, r5, #2
 800a11c:	e004      	b.n	800a128 <__gethex+0xd4>
 800a11e:	2400      	movs	r4, #0
 800a120:	4625      	mov	r5, r4
 800a122:	e7e0      	b.n	800a0e6 <__gethex+0x92>
 800a124:	2d00      	cmp	r5, #0
 800a126:	d1f7      	bne.n	800a118 <__gethex+0xc4>
 800a128:	7833      	ldrb	r3, [r6, #0]
 800a12a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a12e:	2b50      	cmp	r3, #80	; 0x50
 800a130:	d13b      	bne.n	800a1aa <__gethex+0x156>
 800a132:	7873      	ldrb	r3, [r6, #1]
 800a134:	2b2b      	cmp	r3, #43	; 0x2b
 800a136:	d02c      	beq.n	800a192 <__gethex+0x13e>
 800a138:	2b2d      	cmp	r3, #45	; 0x2d
 800a13a:	d02e      	beq.n	800a19a <__gethex+0x146>
 800a13c:	1c71      	adds	r1, r6, #1
 800a13e:	f04f 0900 	mov.w	r9, #0
 800a142:	7808      	ldrb	r0, [r1, #0]
 800a144:	f7ff ff70 	bl	800a028 <__hexdig_fun>
 800a148:	1e43      	subs	r3, r0, #1
 800a14a:	b2db      	uxtb	r3, r3
 800a14c:	2b18      	cmp	r3, #24
 800a14e:	d82c      	bhi.n	800a1aa <__gethex+0x156>
 800a150:	f1a0 0210 	sub.w	r2, r0, #16
 800a154:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a158:	f7ff ff66 	bl	800a028 <__hexdig_fun>
 800a15c:	1e43      	subs	r3, r0, #1
 800a15e:	b2db      	uxtb	r3, r3
 800a160:	2b18      	cmp	r3, #24
 800a162:	d91d      	bls.n	800a1a0 <__gethex+0x14c>
 800a164:	f1b9 0f00 	cmp.w	r9, #0
 800a168:	d000      	beq.n	800a16c <__gethex+0x118>
 800a16a:	4252      	negs	r2, r2
 800a16c:	4415      	add	r5, r2
 800a16e:	f8cb 1000 	str.w	r1, [fp]
 800a172:	b1e4      	cbz	r4, 800a1ae <__gethex+0x15a>
 800a174:	9b00      	ldr	r3, [sp, #0]
 800a176:	2b00      	cmp	r3, #0
 800a178:	bf14      	ite	ne
 800a17a:	2700      	movne	r7, #0
 800a17c:	2706      	moveq	r7, #6
 800a17e:	4638      	mov	r0, r7
 800a180:	b009      	add	sp, #36	; 0x24
 800a182:	ecbd 8b02 	vpop	{d8}
 800a186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a18a:	463e      	mov	r6, r7
 800a18c:	4625      	mov	r5, r4
 800a18e:	2401      	movs	r4, #1
 800a190:	e7ca      	b.n	800a128 <__gethex+0xd4>
 800a192:	f04f 0900 	mov.w	r9, #0
 800a196:	1cb1      	adds	r1, r6, #2
 800a198:	e7d3      	b.n	800a142 <__gethex+0xee>
 800a19a:	f04f 0901 	mov.w	r9, #1
 800a19e:	e7fa      	b.n	800a196 <__gethex+0x142>
 800a1a0:	230a      	movs	r3, #10
 800a1a2:	fb03 0202 	mla	r2, r3, r2, r0
 800a1a6:	3a10      	subs	r2, #16
 800a1a8:	e7d4      	b.n	800a154 <__gethex+0x100>
 800a1aa:	4631      	mov	r1, r6
 800a1ac:	e7df      	b.n	800a16e <__gethex+0x11a>
 800a1ae:	1bf3      	subs	r3, r6, r7
 800a1b0:	3b01      	subs	r3, #1
 800a1b2:	4621      	mov	r1, r4
 800a1b4:	2b07      	cmp	r3, #7
 800a1b6:	dc0b      	bgt.n	800a1d0 <__gethex+0x17c>
 800a1b8:	ee18 0a10 	vmov	r0, s16
 800a1bc:	f000 fa90 	bl	800a6e0 <_Balloc>
 800a1c0:	4604      	mov	r4, r0
 800a1c2:	b940      	cbnz	r0, 800a1d6 <__gethex+0x182>
 800a1c4:	4b5d      	ldr	r3, [pc, #372]	; (800a33c <__gethex+0x2e8>)
 800a1c6:	4602      	mov	r2, r0
 800a1c8:	21de      	movs	r1, #222	; 0xde
 800a1ca:	485d      	ldr	r0, [pc, #372]	; (800a340 <__gethex+0x2ec>)
 800a1cc:	f001 fde0 	bl	800bd90 <__assert_func>
 800a1d0:	3101      	adds	r1, #1
 800a1d2:	105b      	asrs	r3, r3, #1
 800a1d4:	e7ee      	b.n	800a1b4 <__gethex+0x160>
 800a1d6:	f100 0914 	add.w	r9, r0, #20
 800a1da:	f04f 0b00 	mov.w	fp, #0
 800a1de:	f1ca 0301 	rsb	r3, sl, #1
 800a1e2:	f8cd 9008 	str.w	r9, [sp, #8]
 800a1e6:	f8cd b000 	str.w	fp, [sp]
 800a1ea:	9306      	str	r3, [sp, #24]
 800a1ec:	42b7      	cmp	r7, r6
 800a1ee:	d340      	bcc.n	800a272 <__gethex+0x21e>
 800a1f0:	9802      	ldr	r0, [sp, #8]
 800a1f2:	9b00      	ldr	r3, [sp, #0]
 800a1f4:	f840 3b04 	str.w	r3, [r0], #4
 800a1f8:	eba0 0009 	sub.w	r0, r0, r9
 800a1fc:	1080      	asrs	r0, r0, #2
 800a1fe:	0146      	lsls	r6, r0, #5
 800a200:	6120      	str	r0, [r4, #16]
 800a202:	4618      	mov	r0, r3
 800a204:	f000 fb5e 	bl	800a8c4 <__hi0bits>
 800a208:	1a30      	subs	r0, r6, r0
 800a20a:	f8d8 6000 	ldr.w	r6, [r8]
 800a20e:	42b0      	cmp	r0, r6
 800a210:	dd63      	ble.n	800a2da <__gethex+0x286>
 800a212:	1b87      	subs	r7, r0, r6
 800a214:	4639      	mov	r1, r7
 800a216:	4620      	mov	r0, r4
 800a218:	f000 ff02 	bl	800b020 <__any_on>
 800a21c:	4682      	mov	sl, r0
 800a21e:	b1a8      	cbz	r0, 800a24c <__gethex+0x1f8>
 800a220:	1e7b      	subs	r3, r7, #1
 800a222:	1159      	asrs	r1, r3, #5
 800a224:	f003 021f 	and.w	r2, r3, #31
 800a228:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a22c:	f04f 0a01 	mov.w	sl, #1
 800a230:	fa0a f202 	lsl.w	r2, sl, r2
 800a234:	420a      	tst	r2, r1
 800a236:	d009      	beq.n	800a24c <__gethex+0x1f8>
 800a238:	4553      	cmp	r3, sl
 800a23a:	dd05      	ble.n	800a248 <__gethex+0x1f4>
 800a23c:	1eb9      	subs	r1, r7, #2
 800a23e:	4620      	mov	r0, r4
 800a240:	f000 feee 	bl	800b020 <__any_on>
 800a244:	2800      	cmp	r0, #0
 800a246:	d145      	bne.n	800a2d4 <__gethex+0x280>
 800a248:	f04f 0a02 	mov.w	sl, #2
 800a24c:	4639      	mov	r1, r7
 800a24e:	4620      	mov	r0, r4
 800a250:	f7ff fe98 	bl	8009f84 <rshift>
 800a254:	443d      	add	r5, r7
 800a256:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a25a:	42ab      	cmp	r3, r5
 800a25c:	da4c      	bge.n	800a2f8 <__gethex+0x2a4>
 800a25e:	ee18 0a10 	vmov	r0, s16
 800a262:	4621      	mov	r1, r4
 800a264:	f000 fa7c 	bl	800a760 <_Bfree>
 800a268:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a26a:	2300      	movs	r3, #0
 800a26c:	6013      	str	r3, [r2, #0]
 800a26e:	27a3      	movs	r7, #163	; 0xa3
 800a270:	e785      	b.n	800a17e <__gethex+0x12a>
 800a272:	1e73      	subs	r3, r6, #1
 800a274:	9a05      	ldr	r2, [sp, #20]
 800a276:	9303      	str	r3, [sp, #12]
 800a278:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a27c:	4293      	cmp	r3, r2
 800a27e:	d019      	beq.n	800a2b4 <__gethex+0x260>
 800a280:	f1bb 0f20 	cmp.w	fp, #32
 800a284:	d107      	bne.n	800a296 <__gethex+0x242>
 800a286:	9b02      	ldr	r3, [sp, #8]
 800a288:	9a00      	ldr	r2, [sp, #0]
 800a28a:	f843 2b04 	str.w	r2, [r3], #4
 800a28e:	9302      	str	r3, [sp, #8]
 800a290:	2300      	movs	r3, #0
 800a292:	9300      	str	r3, [sp, #0]
 800a294:	469b      	mov	fp, r3
 800a296:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a29a:	f7ff fec5 	bl	800a028 <__hexdig_fun>
 800a29e:	9b00      	ldr	r3, [sp, #0]
 800a2a0:	f000 000f 	and.w	r0, r0, #15
 800a2a4:	fa00 f00b 	lsl.w	r0, r0, fp
 800a2a8:	4303      	orrs	r3, r0
 800a2aa:	9300      	str	r3, [sp, #0]
 800a2ac:	f10b 0b04 	add.w	fp, fp, #4
 800a2b0:	9b03      	ldr	r3, [sp, #12]
 800a2b2:	e00d      	b.n	800a2d0 <__gethex+0x27c>
 800a2b4:	9b03      	ldr	r3, [sp, #12]
 800a2b6:	9a06      	ldr	r2, [sp, #24]
 800a2b8:	4413      	add	r3, r2
 800a2ba:	42bb      	cmp	r3, r7
 800a2bc:	d3e0      	bcc.n	800a280 <__gethex+0x22c>
 800a2be:	4618      	mov	r0, r3
 800a2c0:	9901      	ldr	r1, [sp, #4]
 800a2c2:	9307      	str	r3, [sp, #28]
 800a2c4:	4652      	mov	r2, sl
 800a2c6:	f7fe f8fe 	bl	80084c6 <strncmp>
 800a2ca:	9b07      	ldr	r3, [sp, #28]
 800a2cc:	2800      	cmp	r0, #0
 800a2ce:	d1d7      	bne.n	800a280 <__gethex+0x22c>
 800a2d0:	461e      	mov	r6, r3
 800a2d2:	e78b      	b.n	800a1ec <__gethex+0x198>
 800a2d4:	f04f 0a03 	mov.w	sl, #3
 800a2d8:	e7b8      	b.n	800a24c <__gethex+0x1f8>
 800a2da:	da0a      	bge.n	800a2f2 <__gethex+0x29e>
 800a2dc:	1a37      	subs	r7, r6, r0
 800a2de:	4621      	mov	r1, r4
 800a2e0:	ee18 0a10 	vmov	r0, s16
 800a2e4:	463a      	mov	r2, r7
 800a2e6:	f000 fc57 	bl	800ab98 <__lshift>
 800a2ea:	1bed      	subs	r5, r5, r7
 800a2ec:	4604      	mov	r4, r0
 800a2ee:	f100 0914 	add.w	r9, r0, #20
 800a2f2:	f04f 0a00 	mov.w	sl, #0
 800a2f6:	e7ae      	b.n	800a256 <__gethex+0x202>
 800a2f8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a2fc:	42a8      	cmp	r0, r5
 800a2fe:	dd72      	ble.n	800a3e6 <__gethex+0x392>
 800a300:	1b45      	subs	r5, r0, r5
 800a302:	42ae      	cmp	r6, r5
 800a304:	dc36      	bgt.n	800a374 <__gethex+0x320>
 800a306:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a30a:	2b02      	cmp	r3, #2
 800a30c:	d02a      	beq.n	800a364 <__gethex+0x310>
 800a30e:	2b03      	cmp	r3, #3
 800a310:	d02c      	beq.n	800a36c <__gethex+0x318>
 800a312:	2b01      	cmp	r3, #1
 800a314:	d11c      	bne.n	800a350 <__gethex+0x2fc>
 800a316:	42ae      	cmp	r6, r5
 800a318:	d11a      	bne.n	800a350 <__gethex+0x2fc>
 800a31a:	2e01      	cmp	r6, #1
 800a31c:	d112      	bne.n	800a344 <__gethex+0x2f0>
 800a31e:	9a04      	ldr	r2, [sp, #16]
 800a320:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a324:	6013      	str	r3, [r2, #0]
 800a326:	2301      	movs	r3, #1
 800a328:	6123      	str	r3, [r4, #16]
 800a32a:	f8c9 3000 	str.w	r3, [r9]
 800a32e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a330:	2762      	movs	r7, #98	; 0x62
 800a332:	601c      	str	r4, [r3, #0]
 800a334:	e723      	b.n	800a17e <__gethex+0x12a>
 800a336:	bf00      	nop
 800a338:	0800d778 	.word	0x0800d778
 800a33c:	0800d700 	.word	0x0800d700
 800a340:	0800d711 	.word	0x0800d711
 800a344:	1e71      	subs	r1, r6, #1
 800a346:	4620      	mov	r0, r4
 800a348:	f000 fe6a 	bl	800b020 <__any_on>
 800a34c:	2800      	cmp	r0, #0
 800a34e:	d1e6      	bne.n	800a31e <__gethex+0x2ca>
 800a350:	ee18 0a10 	vmov	r0, s16
 800a354:	4621      	mov	r1, r4
 800a356:	f000 fa03 	bl	800a760 <_Bfree>
 800a35a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a35c:	2300      	movs	r3, #0
 800a35e:	6013      	str	r3, [r2, #0]
 800a360:	2750      	movs	r7, #80	; 0x50
 800a362:	e70c      	b.n	800a17e <__gethex+0x12a>
 800a364:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a366:	2b00      	cmp	r3, #0
 800a368:	d1f2      	bne.n	800a350 <__gethex+0x2fc>
 800a36a:	e7d8      	b.n	800a31e <__gethex+0x2ca>
 800a36c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d1d5      	bne.n	800a31e <__gethex+0x2ca>
 800a372:	e7ed      	b.n	800a350 <__gethex+0x2fc>
 800a374:	1e6f      	subs	r7, r5, #1
 800a376:	f1ba 0f00 	cmp.w	sl, #0
 800a37a:	d131      	bne.n	800a3e0 <__gethex+0x38c>
 800a37c:	b127      	cbz	r7, 800a388 <__gethex+0x334>
 800a37e:	4639      	mov	r1, r7
 800a380:	4620      	mov	r0, r4
 800a382:	f000 fe4d 	bl	800b020 <__any_on>
 800a386:	4682      	mov	sl, r0
 800a388:	117b      	asrs	r3, r7, #5
 800a38a:	2101      	movs	r1, #1
 800a38c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a390:	f007 071f 	and.w	r7, r7, #31
 800a394:	fa01 f707 	lsl.w	r7, r1, r7
 800a398:	421f      	tst	r7, r3
 800a39a:	4629      	mov	r1, r5
 800a39c:	4620      	mov	r0, r4
 800a39e:	bf18      	it	ne
 800a3a0:	f04a 0a02 	orrne.w	sl, sl, #2
 800a3a4:	1b76      	subs	r6, r6, r5
 800a3a6:	f7ff fded 	bl	8009f84 <rshift>
 800a3aa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a3ae:	2702      	movs	r7, #2
 800a3b0:	f1ba 0f00 	cmp.w	sl, #0
 800a3b4:	d048      	beq.n	800a448 <__gethex+0x3f4>
 800a3b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a3ba:	2b02      	cmp	r3, #2
 800a3bc:	d015      	beq.n	800a3ea <__gethex+0x396>
 800a3be:	2b03      	cmp	r3, #3
 800a3c0:	d017      	beq.n	800a3f2 <__gethex+0x39e>
 800a3c2:	2b01      	cmp	r3, #1
 800a3c4:	d109      	bne.n	800a3da <__gethex+0x386>
 800a3c6:	f01a 0f02 	tst.w	sl, #2
 800a3ca:	d006      	beq.n	800a3da <__gethex+0x386>
 800a3cc:	f8d9 0000 	ldr.w	r0, [r9]
 800a3d0:	ea4a 0a00 	orr.w	sl, sl, r0
 800a3d4:	f01a 0f01 	tst.w	sl, #1
 800a3d8:	d10e      	bne.n	800a3f8 <__gethex+0x3a4>
 800a3da:	f047 0710 	orr.w	r7, r7, #16
 800a3de:	e033      	b.n	800a448 <__gethex+0x3f4>
 800a3e0:	f04f 0a01 	mov.w	sl, #1
 800a3e4:	e7d0      	b.n	800a388 <__gethex+0x334>
 800a3e6:	2701      	movs	r7, #1
 800a3e8:	e7e2      	b.n	800a3b0 <__gethex+0x35c>
 800a3ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a3ec:	f1c3 0301 	rsb	r3, r3, #1
 800a3f0:	9315      	str	r3, [sp, #84]	; 0x54
 800a3f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d0f0      	beq.n	800a3da <__gethex+0x386>
 800a3f8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a3fc:	f104 0314 	add.w	r3, r4, #20
 800a400:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a404:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a408:	f04f 0c00 	mov.w	ip, #0
 800a40c:	4618      	mov	r0, r3
 800a40e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a412:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a416:	d01c      	beq.n	800a452 <__gethex+0x3fe>
 800a418:	3201      	adds	r2, #1
 800a41a:	6002      	str	r2, [r0, #0]
 800a41c:	2f02      	cmp	r7, #2
 800a41e:	f104 0314 	add.w	r3, r4, #20
 800a422:	d13f      	bne.n	800a4a4 <__gethex+0x450>
 800a424:	f8d8 2000 	ldr.w	r2, [r8]
 800a428:	3a01      	subs	r2, #1
 800a42a:	42b2      	cmp	r2, r6
 800a42c:	d10a      	bne.n	800a444 <__gethex+0x3f0>
 800a42e:	1171      	asrs	r1, r6, #5
 800a430:	2201      	movs	r2, #1
 800a432:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a436:	f006 061f 	and.w	r6, r6, #31
 800a43a:	fa02 f606 	lsl.w	r6, r2, r6
 800a43e:	421e      	tst	r6, r3
 800a440:	bf18      	it	ne
 800a442:	4617      	movne	r7, r2
 800a444:	f047 0720 	orr.w	r7, r7, #32
 800a448:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a44a:	601c      	str	r4, [r3, #0]
 800a44c:	9b04      	ldr	r3, [sp, #16]
 800a44e:	601d      	str	r5, [r3, #0]
 800a450:	e695      	b.n	800a17e <__gethex+0x12a>
 800a452:	4299      	cmp	r1, r3
 800a454:	f843 cc04 	str.w	ip, [r3, #-4]
 800a458:	d8d8      	bhi.n	800a40c <__gethex+0x3b8>
 800a45a:	68a3      	ldr	r3, [r4, #8]
 800a45c:	459b      	cmp	fp, r3
 800a45e:	db19      	blt.n	800a494 <__gethex+0x440>
 800a460:	6861      	ldr	r1, [r4, #4]
 800a462:	ee18 0a10 	vmov	r0, s16
 800a466:	3101      	adds	r1, #1
 800a468:	f000 f93a 	bl	800a6e0 <_Balloc>
 800a46c:	4681      	mov	r9, r0
 800a46e:	b918      	cbnz	r0, 800a478 <__gethex+0x424>
 800a470:	4b1a      	ldr	r3, [pc, #104]	; (800a4dc <__gethex+0x488>)
 800a472:	4602      	mov	r2, r0
 800a474:	2184      	movs	r1, #132	; 0x84
 800a476:	e6a8      	b.n	800a1ca <__gethex+0x176>
 800a478:	6922      	ldr	r2, [r4, #16]
 800a47a:	3202      	adds	r2, #2
 800a47c:	f104 010c 	add.w	r1, r4, #12
 800a480:	0092      	lsls	r2, r2, #2
 800a482:	300c      	adds	r0, #12
 800a484:	f000 f91e 	bl	800a6c4 <memcpy>
 800a488:	4621      	mov	r1, r4
 800a48a:	ee18 0a10 	vmov	r0, s16
 800a48e:	f000 f967 	bl	800a760 <_Bfree>
 800a492:	464c      	mov	r4, r9
 800a494:	6923      	ldr	r3, [r4, #16]
 800a496:	1c5a      	adds	r2, r3, #1
 800a498:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a49c:	6122      	str	r2, [r4, #16]
 800a49e:	2201      	movs	r2, #1
 800a4a0:	615a      	str	r2, [r3, #20]
 800a4a2:	e7bb      	b.n	800a41c <__gethex+0x3c8>
 800a4a4:	6922      	ldr	r2, [r4, #16]
 800a4a6:	455a      	cmp	r2, fp
 800a4a8:	dd0b      	ble.n	800a4c2 <__gethex+0x46e>
 800a4aa:	2101      	movs	r1, #1
 800a4ac:	4620      	mov	r0, r4
 800a4ae:	f7ff fd69 	bl	8009f84 <rshift>
 800a4b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a4b6:	3501      	adds	r5, #1
 800a4b8:	42ab      	cmp	r3, r5
 800a4ba:	f6ff aed0 	blt.w	800a25e <__gethex+0x20a>
 800a4be:	2701      	movs	r7, #1
 800a4c0:	e7c0      	b.n	800a444 <__gethex+0x3f0>
 800a4c2:	f016 061f 	ands.w	r6, r6, #31
 800a4c6:	d0fa      	beq.n	800a4be <__gethex+0x46a>
 800a4c8:	4453      	add	r3, sl
 800a4ca:	f1c6 0620 	rsb	r6, r6, #32
 800a4ce:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a4d2:	f000 f9f7 	bl	800a8c4 <__hi0bits>
 800a4d6:	42b0      	cmp	r0, r6
 800a4d8:	dbe7      	blt.n	800a4aa <__gethex+0x456>
 800a4da:	e7f0      	b.n	800a4be <__gethex+0x46a>
 800a4dc:	0800d700 	.word	0x0800d700

0800a4e0 <L_shift>:
 800a4e0:	f1c2 0208 	rsb	r2, r2, #8
 800a4e4:	0092      	lsls	r2, r2, #2
 800a4e6:	b570      	push	{r4, r5, r6, lr}
 800a4e8:	f1c2 0620 	rsb	r6, r2, #32
 800a4ec:	6843      	ldr	r3, [r0, #4]
 800a4ee:	6804      	ldr	r4, [r0, #0]
 800a4f0:	fa03 f506 	lsl.w	r5, r3, r6
 800a4f4:	432c      	orrs	r4, r5
 800a4f6:	40d3      	lsrs	r3, r2
 800a4f8:	6004      	str	r4, [r0, #0]
 800a4fa:	f840 3f04 	str.w	r3, [r0, #4]!
 800a4fe:	4288      	cmp	r0, r1
 800a500:	d3f4      	bcc.n	800a4ec <L_shift+0xc>
 800a502:	bd70      	pop	{r4, r5, r6, pc}

0800a504 <__match>:
 800a504:	b530      	push	{r4, r5, lr}
 800a506:	6803      	ldr	r3, [r0, #0]
 800a508:	3301      	adds	r3, #1
 800a50a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a50e:	b914      	cbnz	r4, 800a516 <__match+0x12>
 800a510:	6003      	str	r3, [r0, #0]
 800a512:	2001      	movs	r0, #1
 800a514:	bd30      	pop	{r4, r5, pc}
 800a516:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a51a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a51e:	2d19      	cmp	r5, #25
 800a520:	bf98      	it	ls
 800a522:	3220      	addls	r2, #32
 800a524:	42a2      	cmp	r2, r4
 800a526:	d0f0      	beq.n	800a50a <__match+0x6>
 800a528:	2000      	movs	r0, #0
 800a52a:	e7f3      	b.n	800a514 <__match+0x10>

0800a52c <__hexnan>:
 800a52c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a530:	680b      	ldr	r3, [r1, #0]
 800a532:	115e      	asrs	r6, r3, #5
 800a534:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a538:	f013 031f 	ands.w	r3, r3, #31
 800a53c:	b087      	sub	sp, #28
 800a53e:	bf18      	it	ne
 800a540:	3604      	addne	r6, #4
 800a542:	2500      	movs	r5, #0
 800a544:	1f37      	subs	r7, r6, #4
 800a546:	4690      	mov	r8, r2
 800a548:	6802      	ldr	r2, [r0, #0]
 800a54a:	9301      	str	r3, [sp, #4]
 800a54c:	4682      	mov	sl, r0
 800a54e:	f846 5c04 	str.w	r5, [r6, #-4]
 800a552:	46b9      	mov	r9, r7
 800a554:	463c      	mov	r4, r7
 800a556:	9502      	str	r5, [sp, #8]
 800a558:	46ab      	mov	fp, r5
 800a55a:	7851      	ldrb	r1, [r2, #1]
 800a55c:	1c53      	adds	r3, r2, #1
 800a55e:	9303      	str	r3, [sp, #12]
 800a560:	b341      	cbz	r1, 800a5b4 <__hexnan+0x88>
 800a562:	4608      	mov	r0, r1
 800a564:	9205      	str	r2, [sp, #20]
 800a566:	9104      	str	r1, [sp, #16]
 800a568:	f7ff fd5e 	bl	800a028 <__hexdig_fun>
 800a56c:	2800      	cmp	r0, #0
 800a56e:	d14f      	bne.n	800a610 <__hexnan+0xe4>
 800a570:	9904      	ldr	r1, [sp, #16]
 800a572:	9a05      	ldr	r2, [sp, #20]
 800a574:	2920      	cmp	r1, #32
 800a576:	d818      	bhi.n	800a5aa <__hexnan+0x7e>
 800a578:	9b02      	ldr	r3, [sp, #8]
 800a57a:	459b      	cmp	fp, r3
 800a57c:	dd13      	ble.n	800a5a6 <__hexnan+0x7a>
 800a57e:	454c      	cmp	r4, r9
 800a580:	d206      	bcs.n	800a590 <__hexnan+0x64>
 800a582:	2d07      	cmp	r5, #7
 800a584:	dc04      	bgt.n	800a590 <__hexnan+0x64>
 800a586:	462a      	mov	r2, r5
 800a588:	4649      	mov	r1, r9
 800a58a:	4620      	mov	r0, r4
 800a58c:	f7ff ffa8 	bl	800a4e0 <L_shift>
 800a590:	4544      	cmp	r4, r8
 800a592:	d950      	bls.n	800a636 <__hexnan+0x10a>
 800a594:	2300      	movs	r3, #0
 800a596:	f1a4 0904 	sub.w	r9, r4, #4
 800a59a:	f844 3c04 	str.w	r3, [r4, #-4]
 800a59e:	f8cd b008 	str.w	fp, [sp, #8]
 800a5a2:	464c      	mov	r4, r9
 800a5a4:	461d      	mov	r5, r3
 800a5a6:	9a03      	ldr	r2, [sp, #12]
 800a5a8:	e7d7      	b.n	800a55a <__hexnan+0x2e>
 800a5aa:	2929      	cmp	r1, #41	; 0x29
 800a5ac:	d156      	bne.n	800a65c <__hexnan+0x130>
 800a5ae:	3202      	adds	r2, #2
 800a5b0:	f8ca 2000 	str.w	r2, [sl]
 800a5b4:	f1bb 0f00 	cmp.w	fp, #0
 800a5b8:	d050      	beq.n	800a65c <__hexnan+0x130>
 800a5ba:	454c      	cmp	r4, r9
 800a5bc:	d206      	bcs.n	800a5cc <__hexnan+0xa0>
 800a5be:	2d07      	cmp	r5, #7
 800a5c0:	dc04      	bgt.n	800a5cc <__hexnan+0xa0>
 800a5c2:	462a      	mov	r2, r5
 800a5c4:	4649      	mov	r1, r9
 800a5c6:	4620      	mov	r0, r4
 800a5c8:	f7ff ff8a 	bl	800a4e0 <L_shift>
 800a5cc:	4544      	cmp	r4, r8
 800a5ce:	d934      	bls.n	800a63a <__hexnan+0x10e>
 800a5d0:	f1a8 0204 	sub.w	r2, r8, #4
 800a5d4:	4623      	mov	r3, r4
 800a5d6:	f853 1b04 	ldr.w	r1, [r3], #4
 800a5da:	f842 1f04 	str.w	r1, [r2, #4]!
 800a5de:	429f      	cmp	r7, r3
 800a5e0:	d2f9      	bcs.n	800a5d6 <__hexnan+0xaa>
 800a5e2:	1b3b      	subs	r3, r7, r4
 800a5e4:	f023 0303 	bic.w	r3, r3, #3
 800a5e8:	3304      	adds	r3, #4
 800a5ea:	3401      	adds	r4, #1
 800a5ec:	3e03      	subs	r6, #3
 800a5ee:	42b4      	cmp	r4, r6
 800a5f0:	bf88      	it	hi
 800a5f2:	2304      	movhi	r3, #4
 800a5f4:	4443      	add	r3, r8
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	f843 2b04 	str.w	r2, [r3], #4
 800a5fc:	429f      	cmp	r7, r3
 800a5fe:	d2fb      	bcs.n	800a5f8 <__hexnan+0xcc>
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	b91b      	cbnz	r3, 800a60c <__hexnan+0xe0>
 800a604:	4547      	cmp	r7, r8
 800a606:	d127      	bne.n	800a658 <__hexnan+0x12c>
 800a608:	2301      	movs	r3, #1
 800a60a:	603b      	str	r3, [r7, #0]
 800a60c:	2005      	movs	r0, #5
 800a60e:	e026      	b.n	800a65e <__hexnan+0x132>
 800a610:	3501      	adds	r5, #1
 800a612:	2d08      	cmp	r5, #8
 800a614:	f10b 0b01 	add.w	fp, fp, #1
 800a618:	dd06      	ble.n	800a628 <__hexnan+0xfc>
 800a61a:	4544      	cmp	r4, r8
 800a61c:	d9c3      	bls.n	800a5a6 <__hexnan+0x7a>
 800a61e:	2300      	movs	r3, #0
 800a620:	f844 3c04 	str.w	r3, [r4, #-4]
 800a624:	2501      	movs	r5, #1
 800a626:	3c04      	subs	r4, #4
 800a628:	6822      	ldr	r2, [r4, #0]
 800a62a:	f000 000f 	and.w	r0, r0, #15
 800a62e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a632:	6022      	str	r2, [r4, #0]
 800a634:	e7b7      	b.n	800a5a6 <__hexnan+0x7a>
 800a636:	2508      	movs	r5, #8
 800a638:	e7b5      	b.n	800a5a6 <__hexnan+0x7a>
 800a63a:	9b01      	ldr	r3, [sp, #4]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d0df      	beq.n	800a600 <__hexnan+0xd4>
 800a640:	f04f 32ff 	mov.w	r2, #4294967295
 800a644:	f1c3 0320 	rsb	r3, r3, #32
 800a648:	fa22 f303 	lsr.w	r3, r2, r3
 800a64c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a650:	401a      	ands	r2, r3
 800a652:	f846 2c04 	str.w	r2, [r6, #-4]
 800a656:	e7d3      	b.n	800a600 <__hexnan+0xd4>
 800a658:	3f04      	subs	r7, #4
 800a65a:	e7d1      	b.n	800a600 <__hexnan+0xd4>
 800a65c:	2004      	movs	r0, #4
 800a65e:	b007      	add	sp, #28
 800a660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a664 <_localeconv_r>:
 800a664:	4800      	ldr	r0, [pc, #0]	; (800a668 <_localeconv_r+0x4>)
 800a666:	4770      	bx	lr
 800a668:	20000164 	.word	0x20000164

0800a66c <_lseek_r>:
 800a66c:	b538      	push	{r3, r4, r5, lr}
 800a66e:	4d07      	ldr	r5, [pc, #28]	; (800a68c <_lseek_r+0x20>)
 800a670:	4604      	mov	r4, r0
 800a672:	4608      	mov	r0, r1
 800a674:	4611      	mov	r1, r2
 800a676:	2200      	movs	r2, #0
 800a678:	602a      	str	r2, [r5, #0]
 800a67a:	461a      	mov	r2, r3
 800a67c:	f7f8 fa02 	bl	8002a84 <_lseek>
 800a680:	1c43      	adds	r3, r0, #1
 800a682:	d102      	bne.n	800a68a <_lseek_r+0x1e>
 800a684:	682b      	ldr	r3, [r5, #0]
 800a686:	b103      	cbz	r3, 800a68a <_lseek_r+0x1e>
 800a688:	6023      	str	r3, [r4, #0]
 800a68a:	bd38      	pop	{r3, r4, r5, pc}
 800a68c:	20000508 	.word	0x20000508

0800a690 <malloc>:
 800a690:	4b02      	ldr	r3, [pc, #8]	; (800a69c <malloc+0xc>)
 800a692:	4601      	mov	r1, r0
 800a694:	6818      	ldr	r0, [r3, #0]
 800a696:	f000 bd67 	b.w	800b168 <_malloc_r>
 800a69a:	bf00      	nop
 800a69c:	2000000c 	.word	0x2000000c

0800a6a0 <__ascii_mbtowc>:
 800a6a0:	b082      	sub	sp, #8
 800a6a2:	b901      	cbnz	r1, 800a6a6 <__ascii_mbtowc+0x6>
 800a6a4:	a901      	add	r1, sp, #4
 800a6a6:	b142      	cbz	r2, 800a6ba <__ascii_mbtowc+0x1a>
 800a6a8:	b14b      	cbz	r3, 800a6be <__ascii_mbtowc+0x1e>
 800a6aa:	7813      	ldrb	r3, [r2, #0]
 800a6ac:	600b      	str	r3, [r1, #0]
 800a6ae:	7812      	ldrb	r2, [r2, #0]
 800a6b0:	1e10      	subs	r0, r2, #0
 800a6b2:	bf18      	it	ne
 800a6b4:	2001      	movne	r0, #1
 800a6b6:	b002      	add	sp, #8
 800a6b8:	4770      	bx	lr
 800a6ba:	4610      	mov	r0, r2
 800a6bc:	e7fb      	b.n	800a6b6 <__ascii_mbtowc+0x16>
 800a6be:	f06f 0001 	mvn.w	r0, #1
 800a6c2:	e7f8      	b.n	800a6b6 <__ascii_mbtowc+0x16>

0800a6c4 <memcpy>:
 800a6c4:	440a      	add	r2, r1
 800a6c6:	4291      	cmp	r1, r2
 800a6c8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a6cc:	d100      	bne.n	800a6d0 <memcpy+0xc>
 800a6ce:	4770      	bx	lr
 800a6d0:	b510      	push	{r4, lr}
 800a6d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a6da:	4291      	cmp	r1, r2
 800a6dc:	d1f9      	bne.n	800a6d2 <memcpy+0xe>
 800a6de:	bd10      	pop	{r4, pc}

0800a6e0 <_Balloc>:
 800a6e0:	b570      	push	{r4, r5, r6, lr}
 800a6e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a6e4:	4604      	mov	r4, r0
 800a6e6:	460d      	mov	r5, r1
 800a6e8:	b976      	cbnz	r6, 800a708 <_Balloc+0x28>
 800a6ea:	2010      	movs	r0, #16
 800a6ec:	f7ff ffd0 	bl	800a690 <malloc>
 800a6f0:	4602      	mov	r2, r0
 800a6f2:	6260      	str	r0, [r4, #36]	; 0x24
 800a6f4:	b920      	cbnz	r0, 800a700 <_Balloc+0x20>
 800a6f6:	4b18      	ldr	r3, [pc, #96]	; (800a758 <_Balloc+0x78>)
 800a6f8:	4818      	ldr	r0, [pc, #96]	; (800a75c <_Balloc+0x7c>)
 800a6fa:	2166      	movs	r1, #102	; 0x66
 800a6fc:	f001 fb48 	bl	800bd90 <__assert_func>
 800a700:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a704:	6006      	str	r6, [r0, #0]
 800a706:	60c6      	str	r6, [r0, #12]
 800a708:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a70a:	68f3      	ldr	r3, [r6, #12]
 800a70c:	b183      	cbz	r3, 800a730 <_Balloc+0x50>
 800a70e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a710:	68db      	ldr	r3, [r3, #12]
 800a712:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a716:	b9b8      	cbnz	r0, 800a748 <_Balloc+0x68>
 800a718:	2101      	movs	r1, #1
 800a71a:	fa01 f605 	lsl.w	r6, r1, r5
 800a71e:	1d72      	adds	r2, r6, #5
 800a720:	0092      	lsls	r2, r2, #2
 800a722:	4620      	mov	r0, r4
 800a724:	f000 fc9d 	bl	800b062 <_calloc_r>
 800a728:	b160      	cbz	r0, 800a744 <_Balloc+0x64>
 800a72a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a72e:	e00e      	b.n	800a74e <_Balloc+0x6e>
 800a730:	2221      	movs	r2, #33	; 0x21
 800a732:	2104      	movs	r1, #4
 800a734:	4620      	mov	r0, r4
 800a736:	f000 fc94 	bl	800b062 <_calloc_r>
 800a73a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a73c:	60f0      	str	r0, [r6, #12]
 800a73e:	68db      	ldr	r3, [r3, #12]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d1e4      	bne.n	800a70e <_Balloc+0x2e>
 800a744:	2000      	movs	r0, #0
 800a746:	bd70      	pop	{r4, r5, r6, pc}
 800a748:	6802      	ldr	r2, [r0, #0]
 800a74a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a74e:	2300      	movs	r3, #0
 800a750:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a754:	e7f7      	b.n	800a746 <_Balloc+0x66>
 800a756:	bf00      	nop
 800a758:	0800d68e 	.word	0x0800d68e
 800a75c:	0800d78c 	.word	0x0800d78c

0800a760 <_Bfree>:
 800a760:	b570      	push	{r4, r5, r6, lr}
 800a762:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a764:	4605      	mov	r5, r0
 800a766:	460c      	mov	r4, r1
 800a768:	b976      	cbnz	r6, 800a788 <_Bfree+0x28>
 800a76a:	2010      	movs	r0, #16
 800a76c:	f7ff ff90 	bl	800a690 <malloc>
 800a770:	4602      	mov	r2, r0
 800a772:	6268      	str	r0, [r5, #36]	; 0x24
 800a774:	b920      	cbnz	r0, 800a780 <_Bfree+0x20>
 800a776:	4b09      	ldr	r3, [pc, #36]	; (800a79c <_Bfree+0x3c>)
 800a778:	4809      	ldr	r0, [pc, #36]	; (800a7a0 <_Bfree+0x40>)
 800a77a:	218a      	movs	r1, #138	; 0x8a
 800a77c:	f001 fb08 	bl	800bd90 <__assert_func>
 800a780:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a784:	6006      	str	r6, [r0, #0]
 800a786:	60c6      	str	r6, [r0, #12]
 800a788:	b13c      	cbz	r4, 800a79a <_Bfree+0x3a>
 800a78a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a78c:	6862      	ldr	r2, [r4, #4]
 800a78e:	68db      	ldr	r3, [r3, #12]
 800a790:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a794:	6021      	str	r1, [r4, #0]
 800a796:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a79a:	bd70      	pop	{r4, r5, r6, pc}
 800a79c:	0800d68e 	.word	0x0800d68e
 800a7a0:	0800d78c 	.word	0x0800d78c

0800a7a4 <__multadd>:
 800a7a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7a8:	690d      	ldr	r5, [r1, #16]
 800a7aa:	4607      	mov	r7, r0
 800a7ac:	460c      	mov	r4, r1
 800a7ae:	461e      	mov	r6, r3
 800a7b0:	f101 0c14 	add.w	ip, r1, #20
 800a7b4:	2000      	movs	r0, #0
 800a7b6:	f8dc 3000 	ldr.w	r3, [ip]
 800a7ba:	b299      	uxth	r1, r3
 800a7bc:	fb02 6101 	mla	r1, r2, r1, r6
 800a7c0:	0c1e      	lsrs	r6, r3, #16
 800a7c2:	0c0b      	lsrs	r3, r1, #16
 800a7c4:	fb02 3306 	mla	r3, r2, r6, r3
 800a7c8:	b289      	uxth	r1, r1
 800a7ca:	3001      	adds	r0, #1
 800a7cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a7d0:	4285      	cmp	r5, r0
 800a7d2:	f84c 1b04 	str.w	r1, [ip], #4
 800a7d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a7da:	dcec      	bgt.n	800a7b6 <__multadd+0x12>
 800a7dc:	b30e      	cbz	r6, 800a822 <__multadd+0x7e>
 800a7de:	68a3      	ldr	r3, [r4, #8]
 800a7e0:	42ab      	cmp	r3, r5
 800a7e2:	dc19      	bgt.n	800a818 <__multadd+0x74>
 800a7e4:	6861      	ldr	r1, [r4, #4]
 800a7e6:	4638      	mov	r0, r7
 800a7e8:	3101      	adds	r1, #1
 800a7ea:	f7ff ff79 	bl	800a6e0 <_Balloc>
 800a7ee:	4680      	mov	r8, r0
 800a7f0:	b928      	cbnz	r0, 800a7fe <__multadd+0x5a>
 800a7f2:	4602      	mov	r2, r0
 800a7f4:	4b0c      	ldr	r3, [pc, #48]	; (800a828 <__multadd+0x84>)
 800a7f6:	480d      	ldr	r0, [pc, #52]	; (800a82c <__multadd+0x88>)
 800a7f8:	21b5      	movs	r1, #181	; 0xb5
 800a7fa:	f001 fac9 	bl	800bd90 <__assert_func>
 800a7fe:	6922      	ldr	r2, [r4, #16]
 800a800:	3202      	adds	r2, #2
 800a802:	f104 010c 	add.w	r1, r4, #12
 800a806:	0092      	lsls	r2, r2, #2
 800a808:	300c      	adds	r0, #12
 800a80a:	f7ff ff5b 	bl	800a6c4 <memcpy>
 800a80e:	4621      	mov	r1, r4
 800a810:	4638      	mov	r0, r7
 800a812:	f7ff ffa5 	bl	800a760 <_Bfree>
 800a816:	4644      	mov	r4, r8
 800a818:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a81c:	3501      	adds	r5, #1
 800a81e:	615e      	str	r6, [r3, #20]
 800a820:	6125      	str	r5, [r4, #16]
 800a822:	4620      	mov	r0, r4
 800a824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a828:	0800d700 	.word	0x0800d700
 800a82c:	0800d78c 	.word	0x0800d78c

0800a830 <__s2b>:
 800a830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a834:	460c      	mov	r4, r1
 800a836:	4615      	mov	r5, r2
 800a838:	461f      	mov	r7, r3
 800a83a:	2209      	movs	r2, #9
 800a83c:	3308      	adds	r3, #8
 800a83e:	4606      	mov	r6, r0
 800a840:	fb93 f3f2 	sdiv	r3, r3, r2
 800a844:	2100      	movs	r1, #0
 800a846:	2201      	movs	r2, #1
 800a848:	429a      	cmp	r2, r3
 800a84a:	db09      	blt.n	800a860 <__s2b+0x30>
 800a84c:	4630      	mov	r0, r6
 800a84e:	f7ff ff47 	bl	800a6e0 <_Balloc>
 800a852:	b940      	cbnz	r0, 800a866 <__s2b+0x36>
 800a854:	4602      	mov	r2, r0
 800a856:	4b19      	ldr	r3, [pc, #100]	; (800a8bc <__s2b+0x8c>)
 800a858:	4819      	ldr	r0, [pc, #100]	; (800a8c0 <__s2b+0x90>)
 800a85a:	21ce      	movs	r1, #206	; 0xce
 800a85c:	f001 fa98 	bl	800bd90 <__assert_func>
 800a860:	0052      	lsls	r2, r2, #1
 800a862:	3101      	adds	r1, #1
 800a864:	e7f0      	b.n	800a848 <__s2b+0x18>
 800a866:	9b08      	ldr	r3, [sp, #32]
 800a868:	6143      	str	r3, [r0, #20]
 800a86a:	2d09      	cmp	r5, #9
 800a86c:	f04f 0301 	mov.w	r3, #1
 800a870:	6103      	str	r3, [r0, #16]
 800a872:	dd16      	ble.n	800a8a2 <__s2b+0x72>
 800a874:	f104 0909 	add.w	r9, r4, #9
 800a878:	46c8      	mov	r8, r9
 800a87a:	442c      	add	r4, r5
 800a87c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a880:	4601      	mov	r1, r0
 800a882:	3b30      	subs	r3, #48	; 0x30
 800a884:	220a      	movs	r2, #10
 800a886:	4630      	mov	r0, r6
 800a888:	f7ff ff8c 	bl	800a7a4 <__multadd>
 800a88c:	45a0      	cmp	r8, r4
 800a88e:	d1f5      	bne.n	800a87c <__s2b+0x4c>
 800a890:	f1a5 0408 	sub.w	r4, r5, #8
 800a894:	444c      	add	r4, r9
 800a896:	1b2d      	subs	r5, r5, r4
 800a898:	1963      	adds	r3, r4, r5
 800a89a:	42bb      	cmp	r3, r7
 800a89c:	db04      	blt.n	800a8a8 <__s2b+0x78>
 800a89e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8a2:	340a      	adds	r4, #10
 800a8a4:	2509      	movs	r5, #9
 800a8a6:	e7f6      	b.n	800a896 <__s2b+0x66>
 800a8a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a8ac:	4601      	mov	r1, r0
 800a8ae:	3b30      	subs	r3, #48	; 0x30
 800a8b0:	220a      	movs	r2, #10
 800a8b2:	4630      	mov	r0, r6
 800a8b4:	f7ff ff76 	bl	800a7a4 <__multadd>
 800a8b8:	e7ee      	b.n	800a898 <__s2b+0x68>
 800a8ba:	bf00      	nop
 800a8bc:	0800d700 	.word	0x0800d700
 800a8c0:	0800d78c 	.word	0x0800d78c

0800a8c4 <__hi0bits>:
 800a8c4:	0c03      	lsrs	r3, r0, #16
 800a8c6:	041b      	lsls	r3, r3, #16
 800a8c8:	b9d3      	cbnz	r3, 800a900 <__hi0bits+0x3c>
 800a8ca:	0400      	lsls	r0, r0, #16
 800a8cc:	2310      	movs	r3, #16
 800a8ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a8d2:	bf04      	itt	eq
 800a8d4:	0200      	lsleq	r0, r0, #8
 800a8d6:	3308      	addeq	r3, #8
 800a8d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a8dc:	bf04      	itt	eq
 800a8de:	0100      	lsleq	r0, r0, #4
 800a8e0:	3304      	addeq	r3, #4
 800a8e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a8e6:	bf04      	itt	eq
 800a8e8:	0080      	lsleq	r0, r0, #2
 800a8ea:	3302      	addeq	r3, #2
 800a8ec:	2800      	cmp	r0, #0
 800a8ee:	db05      	blt.n	800a8fc <__hi0bits+0x38>
 800a8f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a8f4:	f103 0301 	add.w	r3, r3, #1
 800a8f8:	bf08      	it	eq
 800a8fa:	2320      	moveq	r3, #32
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	4770      	bx	lr
 800a900:	2300      	movs	r3, #0
 800a902:	e7e4      	b.n	800a8ce <__hi0bits+0xa>

0800a904 <__lo0bits>:
 800a904:	6803      	ldr	r3, [r0, #0]
 800a906:	f013 0207 	ands.w	r2, r3, #7
 800a90a:	4601      	mov	r1, r0
 800a90c:	d00b      	beq.n	800a926 <__lo0bits+0x22>
 800a90e:	07da      	lsls	r2, r3, #31
 800a910:	d423      	bmi.n	800a95a <__lo0bits+0x56>
 800a912:	0798      	lsls	r0, r3, #30
 800a914:	bf49      	itett	mi
 800a916:	085b      	lsrmi	r3, r3, #1
 800a918:	089b      	lsrpl	r3, r3, #2
 800a91a:	2001      	movmi	r0, #1
 800a91c:	600b      	strmi	r3, [r1, #0]
 800a91e:	bf5c      	itt	pl
 800a920:	600b      	strpl	r3, [r1, #0]
 800a922:	2002      	movpl	r0, #2
 800a924:	4770      	bx	lr
 800a926:	b298      	uxth	r0, r3
 800a928:	b9a8      	cbnz	r0, 800a956 <__lo0bits+0x52>
 800a92a:	0c1b      	lsrs	r3, r3, #16
 800a92c:	2010      	movs	r0, #16
 800a92e:	b2da      	uxtb	r2, r3
 800a930:	b90a      	cbnz	r2, 800a936 <__lo0bits+0x32>
 800a932:	3008      	adds	r0, #8
 800a934:	0a1b      	lsrs	r3, r3, #8
 800a936:	071a      	lsls	r2, r3, #28
 800a938:	bf04      	itt	eq
 800a93a:	091b      	lsreq	r3, r3, #4
 800a93c:	3004      	addeq	r0, #4
 800a93e:	079a      	lsls	r2, r3, #30
 800a940:	bf04      	itt	eq
 800a942:	089b      	lsreq	r3, r3, #2
 800a944:	3002      	addeq	r0, #2
 800a946:	07da      	lsls	r2, r3, #31
 800a948:	d403      	bmi.n	800a952 <__lo0bits+0x4e>
 800a94a:	085b      	lsrs	r3, r3, #1
 800a94c:	f100 0001 	add.w	r0, r0, #1
 800a950:	d005      	beq.n	800a95e <__lo0bits+0x5a>
 800a952:	600b      	str	r3, [r1, #0]
 800a954:	4770      	bx	lr
 800a956:	4610      	mov	r0, r2
 800a958:	e7e9      	b.n	800a92e <__lo0bits+0x2a>
 800a95a:	2000      	movs	r0, #0
 800a95c:	4770      	bx	lr
 800a95e:	2020      	movs	r0, #32
 800a960:	4770      	bx	lr
	...

0800a964 <__i2b>:
 800a964:	b510      	push	{r4, lr}
 800a966:	460c      	mov	r4, r1
 800a968:	2101      	movs	r1, #1
 800a96a:	f7ff feb9 	bl	800a6e0 <_Balloc>
 800a96e:	4602      	mov	r2, r0
 800a970:	b928      	cbnz	r0, 800a97e <__i2b+0x1a>
 800a972:	4b05      	ldr	r3, [pc, #20]	; (800a988 <__i2b+0x24>)
 800a974:	4805      	ldr	r0, [pc, #20]	; (800a98c <__i2b+0x28>)
 800a976:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a97a:	f001 fa09 	bl	800bd90 <__assert_func>
 800a97e:	2301      	movs	r3, #1
 800a980:	6144      	str	r4, [r0, #20]
 800a982:	6103      	str	r3, [r0, #16]
 800a984:	bd10      	pop	{r4, pc}
 800a986:	bf00      	nop
 800a988:	0800d700 	.word	0x0800d700
 800a98c:	0800d78c 	.word	0x0800d78c

0800a990 <__multiply>:
 800a990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a994:	4691      	mov	r9, r2
 800a996:	690a      	ldr	r2, [r1, #16]
 800a998:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a99c:	429a      	cmp	r2, r3
 800a99e:	bfb8      	it	lt
 800a9a0:	460b      	movlt	r3, r1
 800a9a2:	460c      	mov	r4, r1
 800a9a4:	bfbc      	itt	lt
 800a9a6:	464c      	movlt	r4, r9
 800a9a8:	4699      	movlt	r9, r3
 800a9aa:	6927      	ldr	r7, [r4, #16]
 800a9ac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a9b0:	68a3      	ldr	r3, [r4, #8]
 800a9b2:	6861      	ldr	r1, [r4, #4]
 800a9b4:	eb07 060a 	add.w	r6, r7, sl
 800a9b8:	42b3      	cmp	r3, r6
 800a9ba:	b085      	sub	sp, #20
 800a9bc:	bfb8      	it	lt
 800a9be:	3101      	addlt	r1, #1
 800a9c0:	f7ff fe8e 	bl	800a6e0 <_Balloc>
 800a9c4:	b930      	cbnz	r0, 800a9d4 <__multiply+0x44>
 800a9c6:	4602      	mov	r2, r0
 800a9c8:	4b44      	ldr	r3, [pc, #272]	; (800aadc <__multiply+0x14c>)
 800a9ca:	4845      	ldr	r0, [pc, #276]	; (800aae0 <__multiply+0x150>)
 800a9cc:	f240 115d 	movw	r1, #349	; 0x15d
 800a9d0:	f001 f9de 	bl	800bd90 <__assert_func>
 800a9d4:	f100 0514 	add.w	r5, r0, #20
 800a9d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a9dc:	462b      	mov	r3, r5
 800a9de:	2200      	movs	r2, #0
 800a9e0:	4543      	cmp	r3, r8
 800a9e2:	d321      	bcc.n	800aa28 <__multiply+0x98>
 800a9e4:	f104 0314 	add.w	r3, r4, #20
 800a9e8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a9ec:	f109 0314 	add.w	r3, r9, #20
 800a9f0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a9f4:	9202      	str	r2, [sp, #8]
 800a9f6:	1b3a      	subs	r2, r7, r4
 800a9f8:	3a15      	subs	r2, #21
 800a9fa:	f022 0203 	bic.w	r2, r2, #3
 800a9fe:	3204      	adds	r2, #4
 800aa00:	f104 0115 	add.w	r1, r4, #21
 800aa04:	428f      	cmp	r7, r1
 800aa06:	bf38      	it	cc
 800aa08:	2204      	movcc	r2, #4
 800aa0a:	9201      	str	r2, [sp, #4]
 800aa0c:	9a02      	ldr	r2, [sp, #8]
 800aa0e:	9303      	str	r3, [sp, #12]
 800aa10:	429a      	cmp	r2, r3
 800aa12:	d80c      	bhi.n	800aa2e <__multiply+0x9e>
 800aa14:	2e00      	cmp	r6, #0
 800aa16:	dd03      	ble.n	800aa20 <__multiply+0x90>
 800aa18:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d05a      	beq.n	800aad6 <__multiply+0x146>
 800aa20:	6106      	str	r6, [r0, #16]
 800aa22:	b005      	add	sp, #20
 800aa24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa28:	f843 2b04 	str.w	r2, [r3], #4
 800aa2c:	e7d8      	b.n	800a9e0 <__multiply+0x50>
 800aa2e:	f8b3 a000 	ldrh.w	sl, [r3]
 800aa32:	f1ba 0f00 	cmp.w	sl, #0
 800aa36:	d024      	beq.n	800aa82 <__multiply+0xf2>
 800aa38:	f104 0e14 	add.w	lr, r4, #20
 800aa3c:	46a9      	mov	r9, r5
 800aa3e:	f04f 0c00 	mov.w	ip, #0
 800aa42:	f85e 2b04 	ldr.w	r2, [lr], #4
 800aa46:	f8d9 1000 	ldr.w	r1, [r9]
 800aa4a:	fa1f fb82 	uxth.w	fp, r2
 800aa4e:	b289      	uxth	r1, r1
 800aa50:	fb0a 110b 	mla	r1, sl, fp, r1
 800aa54:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800aa58:	f8d9 2000 	ldr.w	r2, [r9]
 800aa5c:	4461      	add	r1, ip
 800aa5e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aa62:	fb0a c20b 	mla	r2, sl, fp, ip
 800aa66:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800aa6a:	b289      	uxth	r1, r1
 800aa6c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800aa70:	4577      	cmp	r7, lr
 800aa72:	f849 1b04 	str.w	r1, [r9], #4
 800aa76:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aa7a:	d8e2      	bhi.n	800aa42 <__multiply+0xb2>
 800aa7c:	9a01      	ldr	r2, [sp, #4]
 800aa7e:	f845 c002 	str.w	ip, [r5, r2]
 800aa82:	9a03      	ldr	r2, [sp, #12]
 800aa84:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aa88:	3304      	adds	r3, #4
 800aa8a:	f1b9 0f00 	cmp.w	r9, #0
 800aa8e:	d020      	beq.n	800aad2 <__multiply+0x142>
 800aa90:	6829      	ldr	r1, [r5, #0]
 800aa92:	f104 0c14 	add.w	ip, r4, #20
 800aa96:	46ae      	mov	lr, r5
 800aa98:	f04f 0a00 	mov.w	sl, #0
 800aa9c:	f8bc b000 	ldrh.w	fp, [ip]
 800aaa0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800aaa4:	fb09 220b 	mla	r2, r9, fp, r2
 800aaa8:	4492      	add	sl, r2
 800aaaa:	b289      	uxth	r1, r1
 800aaac:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800aab0:	f84e 1b04 	str.w	r1, [lr], #4
 800aab4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800aab8:	f8be 1000 	ldrh.w	r1, [lr]
 800aabc:	0c12      	lsrs	r2, r2, #16
 800aabe:	fb09 1102 	mla	r1, r9, r2, r1
 800aac2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800aac6:	4567      	cmp	r7, ip
 800aac8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800aacc:	d8e6      	bhi.n	800aa9c <__multiply+0x10c>
 800aace:	9a01      	ldr	r2, [sp, #4]
 800aad0:	50a9      	str	r1, [r5, r2]
 800aad2:	3504      	adds	r5, #4
 800aad4:	e79a      	b.n	800aa0c <__multiply+0x7c>
 800aad6:	3e01      	subs	r6, #1
 800aad8:	e79c      	b.n	800aa14 <__multiply+0x84>
 800aada:	bf00      	nop
 800aadc:	0800d700 	.word	0x0800d700
 800aae0:	0800d78c 	.word	0x0800d78c

0800aae4 <__pow5mult>:
 800aae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aae8:	4615      	mov	r5, r2
 800aaea:	f012 0203 	ands.w	r2, r2, #3
 800aaee:	4606      	mov	r6, r0
 800aaf0:	460f      	mov	r7, r1
 800aaf2:	d007      	beq.n	800ab04 <__pow5mult+0x20>
 800aaf4:	4c25      	ldr	r4, [pc, #148]	; (800ab8c <__pow5mult+0xa8>)
 800aaf6:	3a01      	subs	r2, #1
 800aaf8:	2300      	movs	r3, #0
 800aafa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aafe:	f7ff fe51 	bl	800a7a4 <__multadd>
 800ab02:	4607      	mov	r7, r0
 800ab04:	10ad      	asrs	r5, r5, #2
 800ab06:	d03d      	beq.n	800ab84 <__pow5mult+0xa0>
 800ab08:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ab0a:	b97c      	cbnz	r4, 800ab2c <__pow5mult+0x48>
 800ab0c:	2010      	movs	r0, #16
 800ab0e:	f7ff fdbf 	bl	800a690 <malloc>
 800ab12:	4602      	mov	r2, r0
 800ab14:	6270      	str	r0, [r6, #36]	; 0x24
 800ab16:	b928      	cbnz	r0, 800ab24 <__pow5mult+0x40>
 800ab18:	4b1d      	ldr	r3, [pc, #116]	; (800ab90 <__pow5mult+0xac>)
 800ab1a:	481e      	ldr	r0, [pc, #120]	; (800ab94 <__pow5mult+0xb0>)
 800ab1c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ab20:	f001 f936 	bl	800bd90 <__assert_func>
 800ab24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ab28:	6004      	str	r4, [r0, #0]
 800ab2a:	60c4      	str	r4, [r0, #12]
 800ab2c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ab30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ab34:	b94c      	cbnz	r4, 800ab4a <__pow5mult+0x66>
 800ab36:	f240 2171 	movw	r1, #625	; 0x271
 800ab3a:	4630      	mov	r0, r6
 800ab3c:	f7ff ff12 	bl	800a964 <__i2b>
 800ab40:	2300      	movs	r3, #0
 800ab42:	f8c8 0008 	str.w	r0, [r8, #8]
 800ab46:	4604      	mov	r4, r0
 800ab48:	6003      	str	r3, [r0, #0]
 800ab4a:	f04f 0900 	mov.w	r9, #0
 800ab4e:	07eb      	lsls	r3, r5, #31
 800ab50:	d50a      	bpl.n	800ab68 <__pow5mult+0x84>
 800ab52:	4639      	mov	r1, r7
 800ab54:	4622      	mov	r2, r4
 800ab56:	4630      	mov	r0, r6
 800ab58:	f7ff ff1a 	bl	800a990 <__multiply>
 800ab5c:	4639      	mov	r1, r7
 800ab5e:	4680      	mov	r8, r0
 800ab60:	4630      	mov	r0, r6
 800ab62:	f7ff fdfd 	bl	800a760 <_Bfree>
 800ab66:	4647      	mov	r7, r8
 800ab68:	106d      	asrs	r5, r5, #1
 800ab6a:	d00b      	beq.n	800ab84 <__pow5mult+0xa0>
 800ab6c:	6820      	ldr	r0, [r4, #0]
 800ab6e:	b938      	cbnz	r0, 800ab80 <__pow5mult+0x9c>
 800ab70:	4622      	mov	r2, r4
 800ab72:	4621      	mov	r1, r4
 800ab74:	4630      	mov	r0, r6
 800ab76:	f7ff ff0b 	bl	800a990 <__multiply>
 800ab7a:	6020      	str	r0, [r4, #0]
 800ab7c:	f8c0 9000 	str.w	r9, [r0]
 800ab80:	4604      	mov	r4, r0
 800ab82:	e7e4      	b.n	800ab4e <__pow5mult+0x6a>
 800ab84:	4638      	mov	r0, r7
 800ab86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab8a:	bf00      	nop
 800ab8c:	0800d8d8 	.word	0x0800d8d8
 800ab90:	0800d68e 	.word	0x0800d68e
 800ab94:	0800d78c 	.word	0x0800d78c

0800ab98 <__lshift>:
 800ab98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab9c:	460c      	mov	r4, r1
 800ab9e:	6849      	ldr	r1, [r1, #4]
 800aba0:	6923      	ldr	r3, [r4, #16]
 800aba2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aba6:	68a3      	ldr	r3, [r4, #8]
 800aba8:	4607      	mov	r7, r0
 800abaa:	4691      	mov	r9, r2
 800abac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800abb0:	f108 0601 	add.w	r6, r8, #1
 800abb4:	42b3      	cmp	r3, r6
 800abb6:	db0b      	blt.n	800abd0 <__lshift+0x38>
 800abb8:	4638      	mov	r0, r7
 800abba:	f7ff fd91 	bl	800a6e0 <_Balloc>
 800abbe:	4605      	mov	r5, r0
 800abc0:	b948      	cbnz	r0, 800abd6 <__lshift+0x3e>
 800abc2:	4602      	mov	r2, r0
 800abc4:	4b2a      	ldr	r3, [pc, #168]	; (800ac70 <__lshift+0xd8>)
 800abc6:	482b      	ldr	r0, [pc, #172]	; (800ac74 <__lshift+0xdc>)
 800abc8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800abcc:	f001 f8e0 	bl	800bd90 <__assert_func>
 800abd0:	3101      	adds	r1, #1
 800abd2:	005b      	lsls	r3, r3, #1
 800abd4:	e7ee      	b.n	800abb4 <__lshift+0x1c>
 800abd6:	2300      	movs	r3, #0
 800abd8:	f100 0114 	add.w	r1, r0, #20
 800abdc:	f100 0210 	add.w	r2, r0, #16
 800abe0:	4618      	mov	r0, r3
 800abe2:	4553      	cmp	r3, sl
 800abe4:	db37      	blt.n	800ac56 <__lshift+0xbe>
 800abe6:	6920      	ldr	r0, [r4, #16]
 800abe8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800abec:	f104 0314 	add.w	r3, r4, #20
 800abf0:	f019 091f 	ands.w	r9, r9, #31
 800abf4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800abf8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800abfc:	d02f      	beq.n	800ac5e <__lshift+0xc6>
 800abfe:	f1c9 0e20 	rsb	lr, r9, #32
 800ac02:	468a      	mov	sl, r1
 800ac04:	f04f 0c00 	mov.w	ip, #0
 800ac08:	681a      	ldr	r2, [r3, #0]
 800ac0a:	fa02 f209 	lsl.w	r2, r2, r9
 800ac0e:	ea42 020c 	orr.w	r2, r2, ip
 800ac12:	f84a 2b04 	str.w	r2, [sl], #4
 800ac16:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac1a:	4298      	cmp	r0, r3
 800ac1c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ac20:	d8f2      	bhi.n	800ac08 <__lshift+0x70>
 800ac22:	1b03      	subs	r3, r0, r4
 800ac24:	3b15      	subs	r3, #21
 800ac26:	f023 0303 	bic.w	r3, r3, #3
 800ac2a:	3304      	adds	r3, #4
 800ac2c:	f104 0215 	add.w	r2, r4, #21
 800ac30:	4290      	cmp	r0, r2
 800ac32:	bf38      	it	cc
 800ac34:	2304      	movcc	r3, #4
 800ac36:	f841 c003 	str.w	ip, [r1, r3]
 800ac3a:	f1bc 0f00 	cmp.w	ip, #0
 800ac3e:	d001      	beq.n	800ac44 <__lshift+0xac>
 800ac40:	f108 0602 	add.w	r6, r8, #2
 800ac44:	3e01      	subs	r6, #1
 800ac46:	4638      	mov	r0, r7
 800ac48:	612e      	str	r6, [r5, #16]
 800ac4a:	4621      	mov	r1, r4
 800ac4c:	f7ff fd88 	bl	800a760 <_Bfree>
 800ac50:	4628      	mov	r0, r5
 800ac52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac56:	f842 0f04 	str.w	r0, [r2, #4]!
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	e7c1      	b.n	800abe2 <__lshift+0x4a>
 800ac5e:	3904      	subs	r1, #4
 800ac60:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac64:	f841 2f04 	str.w	r2, [r1, #4]!
 800ac68:	4298      	cmp	r0, r3
 800ac6a:	d8f9      	bhi.n	800ac60 <__lshift+0xc8>
 800ac6c:	e7ea      	b.n	800ac44 <__lshift+0xac>
 800ac6e:	bf00      	nop
 800ac70:	0800d700 	.word	0x0800d700
 800ac74:	0800d78c 	.word	0x0800d78c

0800ac78 <__mcmp>:
 800ac78:	b530      	push	{r4, r5, lr}
 800ac7a:	6902      	ldr	r2, [r0, #16]
 800ac7c:	690c      	ldr	r4, [r1, #16]
 800ac7e:	1b12      	subs	r2, r2, r4
 800ac80:	d10e      	bne.n	800aca0 <__mcmp+0x28>
 800ac82:	f100 0314 	add.w	r3, r0, #20
 800ac86:	3114      	adds	r1, #20
 800ac88:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ac8c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ac90:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ac94:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ac98:	42a5      	cmp	r5, r4
 800ac9a:	d003      	beq.n	800aca4 <__mcmp+0x2c>
 800ac9c:	d305      	bcc.n	800acaa <__mcmp+0x32>
 800ac9e:	2201      	movs	r2, #1
 800aca0:	4610      	mov	r0, r2
 800aca2:	bd30      	pop	{r4, r5, pc}
 800aca4:	4283      	cmp	r3, r0
 800aca6:	d3f3      	bcc.n	800ac90 <__mcmp+0x18>
 800aca8:	e7fa      	b.n	800aca0 <__mcmp+0x28>
 800acaa:	f04f 32ff 	mov.w	r2, #4294967295
 800acae:	e7f7      	b.n	800aca0 <__mcmp+0x28>

0800acb0 <__mdiff>:
 800acb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acb4:	460c      	mov	r4, r1
 800acb6:	4606      	mov	r6, r0
 800acb8:	4611      	mov	r1, r2
 800acba:	4620      	mov	r0, r4
 800acbc:	4690      	mov	r8, r2
 800acbe:	f7ff ffdb 	bl	800ac78 <__mcmp>
 800acc2:	1e05      	subs	r5, r0, #0
 800acc4:	d110      	bne.n	800ace8 <__mdiff+0x38>
 800acc6:	4629      	mov	r1, r5
 800acc8:	4630      	mov	r0, r6
 800acca:	f7ff fd09 	bl	800a6e0 <_Balloc>
 800acce:	b930      	cbnz	r0, 800acde <__mdiff+0x2e>
 800acd0:	4b3a      	ldr	r3, [pc, #232]	; (800adbc <__mdiff+0x10c>)
 800acd2:	4602      	mov	r2, r0
 800acd4:	f240 2132 	movw	r1, #562	; 0x232
 800acd8:	4839      	ldr	r0, [pc, #228]	; (800adc0 <__mdiff+0x110>)
 800acda:	f001 f859 	bl	800bd90 <__assert_func>
 800acde:	2301      	movs	r3, #1
 800ace0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ace4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ace8:	bfa4      	itt	ge
 800acea:	4643      	movge	r3, r8
 800acec:	46a0      	movge	r8, r4
 800acee:	4630      	mov	r0, r6
 800acf0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800acf4:	bfa6      	itte	ge
 800acf6:	461c      	movge	r4, r3
 800acf8:	2500      	movge	r5, #0
 800acfa:	2501      	movlt	r5, #1
 800acfc:	f7ff fcf0 	bl	800a6e0 <_Balloc>
 800ad00:	b920      	cbnz	r0, 800ad0c <__mdiff+0x5c>
 800ad02:	4b2e      	ldr	r3, [pc, #184]	; (800adbc <__mdiff+0x10c>)
 800ad04:	4602      	mov	r2, r0
 800ad06:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ad0a:	e7e5      	b.n	800acd8 <__mdiff+0x28>
 800ad0c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ad10:	6926      	ldr	r6, [r4, #16]
 800ad12:	60c5      	str	r5, [r0, #12]
 800ad14:	f104 0914 	add.w	r9, r4, #20
 800ad18:	f108 0514 	add.w	r5, r8, #20
 800ad1c:	f100 0e14 	add.w	lr, r0, #20
 800ad20:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ad24:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ad28:	f108 0210 	add.w	r2, r8, #16
 800ad2c:	46f2      	mov	sl, lr
 800ad2e:	2100      	movs	r1, #0
 800ad30:	f859 3b04 	ldr.w	r3, [r9], #4
 800ad34:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ad38:	fa1f f883 	uxth.w	r8, r3
 800ad3c:	fa11 f18b 	uxtah	r1, r1, fp
 800ad40:	0c1b      	lsrs	r3, r3, #16
 800ad42:	eba1 0808 	sub.w	r8, r1, r8
 800ad46:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ad4a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ad4e:	fa1f f888 	uxth.w	r8, r8
 800ad52:	1419      	asrs	r1, r3, #16
 800ad54:	454e      	cmp	r6, r9
 800ad56:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ad5a:	f84a 3b04 	str.w	r3, [sl], #4
 800ad5e:	d8e7      	bhi.n	800ad30 <__mdiff+0x80>
 800ad60:	1b33      	subs	r3, r6, r4
 800ad62:	3b15      	subs	r3, #21
 800ad64:	f023 0303 	bic.w	r3, r3, #3
 800ad68:	3304      	adds	r3, #4
 800ad6a:	3415      	adds	r4, #21
 800ad6c:	42a6      	cmp	r6, r4
 800ad6e:	bf38      	it	cc
 800ad70:	2304      	movcc	r3, #4
 800ad72:	441d      	add	r5, r3
 800ad74:	4473      	add	r3, lr
 800ad76:	469e      	mov	lr, r3
 800ad78:	462e      	mov	r6, r5
 800ad7a:	4566      	cmp	r6, ip
 800ad7c:	d30e      	bcc.n	800ad9c <__mdiff+0xec>
 800ad7e:	f10c 0203 	add.w	r2, ip, #3
 800ad82:	1b52      	subs	r2, r2, r5
 800ad84:	f022 0203 	bic.w	r2, r2, #3
 800ad88:	3d03      	subs	r5, #3
 800ad8a:	45ac      	cmp	ip, r5
 800ad8c:	bf38      	it	cc
 800ad8e:	2200      	movcc	r2, #0
 800ad90:	441a      	add	r2, r3
 800ad92:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ad96:	b17b      	cbz	r3, 800adb8 <__mdiff+0x108>
 800ad98:	6107      	str	r7, [r0, #16]
 800ad9a:	e7a3      	b.n	800ace4 <__mdiff+0x34>
 800ad9c:	f856 8b04 	ldr.w	r8, [r6], #4
 800ada0:	fa11 f288 	uxtah	r2, r1, r8
 800ada4:	1414      	asrs	r4, r2, #16
 800ada6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800adaa:	b292      	uxth	r2, r2
 800adac:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800adb0:	f84e 2b04 	str.w	r2, [lr], #4
 800adb4:	1421      	asrs	r1, r4, #16
 800adb6:	e7e0      	b.n	800ad7a <__mdiff+0xca>
 800adb8:	3f01      	subs	r7, #1
 800adba:	e7ea      	b.n	800ad92 <__mdiff+0xe2>
 800adbc:	0800d700 	.word	0x0800d700
 800adc0:	0800d78c 	.word	0x0800d78c

0800adc4 <__ulp>:
 800adc4:	b082      	sub	sp, #8
 800adc6:	ed8d 0b00 	vstr	d0, [sp]
 800adca:	9b01      	ldr	r3, [sp, #4]
 800adcc:	4912      	ldr	r1, [pc, #72]	; (800ae18 <__ulp+0x54>)
 800adce:	4019      	ands	r1, r3
 800add0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800add4:	2900      	cmp	r1, #0
 800add6:	dd05      	ble.n	800ade4 <__ulp+0x20>
 800add8:	2200      	movs	r2, #0
 800adda:	460b      	mov	r3, r1
 800addc:	ec43 2b10 	vmov	d0, r2, r3
 800ade0:	b002      	add	sp, #8
 800ade2:	4770      	bx	lr
 800ade4:	4249      	negs	r1, r1
 800ade6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800adea:	ea4f 5021 	mov.w	r0, r1, asr #20
 800adee:	f04f 0200 	mov.w	r2, #0
 800adf2:	f04f 0300 	mov.w	r3, #0
 800adf6:	da04      	bge.n	800ae02 <__ulp+0x3e>
 800adf8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800adfc:	fa41 f300 	asr.w	r3, r1, r0
 800ae00:	e7ec      	b.n	800addc <__ulp+0x18>
 800ae02:	f1a0 0114 	sub.w	r1, r0, #20
 800ae06:	291e      	cmp	r1, #30
 800ae08:	bfda      	itte	le
 800ae0a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800ae0e:	fa20 f101 	lsrle.w	r1, r0, r1
 800ae12:	2101      	movgt	r1, #1
 800ae14:	460a      	mov	r2, r1
 800ae16:	e7e1      	b.n	800addc <__ulp+0x18>
 800ae18:	7ff00000 	.word	0x7ff00000

0800ae1c <__b2d>:
 800ae1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae1e:	6905      	ldr	r5, [r0, #16]
 800ae20:	f100 0714 	add.w	r7, r0, #20
 800ae24:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ae28:	1f2e      	subs	r6, r5, #4
 800ae2a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ae2e:	4620      	mov	r0, r4
 800ae30:	f7ff fd48 	bl	800a8c4 <__hi0bits>
 800ae34:	f1c0 0320 	rsb	r3, r0, #32
 800ae38:	280a      	cmp	r0, #10
 800ae3a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800aeb8 <__b2d+0x9c>
 800ae3e:	600b      	str	r3, [r1, #0]
 800ae40:	dc14      	bgt.n	800ae6c <__b2d+0x50>
 800ae42:	f1c0 0e0b 	rsb	lr, r0, #11
 800ae46:	fa24 f10e 	lsr.w	r1, r4, lr
 800ae4a:	42b7      	cmp	r7, r6
 800ae4c:	ea41 030c 	orr.w	r3, r1, ip
 800ae50:	bf34      	ite	cc
 800ae52:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ae56:	2100      	movcs	r1, #0
 800ae58:	3015      	adds	r0, #21
 800ae5a:	fa04 f000 	lsl.w	r0, r4, r0
 800ae5e:	fa21 f10e 	lsr.w	r1, r1, lr
 800ae62:	ea40 0201 	orr.w	r2, r0, r1
 800ae66:	ec43 2b10 	vmov	d0, r2, r3
 800ae6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae6c:	42b7      	cmp	r7, r6
 800ae6e:	bf3a      	itte	cc
 800ae70:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ae74:	f1a5 0608 	subcc.w	r6, r5, #8
 800ae78:	2100      	movcs	r1, #0
 800ae7a:	380b      	subs	r0, #11
 800ae7c:	d017      	beq.n	800aeae <__b2d+0x92>
 800ae7e:	f1c0 0c20 	rsb	ip, r0, #32
 800ae82:	fa04 f500 	lsl.w	r5, r4, r0
 800ae86:	42be      	cmp	r6, r7
 800ae88:	fa21 f40c 	lsr.w	r4, r1, ip
 800ae8c:	ea45 0504 	orr.w	r5, r5, r4
 800ae90:	bf8c      	ite	hi
 800ae92:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ae96:	2400      	movls	r4, #0
 800ae98:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ae9c:	fa01 f000 	lsl.w	r0, r1, r0
 800aea0:	fa24 f40c 	lsr.w	r4, r4, ip
 800aea4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800aea8:	ea40 0204 	orr.w	r2, r0, r4
 800aeac:	e7db      	b.n	800ae66 <__b2d+0x4a>
 800aeae:	ea44 030c 	orr.w	r3, r4, ip
 800aeb2:	460a      	mov	r2, r1
 800aeb4:	e7d7      	b.n	800ae66 <__b2d+0x4a>
 800aeb6:	bf00      	nop
 800aeb8:	3ff00000 	.word	0x3ff00000

0800aebc <__d2b>:
 800aebc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aec0:	4689      	mov	r9, r1
 800aec2:	2101      	movs	r1, #1
 800aec4:	ec57 6b10 	vmov	r6, r7, d0
 800aec8:	4690      	mov	r8, r2
 800aeca:	f7ff fc09 	bl	800a6e0 <_Balloc>
 800aece:	4604      	mov	r4, r0
 800aed0:	b930      	cbnz	r0, 800aee0 <__d2b+0x24>
 800aed2:	4602      	mov	r2, r0
 800aed4:	4b25      	ldr	r3, [pc, #148]	; (800af6c <__d2b+0xb0>)
 800aed6:	4826      	ldr	r0, [pc, #152]	; (800af70 <__d2b+0xb4>)
 800aed8:	f240 310a 	movw	r1, #778	; 0x30a
 800aedc:	f000 ff58 	bl	800bd90 <__assert_func>
 800aee0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800aee4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aee8:	bb35      	cbnz	r5, 800af38 <__d2b+0x7c>
 800aeea:	2e00      	cmp	r6, #0
 800aeec:	9301      	str	r3, [sp, #4]
 800aeee:	d028      	beq.n	800af42 <__d2b+0x86>
 800aef0:	4668      	mov	r0, sp
 800aef2:	9600      	str	r6, [sp, #0]
 800aef4:	f7ff fd06 	bl	800a904 <__lo0bits>
 800aef8:	9900      	ldr	r1, [sp, #0]
 800aefa:	b300      	cbz	r0, 800af3e <__d2b+0x82>
 800aefc:	9a01      	ldr	r2, [sp, #4]
 800aefe:	f1c0 0320 	rsb	r3, r0, #32
 800af02:	fa02 f303 	lsl.w	r3, r2, r3
 800af06:	430b      	orrs	r3, r1
 800af08:	40c2      	lsrs	r2, r0
 800af0a:	6163      	str	r3, [r4, #20]
 800af0c:	9201      	str	r2, [sp, #4]
 800af0e:	9b01      	ldr	r3, [sp, #4]
 800af10:	61a3      	str	r3, [r4, #24]
 800af12:	2b00      	cmp	r3, #0
 800af14:	bf14      	ite	ne
 800af16:	2202      	movne	r2, #2
 800af18:	2201      	moveq	r2, #1
 800af1a:	6122      	str	r2, [r4, #16]
 800af1c:	b1d5      	cbz	r5, 800af54 <__d2b+0x98>
 800af1e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800af22:	4405      	add	r5, r0
 800af24:	f8c9 5000 	str.w	r5, [r9]
 800af28:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800af2c:	f8c8 0000 	str.w	r0, [r8]
 800af30:	4620      	mov	r0, r4
 800af32:	b003      	add	sp, #12
 800af34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800af3c:	e7d5      	b.n	800aeea <__d2b+0x2e>
 800af3e:	6161      	str	r1, [r4, #20]
 800af40:	e7e5      	b.n	800af0e <__d2b+0x52>
 800af42:	a801      	add	r0, sp, #4
 800af44:	f7ff fcde 	bl	800a904 <__lo0bits>
 800af48:	9b01      	ldr	r3, [sp, #4]
 800af4a:	6163      	str	r3, [r4, #20]
 800af4c:	2201      	movs	r2, #1
 800af4e:	6122      	str	r2, [r4, #16]
 800af50:	3020      	adds	r0, #32
 800af52:	e7e3      	b.n	800af1c <__d2b+0x60>
 800af54:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800af58:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800af5c:	f8c9 0000 	str.w	r0, [r9]
 800af60:	6918      	ldr	r0, [r3, #16]
 800af62:	f7ff fcaf 	bl	800a8c4 <__hi0bits>
 800af66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800af6a:	e7df      	b.n	800af2c <__d2b+0x70>
 800af6c:	0800d700 	.word	0x0800d700
 800af70:	0800d78c 	.word	0x0800d78c

0800af74 <__ratio>:
 800af74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af78:	4688      	mov	r8, r1
 800af7a:	4669      	mov	r1, sp
 800af7c:	4681      	mov	r9, r0
 800af7e:	f7ff ff4d 	bl	800ae1c <__b2d>
 800af82:	a901      	add	r1, sp, #4
 800af84:	4640      	mov	r0, r8
 800af86:	ec55 4b10 	vmov	r4, r5, d0
 800af8a:	f7ff ff47 	bl	800ae1c <__b2d>
 800af8e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800af92:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800af96:	eba3 0c02 	sub.w	ip, r3, r2
 800af9a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800af9e:	1a9b      	subs	r3, r3, r2
 800afa0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800afa4:	ec51 0b10 	vmov	r0, r1, d0
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	bfd6      	itet	le
 800afac:	460a      	movle	r2, r1
 800afae:	462a      	movgt	r2, r5
 800afb0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800afb4:	468b      	mov	fp, r1
 800afb6:	462f      	mov	r7, r5
 800afb8:	bfd4      	ite	le
 800afba:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800afbe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800afc2:	4620      	mov	r0, r4
 800afc4:	ee10 2a10 	vmov	r2, s0
 800afc8:	465b      	mov	r3, fp
 800afca:	4639      	mov	r1, r7
 800afcc:	f7f5 fc4e 	bl	800086c <__aeabi_ddiv>
 800afd0:	ec41 0b10 	vmov	d0, r0, r1
 800afd4:	b003      	add	sp, #12
 800afd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800afda <__copybits>:
 800afda:	3901      	subs	r1, #1
 800afdc:	b570      	push	{r4, r5, r6, lr}
 800afde:	1149      	asrs	r1, r1, #5
 800afe0:	6914      	ldr	r4, [r2, #16]
 800afe2:	3101      	adds	r1, #1
 800afe4:	f102 0314 	add.w	r3, r2, #20
 800afe8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800afec:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800aff0:	1f05      	subs	r5, r0, #4
 800aff2:	42a3      	cmp	r3, r4
 800aff4:	d30c      	bcc.n	800b010 <__copybits+0x36>
 800aff6:	1aa3      	subs	r3, r4, r2
 800aff8:	3b11      	subs	r3, #17
 800affa:	f023 0303 	bic.w	r3, r3, #3
 800affe:	3211      	adds	r2, #17
 800b000:	42a2      	cmp	r2, r4
 800b002:	bf88      	it	hi
 800b004:	2300      	movhi	r3, #0
 800b006:	4418      	add	r0, r3
 800b008:	2300      	movs	r3, #0
 800b00a:	4288      	cmp	r0, r1
 800b00c:	d305      	bcc.n	800b01a <__copybits+0x40>
 800b00e:	bd70      	pop	{r4, r5, r6, pc}
 800b010:	f853 6b04 	ldr.w	r6, [r3], #4
 800b014:	f845 6f04 	str.w	r6, [r5, #4]!
 800b018:	e7eb      	b.n	800aff2 <__copybits+0x18>
 800b01a:	f840 3b04 	str.w	r3, [r0], #4
 800b01e:	e7f4      	b.n	800b00a <__copybits+0x30>

0800b020 <__any_on>:
 800b020:	f100 0214 	add.w	r2, r0, #20
 800b024:	6900      	ldr	r0, [r0, #16]
 800b026:	114b      	asrs	r3, r1, #5
 800b028:	4298      	cmp	r0, r3
 800b02a:	b510      	push	{r4, lr}
 800b02c:	db11      	blt.n	800b052 <__any_on+0x32>
 800b02e:	dd0a      	ble.n	800b046 <__any_on+0x26>
 800b030:	f011 011f 	ands.w	r1, r1, #31
 800b034:	d007      	beq.n	800b046 <__any_on+0x26>
 800b036:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b03a:	fa24 f001 	lsr.w	r0, r4, r1
 800b03e:	fa00 f101 	lsl.w	r1, r0, r1
 800b042:	428c      	cmp	r4, r1
 800b044:	d10b      	bne.n	800b05e <__any_on+0x3e>
 800b046:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d803      	bhi.n	800b056 <__any_on+0x36>
 800b04e:	2000      	movs	r0, #0
 800b050:	bd10      	pop	{r4, pc}
 800b052:	4603      	mov	r3, r0
 800b054:	e7f7      	b.n	800b046 <__any_on+0x26>
 800b056:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b05a:	2900      	cmp	r1, #0
 800b05c:	d0f5      	beq.n	800b04a <__any_on+0x2a>
 800b05e:	2001      	movs	r0, #1
 800b060:	e7f6      	b.n	800b050 <__any_on+0x30>

0800b062 <_calloc_r>:
 800b062:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b064:	fba1 2402 	umull	r2, r4, r1, r2
 800b068:	b94c      	cbnz	r4, 800b07e <_calloc_r+0x1c>
 800b06a:	4611      	mov	r1, r2
 800b06c:	9201      	str	r2, [sp, #4]
 800b06e:	f000 f87b 	bl	800b168 <_malloc_r>
 800b072:	9a01      	ldr	r2, [sp, #4]
 800b074:	4605      	mov	r5, r0
 800b076:	b930      	cbnz	r0, 800b086 <_calloc_r+0x24>
 800b078:	4628      	mov	r0, r5
 800b07a:	b003      	add	sp, #12
 800b07c:	bd30      	pop	{r4, r5, pc}
 800b07e:	220c      	movs	r2, #12
 800b080:	6002      	str	r2, [r0, #0]
 800b082:	2500      	movs	r5, #0
 800b084:	e7f8      	b.n	800b078 <_calloc_r+0x16>
 800b086:	4621      	mov	r1, r4
 800b088:	f7fc fb04 	bl	8007694 <memset>
 800b08c:	e7f4      	b.n	800b078 <_calloc_r+0x16>
	...

0800b090 <_free_r>:
 800b090:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b092:	2900      	cmp	r1, #0
 800b094:	d044      	beq.n	800b120 <_free_r+0x90>
 800b096:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b09a:	9001      	str	r0, [sp, #4]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	f1a1 0404 	sub.w	r4, r1, #4
 800b0a2:	bfb8      	it	lt
 800b0a4:	18e4      	addlt	r4, r4, r3
 800b0a6:	f001 f877 	bl	800c198 <__malloc_lock>
 800b0aa:	4a1e      	ldr	r2, [pc, #120]	; (800b124 <_free_r+0x94>)
 800b0ac:	9801      	ldr	r0, [sp, #4]
 800b0ae:	6813      	ldr	r3, [r2, #0]
 800b0b0:	b933      	cbnz	r3, 800b0c0 <_free_r+0x30>
 800b0b2:	6063      	str	r3, [r4, #4]
 800b0b4:	6014      	str	r4, [r2, #0]
 800b0b6:	b003      	add	sp, #12
 800b0b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b0bc:	f001 b872 	b.w	800c1a4 <__malloc_unlock>
 800b0c0:	42a3      	cmp	r3, r4
 800b0c2:	d908      	bls.n	800b0d6 <_free_r+0x46>
 800b0c4:	6825      	ldr	r5, [r4, #0]
 800b0c6:	1961      	adds	r1, r4, r5
 800b0c8:	428b      	cmp	r3, r1
 800b0ca:	bf01      	itttt	eq
 800b0cc:	6819      	ldreq	r1, [r3, #0]
 800b0ce:	685b      	ldreq	r3, [r3, #4]
 800b0d0:	1949      	addeq	r1, r1, r5
 800b0d2:	6021      	streq	r1, [r4, #0]
 800b0d4:	e7ed      	b.n	800b0b2 <_free_r+0x22>
 800b0d6:	461a      	mov	r2, r3
 800b0d8:	685b      	ldr	r3, [r3, #4]
 800b0da:	b10b      	cbz	r3, 800b0e0 <_free_r+0x50>
 800b0dc:	42a3      	cmp	r3, r4
 800b0de:	d9fa      	bls.n	800b0d6 <_free_r+0x46>
 800b0e0:	6811      	ldr	r1, [r2, #0]
 800b0e2:	1855      	adds	r5, r2, r1
 800b0e4:	42a5      	cmp	r5, r4
 800b0e6:	d10b      	bne.n	800b100 <_free_r+0x70>
 800b0e8:	6824      	ldr	r4, [r4, #0]
 800b0ea:	4421      	add	r1, r4
 800b0ec:	1854      	adds	r4, r2, r1
 800b0ee:	42a3      	cmp	r3, r4
 800b0f0:	6011      	str	r1, [r2, #0]
 800b0f2:	d1e0      	bne.n	800b0b6 <_free_r+0x26>
 800b0f4:	681c      	ldr	r4, [r3, #0]
 800b0f6:	685b      	ldr	r3, [r3, #4]
 800b0f8:	6053      	str	r3, [r2, #4]
 800b0fa:	4421      	add	r1, r4
 800b0fc:	6011      	str	r1, [r2, #0]
 800b0fe:	e7da      	b.n	800b0b6 <_free_r+0x26>
 800b100:	d902      	bls.n	800b108 <_free_r+0x78>
 800b102:	230c      	movs	r3, #12
 800b104:	6003      	str	r3, [r0, #0]
 800b106:	e7d6      	b.n	800b0b6 <_free_r+0x26>
 800b108:	6825      	ldr	r5, [r4, #0]
 800b10a:	1961      	adds	r1, r4, r5
 800b10c:	428b      	cmp	r3, r1
 800b10e:	bf04      	itt	eq
 800b110:	6819      	ldreq	r1, [r3, #0]
 800b112:	685b      	ldreq	r3, [r3, #4]
 800b114:	6063      	str	r3, [r4, #4]
 800b116:	bf04      	itt	eq
 800b118:	1949      	addeq	r1, r1, r5
 800b11a:	6021      	streq	r1, [r4, #0]
 800b11c:	6054      	str	r4, [r2, #4]
 800b11e:	e7ca      	b.n	800b0b6 <_free_r+0x26>
 800b120:	b003      	add	sp, #12
 800b122:	bd30      	pop	{r4, r5, pc}
 800b124:	20000500 	.word	0x20000500

0800b128 <sbrk_aligned>:
 800b128:	b570      	push	{r4, r5, r6, lr}
 800b12a:	4e0e      	ldr	r6, [pc, #56]	; (800b164 <sbrk_aligned+0x3c>)
 800b12c:	460c      	mov	r4, r1
 800b12e:	6831      	ldr	r1, [r6, #0]
 800b130:	4605      	mov	r5, r0
 800b132:	b911      	cbnz	r1, 800b13a <sbrk_aligned+0x12>
 800b134:	f000 fd28 	bl	800bb88 <_sbrk_r>
 800b138:	6030      	str	r0, [r6, #0]
 800b13a:	4621      	mov	r1, r4
 800b13c:	4628      	mov	r0, r5
 800b13e:	f000 fd23 	bl	800bb88 <_sbrk_r>
 800b142:	1c43      	adds	r3, r0, #1
 800b144:	d00a      	beq.n	800b15c <sbrk_aligned+0x34>
 800b146:	1cc4      	adds	r4, r0, #3
 800b148:	f024 0403 	bic.w	r4, r4, #3
 800b14c:	42a0      	cmp	r0, r4
 800b14e:	d007      	beq.n	800b160 <sbrk_aligned+0x38>
 800b150:	1a21      	subs	r1, r4, r0
 800b152:	4628      	mov	r0, r5
 800b154:	f000 fd18 	bl	800bb88 <_sbrk_r>
 800b158:	3001      	adds	r0, #1
 800b15a:	d101      	bne.n	800b160 <sbrk_aligned+0x38>
 800b15c:	f04f 34ff 	mov.w	r4, #4294967295
 800b160:	4620      	mov	r0, r4
 800b162:	bd70      	pop	{r4, r5, r6, pc}
 800b164:	20000504 	.word	0x20000504

0800b168 <_malloc_r>:
 800b168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b16c:	1ccd      	adds	r5, r1, #3
 800b16e:	f025 0503 	bic.w	r5, r5, #3
 800b172:	3508      	adds	r5, #8
 800b174:	2d0c      	cmp	r5, #12
 800b176:	bf38      	it	cc
 800b178:	250c      	movcc	r5, #12
 800b17a:	2d00      	cmp	r5, #0
 800b17c:	4607      	mov	r7, r0
 800b17e:	db01      	blt.n	800b184 <_malloc_r+0x1c>
 800b180:	42a9      	cmp	r1, r5
 800b182:	d905      	bls.n	800b190 <_malloc_r+0x28>
 800b184:	230c      	movs	r3, #12
 800b186:	603b      	str	r3, [r7, #0]
 800b188:	2600      	movs	r6, #0
 800b18a:	4630      	mov	r0, r6
 800b18c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b190:	4e2e      	ldr	r6, [pc, #184]	; (800b24c <_malloc_r+0xe4>)
 800b192:	f001 f801 	bl	800c198 <__malloc_lock>
 800b196:	6833      	ldr	r3, [r6, #0]
 800b198:	461c      	mov	r4, r3
 800b19a:	bb34      	cbnz	r4, 800b1ea <_malloc_r+0x82>
 800b19c:	4629      	mov	r1, r5
 800b19e:	4638      	mov	r0, r7
 800b1a0:	f7ff ffc2 	bl	800b128 <sbrk_aligned>
 800b1a4:	1c43      	adds	r3, r0, #1
 800b1a6:	4604      	mov	r4, r0
 800b1a8:	d14d      	bne.n	800b246 <_malloc_r+0xde>
 800b1aa:	6834      	ldr	r4, [r6, #0]
 800b1ac:	4626      	mov	r6, r4
 800b1ae:	2e00      	cmp	r6, #0
 800b1b0:	d140      	bne.n	800b234 <_malloc_r+0xcc>
 800b1b2:	6823      	ldr	r3, [r4, #0]
 800b1b4:	4631      	mov	r1, r6
 800b1b6:	4638      	mov	r0, r7
 800b1b8:	eb04 0803 	add.w	r8, r4, r3
 800b1bc:	f000 fce4 	bl	800bb88 <_sbrk_r>
 800b1c0:	4580      	cmp	r8, r0
 800b1c2:	d13a      	bne.n	800b23a <_malloc_r+0xd2>
 800b1c4:	6821      	ldr	r1, [r4, #0]
 800b1c6:	3503      	adds	r5, #3
 800b1c8:	1a6d      	subs	r5, r5, r1
 800b1ca:	f025 0503 	bic.w	r5, r5, #3
 800b1ce:	3508      	adds	r5, #8
 800b1d0:	2d0c      	cmp	r5, #12
 800b1d2:	bf38      	it	cc
 800b1d4:	250c      	movcc	r5, #12
 800b1d6:	4629      	mov	r1, r5
 800b1d8:	4638      	mov	r0, r7
 800b1da:	f7ff ffa5 	bl	800b128 <sbrk_aligned>
 800b1de:	3001      	adds	r0, #1
 800b1e0:	d02b      	beq.n	800b23a <_malloc_r+0xd2>
 800b1e2:	6823      	ldr	r3, [r4, #0]
 800b1e4:	442b      	add	r3, r5
 800b1e6:	6023      	str	r3, [r4, #0]
 800b1e8:	e00e      	b.n	800b208 <_malloc_r+0xa0>
 800b1ea:	6822      	ldr	r2, [r4, #0]
 800b1ec:	1b52      	subs	r2, r2, r5
 800b1ee:	d41e      	bmi.n	800b22e <_malloc_r+0xc6>
 800b1f0:	2a0b      	cmp	r2, #11
 800b1f2:	d916      	bls.n	800b222 <_malloc_r+0xba>
 800b1f4:	1961      	adds	r1, r4, r5
 800b1f6:	42a3      	cmp	r3, r4
 800b1f8:	6025      	str	r5, [r4, #0]
 800b1fa:	bf18      	it	ne
 800b1fc:	6059      	strne	r1, [r3, #4]
 800b1fe:	6863      	ldr	r3, [r4, #4]
 800b200:	bf08      	it	eq
 800b202:	6031      	streq	r1, [r6, #0]
 800b204:	5162      	str	r2, [r4, r5]
 800b206:	604b      	str	r3, [r1, #4]
 800b208:	4638      	mov	r0, r7
 800b20a:	f104 060b 	add.w	r6, r4, #11
 800b20e:	f000 ffc9 	bl	800c1a4 <__malloc_unlock>
 800b212:	f026 0607 	bic.w	r6, r6, #7
 800b216:	1d23      	adds	r3, r4, #4
 800b218:	1af2      	subs	r2, r6, r3
 800b21a:	d0b6      	beq.n	800b18a <_malloc_r+0x22>
 800b21c:	1b9b      	subs	r3, r3, r6
 800b21e:	50a3      	str	r3, [r4, r2]
 800b220:	e7b3      	b.n	800b18a <_malloc_r+0x22>
 800b222:	6862      	ldr	r2, [r4, #4]
 800b224:	42a3      	cmp	r3, r4
 800b226:	bf0c      	ite	eq
 800b228:	6032      	streq	r2, [r6, #0]
 800b22a:	605a      	strne	r2, [r3, #4]
 800b22c:	e7ec      	b.n	800b208 <_malloc_r+0xa0>
 800b22e:	4623      	mov	r3, r4
 800b230:	6864      	ldr	r4, [r4, #4]
 800b232:	e7b2      	b.n	800b19a <_malloc_r+0x32>
 800b234:	4634      	mov	r4, r6
 800b236:	6876      	ldr	r6, [r6, #4]
 800b238:	e7b9      	b.n	800b1ae <_malloc_r+0x46>
 800b23a:	230c      	movs	r3, #12
 800b23c:	603b      	str	r3, [r7, #0]
 800b23e:	4638      	mov	r0, r7
 800b240:	f000 ffb0 	bl	800c1a4 <__malloc_unlock>
 800b244:	e7a1      	b.n	800b18a <_malloc_r+0x22>
 800b246:	6025      	str	r5, [r4, #0]
 800b248:	e7de      	b.n	800b208 <_malloc_r+0xa0>
 800b24a:	bf00      	nop
 800b24c:	20000500 	.word	0x20000500

0800b250 <__ssputs_r>:
 800b250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b254:	688e      	ldr	r6, [r1, #8]
 800b256:	429e      	cmp	r6, r3
 800b258:	4682      	mov	sl, r0
 800b25a:	460c      	mov	r4, r1
 800b25c:	4690      	mov	r8, r2
 800b25e:	461f      	mov	r7, r3
 800b260:	d838      	bhi.n	800b2d4 <__ssputs_r+0x84>
 800b262:	898a      	ldrh	r2, [r1, #12]
 800b264:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b268:	d032      	beq.n	800b2d0 <__ssputs_r+0x80>
 800b26a:	6825      	ldr	r5, [r4, #0]
 800b26c:	6909      	ldr	r1, [r1, #16]
 800b26e:	eba5 0901 	sub.w	r9, r5, r1
 800b272:	6965      	ldr	r5, [r4, #20]
 800b274:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b278:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b27c:	3301      	adds	r3, #1
 800b27e:	444b      	add	r3, r9
 800b280:	106d      	asrs	r5, r5, #1
 800b282:	429d      	cmp	r5, r3
 800b284:	bf38      	it	cc
 800b286:	461d      	movcc	r5, r3
 800b288:	0553      	lsls	r3, r2, #21
 800b28a:	d531      	bpl.n	800b2f0 <__ssputs_r+0xa0>
 800b28c:	4629      	mov	r1, r5
 800b28e:	f7ff ff6b 	bl	800b168 <_malloc_r>
 800b292:	4606      	mov	r6, r0
 800b294:	b950      	cbnz	r0, 800b2ac <__ssputs_r+0x5c>
 800b296:	230c      	movs	r3, #12
 800b298:	f8ca 3000 	str.w	r3, [sl]
 800b29c:	89a3      	ldrh	r3, [r4, #12]
 800b29e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2a2:	81a3      	strh	r3, [r4, #12]
 800b2a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b2a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2ac:	6921      	ldr	r1, [r4, #16]
 800b2ae:	464a      	mov	r2, r9
 800b2b0:	f7ff fa08 	bl	800a6c4 <memcpy>
 800b2b4:	89a3      	ldrh	r3, [r4, #12]
 800b2b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b2ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2be:	81a3      	strh	r3, [r4, #12]
 800b2c0:	6126      	str	r6, [r4, #16]
 800b2c2:	6165      	str	r5, [r4, #20]
 800b2c4:	444e      	add	r6, r9
 800b2c6:	eba5 0509 	sub.w	r5, r5, r9
 800b2ca:	6026      	str	r6, [r4, #0]
 800b2cc:	60a5      	str	r5, [r4, #8]
 800b2ce:	463e      	mov	r6, r7
 800b2d0:	42be      	cmp	r6, r7
 800b2d2:	d900      	bls.n	800b2d6 <__ssputs_r+0x86>
 800b2d4:	463e      	mov	r6, r7
 800b2d6:	6820      	ldr	r0, [r4, #0]
 800b2d8:	4632      	mov	r2, r6
 800b2da:	4641      	mov	r1, r8
 800b2dc:	f000 ff42 	bl	800c164 <memmove>
 800b2e0:	68a3      	ldr	r3, [r4, #8]
 800b2e2:	1b9b      	subs	r3, r3, r6
 800b2e4:	60a3      	str	r3, [r4, #8]
 800b2e6:	6823      	ldr	r3, [r4, #0]
 800b2e8:	4433      	add	r3, r6
 800b2ea:	6023      	str	r3, [r4, #0]
 800b2ec:	2000      	movs	r0, #0
 800b2ee:	e7db      	b.n	800b2a8 <__ssputs_r+0x58>
 800b2f0:	462a      	mov	r2, r5
 800b2f2:	f000 ff5d 	bl	800c1b0 <_realloc_r>
 800b2f6:	4606      	mov	r6, r0
 800b2f8:	2800      	cmp	r0, #0
 800b2fa:	d1e1      	bne.n	800b2c0 <__ssputs_r+0x70>
 800b2fc:	6921      	ldr	r1, [r4, #16]
 800b2fe:	4650      	mov	r0, sl
 800b300:	f7ff fec6 	bl	800b090 <_free_r>
 800b304:	e7c7      	b.n	800b296 <__ssputs_r+0x46>
	...

0800b308 <_svfiprintf_r>:
 800b308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b30c:	4698      	mov	r8, r3
 800b30e:	898b      	ldrh	r3, [r1, #12]
 800b310:	061b      	lsls	r3, r3, #24
 800b312:	b09d      	sub	sp, #116	; 0x74
 800b314:	4607      	mov	r7, r0
 800b316:	460d      	mov	r5, r1
 800b318:	4614      	mov	r4, r2
 800b31a:	d50e      	bpl.n	800b33a <_svfiprintf_r+0x32>
 800b31c:	690b      	ldr	r3, [r1, #16]
 800b31e:	b963      	cbnz	r3, 800b33a <_svfiprintf_r+0x32>
 800b320:	2140      	movs	r1, #64	; 0x40
 800b322:	f7ff ff21 	bl	800b168 <_malloc_r>
 800b326:	6028      	str	r0, [r5, #0]
 800b328:	6128      	str	r0, [r5, #16]
 800b32a:	b920      	cbnz	r0, 800b336 <_svfiprintf_r+0x2e>
 800b32c:	230c      	movs	r3, #12
 800b32e:	603b      	str	r3, [r7, #0]
 800b330:	f04f 30ff 	mov.w	r0, #4294967295
 800b334:	e0d1      	b.n	800b4da <_svfiprintf_r+0x1d2>
 800b336:	2340      	movs	r3, #64	; 0x40
 800b338:	616b      	str	r3, [r5, #20]
 800b33a:	2300      	movs	r3, #0
 800b33c:	9309      	str	r3, [sp, #36]	; 0x24
 800b33e:	2320      	movs	r3, #32
 800b340:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b344:	f8cd 800c 	str.w	r8, [sp, #12]
 800b348:	2330      	movs	r3, #48	; 0x30
 800b34a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b4f4 <_svfiprintf_r+0x1ec>
 800b34e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b352:	f04f 0901 	mov.w	r9, #1
 800b356:	4623      	mov	r3, r4
 800b358:	469a      	mov	sl, r3
 800b35a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b35e:	b10a      	cbz	r2, 800b364 <_svfiprintf_r+0x5c>
 800b360:	2a25      	cmp	r2, #37	; 0x25
 800b362:	d1f9      	bne.n	800b358 <_svfiprintf_r+0x50>
 800b364:	ebba 0b04 	subs.w	fp, sl, r4
 800b368:	d00b      	beq.n	800b382 <_svfiprintf_r+0x7a>
 800b36a:	465b      	mov	r3, fp
 800b36c:	4622      	mov	r2, r4
 800b36e:	4629      	mov	r1, r5
 800b370:	4638      	mov	r0, r7
 800b372:	f7ff ff6d 	bl	800b250 <__ssputs_r>
 800b376:	3001      	adds	r0, #1
 800b378:	f000 80aa 	beq.w	800b4d0 <_svfiprintf_r+0x1c8>
 800b37c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b37e:	445a      	add	r2, fp
 800b380:	9209      	str	r2, [sp, #36]	; 0x24
 800b382:	f89a 3000 	ldrb.w	r3, [sl]
 800b386:	2b00      	cmp	r3, #0
 800b388:	f000 80a2 	beq.w	800b4d0 <_svfiprintf_r+0x1c8>
 800b38c:	2300      	movs	r3, #0
 800b38e:	f04f 32ff 	mov.w	r2, #4294967295
 800b392:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b396:	f10a 0a01 	add.w	sl, sl, #1
 800b39a:	9304      	str	r3, [sp, #16]
 800b39c:	9307      	str	r3, [sp, #28]
 800b39e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b3a2:	931a      	str	r3, [sp, #104]	; 0x68
 800b3a4:	4654      	mov	r4, sl
 800b3a6:	2205      	movs	r2, #5
 800b3a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3ac:	4851      	ldr	r0, [pc, #324]	; (800b4f4 <_svfiprintf_r+0x1ec>)
 800b3ae:	f7f4 ff27 	bl	8000200 <memchr>
 800b3b2:	9a04      	ldr	r2, [sp, #16]
 800b3b4:	b9d8      	cbnz	r0, 800b3ee <_svfiprintf_r+0xe6>
 800b3b6:	06d0      	lsls	r0, r2, #27
 800b3b8:	bf44      	itt	mi
 800b3ba:	2320      	movmi	r3, #32
 800b3bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b3c0:	0711      	lsls	r1, r2, #28
 800b3c2:	bf44      	itt	mi
 800b3c4:	232b      	movmi	r3, #43	; 0x2b
 800b3c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b3ca:	f89a 3000 	ldrb.w	r3, [sl]
 800b3ce:	2b2a      	cmp	r3, #42	; 0x2a
 800b3d0:	d015      	beq.n	800b3fe <_svfiprintf_r+0xf6>
 800b3d2:	9a07      	ldr	r2, [sp, #28]
 800b3d4:	4654      	mov	r4, sl
 800b3d6:	2000      	movs	r0, #0
 800b3d8:	f04f 0c0a 	mov.w	ip, #10
 800b3dc:	4621      	mov	r1, r4
 800b3de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b3e2:	3b30      	subs	r3, #48	; 0x30
 800b3e4:	2b09      	cmp	r3, #9
 800b3e6:	d94e      	bls.n	800b486 <_svfiprintf_r+0x17e>
 800b3e8:	b1b0      	cbz	r0, 800b418 <_svfiprintf_r+0x110>
 800b3ea:	9207      	str	r2, [sp, #28]
 800b3ec:	e014      	b.n	800b418 <_svfiprintf_r+0x110>
 800b3ee:	eba0 0308 	sub.w	r3, r0, r8
 800b3f2:	fa09 f303 	lsl.w	r3, r9, r3
 800b3f6:	4313      	orrs	r3, r2
 800b3f8:	9304      	str	r3, [sp, #16]
 800b3fa:	46a2      	mov	sl, r4
 800b3fc:	e7d2      	b.n	800b3a4 <_svfiprintf_r+0x9c>
 800b3fe:	9b03      	ldr	r3, [sp, #12]
 800b400:	1d19      	adds	r1, r3, #4
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	9103      	str	r1, [sp, #12]
 800b406:	2b00      	cmp	r3, #0
 800b408:	bfbb      	ittet	lt
 800b40a:	425b      	neglt	r3, r3
 800b40c:	f042 0202 	orrlt.w	r2, r2, #2
 800b410:	9307      	strge	r3, [sp, #28]
 800b412:	9307      	strlt	r3, [sp, #28]
 800b414:	bfb8      	it	lt
 800b416:	9204      	strlt	r2, [sp, #16]
 800b418:	7823      	ldrb	r3, [r4, #0]
 800b41a:	2b2e      	cmp	r3, #46	; 0x2e
 800b41c:	d10c      	bne.n	800b438 <_svfiprintf_r+0x130>
 800b41e:	7863      	ldrb	r3, [r4, #1]
 800b420:	2b2a      	cmp	r3, #42	; 0x2a
 800b422:	d135      	bne.n	800b490 <_svfiprintf_r+0x188>
 800b424:	9b03      	ldr	r3, [sp, #12]
 800b426:	1d1a      	adds	r2, r3, #4
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	9203      	str	r2, [sp, #12]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	bfb8      	it	lt
 800b430:	f04f 33ff 	movlt.w	r3, #4294967295
 800b434:	3402      	adds	r4, #2
 800b436:	9305      	str	r3, [sp, #20]
 800b438:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b504 <_svfiprintf_r+0x1fc>
 800b43c:	7821      	ldrb	r1, [r4, #0]
 800b43e:	2203      	movs	r2, #3
 800b440:	4650      	mov	r0, sl
 800b442:	f7f4 fedd 	bl	8000200 <memchr>
 800b446:	b140      	cbz	r0, 800b45a <_svfiprintf_r+0x152>
 800b448:	2340      	movs	r3, #64	; 0x40
 800b44a:	eba0 000a 	sub.w	r0, r0, sl
 800b44e:	fa03 f000 	lsl.w	r0, r3, r0
 800b452:	9b04      	ldr	r3, [sp, #16]
 800b454:	4303      	orrs	r3, r0
 800b456:	3401      	adds	r4, #1
 800b458:	9304      	str	r3, [sp, #16]
 800b45a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b45e:	4826      	ldr	r0, [pc, #152]	; (800b4f8 <_svfiprintf_r+0x1f0>)
 800b460:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b464:	2206      	movs	r2, #6
 800b466:	f7f4 fecb 	bl	8000200 <memchr>
 800b46a:	2800      	cmp	r0, #0
 800b46c:	d038      	beq.n	800b4e0 <_svfiprintf_r+0x1d8>
 800b46e:	4b23      	ldr	r3, [pc, #140]	; (800b4fc <_svfiprintf_r+0x1f4>)
 800b470:	bb1b      	cbnz	r3, 800b4ba <_svfiprintf_r+0x1b2>
 800b472:	9b03      	ldr	r3, [sp, #12]
 800b474:	3307      	adds	r3, #7
 800b476:	f023 0307 	bic.w	r3, r3, #7
 800b47a:	3308      	adds	r3, #8
 800b47c:	9303      	str	r3, [sp, #12]
 800b47e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b480:	4433      	add	r3, r6
 800b482:	9309      	str	r3, [sp, #36]	; 0x24
 800b484:	e767      	b.n	800b356 <_svfiprintf_r+0x4e>
 800b486:	fb0c 3202 	mla	r2, ip, r2, r3
 800b48a:	460c      	mov	r4, r1
 800b48c:	2001      	movs	r0, #1
 800b48e:	e7a5      	b.n	800b3dc <_svfiprintf_r+0xd4>
 800b490:	2300      	movs	r3, #0
 800b492:	3401      	adds	r4, #1
 800b494:	9305      	str	r3, [sp, #20]
 800b496:	4619      	mov	r1, r3
 800b498:	f04f 0c0a 	mov.w	ip, #10
 800b49c:	4620      	mov	r0, r4
 800b49e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4a2:	3a30      	subs	r2, #48	; 0x30
 800b4a4:	2a09      	cmp	r2, #9
 800b4a6:	d903      	bls.n	800b4b0 <_svfiprintf_r+0x1a8>
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d0c5      	beq.n	800b438 <_svfiprintf_r+0x130>
 800b4ac:	9105      	str	r1, [sp, #20]
 800b4ae:	e7c3      	b.n	800b438 <_svfiprintf_r+0x130>
 800b4b0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b4b4:	4604      	mov	r4, r0
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	e7f0      	b.n	800b49c <_svfiprintf_r+0x194>
 800b4ba:	ab03      	add	r3, sp, #12
 800b4bc:	9300      	str	r3, [sp, #0]
 800b4be:	462a      	mov	r2, r5
 800b4c0:	4b0f      	ldr	r3, [pc, #60]	; (800b500 <_svfiprintf_r+0x1f8>)
 800b4c2:	a904      	add	r1, sp, #16
 800b4c4:	4638      	mov	r0, r7
 800b4c6:	f7fc f98d 	bl	80077e4 <_printf_float>
 800b4ca:	1c42      	adds	r2, r0, #1
 800b4cc:	4606      	mov	r6, r0
 800b4ce:	d1d6      	bne.n	800b47e <_svfiprintf_r+0x176>
 800b4d0:	89ab      	ldrh	r3, [r5, #12]
 800b4d2:	065b      	lsls	r3, r3, #25
 800b4d4:	f53f af2c 	bmi.w	800b330 <_svfiprintf_r+0x28>
 800b4d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b4da:	b01d      	add	sp, #116	; 0x74
 800b4dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4e0:	ab03      	add	r3, sp, #12
 800b4e2:	9300      	str	r3, [sp, #0]
 800b4e4:	462a      	mov	r2, r5
 800b4e6:	4b06      	ldr	r3, [pc, #24]	; (800b500 <_svfiprintf_r+0x1f8>)
 800b4e8:	a904      	add	r1, sp, #16
 800b4ea:	4638      	mov	r0, r7
 800b4ec:	f7fc fc1e 	bl	8007d2c <_printf_i>
 800b4f0:	e7eb      	b.n	800b4ca <_svfiprintf_r+0x1c2>
 800b4f2:	bf00      	nop
 800b4f4:	0800d8e4 	.word	0x0800d8e4
 800b4f8:	0800d8ee 	.word	0x0800d8ee
 800b4fc:	080077e5 	.word	0x080077e5
 800b500:	0800b251 	.word	0x0800b251
 800b504:	0800d8ea 	.word	0x0800d8ea

0800b508 <_sungetc_r>:
 800b508:	b538      	push	{r3, r4, r5, lr}
 800b50a:	1c4b      	adds	r3, r1, #1
 800b50c:	4614      	mov	r4, r2
 800b50e:	d103      	bne.n	800b518 <_sungetc_r+0x10>
 800b510:	f04f 35ff 	mov.w	r5, #4294967295
 800b514:	4628      	mov	r0, r5
 800b516:	bd38      	pop	{r3, r4, r5, pc}
 800b518:	8993      	ldrh	r3, [r2, #12]
 800b51a:	f023 0320 	bic.w	r3, r3, #32
 800b51e:	8193      	strh	r3, [r2, #12]
 800b520:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b522:	6852      	ldr	r2, [r2, #4]
 800b524:	b2cd      	uxtb	r5, r1
 800b526:	b18b      	cbz	r3, 800b54c <_sungetc_r+0x44>
 800b528:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b52a:	4293      	cmp	r3, r2
 800b52c:	dd08      	ble.n	800b540 <_sungetc_r+0x38>
 800b52e:	6823      	ldr	r3, [r4, #0]
 800b530:	1e5a      	subs	r2, r3, #1
 800b532:	6022      	str	r2, [r4, #0]
 800b534:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b538:	6863      	ldr	r3, [r4, #4]
 800b53a:	3301      	adds	r3, #1
 800b53c:	6063      	str	r3, [r4, #4]
 800b53e:	e7e9      	b.n	800b514 <_sungetc_r+0xc>
 800b540:	4621      	mov	r1, r4
 800b542:	f000 fbdd 	bl	800bd00 <__submore>
 800b546:	2800      	cmp	r0, #0
 800b548:	d0f1      	beq.n	800b52e <_sungetc_r+0x26>
 800b54a:	e7e1      	b.n	800b510 <_sungetc_r+0x8>
 800b54c:	6921      	ldr	r1, [r4, #16]
 800b54e:	6823      	ldr	r3, [r4, #0]
 800b550:	b151      	cbz	r1, 800b568 <_sungetc_r+0x60>
 800b552:	4299      	cmp	r1, r3
 800b554:	d208      	bcs.n	800b568 <_sungetc_r+0x60>
 800b556:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b55a:	42a9      	cmp	r1, r5
 800b55c:	d104      	bne.n	800b568 <_sungetc_r+0x60>
 800b55e:	3b01      	subs	r3, #1
 800b560:	3201      	adds	r2, #1
 800b562:	6023      	str	r3, [r4, #0]
 800b564:	6062      	str	r2, [r4, #4]
 800b566:	e7d5      	b.n	800b514 <_sungetc_r+0xc>
 800b568:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b56c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b570:	6363      	str	r3, [r4, #52]	; 0x34
 800b572:	2303      	movs	r3, #3
 800b574:	63a3      	str	r3, [r4, #56]	; 0x38
 800b576:	4623      	mov	r3, r4
 800b578:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b57c:	6023      	str	r3, [r4, #0]
 800b57e:	2301      	movs	r3, #1
 800b580:	e7dc      	b.n	800b53c <_sungetc_r+0x34>

0800b582 <__ssrefill_r>:
 800b582:	b510      	push	{r4, lr}
 800b584:	460c      	mov	r4, r1
 800b586:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b588:	b169      	cbz	r1, 800b5a6 <__ssrefill_r+0x24>
 800b58a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b58e:	4299      	cmp	r1, r3
 800b590:	d001      	beq.n	800b596 <__ssrefill_r+0x14>
 800b592:	f7ff fd7d 	bl	800b090 <_free_r>
 800b596:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b598:	6063      	str	r3, [r4, #4]
 800b59a:	2000      	movs	r0, #0
 800b59c:	6360      	str	r0, [r4, #52]	; 0x34
 800b59e:	b113      	cbz	r3, 800b5a6 <__ssrefill_r+0x24>
 800b5a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b5a2:	6023      	str	r3, [r4, #0]
 800b5a4:	bd10      	pop	{r4, pc}
 800b5a6:	6923      	ldr	r3, [r4, #16]
 800b5a8:	6023      	str	r3, [r4, #0]
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	6063      	str	r3, [r4, #4]
 800b5ae:	89a3      	ldrh	r3, [r4, #12]
 800b5b0:	f043 0320 	orr.w	r3, r3, #32
 800b5b4:	81a3      	strh	r3, [r4, #12]
 800b5b6:	f04f 30ff 	mov.w	r0, #4294967295
 800b5ba:	e7f3      	b.n	800b5a4 <__ssrefill_r+0x22>

0800b5bc <__ssvfiscanf_r>:
 800b5bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5c0:	460c      	mov	r4, r1
 800b5c2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800b5c6:	2100      	movs	r1, #0
 800b5c8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800b5cc:	49a6      	ldr	r1, [pc, #664]	; (800b868 <__ssvfiscanf_r+0x2ac>)
 800b5ce:	91a0      	str	r1, [sp, #640]	; 0x280
 800b5d0:	f10d 0804 	add.w	r8, sp, #4
 800b5d4:	49a5      	ldr	r1, [pc, #660]	; (800b86c <__ssvfiscanf_r+0x2b0>)
 800b5d6:	4fa6      	ldr	r7, [pc, #664]	; (800b870 <__ssvfiscanf_r+0x2b4>)
 800b5d8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800b874 <__ssvfiscanf_r+0x2b8>
 800b5dc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800b5e0:	4606      	mov	r6, r0
 800b5e2:	91a1      	str	r1, [sp, #644]	; 0x284
 800b5e4:	9300      	str	r3, [sp, #0]
 800b5e6:	7813      	ldrb	r3, [r2, #0]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	f000 815a 	beq.w	800b8a2 <__ssvfiscanf_r+0x2e6>
 800b5ee:	5dd9      	ldrb	r1, [r3, r7]
 800b5f0:	f011 0108 	ands.w	r1, r1, #8
 800b5f4:	f102 0501 	add.w	r5, r2, #1
 800b5f8:	d019      	beq.n	800b62e <__ssvfiscanf_r+0x72>
 800b5fa:	6863      	ldr	r3, [r4, #4]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	dd0f      	ble.n	800b620 <__ssvfiscanf_r+0x64>
 800b600:	6823      	ldr	r3, [r4, #0]
 800b602:	781a      	ldrb	r2, [r3, #0]
 800b604:	5cba      	ldrb	r2, [r7, r2]
 800b606:	0712      	lsls	r2, r2, #28
 800b608:	d401      	bmi.n	800b60e <__ssvfiscanf_r+0x52>
 800b60a:	462a      	mov	r2, r5
 800b60c:	e7eb      	b.n	800b5e6 <__ssvfiscanf_r+0x2a>
 800b60e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b610:	3201      	adds	r2, #1
 800b612:	9245      	str	r2, [sp, #276]	; 0x114
 800b614:	6862      	ldr	r2, [r4, #4]
 800b616:	3301      	adds	r3, #1
 800b618:	3a01      	subs	r2, #1
 800b61a:	6062      	str	r2, [r4, #4]
 800b61c:	6023      	str	r3, [r4, #0]
 800b61e:	e7ec      	b.n	800b5fa <__ssvfiscanf_r+0x3e>
 800b620:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b622:	4621      	mov	r1, r4
 800b624:	4630      	mov	r0, r6
 800b626:	4798      	blx	r3
 800b628:	2800      	cmp	r0, #0
 800b62a:	d0e9      	beq.n	800b600 <__ssvfiscanf_r+0x44>
 800b62c:	e7ed      	b.n	800b60a <__ssvfiscanf_r+0x4e>
 800b62e:	2b25      	cmp	r3, #37	; 0x25
 800b630:	d012      	beq.n	800b658 <__ssvfiscanf_r+0x9c>
 800b632:	469a      	mov	sl, r3
 800b634:	6863      	ldr	r3, [r4, #4]
 800b636:	2b00      	cmp	r3, #0
 800b638:	f340 8091 	ble.w	800b75e <__ssvfiscanf_r+0x1a2>
 800b63c:	6822      	ldr	r2, [r4, #0]
 800b63e:	7813      	ldrb	r3, [r2, #0]
 800b640:	4553      	cmp	r3, sl
 800b642:	f040 812e 	bne.w	800b8a2 <__ssvfiscanf_r+0x2e6>
 800b646:	6863      	ldr	r3, [r4, #4]
 800b648:	3b01      	subs	r3, #1
 800b64a:	6063      	str	r3, [r4, #4]
 800b64c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800b64e:	3201      	adds	r2, #1
 800b650:	3301      	adds	r3, #1
 800b652:	6022      	str	r2, [r4, #0]
 800b654:	9345      	str	r3, [sp, #276]	; 0x114
 800b656:	e7d8      	b.n	800b60a <__ssvfiscanf_r+0x4e>
 800b658:	9141      	str	r1, [sp, #260]	; 0x104
 800b65a:	9143      	str	r1, [sp, #268]	; 0x10c
 800b65c:	7853      	ldrb	r3, [r2, #1]
 800b65e:	2b2a      	cmp	r3, #42	; 0x2a
 800b660:	bf02      	ittt	eq
 800b662:	2310      	moveq	r3, #16
 800b664:	1c95      	addeq	r5, r2, #2
 800b666:	9341      	streq	r3, [sp, #260]	; 0x104
 800b668:	220a      	movs	r2, #10
 800b66a:	46aa      	mov	sl, r5
 800b66c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800b670:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800b674:	2b09      	cmp	r3, #9
 800b676:	d91d      	bls.n	800b6b4 <__ssvfiscanf_r+0xf8>
 800b678:	487e      	ldr	r0, [pc, #504]	; (800b874 <__ssvfiscanf_r+0x2b8>)
 800b67a:	2203      	movs	r2, #3
 800b67c:	f7f4 fdc0 	bl	8000200 <memchr>
 800b680:	b140      	cbz	r0, 800b694 <__ssvfiscanf_r+0xd8>
 800b682:	2301      	movs	r3, #1
 800b684:	eba0 0009 	sub.w	r0, r0, r9
 800b688:	fa03 f000 	lsl.w	r0, r3, r0
 800b68c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b68e:	4318      	orrs	r0, r3
 800b690:	9041      	str	r0, [sp, #260]	; 0x104
 800b692:	4655      	mov	r5, sl
 800b694:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b698:	2b78      	cmp	r3, #120	; 0x78
 800b69a:	d806      	bhi.n	800b6aa <__ssvfiscanf_r+0xee>
 800b69c:	2b57      	cmp	r3, #87	; 0x57
 800b69e:	d810      	bhi.n	800b6c2 <__ssvfiscanf_r+0x106>
 800b6a0:	2b25      	cmp	r3, #37	; 0x25
 800b6a2:	d0c6      	beq.n	800b632 <__ssvfiscanf_r+0x76>
 800b6a4:	d856      	bhi.n	800b754 <__ssvfiscanf_r+0x198>
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d064      	beq.n	800b774 <__ssvfiscanf_r+0x1b8>
 800b6aa:	2303      	movs	r3, #3
 800b6ac:	9347      	str	r3, [sp, #284]	; 0x11c
 800b6ae:	230a      	movs	r3, #10
 800b6b0:	9342      	str	r3, [sp, #264]	; 0x108
 800b6b2:	e071      	b.n	800b798 <__ssvfiscanf_r+0x1dc>
 800b6b4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b6b6:	fb02 1103 	mla	r1, r2, r3, r1
 800b6ba:	3930      	subs	r1, #48	; 0x30
 800b6bc:	9143      	str	r1, [sp, #268]	; 0x10c
 800b6be:	4655      	mov	r5, sl
 800b6c0:	e7d3      	b.n	800b66a <__ssvfiscanf_r+0xae>
 800b6c2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800b6c6:	2a20      	cmp	r2, #32
 800b6c8:	d8ef      	bhi.n	800b6aa <__ssvfiscanf_r+0xee>
 800b6ca:	a101      	add	r1, pc, #4	; (adr r1, 800b6d0 <__ssvfiscanf_r+0x114>)
 800b6cc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b6d0:	0800b783 	.word	0x0800b783
 800b6d4:	0800b6ab 	.word	0x0800b6ab
 800b6d8:	0800b6ab 	.word	0x0800b6ab
 800b6dc:	0800b7e1 	.word	0x0800b7e1
 800b6e0:	0800b6ab 	.word	0x0800b6ab
 800b6e4:	0800b6ab 	.word	0x0800b6ab
 800b6e8:	0800b6ab 	.word	0x0800b6ab
 800b6ec:	0800b6ab 	.word	0x0800b6ab
 800b6f0:	0800b6ab 	.word	0x0800b6ab
 800b6f4:	0800b6ab 	.word	0x0800b6ab
 800b6f8:	0800b6ab 	.word	0x0800b6ab
 800b6fc:	0800b7f7 	.word	0x0800b7f7
 800b700:	0800b7cd 	.word	0x0800b7cd
 800b704:	0800b75b 	.word	0x0800b75b
 800b708:	0800b75b 	.word	0x0800b75b
 800b70c:	0800b75b 	.word	0x0800b75b
 800b710:	0800b6ab 	.word	0x0800b6ab
 800b714:	0800b7d1 	.word	0x0800b7d1
 800b718:	0800b6ab 	.word	0x0800b6ab
 800b71c:	0800b6ab 	.word	0x0800b6ab
 800b720:	0800b6ab 	.word	0x0800b6ab
 800b724:	0800b6ab 	.word	0x0800b6ab
 800b728:	0800b807 	.word	0x0800b807
 800b72c:	0800b7d9 	.word	0x0800b7d9
 800b730:	0800b77b 	.word	0x0800b77b
 800b734:	0800b6ab 	.word	0x0800b6ab
 800b738:	0800b6ab 	.word	0x0800b6ab
 800b73c:	0800b803 	.word	0x0800b803
 800b740:	0800b6ab 	.word	0x0800b6ab
 800b744:	0800b7cd 	.word	0x0800b7cd
 800b748:	0800b6ab 	.word	0x0800b6ab
 800b74c:	0800b6ab 	.word	0x0800b6ab
 800b750:	0800b783 	.word	0x0800b783
 800b754:	3b45      	subs	r3, #69	; 0x45
 800b756:	2b02      	cmp	r3, #2
 800b758:	d8a7      	bhi.n	800b6aa <__ssvfiscanf_r+0xee>
 800b75a:	2305      	movs	r3, #5
 800b75c:	e01b      	b.n	800b796 <__ssvfiscanf_r+0x1da>
 800b75e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b760:	4621      	mov	r1, r4
 800b762:	4630      	mov	r0, r6
 800b764:	4798      	blx	r3
 800b766:	2800      	cmp	r0, #0
 800b768:	f43f af68 	beq.w	800b63c <__ssvfiscanf_r+0x80>
 800b76c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b76e:	2800      	cmp	r0, #0
 800b770:	f040 808d 	bne.w	800b88e <__ssvfiscanf_r+0x2d2>
 800b774:	f04f 30ff 	mov.w	r0, #4294967295
 800b778:	e08f      	b.n	800b89a <__ssvfiscanf_r+0x2de>
 800b77a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b77c:	f042 0220 	orr.w	r2, r2, #32
 800b780:	9241      	str	r2, [sp, #260]	; 0x104
 800b782:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b784:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b788:	9241      	str	r2, [sp, #260]	; 0x104
 800b78a:	2210      	movs	r2, #16
 800b78c:	2b6f      	cmp	r3, #111	; 0x6f
 800b78e:	9242      	str	r2, [sp, #264]	; 0x108
 800b790:	bf34      	ite	cc
 800b792:	2303      	movcc	r3, #3
 800b794:	2304      	movcs	r3, #4
 800b796:	9347      	str	r3, [sp, #284]	; 0x11c
 800b798:	6863      	ldr	r3, [r4, #4]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	dd42      	ble.n	800b824 <__ssvfiscanf_r+0x268>
 800b79e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b7a0:	0659      	lsls	r1, r3, #25
 800b7a2:	d404      	bmi.n	800b7ae <__ssvfiscanf_r+0x1f2>
 800b7a4:	6823      	ldr	r3, [r4, #0]
 800b7a6:	781a      	ldrb	r2, [r3, #0]
 800b7a8:	5cba      	ldrb	r2, [r7, r2]
 800b7aa:	0712      	lsls	r2, r2, #28
 800b7ac:	d441      	bmi.n	800b832 <__ssvfiscanf_r+0x276>
 800b7ae:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b7b0:	2b02      	cmp	r3, #2
 800b7b2:	dc50      	bgt.n	800b856 <__ssvfiscanf_r+0x29a>
 800b7b4:	466b      	mov	r3, sp
 800b7b6:	4622      	mov	r2, r4
 800b7b8:	a941      	add	r1, sp, #260	; 0x104
 800b7ba:	4630      	mov	r0, r6
 800b7bc:	f000 f876 	bl	800b8ac <_scanf_chars>
 800b7c0:	2801      	cmp	r0, #1
 800b7c2:	d06e      	beq.n	800b8a2 <__ssvfiscanf_r+0x2e6>
 800b7c4:	2802      	cmp	r0, #2
 800b7c6:	f47f af20 	bne.w	800b60a <__ssvfiscanf_r+0x4e>
 800b7ca:	e7cf      	b.n	800b76c <__ssvfiscanf_r+0x1b0>
 800b7cc:	220a      	movs	r2, #10
 800b7ce:	e7dd      	b.n	800b78c <__ssvfiscanf_r+0x1d0>
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	9342      	str	r3, [sp, #264]	; 0x108
 800b7d4:	2303      	movs	r3, #3
 800b7d6:	e7de      	b.n	800b796 <__ssvfiscanf_r+0x1da>
 800b7d8:	2308      	movs	r3, #8
 800b7da:	9342      	str	r3, [sp, #264]	; 0x108
 800b7dc:	2304      	movs	r3, #4
 800b7de:	e7da      	b.n	800b796 <__ssvfiscanf_r+0x1da>
 800b7e0:	4629      	mov	r1, r5
 800b7e2:	4640      	mov	r0, r8
 800b7e4:	f000 f9e0 	bl	800bba8 <__sccl>
 800b7e8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b7ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7ee:	9341      	str	r3, [sp, #260]	; 0x104
 800b7f0:	4605      	mov	r5, r0
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	e7cf      	b.n	800b796 <__ssvfiscanf_r+0x1da>
 800b7f6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b7f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7fc:	9341      	str	r3, [sp, #260]	; 0x104
 800b7fe:	2300      	movs	r3, #0
 800b800:	e7c9      	b.n	800b796 <__ssvfiscanf_r+0x1da>
 800b802:	2302      	movs	r3, #2
 800b804:	e7c7      	b.n	800b796 <__ssvfiscanf_r+0x1da>
 800b806:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b808:	06c3      	lsls	r3, r0, #27
 800b80a:	f53f aefe 	bmi.w	800b60a <__ssvfiscanf_r+0x4e>
 800b80e:	9b00      	ldr	r3, [sp, #0]
 800b810:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b812:	1d19      	adds	r1, r3, #4
 800b814:	9100      	str	r1, [sp, #0]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	f010 0f01 	tst.w	r0, #1
 800b81c:	bf14      	ite	ne
 800b81e:	801a      	strhne	r2, [r3, #0]
 800b820:	601a      	streq	r2, [r3, #0]
 800b822:	e6f2      	b.n	800b60a <__ssvfiscanf_r+0x4e>
 800b824:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b826:	4621      	mov	r1, r4
 800b828:	4630      	mov	r0, r6
 800b82a:	4798      	blx	r3
 800b82c:	2800      	cmp	r0, #0
 800b82e:	d0b6      	beq.n	800b79e <__ssvfiscanf_r+0x1e2>
 800b830:	e79c      	b.n	800b76c <__ssvfiscanf_r+0x1b0>
 800b832:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b834:	3201      	adds	r2, #1
 800b836:	9245      	str	r2, [sp, #276]	; 0x114
 800b838:	6862      	ldr	r2, [r4, #4]
 800b83a:	3a01      	subs	r2, #1
 800b83c:	2a00      	cmp	r2, #0
 800b83e:	6062      	str	r2, [r4, #4]
 800b840:	dd02      	ble.n	800b848 <__ssvfiscanf_r+0x28c>
 800b842:	3301      	adds	r3, #1
 800b844:	6023      	str	r3, [r4, #0]
 800b846:	e7ad      	b.n	800b7a4 <__ssvfiscanf_r+0x1e8>
 800b848:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b84a:	4621      	mov	r1, r4
 800b84c:	4630      	mov	r0, r6
 800b84e:	4798      	blx	r3
 800b850:	2800      	cmp	r0, #0
 800b852:	d0a7      	beq.n	800b7a4 <__ssvfiscanf_r+0x1e8>
 800b854:	e78a      	b.n	800b76c <__ssvfiscanf_r+0x1b0>
 800b856:	2b04      	cmp	r3, #4
 800b858:	dc0e      	bgt.n	800b878 <__ssvfiscanf_r+0x2bc>
 800b85a:	466b      	mov	r3, sp
 800b85c:	4622      	mov	r2, r4
 800b85e:	a941      	add	r1, sp, #260	; 0x104
 800b860:	4630      	mov	r0, r6
 800b862:	f000 f87d 	bl	800b960 <_scanf_i>
 800b866:	e7ab      	b.n	800b7c0 <__ssvfiscanf_r+0x204>
 800b868:	0800b509 	.word	0x0800b509
 800b86c:	0800b583 	.word	0x0800b583
 800b870:	0800d581 	.word	0x0800d581
 800b874:	0800d8ea 	.word	0x0800d8ea
 800b878:	4b0b      	ldr	r3, [pc, #44]	; (800b8a8 <__ssvfiscanf_r+0x2ec>)
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	f43f aec5 	beq.w	800b60a <__ssvfiscanf_r+0x4e>
 800b880:	466b      	mov	r3, sp
 800b882:	4622      	mov	r2, r4
 800b884:	a941      	add	r1, sp, #260	; 0x104
 800b886:	4630      	mov	r0, r6
 800b888:	f7fc fb76 	bl	8007f78 <_scanf_float>
 800b88c:	e798      	b.n	800b7c0 <__ssvfiscanf_r+0x204>
 800b88e:	89a3      	ldrh	r3, [r4, #12]
 800b890:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b894:	bf18      	it	ne
 800b896:	f04f 30ff 	movne.w	r0, #4294967295
 800b89a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800b89e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8a2:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b8a4:	e7f9      	b.n	800b89a <__ssvfiscanf_r+0x2de>
 800b8a6:	bf00      	nop
 800b8a8:	08007f79 	.word	0x08007f79

0800b8ac <_scanf_chars>:
 800b8ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8b0:	4615      	mov	r5, r2
 800b8b2:	688a      	ldr	r2, [r1, #8]
 800b8b4:	4680      	mov	r8, r0
 800b8b6:	460c      	mov	r4, r1
 800b8b8:	b932      	cbnz	r2, 800b8c8 <_scanf_chars+0x1c>
 800b8ba:	698a      	ldr	r2, [r1, #24]
 800b8bc:	2a00      	cmp	r2, #0
 800b8be:	bf0c      	ite	eq
 800b8c0:	2201      	moveq	r2, #1
 800b8c2:	f04f 32ff 	movne.w	r2, #4294967295
 800b8c6:	608a      	str	r2, [r1, #8]
 800b8c8:	6822      	ldr	r2, [r4, #0]
 800b8ca:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800b95c <_scanf_chars+0xb0>
 800b8ce:	06d1      	lsls	r1, r2, #27
 800b8d0:	bf5f      	itttt	pl
 800b8d2:	681a      	ldrpl	r2, [r3, #0]
 800b8d4:	1d11      	addpl	r1, r2, #4
 800b8d6:	6019      	strpl	r1, [r3, #0]
 800b8d8:	6816      	ldrpl	r6, [r2, #0]
 800b8da:	2700      	movs	r7, #0
 800b8dc:	69a0      	ldr	r0, [r4, #24]
 800b8de:	b188      	cbz	r0, 800b904 <_scanf_chars+0x58>
 800b8e0:	2801      	cmp	r0, #1
 800b8e2:	d107      	bne.n	800b8f4 <_scanf_chars+0x48>
 800b8e4:	682a      	ldr	r2, [r5, #0]
 800b8e6:	7811      	ldrb	r1, [r2, #0]
 800b8e8:	6962      	ldr	r2, [r4, #20]
 800b8ea:	5c52      	ldrb	r2, [r2, r1]
 800b8ec:	b952      	cbnz	r2, 800b904 <_scanf_chars+0x58>
 800b8ee:	2f00      	cmp	r7, #0
 800b8f0:	d031      	beq.n	800b956 <_scanf_chars+0xaa>
 800b8f2:	e022      	b.n	800b93a <_scanf_chars+0x8e>
 800b8f4:	2802      	cmp	r0, #2
 800b8f6:	d120      	bne.n	800b93a <_scanf_chars+0x8e>
 800b8f8:	682b      	ldr	r3, [r5, #0]
 800b8fa:	781b      	ldrb	r3, [r3, #0]
 800b8fc:	f813 3009 	ldrb.w	r3, [r3, r9]
 800b900:	071b      	lsls	r3, r3, #28
 800b902:	d41a      	bmi.n	800b93a <_scanf_chars+0x8e>
 800b904:	6823      	ldr	r3, [r4, #0]
 800b906:	06da      	lsls	r2, r3, #27
 800b908:	bf5e      	ittt	pl
 800b90a:	682b      	ldrpl	r3, [r5, #0]
 800b90c:	781b      	ldrbpl	r3, [r3, #0]
 800b90e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b912:	682a      	ldr	r2, [r5, #0]
 800b914:	686b      	ldr	r3, [r5, #4]
 800b916:	3201      	adds	r2, #1
 800b918:	602a      	str	r2, [r5, #0]
 800b91a:	68a2      	ldr	r2, [r4, #8]
 800b91c:	3b01      	subs	r3, #1
 800b91e:	3a01      	subs	r2, #1
 800b920:	606b      	str	r3, [r5, #4]
 800b922:	3701      	adds	r7, #1
 800b924:	60a2      	str	r2, [r4, #8]
 800b926:	b142      	cbz	r2, 800b93a <_scanf_chars+0x8e>
 800b928:	2b00      	cmp	r3, #0
 800b92a:	dcd7      	bgt.n	800b8dc <_scanf_chars+0x30>
 800b92c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b930:	4629      	mov	r1, r5
 800b932:	4640      	mov	r0, r8
 800b934:	4798      	blx	r3
 800b936:	2800      	cmp	r0, #0
 800b938:	d0d0      	beq.n	800b8dc <_scanf_chars+0x30>
 800b93a:	6823      	ldr	r3, [r4, #0]
 800b93c:	f013 0310 	ands.w	r3, r3, #16
 800b940:	d105      	bne.n	800b94e <_scanf_chars+0xa2>
 800b942:	68e2      	ldr	r2, [r4, #12]
 800b944:	3201      	adds	r2, #1
 800b946:	60e2      	str	r2, [r4, #12]
 800b948:	69a2      	ldr	r2, [r4, #24]
 800b94a:	b102      	cbz	r2, 800b94e <_scanf_chars+0xa2>
 800b94c:	7033      	strb	r3, [r6, #0]
 800b94e:	6923      	ldr	r3, [r4, #16]
 800b950:	443b      	add	r3, r7
 800b952:	6123      	str	r3, [r4, #16]
 800b954:	2000      	movs	r0, #0
 800b956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b95a:	bf00      	nop
 800b95c:	0800d581 	.word	0x0800d581

0800b960 <_scanf_i>:
 800b960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b964:	4698      	mov	r8, r3
 800b966:	4b76      	ldr	r3, [pc, #472]	; (800bb40 <_scanf_i+0x1e0>)
 800b968:	460c      	mov	r4, r1
 800b96a:	4682      	mov	sl, r0
 800b96c:	4616      	mov	r6, r2
 800b96e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b972:	b087      	sub	sp, #28
 800b974:	ab03      	add	r3, sp, #12
 800b976:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b97a:	4b72      	ldr	r3, [pc, #456]	; (800bb44 <_scanf_i+0x1e4>)
 800b97c:	69a1      	ldr	r1, [r4, #24]
 800b97e:	4a72      	ldr	r2, [pc, #456]	; (800bb48 <_scanf_i+0x1e8>)
 800b980:	2903      	cmp	r1, #3
 800b982:	bf18      	it	ne
 800b984:	461a      	movne	r2, r3
 800b986:	68a3      	ldr	r3, [r4, #8]
 800b988:	9201      	str	r2, [sp, #4]
 800b98a:	1e5a      	subs	r2, r3, #1
 800b98c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b990:	bf88      	it	hi
 800b992:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b996:	4627      	mov	r7, r4
 800b998:	bf82      	ittt	hi
 800b99a:	eb03 0905 	addhi.w	r9, r3, r5
 800b99e:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b9a2:	60a3      	strhi	r3, [r4, #8]
 800b9a4:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b9a8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800b9ac:	bf98      	it	ls
 800b9ae:	f04f 0900 	movls.w	r9, #0
 800b9b2:	6023      	str	r3, [r4, #0]
 800b9b4:	463d      	mov	r5, r7
 800b9b6:	f04f 0b00 	mov.w	fp, #0
 800b9ba:	6831      	ldr	r1, [r6, #0]
 800b9bc:	ab03      	add	r3, sp, #12
 800b9be:	7809      	ldrb	r1, [r1, #0]
 800b9c0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b9c4:	2202      	movs	r2, #2
 800b9c6:	f7f4 fc1b 	bl	8000200 <memchr>
 800b9ca:	b328      	cbz	r0, 800ba18 <_scanf_i+0xb8>
 800b9cc:	f1bb 0f01 	cmp.w	fp, #1
 800b9d0:	d159      	bne.n	800ba86 <_scanf_i+0x126>
 800b9d2:	6862      	ldr	r2, [r4, #4]
 800b9d4:	b92a      	cbnz	r2, 800b9e2 <_scanf_i+0x82>
 800b9d6:	6822      	ldr	r2, [r4, #0]
 800b9d8:	2308      	movs	r3, #8
 800b9da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b9de:	6063      	str	r3, [r4, #4]
 800b9e0:	6022      	str	r2, [r4, #0]
 800b9e2:	6822      	ldr	r2, [r4, #0]
 800b9e4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b9e8:	6022      	str	r2, [r4, #0]
 800b9ea:	68a2      	ldr	r2, [r4, #8]
 800b9ec:	1e51      	subs	r1, r2, #1
 800b9ee:	60a1      	str	r1, [r4, #8]
 800b9f0:	b192      	cbz	r2, 800ba18 <_scanf_i+0xb8>
 800b9f2:	6832      	ldr	r2, [r6, #0]
 800b9f4:	1c51      	adds	r1, r2, #1
 800b9f6:	6031      	str	r1, [r6, #0]
 800b9f8:	7812      	ldrb	r2, [r2, #0]
 800b9fa:	f805 2b01 	strb.w	r2, [r5], #1
 800b9fe:	6872      	ldr	r2, [r6, #4]
 800ba00:	3a01      	subs	r2, #1
 800ba02:	2a00      	cmp	r2, #0
 800ba04:	6072      	str	r2, [r6, #4]
 800ba06:	dc07      	bgt.n	800ba18 <_scanf_i+0xb8>
 800ba08:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800ba0c:	4631      	mov	r1, r6
 800ba0e:	4650      	mov	r0, sl
 800ba10:	4790      	blx	r2
 800ba12:	2800      	cmp	r0, #0
 800ba14:	f040 8085 	bne.w	800bb22 <_scanf_i+0x1c2>
 800ba18:	f10b 0b01 	add.w	fp, fp, #1
 800ba1c:	f1bb 0f03 	cmp.w	fp, #3
 800ba20:	d1cb      	bne.n	800b9ba <_scanf_i+0x5a>
 800ba22:	6863      	ldr	r3, [r4, #4]
 800ba24:	b90b      	cbnz	r3, 800ba2a <_scanf_i+0xca>
 800ba26:	230a      	movs	r3, #10
 800ba28:	6063      	str	r3, [r4, #4]
 800ba2a:	6863      	ldr	r3, [r4, #4]
 800ba2c:	4947      	ldr	r1, [pc, #284]	; (800bb4c <_scanf_i+0x1ec>)
 800ba2e:	6960      	ldr	r0, [r4, #20]
 800ba30:	1ac9      	subs	r1, r1, r3
 800ba32:	f000 f8b9 	bl	800bba8 <__sccl>
 800ba36:	f04f 0b00 	mov.w	fp, #0
 800ba3a:	68a3      	ldr	r3, [r4, #8]
 800ba3c:	6822      	ldr	r2, [r4, #0]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d03d      	beq.n	800babe <_scanf_i+0x15e>
 800ba42:	6831      	ldr	r1, [r6, #0]
 800ba44:	6960      	ldr	r0, [r4, #20]
 800ba46:	f891 c000 	ldrb.w	ip, [r1]
 800ba4a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800ba4e:	2800      	cmp	r0, #0
 800ba50:	d035      	beq.n	800babe <_scanf_i+0x15e>
 800ba52:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800ba56:	d124      	bne.n	800baa2 <_scanf_i+0x142>
 800ba58:	0510      	lsls	r0, r2, #20
 800ba5a:	d522      	bpl.n	800baa2 <_scanf_i+0x142>
 800ba5c:	f10b 0b01 	add.w	fp, fp, #1
 800ba60:	f1b9 0f00 	cmp.w	r9, #0
 800ba64:	d003      	beq.n	800ba6e <_scanf_i+0x10e>
 800ba66:	3301      	adds	r3, #1
 800ba68:	f109 39ff 	add.w	r9, r9, #4294967295
 800ba6c:	60a3      	str	r3, [r4, #8]
 800ba6e:	6873      	ldr	r3, [r6, #4]
 800ba70:	3b01      	subs	r3, #1
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	6073      	str	r3, [r6, #4]
 800ba76:	dd1b      	ble.n	800bab0 <_scanf_i+0x150>
 800ba78:	6833      	ldr	r3, [r6, #0]
 800ba7a:	3301      	adds	r3, #1
 800ba7c:	6033      	str	r3, [r6, #0]
 800ba7e:	68a3      	ldr	r3, [r4, #8]
 800ba80:	3b01      	subs	r3, #1
 800ba82:	60a3      	str	r3, [r4, #8]
 800ba84:	e7d9      	b.n	800ba3a <_scanf_i+0xda>
 800ba86:	f1bb 0f02 	cmp.w	fp, #2
 800ba8a:	d1ae      	bne.n	800b9ea <_scanf_i+0x8a>
 800ba8c:	6822      	ldr	r2, [r4, #0]
 800ba8e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800ba92:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800ba96:	d1bf      	bne.n	800ba18 <_scanf_i+0xb8>
 800ba98:	2310      	movs	r3, #16
 800ba9a:	6063      	str	r3, [r4, #4]
 800ba9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800baa0:	e7a2      	b.n	800b9e8 <_scanf_i+0x88>
 800baa2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800baa6:	6022      	str	r2, [r4, #0]
 800baa8:	780b      	ldrb	r3, [r1, #0]
 800baaa:	f805 3b01 	strb.w	r3, [r5], #1
 800baae:	e7de      	b.n	800ba6e <_scanf_i+0x10e>
 800bab0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bab4:	4631      	mov	r1, r6
 800bab6:	4650      	mov	r0, sl
 800bab8:	4798      	blx	r3
 800baba:	2800      	cmp	r0, #0
 800babc:	d0df      	beq.n	800ba7e <_scanf_i+0x11e>
 800babe:	6823      	ldr	r3, [r4, #0]
 800bac0:	05db      	lsls	r3, r3, #23
 800bac2:	d50d      	bpl.n	800bae0 <_scanf_i+0x180>
 800bac4:	42bd      	cmp	r5, r7
 800bac6:	d909      	bls.n	800badc <_scanf_i+0x17c>
 800bac8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800bacc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bad0:	4632      	mov	r2, r6
 800bad2:	4650      	mov	r0, sl
 800bad4:	4798      	blx	r3
 800bad6:	f105 39ff 	add.w	r9, r5, #4294967295
 800bada:	464d      	mov	r5, r9
 800badc:	42bd      	cmp	r5, r7
 800bade:	d02d      	beq.n	800bb3c <_scanf_i+0x1dc>
 800bae0:	6822      	ldr	r2, [r4, #0]
 800bae2:	f012 0210 	ands.w	r2, r2, #16
 800bae6:	d113      	bne.n	800bb10 <_scanf_i+0x1b0>
 800bae8:	702a      	strb	r2, [r5, #0]
 800baea:	6863      	ldr	r3, [r4, #4]
 800baec:	9e01      	ldr	r6, [sp, #4]
 800baee:	4639      	mov	r1, r7
 800baf0:	4650      	mov	r0, sl
 800baf2:	47b0      	blx	r6
 800baf4:	6821      	ldr	r1, [r4, #0]
 800baf6:	f8d8 3000 	ldr.w	r3, [r8]
 800bafa:	f011 0f20 	tst.w	r1, #32
 800bafe:	d013      	beq.n	800bb28 <_scanf_i+0x1c8>
 800bb00:	1d1a      	adds	r2, r3, #4
 800bb02:	f8c8 2000 	str.w	r2, [r8]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	6018      	str	r0, [r3, #0]
 800bb0a:	68e3      	ldr	r3, [r4, #12]
 800bb0c:	3301      	adds	r3, #1
 800bb0e:	60e3      	str	r3, [r4, #12]
 800bb10:	1bed      	subs	r5, r5, r7
 800bb12:	44ab      	add	fp, r5
 800bb14:	6925      	ldr	r5, [r4, #16]
 800bb16:	445d      	add	r5, fp
 800bb18:	6125      	str	r5, [r4, #16]
 800bb1a:	2000      	movs	r0, #0
 800bb1c:	b007      	add	sp, #28
 800bb1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb22:	f04f 0b00 	mov.w	fp, #0
 800bb26:	e7ca      	b.n	800babe <_scanf_i+0x15e>
 800bb28:	1d1a      	adds	r2, r3, #4
 800bb2a:	f8c8 2000 	str.w	r2, [r8]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	f011 0f01 	tst.w	r1, #1
 800bb34:	bf14      	ite	ne
 800bb36:	8018      	strhne	r0, [r3, #0]
 800bb38:	6018      	streq	r0, [r3, #0]
 800bb3a:	e7e6      	b.n	800bb0a <_scanf_i+0x1aa>
 800bb3c:	2001      	movs	r0, #1
 800bb3e:	e7ed      	b.n	800bb1c <_scanf_i+0x1bc>
 800bb40:	0800d4cc 	.word	0x0800d4cc
 800bb44:	0800bcfd 	.word	0x0800bcfd
 800bb48:	08009245 	.word	0x08009245
 800bb4c:	0800d90e 	.word	0x0800d90e

0800bb50 <_read_r>:
 800bb50:	b538      	push	{r3, r4, r5, lr}
 800bb52:	4d07      	ldr	r5, [pc, #28]	; (800bb70 <_read_r+0x20>)
 800bb54:	4604      	mov	r4, r0
 800bb56:	4608      	mov	r0, r1
 800bb58:	4611      	mov	r1, r2
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	602a      	str	r2, [r5, #0]
 800bb5e:	461a      	mov	r2, r3
 800bb60:	f7f6 ff30 	bl	80029c4 <_read>
 800bb64:	1c43      	adds	r3, r0, #1
 800bb66:	d102      	bne.n	800bb6e <_read_r+0x1e>
 800bb68:	682b      	ldr	r3, [r5, #0]
 800bb6a:	b103      	cbz	r3, 800bb6e <_read_r+0x1e>
 800bb6c:	6023      	str	r3, [r4, #0]
 800bb6e:	bd38      	pop	{r3, r4, r5, pc}
 800bb70:	20000508 	.word	0x20000508
 800bb74:	00000000 	.word	0x00000000

0800bb78 <nan>:
 800bb78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bb80 <nan+0x8>
 800bb7c:	4770      	bx	lr
 800bb7e:	bf00      	nop
 800bb80:	00000000 	.word	0x00000000
 800bb84:	7ff80000 	.word	0x7ff80000

0800bb88 <_sbrk_r>:
 800bb88:	b538      	push	{r3, r4, r5, lr}
 800bb8a:	4d06      	ldr	r5, [pc, #24]	; (800bba4 <_sbrk_r+0x1c>)
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	4604      	mov	r4, r0
 800bb90:	4608      	mov	r0, r1
 800bb92:	602b      	str	r3, [r5, #0]
 800bb94:	f7f6 ff84 	bl	8002aa0 <_sbrk>
 800bb98:	1c43      	adds	r3, r0, #1
 800bb9a:	d102      	bne.n	800bba2 <_sbrk_r+0x1a>
 800bb9c:	682b      	ldr	r3, [r5, #0]
 800bb9e:	b103      	cbz	r3, 800bba2 <_sbrk_r+0x1a>
 800bba0:	6023      	str	r3, [r4, #0]
 800bba2:	bd38      	pop	{r3, r4, r5, pc}
 800bba4:	20000508 	.word	0x20000508

0800bba8 <__sccl>:
 800bba8:	b570      	push	{r4, r5, r6, lr}
 800bbaa:	780b      	ldrb	r3, [r1, #0]
 800bbac:	4604      	mov	r4, r0
 800bbae:	2b5e      	cmp	r3, #94	; 0x5e
 800bbb0:	bf0b      	itete	eq
 800bbb2:	784b      	ldrbeq	r3, [r1, #1]
 800bbb4:	1c48      	addne	r0, r1, #1
 800bbb6:	1c88      	addeq	r0, r1, #2
 800bbb8:	2200      	movne	r2, #0
 800bbba:	bf08      	it	eq
 800bbbc:	2201      	moveq	r2, #1
 800bbbe:	1e61      	subs	r1, r4, #1
 800bbc0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800bbc4:	f801 2f01 	strb.w	r2, [r1, #1]!
 800bbc8:	42a9      	cmp	r1, r5
 800bbca:	d1fb      	bne.n	800bbc4 <__sccl+0x1c>
 800bbcc:	b90b      	cbnz	r3, 800bbd2 <__sccl+0x2a>
 800bbce:	3801      	subs	r0, #1
 800bbd0:	bd70      	pop	{r4, r5, r6, pc}
 800bbd2:	f082 0201 	eor.w	r2, r2, #1
 800bbd6:	54e2      	strb	r2, [r4, r3]
 800bbd8:	4605      	mov	r5, r0
 800bbda:	4628      	mov	r0, r5
 800bbdc:	f810 1b01 	ldrb.w	r1, [r0], #1
 800bbe0:	292d      	cmp	r1, #45	; 0x2d
 800bbe2:	d006      	beq.n	800bbf2 <__sccl+0x4a>
 800bbe4:	295d      	cmp	r1, #93	; 0x5d
 800bbe6:	d0f3      	beq.n	800bbd0 <__sccl+0x28>
 800bbe8:	b909      	cbnz	r1, 800bbee <__sccl+0x46>
 800bbea:	4628      	mov	r0, r5
 800bbec:	e7f0      	b.n	800bbd0 <__sccl+0x28>
 800bbee:	460b      	mov	r3, r1
 800bbf0:	e7f1      	b.n	800bbd6 <__sccl+0x2e>
 800bbf2:	786e      	ldrb	r6, [r5, #1]
 800bbf4:	2e5d      	cmp	r6, #93	; 0x5d
 800bbf6:	d0fa      	beq.n	800bbee <__sccl+0x46>
 800bbf8:	42b3      	cmp	r3, r6
 800bbfa:	dcf8      	bgt.n	800bbee <__sccl+0x46>
 800bbfc:	3502      	adds	r5, #2
 800bbfe:	4619      	mov	r1, r3
 800bc00:	3101      	adds	r1, #1
 800bc02:	428e      	cmp	r6, r1
 800bc04:	5462      	strb	r2, [r4, r1]
 800bc06:	dcfb      	bgt.n	800bc00 <__sccl+0x58>
 800bc08:	1af1      	subs	r1, r6, r3
 800bc0a:	3901      	subs	r1, #1
 800bc0c:	1c58      	adds	r0, r3, #1
 800bc0e:	42b3      	cmp	r3, r6
 800bc10:	bfa8      	it	ge
 800bc12:	2100      	movge	r1, #0
 800bc14:	1843      	adds	r3, r0, r1
 800bc16:	e7e0      	b.n	800bbda <__sccl+0x32>

0800bc18 <_strtoul_l.constprop.0>:
 800bc18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bc1c:	4f36      	ldr	r7, [pc, #216]	; (800bcf8 <_strtoul_l.constprop.0+0xe0>)
 800bc1e:	4686      	mov	lr, r0
 800bc20:	460d      	mov	r5, r1
 800bc22:	4628      	mov	r0, r5
 800bc24:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bc28:	5de6      	ldrb	r6, [r4, r7]
 800bc2a:	f016 0608 	ands.w	r6, r6, #8
 800bc2e:	d1f8      	bne.n	800bc22 <_strtoul_l.constprop.0+0xa>
 800bc30:	2c2d      	cmp	r4, #45	; 0x2d
 800bc32:	d12f      	bne.n	800bc94 <_strtoul_l.constprop.0+0x7c>
 800bc34:	782c      	ldrb	r4, [r5, #0]
 800bc36:	2601      	movs	r6, #1
 800bc38:	1c85      	adds	r5, r0, #2
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d057      	beq.n	800bcee <_strtoul_l.constprop.0+0xd6>
 800bc3e:	2b10      	cmp	r3, #16
 800bc40:	d109      	bne.n	800bc56 <_strtoul_l.constprop.0+0x3e>
 800bc42:	2c30      	cmp	r4, #48	; 0x30
 800bc44:	d107      	bne.n	800bc56 <_strtoul_l.constprop.0+0x3e>
 800bc46:	7828      	ldrb	r0, [r5, #0]
 800bc48:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800bc4c:	2858      	cmp	r0, #88	; 0x58
 800bc4e:	d149      	bne.n	800bce4 <_strtoul_l.constprop.0+0xcc>
 800bc50:	786c      	ldrb	r4, [r5, #1]
 800bc52:	2310      	movs	r3, #16
 800bc54:	3502      	adds	r5, #2
 800bc56:	f04f 38ff 	mov.w	r8, #4294967295
 800bc5a:	2700      	movs	r7, #0
 800bc5c:	fbb8 f8f3 	udiv	r8, r8, r3
 800bc60:	fb03 f908 	mul.w	r9, r3, r8
 800bc64:	ea6f 0909 	mvn.w	r9, r9
 800bc68:	4638      	mov	r0, r7
 800bc6a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800bc6e:	f1bc 0f09 	cmp.w	ip, #9
 800bc72:	d814      	bhi.n	800bc9e <_strtoul_l.constprop.0+0x86>
 800bc74:	4664      	mov	r4, ip
 800bc76:	42a3      	cmp	r3, r4
 800bc78:	dd22      	ble.n	800bcc0 <_strtoul_l.constprop.0+0xa8>
 800bc7a:	2f00      	cmp	r7, #0
 800bc7c:	db1d      	blt.n	800bcba <_strtoul_l.constprop.0+0xa2>
 800bc7e:	4580      	cmp	r8, r0
 800bc80:	d31b      	bcc.n	800bcba <_strtoul_l.constprop.0+0xa2>
 800bc82:	d101      	bne.n	800bc88 <_strtoul_l.constprop.0+0x70>
 800bc84:	45a1      	cmp	r9, r4
 800bc86:	db18      	blt.n	800bcba <_strtoul_l.constprop.0+0xa2>
 800bc88:	fb00 4003 	mla	r0, r0, r3, r4
 800bc8c:	2701      	movs	r7, #1
 800bc8e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bc92:	e7ea      	b.n	800bc6a <_strtoul_l.constprop.0+0x52>
 800bc94:	2c2b      	cmp	r4, #43	; 0x2b
 800bc96:	bf04      	itt	eq
 800bc98:	782c      	ldrbeq	r4, [r5, #0]
 800bc9a:	1c85      	addeq	r5, r0, #2
 800bc9c:	e7cd      	b.n	800bc3a <_strtoul_l.constprop.0+0x22>
 800bc9e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800bca2:	f1bc 0f19 	cmp.w	ip, #25
 800bca6:	d801      	bhi.n	800bcac <_strtoul_l.constprop.0+0x94>
 800bca8:	3c37      	subs	r4, #55	; 0x37
 800bcaa:	e7e4      	b.n	800bc76 <_strtoul_l.constprop.0+0x5e>
 800bcac:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800bcb0:	f1bc 0f19 	cmp.w	ip, #25
 800bcb4:	d804      	bhi.n	800bcc0 <_strtoul_l.constprop.0+0xa8>
 800bcb6:	3c57      	subs	r4, #87	; 0x57
 800bcb8:	e7dd      	b.n	800bc76 <_strtoul_l.constprop.0+0x5e>
 800bcba:	f04f 37ff 	mov.w	r7, #4294967295
 800bcbe:	e7e6      	b.n	800bc8e <_strtoul_l.constprop.0+0x76>
 800bcc0:	2f00      	cmp	r7, #0
 800bcc2:	da07      	bge.n	800bcd4 <_strtoul_l.constprop.0+0xbc>
 800bcc4:	2322      	movs	r3, #34	; 0x22
 800bcc6:	f8ce 3000 	str.w	r3, [lr]
 800bcca:	f04f 30ff 	mov.w	r0, #4294967295
 800bcce:	b932      	cbnz	r2, 800bcde <_strtoul_l.constprop.0+0xc6>
 800bcd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bcd4:	b106      	cbz	r6, 800bcd8 <_strtoul_l.constprop.0+0xc0>
 800bcd6:	4240      	negs	r0, r0
 800bcd8:	2a00      	cmp	r2, #0
 800bcda:	d0f9      	beq.n	800bcd0 <_strtoul_l.constprop.0+0xb8>
 800bcdc:	b107      	cbz	r7, 800bce0 <_strtoul_l.constprop.0+0xc8>
 800bcde:	1e69      	subs	r1, r5, #1
 800bce0:	6011      	str	r1, [r2, #0]
 800bce2:	e7f5      	b.n	800bcd0 <_strtoul_l.constprop.0+0xb8>
 800bce4:	2430      	movs	r4, #48	; 0x30
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d1b5      	bne.n	800bc56 <_strtoul_l.constprop.0+0x3e>
 800bcea:	2308      	movs	r3, #8
 800bcec:	e7b3      	b.n	800bc56 <_strtoul_l.constprop.0+0x3e>
 800bcee:	2c30      	cmp	r4, #48	; 0x30
 800bcf0:	d0a9      	beq.n	800bc46 <_strtoul_l.constprop.0+0x2e>
 800bcf2:	230a      	movs	r3, #10
 800bcf4:	e7af      	b.n	800bc56 <_strtoul_l.constprop.0+0x3e>
 800bcf6:	bf00      	nop
 800bcf8:	0800d581 	.word	0x0800d581

0800bcfc <_strtoul_r>:
 800bcfc:	f7ff bf8c 	b.w	800bc18 <_strtoul_l.constprop.0>

0800bd00 <__submore>:
 800bd00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd04:	460c      	mov	r4, r1
 800bd06:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800bd08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd0c:	4299      	cmp	r1, r3
 800bd0e:	d11d      	bne.n	800bd4c <__submore+0x4c>
 800bd10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bd14:	f7ff fa28 	bl	800b168 <_malloc_r>
 800bd18:	b918      	cbnz	r0, 800bd22 <__submore+0x22>
 800bd1a:	f04f 30ff 	mov.w	r0, #4294967295
 800bd1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd26:	63a3      	str	r3, [r4, #56]	; 0x38
 800bd28:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800bd2c:	6360      	str	r0, [r4, #52]	; 0x34
 800bd2e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800bd32:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800bd36:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800bd3a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800bd3e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800bd42:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800bd46:	6020      	str	r0, [r4, #0]
 800bd48:	2000      	movs	r0, #0
 800bd4a:	e7e8      	b.n	800bd1e <__submore+0x1e>
 800bd4c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800bd4e:	0077      	lsls	r7, r6, #1
 800bd50:	463a      	mov	r2, r7
 800bd52:	f000 fa2d 	bl	800c1b0 <_realloc_r>
 800bd56:	4605      	mov	r5, r0
 800bd58:	2800      	cmp	r0, #0
 800bd5a:	d0de      	beq.n	800bd1a <__submore+0x1a>
 800bd5c:	eb00 0806 	add.w	r8, r0, r6
 800bd60:	4601      	mov	r1, r0
 800bd62:	4632      	mov	r2, r6
 800bd64:	4640      	mov	r0, r8
 800bd66:	f7fe fcad 	bl	800a6c4 <memcpy>
 800bd6a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800bd6e:	f8c4 8000 	str.w	r8, [r4]
 800bd72:	e7e9      	b.n	800bd48 <__submore+0x48>

0800bd74 <__ascii_wctomb>:
 800bd74:	b149      	cbz	r1, 800bd8a <__ascii_wctomb+0x16>
 800bd76:	2aff      	cmp	r2, #255	; 0xff
 800bd78:	bf85      	ittet	hi
 800bd7a:	238a      	movhi	r3, #138	; 0x8a
 800bd7c:	6003      	strhi	r3, [r0, #0]
 800bd7e:	700a      	strbls	r2, [r1, #0]
 800bd80:	f04f 30ff 	movhi.w	r0, #4294967295
 800bd84:	bf98      	it	ls
 800bd86:	2001      	movls	r0, #1
 800bd88:	4770      	bx	lr
 800bd8a:	4608      	mov	r0, r1
 800bd8c:	4770      	bx	lr
	...

0800bd90 <__assert_func>:
 800bd90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bd92:	4614      	mov	r4, r2
 800bd94:	461a      	mov	r2, r3
 800bd96:	4b09      	ldr	r3, [pc, #36]	; (800bdbc <__assert_func+0x2c>)
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	4605      	mov	r5, r0
 800bd9c:	68d8      	ldr	r0, [r3, #12]
 800bd9e:	b14c      	cbz	r4, 800bdb4 <__assert_func+0x24>
 800bda0:	4b07      	ldr	r3, [pc, #28]	; (800bdc0 <__assert_func+0x30>)
 800bda2:	9100      	str	r1, [sp, #0]
 800bda4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bda8:	4906      	ldr	r1, [pc, #24]	; (800bdc4 <__assert_func+0x34>)
 800bdaa:	462b      	mov	r3, r5
 800bdac:	f000 f9a6 	bl	800c0fc <fiprintf>
 800bdb0:	f000 fc46 	bl	800c640 <abort>
 800bdb4:	4b04      	ldr	r3, [pc, #16]	; (800bdc8 <__assert_func+0x38>)
 800bdb6:	461c      	mov	r4, r3
 800bdb8:	e7f3      	b.n	800bda2 <__assert_func+0x12>
 800bdba:	bf00      	nop
 800bdbc:	2000000c 	.word	0x2000000c
 800bdc0:	0800d910 	.word	0x0800d910
 800bdc4:	0800d91d 	.word	0x0800d91d
 800bdc8:	0800d94b 	.word	0x0800d94b

0800bdcc <__sflush_r>:
 800bdcc:	898a      	ldrh	r2, [r1, #12]
 800bdce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdd2:	4605      	mov	r5, r0
 800bdd4:	0710      	lsls	r0, r2, #28
 800bdd6:	460c      	mov	r4, r1
 800bdd8:	d458      	bmi.n	800be8c <__sflush_r+0xc0>
 800bdda:	684b      	ldr	r3, [r1, #4]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	dc05      	bgt.n	800bdec <__sflush_r+0x20>
 800bde0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	dc02      	bgt.n	800bdec <__sflush_r+0x20>
 800bde6:	2000      	movs	r0, #0
 800bde8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bdee:	2e00      	cmp	r6, #0
 800bdf0:	d0f9      	beq.n	800bde6 <__sflush_r+0x1a>
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bdf8:	682f      	ldr	r7, [r5, #0]
 800bdfa:	602b      	str	r3, [r5, #0]
 800bdfc:	d032      	beq.n	800be64 <__sflush_r+0x98>
 800bdfe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800be00:	89a3      	ldrh	r3, [r4, #12]
 800be02:	075a      	lsls	r2, r3, #29
 800be04:	d505      	bpl.n	800be12 <__sflush_r+0x46>
 800be06:	6863      	ldr	r3, [r4, #4]
 800be08:	1ac0      	subs	r0, r0, r3
 800be0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800be0c:	b10b      	cbz	r3, 800be12 <__sflush_r+0x46>
 800be0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800be10:	1ac0      	subs	r0, r0, r3
 800be12:	2300      	movs	r3, #0
 800be14:	4602      	mov	r2, r0
 800be16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be18:	6a21      	ldr	r1, [r4, #32]
 800be1a:	4628      	mov	r0, r5
 800be1c:	47b0      	blx	r6
 800be1e:	1c43      	adds	r3, r0, #1
 800be20:	89a3      	ldrh	r3, [r4, #12]
 800be22:	d106      	bne.n	800be32 <__sflush_r+0x66>
 800be24:	6829      	ldr	r1, [r5, #0]
 800be26:	291d      	cmp	r1, #29
 800be28:	d82c      	bhi.n	800be84 <__sflush_r+0xb8>
 800be2a:	4a2a      	ldr	r2, [pc, #168]	; (800bed4 <__sflush_r+0x108>)
 800be2c:	40ca      	lsrs	r2, r1
 800be2e:	07d6      	lsls	r6, r2, #31
 800be30:	d528      	bpl.n	800be84 <__sflush_r+0xb8>
 800be32:	2200      	movs	r2, #0
 800be34:	6062      	str	r2, [r4, #4]
 800be36:	04d9      	lsls	r1, r3, #19
 800be38:	6922      	ldr	r2, [r4, #16]
 800be3a:	6022      	str	r2, [r4, #0]
 800be3c:	d504      	bpl.n	800be48 <__sflush_r+0x7c>
 800be3e:	1c42      	adds	r2, r0, #1
 800be40:	d101      	bne.n	800be46 <__sflush_r+0x7a>
 800be42:	682b      	ldr	r3, [r5, #0]
 800be44:	b903      	cbnz	r3, 800be48 <__sflush_r+0x7c>
 800be46:	6560      	str	r0, [r4, #84]	; 0x54
 800be48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be4a:	602f      	str	r7, [r5, #0]
 800be4c:	2900      	cmp	r1, #0
 800be4e:	d0ca      	beq.n	800bde6 <__sflush_r+0x1a>
 800be50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be54:	4299      	cmp	r1, r3
 800be56:	d002      	beq.n	800be5e <__sflush_r+0x92>
 800be58:	4628      	mov	r0, r5
 800be5a:	f7ff f919 	bl	800b090 <_free_r>
 800be5e:	2000      	movs	r0, #0
 800be60:	6360      	str	r0, [r4, #52]	; 0x34
 800be62:	e7c1      	b.n	800bde8 <__sflush_r+0x1c>
 800be64:	6a21      	ldr	r1, [r4, #32]
 800be66:	2301      	movs	r3, #1
 800be68:	4628      	mov	r0, r5
 800be6a:	47b0      	blx	r6
 800be6c:	1c41      	adds	r1, r0, #1
 800be6e:	d1c7      	bne.n	800be00 <__sflush_r+0x34>
 800be70:	682b      	ldr	r3, [r5, #0]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d0c4      	beq.n	800be00 <__sflush_r+0x34>
 800be76:	2b1d      	cmp	r3, #29
 800be78:	d001      	beq.n	800be7e <__sflush_r+0xb2>
 800be7a:	2b16      	cmp	r3, #22
 800be7c:	d101      	bne.n	800be82 <__sflush_r+0xb6>
 800be7e:	602f      	str	r7, [r5, #0]
 800be80:	e7b1      	b.n	800bde6 <__sflush_r+0x1a>
 800be82:	89a3      	ldrh	r3, [r4, #12]
 800be84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be88:	81a3      	strh	r3, [r4, #12]
 800be8a:	e7ad      	b.n	800bde8 <__sflush_r+0x1c>
 800be8c:	690f      	ldr	r7, [r1, #16]
 800be8e:	2f00      	cmp	r7, #0
 800be90:	d0a9      	beq.n	800bde6 <__sflush_r+0x1a>
 800be92:	0793      	lsls	r3, r2, #30
 800be94:	680e      	ldr	r6, [r1, #0]
 800be96:	bf08      	it	eq
 800be98:	694b      	ldreq	r3, [r1, #20]
 800be9a:	600f      	str	r7, [r1, #0]
 800be9c:	bf18      	it	ne
 800be9e:	2300      	movne	r3, #0
 800bea0:	eba6 0807 	sub.w	r8, r6, r7
 800bea4:	608b      	str	r3, [r1, #8]
 800bea6:	f1b8 0f00 	cmp.w	r8, #0
 800beaa:	dd9c      	ble.n	800bde6 <__sflush_r+0x1a>
 800beac:	6a21      	ldr	r1, [r4, #32]
 800beae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800beb0:	4643      	mov	r3, r8
 800beb2:	463a      	mov	r2, r7
 800beb4:	4628      	mov	r0, r5
 800beb6:	47b0      	blx	r6
 800beb8:	2800      	cmp	r0, #0
 800beba:	dc06      	bgt.n	800beca <__sflush_r+0xfe>
 800bebc:	89a3      	ldrh	r3, [r4, #12]
 800bebe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bec2:	81a3      	strh	r3, [r4, #12]
 800bec4:	f04f 30ff 	mov.w	r0, #4294967295
 800bec8:	e78e      	b.n	800bde8 <__sflush_r+0x1c>
 800beca:	4407      	add	r7, r0
 800becc:	eba8 0800 	sub.w	r8, r8, r0
 800bed0:	e7e9      	b.n	800bea6 <__sflush_r+0xda>
 800bed2:	bf00      	nop
 800bed4:	20400001 	.word	0x20400001

0800bed8 <_fflush_r>:
 800bed8:	b538      	push	{r3, r4, r5, lr}
 800beda:	690b      	ldr	r3, [r1, #16]
 800bedc:	4605      	mov	r5, r0
 800bede:	460c      	mov	r4, r1
 800bee0:	b913      	cbnz	r3, 800bee8 <_fflush_r+0x10>
 800bee2:	2500      	movs	r5, #0
 800bee4:	4628      	mov	r0, r5
 800bee6:	bd38      	pop	{r3, r4, r5, pc}
 800bee8:	b118      	cbz	r0, 800bef2 <_fflush_r+0x1a>
 800beea:	6983      	ldr	r3, [r0, #24]
 800beec:	b90b      	cbnz	r3, 800bef2 <_fflush_r+0x1a>
 800beee:	f000 f887 	bl	800c000 <__sinit>
 800bef2:	4b14      	ldr	r3, [pc, #80]	; (800bf44 <_fflush_r+0x6c>)
 800bef4:	429c      	cmp	r4, r3
 800bef6:	d11b      	bne.n	800bf30 <_fflush_r+0x58>
 800bef8:	686c      	ldr	r4, [r5, #4]
 800befa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d0ef      	beq.n	800bee2 <_fflush_r+0xa>
 800bf02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bf04:	07d0      	lsls	r0, r2, #31
 800bf06:	d404      	bmi.n	800bf12 <_fflush_r+0x3a>
 800bf08:	0599      	lsls	r1, r3, #22
 800bf0a:	d402      	bmi.n	800bf12 <_fflush_r+0x3a>
 800bf0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf0e:	f000 f927 	bl	800c160 <__retarget_lock_acquire_recursive>
 800bf12:	4628      	mov	r0, r5
 800bf14:	4621      	mov	r1, r4
 800bf16:	f7ff ff59 	bl	800bdcc <__sflush_r>
 800bf1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bf1c:	07da      	lsls	r2, r3, #31
 800bf1e:	4605      	mov	r5, r0
 800bf20:	d4e0      	bmi.n	800bee4 <_fflush_r+0xc>
 800bf22:	89a3      	ldrh	r3, [r4, #12]
 800bf24:	059b      	lsls	r3, r3, #22
 800bf26:	d4dd      	bmi.n	800bee4 <_fflush_r+0xc>
 800bf28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf2a:	f000 f91a 	bl	800c162 <__retarget_lock_release_recursive>
 800bf2e:	e7d9      	b.n	800bee4 <_fflush_r+0xc>
 800bf30:	4b05      	ldr	r3, [pc, #20]	; (800bf48 <_fflush_r+0x70>)
 800bf32:	429c      	cmp	r4, r3
 800bf34:	d101      	bne.n	800bf3a <_fflush_r+0x62>
 800bf36:	68ac      	ldr	r4, [r5, #8]
 800bf38:	e7df      	b.n	800befa <_fflush_r+0x22>
 800bf3a:	4b04      	ldr	r3, [pc, #16]	; (800bf4c <_fflush_r+0x74>)
 800bf3c:	429c      	cmp	r4, r3
 800bf3e:	bf08      	it	eq
 800bf40:	68ec      	ldreq	r4, [r5, #12]
 800bf42:	e7da      	b.n	800befa <_fflush_r+0x22>
 800bf44:	0800d96c 	.word	0x0800d96c
 800bf48:	0800d98c 	.word	0x0800d98c
 800bf4c:	0800d94c 	.word	0x0800d94c

0800bf50 <std>:
 800bf50:	2300      	movs	r3, #0
 800bf52:	b510      	push	{r4, lr}
 800bf54:	4604      	mov	r4, r0
 800bf56:	e9c0 3300 	strd	r3, r3, [r0]
 800bf5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bf5e:	6083      	str	r3, [r0, #8]
 800bf60:	8181      	strh	r1, [r0, #12]
 800bf62:	6643      	str	r3, [r0, #100]	; 0x64
 800bf64:	81c2      	strh	r2, [r0, #14]
 800bf66:	6183      	str	r3, [r0, #24]
 800bf68:	4619      	mov	r1, r3
 800bf6a:	2208      	movs	r2, #8
 800bf6c:	305c      	adds	r0, #92	; 0x5c
 800bf6e:	f7fb fb91 	bl	8007694 <memset>
 800bf72:	4b05      	ldr	r3, [pc, #20]	; (800bf88 <std+0x38>)
 800bf74:	6263      	str	r3, [r4, #36]	; 0x24
 800bf76:	4b05      	ldr	r3, [pc, #20]	; (800bf8c <std+0x3c>)
 800bf78:	62a3      	str	r3, [r4, #40]	; 0x28
 800bf7a:	4b05      	ldr	r3, [pc, #20]	; (800bf90 <std+0x40>)
 800bf7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bf7e:	4b05      	ldr	r3, [pc, #20]	; (800bf94 <std+0x44>)
 800bf80:	6224      	str	r4, [r4, #32]
 800bf82:	6323      	str	r3, [r4, #48]	; 0x30
 800bf84:	bd10      	pop	{r4, pc}
 800bf86:	bf00      	nop
 800bf88:	0800843d 	.word	0x0800843d
 800bf8c:	08008463 	.word	0x08008463
 800bf90:	0800849b 	.word	0x0800849b
 800bf94:	080084bf 	.word	0x080084bf

0800bf98 <_cleanup_r>:
 800bf98:	4901      	ldr	r1, [pc, #4]	; (800bfa0 <_cleanup_r+0x8>)
 800bf9a:	f000 b8c1 	b.w	800c120 <_fwalk_reent>
 800bf9e:	bf00      	nop
 800bfa0:	0800bed9 	.word	0x0800bed9

0800bfa4 <__sfmoreglue>:
 800bfa4:	b570      	push	{r4, r5, r6, lr}
 800bfa6:	2268      	movs	r2, #104	; 0x68
 800bfa8:	1e4d      	subs	r5, r1, #1
 800bfaa:	4355      	muls	r5, r2
 800bfac:	460e      	mov	r6, r1
 800bfae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bfb2:	f7ff f8d9 	bl	800b168 <_malloc_r>
 800bfb6:	4604      	mov	r4, r0
 800bfb8:	b140      	cbz	r0, 800bfcc <__sfmoreglue+0x28>
 800bfba:	2100      	movs	r1, #0
 800bfbc:	e9c0 1600 	strd	r1, r6, [r0]
 800bfc0:	300c      	adds	r0, #12
 800bfc2:	60a0      	str	r0, [r4, #8]
 800bfc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bfc8:	f7fb fb64 	bl	8007694 <memset>
 800bfcc:	4620      	mov	r0, r4
 800bfce:	bd70      	pop	{r4, r5, r6, pc}

0800bfd0 <__sfp_lock_acquire>:
 800bfd0:	4801      	ldr	r0, [pc, #4]	; (800bfd8 <__sfp_lock_acquire+0x8>)
 800bfd2:	f000 b8c5 	b.w	800c160 <__retarget_lock_acquire_recursive>
 800bfd6:	bf00      	nop
 800bfd8:	2000050d 	.word	0x2000050d

0800bfdc <__sfp_lock_release>:
 800bfdc:	4801      	ldr	r0, [pc, #4]	; (800bfe4 <__sfp_lock_release+0x8>)
 800bfde:	f000 b8c0 	b.w	800c162 <__retarget_lock_release_recursive>
 800bfe2:	bf00      	nop
 800bfe4:	2000050d 	.word	0x2000050d

0800bfe8 <__sinit_lock_acquire>:
 800bfe8:	4801      	ldr	r0, [pc, #4]	; (800bff0 <__sinit_lock_acquire+0x8>)
 800bfea:	f000 b8b9 	b.w	800c160 <__retarget_lock_acquire_recursive>
 800bfee:	bf00      	nop
 800bff0:	2000050e 	.word	0x2000050e

0800bff4 <__sinit_lock_release>:
 800bff4:	4801      	ldr	r0, [pc, #4]	; (800bffc <__sinit_lock_release+0x8>)
 800bff6:	f000 b8b4 	b.w	800c162 <__retarget_lock_release_recursive>
 800bffa:	bf00      	nop
 800bffc:	2000050e 	.word	0x2000050e

0800c000 <__sinit>:
 800c000:	b510      	push	{r4, lr}
 800c002:	4604      	mov	r4, r0
 800c004:	f7ff fff0 	bl	800bfe8 <__sinit_lock_acquire>
 800c008:	69a3      	ldr	r3, [r4, #24]
 800c00a:	b11b      	cbz	r3, 800c014 <__sinit+0x14>
 800c00c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c010:	f7ff bff0 	b.w	800bff4 <__sinit_lock_release>
 800c014:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c018:	6523      	str	r3, [r4, #80]	; 0x50
 800c01a:	4b13      	ldr	r3, [pc, #76]	; (800c068 <__sinit+0x68>)
 800c01c:	4a13      	ldr	r2, [pc, #76]	; (800c06c <__sinit+0x6c>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	62a2      	str	r2, [r4, #40]	; 0x28
 800c022:	42a3      	cmp	r3, r4
 800c024:	bf04      	itt	eq
 800c026:	2301      	moveq	r3, #1
 800c028:	61a3      	streq	r3, [r4, #24]
 800c02a:	4620      	mov	r0, r4
 800c02c:	f000 f820 	bl	800c070 <__sfp>
 800c030:	6060      	str	r0, [r4, #4]
 800c032:	4620      	mov	r0, r4
 800c034:	f000 f81c 	bl	800c070 <__sfp>
 800c038:	60a0      	str	r0, [r4, #8]
 800c03a:	4620      	mov	r0, r4
 800c03c:	f000 f818 	bl	800c070 <__sfp>
 800c040:	2200      	movs	r2, #0
 800c042:	60e0      	str	r0, [r4, #12]
 800c044:	2104      	movs	r1, #4
 800c046:	6860      	ldr	r0, [r4, #4]
 800c048:	f7ff ff82 	bl	800bf50 <std>
 800c04c:	68a0      	ldr	r0, [r4, #8]
 800c04e:	2201      	movs	r2, #1
 800c050:	2109      	movs	r1, #9
 800c052:	f7ff ff7d 	bl	800bf50 <std>
 800c056:	68e0      	ldr	r0, [r4, #12]
 800c058:	2202      	movs	r2, #2
 800c05a:	2112      	movs	r1, #18
 800c05c:	f7ff ff78 	bl	800bf50 <std>
 800c060:	2301      	movs	r3, #1
 800c062:	61a3      	str	r3, [r4, #24]
 800c064:	e7d2      	b.n	800c00c <__sinit+0xc>
 800c066:	bf00      	nop
 800c068:	0800d4f0 	.word	0x0800d4f0
 800c06c:	0800bf99 	.word	0x0800bf99

0800c070 <__sfp>:
 800c070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c072:	4607      	mov	r7, r0
 800c074:	f7ff ffac 	bl	800bfd0 <__sfp_lock_acquire>
 800c078:	4b1e      	ldr	r3, [pc, #120]	; (800c0f4 <__sfp+0x84>)
 800c07a:	681e      	ldr	r6, [r3, #0]
 800c07c:	69b3      	ldr	r3, [r6, #24]
 800c07e:	b913      	cbnz	r3, 800c086 <__sfp+0x16>
 800c080:	4630      	mov	r0, r6
 800c082:	f7ff ffbd 	bl	800c000 <__sinit>
 800c086:	3648      	adds	r6, #72	; 0x48
 800c088:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c08c:	3b01      	subs	r3, #1
 800c08e:	d503      	bpl.n	800c098 <__sfp+0x28>
 800c090:	6833      	ldr	r3, [r6, #0]
 800c092:	b30b      	cbz	r3, 800c0d8 <__sfp+0x68>
 800c094:	6836      	ldr	r6, [r6, #0]
 800c096:	e7f7      	b.n	800c088 <__sfp+0x18>
 800c098:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c09c:	b9d5      	cbnz	r5, 800c0d4 <__sfp+0x64>
 800c09e:	4b16      	ldr	r3, [pc, #88]	; (800c0f8 <__sfp+0x88>)
 800c0a0:	60e3      	str	r3, [r4, #12]
 800c0a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c0a6:	6665      	str	r5, [r4, #100]	; 0x64
 800c0a8:	f000 f859 	bl	800c15e <__retarget_lock_init_recursive>
 800c0ac:	f7ff ff96 	bl	800bfdc <__sfp_lock_release>
 800c0b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c0b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c0b8:	6025      	str	r5, [r4, #0]
 800c0ba:	61a5      	str	r5, [r4, #24]
 800c0bc:	2208      	movs	r2, #8
 800c0be:	4629      	mov	r1, r5
 800c0c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c0c4:	f7fb fae6 	bl	8007694 <memset>
 800c0c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c0cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c0d0:	4620      	mov	r0, r4
 800c0d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0d4:	3468      	adds	r4, #104	; 0x68
 800c0d6:	e7d9      	b.n	800c08c <__sfp+0x1c>
 800c0d8:	2104      	movs	r1, #4
 800c0da:	4638      	mov	r0, r7
 800c0dc:	f7ff ff62 	bl	800bfa4 <__sfmoreglue>
 800c0e0:	4604      	mov	r4, r0
 800c0e2:	6030      	str	r0, [r6, #0]
 800c0e4:	2800      	cmp	r0, #0
 800c0e6:	d1d5      	bne.n	800c094 <__sfp+0x24>
 800c0e8:	f7ff ff78 	bl	800bfdc <__sfp_lock_release>
 800c0ec:	230c      	movs	r3, #12
 800c0ee:	603b      	str	r3, [r7, #0]
 800c0f0:	e7ee      	b.n	800c0d0 <__sfp+0x60>
 800c0f2:	bf00      	nop
 800c0f4:	0800d4f0 	.word	0x0800d4f0
 800c0f8:	ffff0001 	.word	0xffff0001

0800c0fc <fiprintf>:
 800c0fc:	b40e      	push	{r1, r2, r3}
 800c0fe:	b503      	push	{r0, r1, lr}
 800c100:	4601      	mov	r1, r0
 800c102:	ab03      	add	r3, sp, #12
 800c104:	4805      	ldr	r0, [pc, #20]	; (800c11c <fiprintf+0x20>)
 800c106:	f853 2b04 	ldr.w	r2, [r3], #4
 800c10a:	6800      	ldr	r0, [r0, #0]
 800c10c:	9301      	str	r3, [sp, #4]
 800c10e:	f000 f8a7 	bl	800c260 <_vfiprintf_r>
 800c112:	b002      	add	sp, #8
 800c114:	f85d eb04 	ldr.w	lr, [sp], #4
 800c118:	b003      	add	sp, #12
 800c11a:	4770      	bx	lr
 800c11c:	2000000c 	.word	0x2000000c

0800c120 <_fwalk_reent>:
 800c120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c124:	4606      	mov	r6, r0
 800c126:	4688      	mov	r8, r1
 800c128:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c12c:	2700      	movs	r7, #0
 800c12e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c132:	f1b9 0901 	subs.w	r9, r9, #1
 800c136:	d505      	bpl.n	800c144 <_fwalk_reent+0x24>
 800c138:	6824      	ldr	r4, [r4, #0]
 800c13a:	2c00      	cmp	r4, #0
 800c13c:	d1f7      	bne.n	800c12e <_fwalk_reent+0xe>
 800c13e:	4638      	mov	r0, r7
 800c140:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c144:	89ab      	ldrh	r3, [r5, #12]
 800c146:	2b01      	cmp	r3, #1
 800c148:	d907      	bls.n	800c15a <_fwalk_reent+0x3a>
 800c14a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c14e:	3301      	adds	r3, #1
 800c150:	d003      	beq.n	800c15a <_fwalk_reent+0x3a>
 800c152:	4629      	mov	r1, r5
 800c154:	4630      	mov	r0, r6
 800c156:	47c0      	blx	r8
 800c158:	4307      	orrs	r7, r0
 800c15a:	3568      	adds	r5, #104	; 0x68
 800c15c:	e7e9      	b.n	800c132 <_fwalk_reent+0x12>

0800c15e <__retarget_lock_init_recursive>:
 800c15e:	4770      	bx	lr

0800c160 <__retarget_lock_acquire_recursive>:
 800c160:	4770      	bx	lr

0800c162 <__retarget_lock_release_recursive>:
 800c162:	4770      	bx	lr

0800c164 <memmove>:
 800c164:	4288      	cmp	r0, r1
 800c166:	b510      	push	{r4, lr}
 800c168:	eb01 0402 	add.w	r4, r1, r2
 800c16c:	d902      	bls.n	800c174 <memmove+0x10>
 800c16e:	4284      	cmp	r4, r0
 800c170:	4623      	mov	r3, r4
 800c172:	d807      	bhi.n	800c184 <memmove+0x20>
 800c174:	1e43      	subs	r3, r0, #1
 800c176:	42a1      	cmp	r1, r4
 800c178:	d008      	beq.n	800c18c <memmove+0x28>
 800c17a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c17e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c182:	e7f8      	b.n	800c176 <memmove+0x12>
 800c184:	4402      	add	r2, r0
 800c186:	4601      	mov	r1, r0
 800c188:	428a      	cmp	r2, r1
 800c18a:	d100      	bne.n	800c18e <memmove+0x2a>
 800c18c:	bd10      	pop	{r4, pc}
 800c18e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c192:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c196:	e7f7      	b.n	800c188 <memmove+0x24>

0800c198 <__malloc_lock>:
 800c198:	4801      	ldr	r0, [pc, #4]	; (800c1a0 <__malloc_lock+0x8>)
 800c19a:	f7ff bfe1 	b.w	800c160 <__retarget_lock_acquire_recursive>
 800c19e:	bf00      	nop
 800c1a0:	2000050c 	.word	0x2000050c

0800c1a4 <__malloc_unlock>:
 800c1a4:	4801      	ldr	r0, [pc, #4]	; (800c1ac <__malloc_unlock+0x8>)
 800c1a6:	f7ff bfdc 	b.w	800c162 <__retarget_lock_release_recursive>
 800c1aa:	bf00      	nop
 800c1ac:	2000050c 	.word	0x2000050c

0800c1b0 <_realloc_r>:
 800c1b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1b4:	4680      	mov	r8, r0
 800c1b6:	4614      	mov	r4, r2
 800c1b8:	460e      	mov	r6, r1
 800c1ba:	b921      	cbnz	r1, 800c1c6 <_realloc_r+0x16>
 800c1bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c1c0:	4611      	mov	r1, r2
 800c1c2:	f7fe bfd1 	b.w	800b168 <_malloc_r>
 800c1c6:	b92a      	cbnz	r2, 800c1d4 <_realloc_r+0x24>
 800c1c8:	f7fe ff62 	bl	800b090 <_free_r>
 800c1cc:	4625      	mov	r5, r4
 800c1ce:	4628      	mov	r0, r5
 800c1d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1d4:	f000 faa0 	bl	800c718 <_malloc_usable_size_r>
 800c1d8:	4284      	cmp	r4, r0
 800c1da:	4607      	mov	r7, r0
 800c1dc:	d802      	bhi.n	800c1e4 <_realloc_r+0x34>
 800c1de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c1e2:	d812      	bhi.n	800c20a <_realloc_r+0x5a>
 800c1e4:	4621      	mov	r1, r4
 800c1e6:	4640      	mov	r0, r8
 800c1e8:	f7fe ffbe 	bl	800b168 <_malloc_r>
 800c1ec:	4605      	mov	r5, r0
 800c1ee:	2800      	cmp	r0, #0
 800c1f0:	d0ed      	beq.n	800c1ce <_realloc_r+0x1e>
 800c1f2:	42bc      	cmp	r4, r7
 800c1f4:	4622      	mov	r2, r4
 800c1f6:	4631      	mov	r1, r6
 800c1f8:	bf28      	it	cs
 800c1fa:	463a      	movcs	r2, r7
 800c1fc:	f7fe fa62 	bl	800a6c4 <memcpy>
 800c200:	4631      	mov	r1, r6
 800c202:	4640      	mov	r0, r8
 800c204:	f7fe ff44 	bl	800b090 <_free_r>
 800c208:	e7e1      	b.n	800c1ce <_realloc_r+0x1e>
 800c20a:	4635      	mov	r5, r6
 800c20c:	e7df      	b.n	800c1ce <_realloc_r+0x1e>

0800c20e <__sfputc_r>:
 800c20e:	6893      	ldr	r3, [r2, #8]
 800c210:	3b01      	subs	r3, #1
 800c212:	2b00      	cmp	r3, #0
 800c214:	b410      	push	{r4}
 800c216:	6093      	str	r3, [r2, #8]
 800c218:	da08      	bge.n	800c22c <__sfputc_r+0x1e>
 800c21a:	6994      	ldr	r4, [r2, #24]
 800c21c:	42a3      	cmp	r3, r4
 800c21e:	db01      	blt.n	800c224 <__sfputc_r+0x16>
 800c220:	290a      	cmp	r1, #10
 800c222:	d103      	bne.n	800c22c <__sfputc_r+0x1e>
 800c224:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c228:	f000 b94a 	b.w	800c4c0 <__swbuf_r>
 800c22c:	6813      	ldr	r3, [r2, #0]
 800c22e:	1c58      	adds	r0, r3, #1
 800c230:	6010      	str	r0, [r2, #0]
 800c232:	7019      	strb	r1, [r3, #0]
 800c234:	4608      	mov	r0, r1
 800c236:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c23a:	4770      	bx	lr

0800c23c <__sfputs_r>:
 800c23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c23e:	4606      	mov	r6, r0
 800c240:	460f      	mov	r7, r1
 800c242:	4614      	mov	r4, r2
 800c244:	18d5      	adds	r5, r2, r3
 800c246:	42ac      	cmp	r4, r5
 800c248:	d101      	bne.n	800c24e <__sfputs_r+0x12>
 800c24a:	2000      	movs	r0, #0
 800c24c:	e007      	b.n	800c25e <__sfputs_r+0x22>
 800c24e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c252:	463a      	mov	r2, r7
 800c254:	4630      	mov	r0, r6
 800c256:	f7ff ffda 	bl	800c20e <__sfputc_r>
 800c25a:	1c43      	adds	r3, r0, #1
 800c25c:	d1f3      	bne.n	800c246 <__sfputs_r+0xa>
 800c25e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c260 <_vfiprintf_r>:
 800c260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c264:	460d      	mov	r5, r1
 800c266:	b09d      	sub	sp, #116	; 0x74
 800c268:	4614      	mov	r4, r2
 800c26a:	4698      	mov	r8, r3
 800c26c:	4606      	mov	r6, r0
 800c26e:	b118      	cbz	r0, 800c278 <_vfiprintf_r+0x18>
 800c270:	6983      	ldr	r3, [r0, #24]
 800c272:	b90b      	cbnz	r3, 800c278 <_vfiprintf_r+0x18>
 800c274:	f7ff fec4 	bl	800c000 <__sinit>
 800c278:	4b89      	ldr	r3, [pc, #548]	; (800c4a0 <_vfiprintf_r+0x240>)
 800c27a:	429d      	cmp	r5, r3
 800c27c:	d11b      	bne.n	800c2b6 <_vfiprintf_r+0x56>
 800c27e:	6875      	ldr	r5, [r6, #4]
 800c280:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c282:	07d9      	lsls	r1, r3, #31
 800c284:	d405      	bmi.n	800c292 <_vfiprintf_r+0x32>
 800c286:	89ab      	ldrh	r3, [r5, #12]
 800c288:	059a      	lsls	r2, r3, #22
 800c28a:	d402      	bmi.n	800c292 <_vfiprintf_r+0x32>
 800c28c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c28e:	f7ff ff67 	bl	800c160 <__retarget_lock_acquire_recursive>
 800c292:	89ab      	ldrh	r3, [r5, #12]
 800c294:	071b      	lsls	r3, r3, #28
 800c296:	d501      	bpl.n	800c29c <_vfiprintf_r+0x3c>
 800c298:	692b      	ldr	r3, [r5, #16]
 800c29a:	b9eb      	cbnz	r3, 800c2d8 <_vfiprintf_r+0x78>
 800c29c:	4629      	mov	r1, r5
 800c29e:	4630      	mov	r0, r6
 800c2a0:	f000 f960 	bl	800c564 <__swsetup_r>
 800c2a4:	b1c0      	cbz	r0, 800c2d8 <_vfiprintf_r+0x78>
 800c2a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c2a8:	07dc      	lsls	r4, r3, #31
 800c2aa:	d50e      	bpl.n	800c2ca <_vfiprintf_r+0x6a>
 800c2ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c2b0:	b01d      	add	sp, #116	; 0x74
 800c2b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2b6:	4b7b      	ldr	r3, [pc, #492]	; (800c4a4 <_vfiprintf_r+0x244>)
 800c2b8:	429d      	cmp	r5, r3
 800c2ba:	d101      	bne.n	800c2c0 <_vfiprintf_r+0x60>
 800c2bc:	68b5      	ldr	r5, [r6, #8]
 800c2be:	e7df      	b.n	800c280 <_vfiprintf_r+0x20>
 800c2c0:	4b79      	ldr	r3, [pc, #484]	; (800c4a8 <_vfiprintf_r+0x248>)
 800c2c2:	429d      	cmp	r5, r3
 800c2c4:	bf08      	it	eq
 800c2c6:	68f5      	ldreq	r5, [r6, #12]
 800c2c8:	e7da      	b.n	800c280 <_vfiprintf_r+0x20>
 800c2ca:	89ab      	ldrh	r3, [r5, #12]
 800c2cc:	0598      	lsls	r0, r3, #22
 800c2ce:	d4ed      	bmi.n	800c2ac <_vfiprintf_r+0x4c>
 800c2d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c2d2:	f7ff ff46 	bl	800c162 <__retarget_lock_release_recursive>
 800c2d6:	e7e9      	b.n	800c2ac <_vfiprintf_r+0x4c>
 800c2d8:	2300      	movs	r3, #0
 800c2da:	9309      	str	r3, [sp, #36]	; 0x24
 800c2dc:	2320      	movs	r3, #32
 800c2de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c2e2:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2e6:	2330      	movs	r3, #48	; 0x30
 800c2e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c4ac <_vfiprintf_r+0x24c>
 800c2ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c2f0:	f04f 0901 	mov.w	r9, #1
 800c2f4:	4623      	mov	r3, r4
 800c2f6:	469a      	mov	sl, r3
 800c2f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2fc:	b10a      	cbz	r2, 800c302 <_vfiprintf_r+0xa2>
 800c2fe:	2a25      	cmp	r2, #37	; 0x25
 800c300:	d1f9      	bne.n	800c2f6 <_vfiprintf_r+0x96>
 800c302:	ebba 0b04 	subs.w	fp, sl, r4
 800c306:	d00b      	beq.n	800c320 <_vfiprintf_r+0xc0>
 800c308:	465b      	mov	r3, fp
 800c30a:	4622      	mov	r2, r4
 800c30c:	4629      	mov	r1, r5
 800c30e:	4630      	mov	r0, r6
 800c310:	f7ff ff94 	bl	800c23c <__sfputs_r>
 800c314:	3001      	adds	r0, #1
 800c316:	f000 80aa 	beq.w	800c46e <_vfiprintf_r+0x20e>
 800c31a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c31c:	445a      	add	r2, fp
 800c31e:	9209      	str	r2, [sp, #36]	; 0x24
 800c320:	f89a 3000 	ldrb.w	r3, [sl]
 800c324:	2b00      	cmp	r3, #0
 800c326:	f000 80a2 	beq.w	800c46e <_vfiprintf_r+0x20e>
 800c32a:	2300      	movs	r3, #0
 800c32c:	f04f 32ff 	mov.w	r2, #4294967295
 800c330:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c334:	f10a 0a01 	add.w	sl, sl, #1
 800c338:	9304      	str	r3, [sp, #16]
 800c33a:	9307      	str	r3, [sp, #28]
 800c33c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c340:	931a      	str	r3, [sp, #104]	; 0x68
 800c342:	4654      	mov	r4, sl
 800c344:	2205      	movs	r2, #5
 800c346:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c34a:	4858      	ldr	r0, [pc, #352]	; (800c4ac <_vfiprintf_r+0x24c>)
 800c34c:	f7f3 ff58 	bl	8000200 <memchr>
 800c350:	9a04      	ldr	r2, [sp, #16]
 800c352:	b9d8      	cbnz	r0, 800c38c <_vfiprintf_r+0x12c>
 800c354:	06d1      	lsls	r1, r2, #27
 800c356:	bf44      	itt	mi
 800c358:	2320      	movmi	r3, #32
 800c35a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c35e:	0713      	lsls	r3, r2, #28
 800c360:	bf44      	itt	mi
 800c362:	232b      	movmi	r3, #43	; 0x2b
 800c364:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c368:	f89a 3000 	ldrb.w	r3, [sl]
 800c36c:	2b2a      	cmp	r3, #42	; 0x2a
 800c36e:	d015      	beq.n	800c39c <_vfiprintf_r+0x13c>
 800c370:	9a07      	ldr	r2, [sp, #28]
 800c372:	4654      	mov	r4, sl
 800c374:	2000      	movs	r0, #0
 800c376:	f04f 0c0a 	mov.w	ip, #10
 800c37a:	4621      	mov	r1, r4
 800c37c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c380:	3b30      	subs	r3, #48	; 0x30
 800c382:	2b09      	cmp	r3, #9
 800c384:	d94e      	bls.n	800c424 <_vfiprintf_r+0x1c4>
 800c386:	b1b0      	cbz	r0, 800c3b6 <_vfiprintf_r+0x156>
 800c388:	9207      	str	r2, [sp, #28]
 800c38a:	e014      	b.n	800c3b6 <_vfiprintf_r+0x156>
 800c38c:	eba0 0308 	sub.w	r3, r0, r8
 800c390:	fa09 f303 	lsl.w	r3, r9, r3
 800c394:	4313      	orrs	r3, r2
 800c396:	9304      	str	r3, [sp, #16]
 800c398:	46a2      	mov	sl, r4
 800c39a:	e7d2      	b.n	800c342 <_vfiprintf_r+0xe2>
 800c39c:	9b03      	ldr	r3, [sp, #12]
 800c39e:	1d19      	adds	r1, r3, #4
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	9103      	str	r1, [sp, #12]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	bfbb      	ittet	lt
 800c3a8:	425b      	neglt	r3, r3
 800c3aa:	f042 0202 	orrlt.w	r2, r2, #2
 800c3ae:	9307      	strge	r3, [sp, #28]
 800c3b0:	9307      	strlt	r3, [sp, #28]
 800c3b2:	bfb8      	it	lt
 800c3b4:	9204      	strlt	r2, [sp, #16]
 800c3b6:	7823      	ldrb	r3, [r4, #0]
 800c3b8:	2b2e      	cmp	r3, #46	; 0x2e
 800c3ba:	d10c      	bne.n	800c3d6 <_vfiprintf_r+0x176>
 800c3bc:	7863      	ldrb	r3, [r4, #1]
 800c3be:	2b2a      	cmp	r3, #42	; 0x2a
 800c3c0:	d135      	bne.n	800c42e <_vfiprintf_r+0x1ce>
 800c3c2:	9b03      	ldr	r3, [sp, #12]
 800c3c4:	1d1a      	adds	r2, r3, #4
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	9203      	str	r2, [sp, #12]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	bfb8      	it	lt
 800c3ce:	f04f 33ff 	movlt.w	r3, #4294967295
 800c3d2:	3402      	adds	r4, #2
 800c3d4:	9305      	str	r3, [sp, #20]
 800c3d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c4bc <_vfiprintf_r+0x25c>
 800c3da:	7821      	ldrb	r1, [r4, #0]
 800c3dc:	2203      	movs	r2, #3
 800c3de:	4650      	mov	r0, sl
 800c3e0:	f7f3 ff0e 	bl	8000200 <memchr>
 800c3e4:	b140      	cbz	r0, 800c3f8 <_vfiprintf_r+0x198>
 800c3e6:	2340      	movs	r3, #64	; 0x40
 800c3e8:	eba0 000a 	sub.w	r0, r0, sl
 800c3ec:	fa03 f000 	lsl.w	r0, r3, r0
 800c3f0:	9b04      	ldr	r3, [sp, #16]
 800c3f2:	4303      	orrs	r3, r0
 800c3f4:	3401      	adds	r4, #1
 800c3f6:	9304      	str	r3, [sp, #16]
 800c3f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3fc:	482c      	ldr	r0, [pc, #176]	; (800c4b0 <_vfiprintf_r+0x250>)
 800c3fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c402:	2206      	movs	r2, #6
 800c404:	f7f3 fefc 	bl	8000200 <memchr>
 800c408:	2800      	cmp	r0, #0
 800c40a:	d03f      	beq.n	800c48c <_vfiprintf_r+0x22c>
 800c40c:	4b29      	ldr	r3, [pc, #164]	; (800c4b4 <_vfiprintf_r+0x254>)
 800c40e:	bb1b      	cbnz	r3, 800c458 <_vfiprintf_r+0x1f8>
 800c410:	9b03      	ldr	r3, [sp, #12]
 800c412:	3307      	adds	r3, #7
 800c414:	f023 0307 	bic.w	r3, r3, #7
 800c418:	3308      	adds	r3, #8
 800c41a:	9303      	str	r3, [sp, #12]
 800c41c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c41e:	443b      	add	r3, r7
 800c420:	9309      	str	r3, [sp, #36]	; 0x24
 800c422:	e767      	b.n	800c2f4 <_vfiprintf_r+0x94>
 800c424:	fb0c 3202 	mla	r2, ip, r2, r3
 800c428:	460c      	mov	r4, r1
 800c42a:	2001      	movs	r0, #1
 800c42c:	e7a5      	b.n	800c37a <_vfiprintf_r+0x11a>
 800c42e:	2300      	movs	r3, #0
 800c430:	3401      	adds	r4, #1
 800c432:	9305      	str	r3, [sp, #20]
 800c434:	4619      	mov	r1, r3
 800c436:	f04f 0c0a 	mov.w	ip, #10
 800c43a:	4620      	mov	r0, r4
 800c43c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c440:	3a30      	subs	r2, #48	; 0x30
 800c442:	2a09      	cmp	r2, #9
 800c444:	d903      	bls.n	800c44e <_vfiprintf_r+0x1ee>
 800c446:	2b00      	cmp	r3, #0
 800c448:	d0c5      	beq.n	800c3d6 <_vfiprintf_r+0x176>
 800c44a:	9105      	str	r1, [sp, #20]
 800c44c:	e7c3      	b.n	800c3d6 <_vfiprintf_r+0x176>
 800c44e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c452:	4604      	mov	r4, r0
 800c454:	2301      	movs	r3, #1
 800c456:	e7f0      	b.n	800c43a <_vfiprintf_r+0x1da>
 800c458:	ab03      	add	r3, sp, #12
 800c45a:	9300      	str	r3, [sp, #0]
 800c45c:	462a      	mov	r2, r5
 800c45e:	4b16      	ldr	r3, [pc, #88]	; (800c4b8 <_vfiprintf_r+0x258>)
 800c460:	a904      	add	r1, sp, #16
 800c462:	4630      	mov	r0, r6
 800c464:	f7fb f9be 	bl	80077e4 <_printf_float>
 800c468:	4607      	mov	r7, r0
 800c46a:	1c78      	adds	r0, r7, #1
 800c46c:	d1d6      	bne.n	800c41c <_vfiprintf_r+0x1bc>
 800c46e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c470:	07d9      	lsls	r1, r3, #31
 800c472:	d405      	bmi.n	800c480 <_vfiprintf_r+0x220>
 800c474:	89ab      	ldrh	r3, [r5, #12]
 800c476:	059a      	lsls	r2, r3, #22
 800c478:	d402      	bmi.n	800c480 <_vfiprintf_r+0x220>
 800c47a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c47c:	f7ff fe71 	bl	800c162 <__retarget_lock_release_recursive>
 800c480:	89ab      	ldrh	r3, [r5, #12]
 800c482:	065b      	lsls	r3, r3, #25
 800c484:	f53f af12 	bmi.w	800c2ac <_vfiprintf_r+0x4c>
 800c488:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c48a:	e711      	b.n	800c2b0 <_vfiprintf_r+0x50>
 800c48c:	ab03      	add	r3, sp, #12
 800c48e:	9300      	str	r3, [sp, #0]
 800c490:	462a      	mov	r2, r5
 800c492:	4b09      	ldr	r3, [pc, #36]	; (800c4b8 <_vfiprintf_r+0x258>)
 800c494:	a904      	add	r1, sp, #16
 800c496:	4630      	mov	r0, r6
 800c498:	f7fb fc48 	bl	8007d2c <_printf_i>
 800c49c:	e7e4      	b.n	800c468 <_vfiprintf_r+0x208>
 800c49e:	bf00      	nop
 800c4a0:	0800d96c 	.word	0x0800d96c
 800c4a4:	0800d98c 	.word	0x0800d98c
 800c4a8:	0800d94c 	.word	0x0800d94c
 800c4ac:	0800d8e4 	.word	0x0800d8e4
 800c4b0:	0800d8ee 	.word	0x0800d8ee
 800c4b4:	080077e5 	.word	0x080077e5
 800c4b8:	0800c23d 	.word	0x0800c23d
 800c4bc:	0800d8ea 	.word	0x0800d8ea

0800c4c0 <__swbuf_r>:
 800c4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4c2:	460e      	mov	r6, r1
 800c4c4:	4614      	mov	r4, r2
 800c4c6:	4605      	mov	r5, r0
 800c4c8:	b118      	cbz	r0, 800c4d2 <__swbuf_r+0x12>
 800c4ca:	6983      	ldr	r3, [r0, #24]
 800c4cc:	b90b      	cbnz	r3, 800c4d2 <__swbuf_r+0x12>
 800c4ce:	f7ff fd97 	bl	800c000 <__sinit>
 800c4d2:	4b21      	ldr	r3, [pc, #132]	; (800c558 <__swbuf_r+0x98>)
 800c4d4:	429c      	cmp	r4, r3
 800c4d6:	d12b      	bne.n	800c530 <__swbuf_r+0x70>
 800c4d8:	686c      	ldr	r4, [r5, #4]
 800c4da:	69a3      	ldr	r3, [r4, #24]
 800c4dc:	60a3      	str	r3, [r4, #8]
 800c4de:	89a3      	ldrh	r3, [r4, #12]
 800c4e0:	071a      	lsls	r2, r3, #28
 800c4e2:	d52f      	bpl.n	800c544 <__swbuf_r+0x84>
 800c4e4:	6923      	ldr	r3, [r4, #16]
 800c4e6:	b36b      	cbz	r3, 800c544 <__swbuf_r+0x84>
 800c4e8:	6923      	ldr	r3, [r4, #16]
 800c4ea:	6820      	ldr	r0, [r4, #0]
 800c4ec:	1ac0      	subs	r0, r0, r3
 800c4ee:	6963      	ldr	r3, [r4, #20]
 800c4f0:	b2f6      	uxtb	r6, r6
 800c4f2:	4283      	cmp	r3, r0
 800c4f4:	4637      	mov	r7, r6
 800c4f6:	dc04      	bgt.n	800c502 <__swbuf_r+0x42>
 800c4f8:	4621      	mov	r1, r4
 800c4fa:	4628      	mov	r0, r5
 800c4fc:	f7ff fcec 	bl	800bed8 <_fflush_r>
 800c500:	bb30      	cbnz	r0, 800c550 <__swbuf_r+0x90>
 800c502:	68a3      	ldr	r3, [r4, #8]
 800c504:	3b01      	subs	r3, #1
 800c506:	60a3      	str	r3, [r4, #8]
 800c508:	6823      	ldr	r3, [r4, #0]
 800c50a:	1c5a      	adds	r2, r3, #1
 800c50c:	6022      	str	r2, [r4, #0]
 800c50e:	701e      	strb	r6, [r3, #0]
 800c510:	6963      	ldr	r3, [r4, #20]
 800c512:	3001      	adds	r0, #1
 800c514:	4283      	cmp	r3, r0
 800c516:	d004      	beq.n	800c522 <__swbuf_r+0x62>
 800c518:	89a3      	ldrh	r3, [r4, #12]
 800c51a:	07db      	lsls	r3, r3, #31
 800c51c:	d506      	bpl.n	800c52c <__swbuf_r+0x6c>
 800c51e:	2e0a      	cmp	r6, #10
 800c520:	d104      	bne.n	800c52c <__swbuf_r+0x6c>
 800c522:	4621      	mov	r1, r4
 800c524:	4628      	mov	r0, r5
 800c526:	f7ff fcd7 	bl	800bed8 <_fflush_r>
 800c52a:	b988      	cbnz	r0, 800c550 <__swbuf_r+0x90>
 800c52c:	4638      	mov	r0, r7
 800c52e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c530:	4b0a      	ldr	r3, [pc, #40]	; (800c55c <__swbuf_r+0x9c>)
 800c532:	429c      	cmp	r4, r3
 800c534:	d101      	bne.n	800c53a <__swbuf_r+0x7a>
 800c536:	68ac      	ldr	r4, [r5, #8]
 800c538:	e7cf      	b.n	800c4da <__swbuf_r+0x1a>
 800c53a:	4b09      	ldr	r3, [pc, #36]	; (800c560 <__swbuf_r+0xa0>)
 800c53c:	429c      	cmp	r4, r3
 800c53e:	bf08      	it	eq
 800c540:	68ec      	ldreq	r4, [r5, #12]
 800c542:	e7ca      	b.n	800c4da <__swbuf_r+0x1a>
 800c544:	4621      	mov	r1, r4
 800c546:	4628      	mov	r0, r5
 800c548:	f000 f80c 	bl	800c564 <__swsetup_r>
 800c54c:	2800      	cmp	r0, #0
 800c54e:	d0cb      	beq.n	800c4e8 <__swbuf_r+0x28>
 800c550:	f04f 37ff 	mov.w	r7, #4294967295
 800c554:	e7ea      	b.n	800c52c <__swbuf_r+0x6c>
 800c556:	bf00      	nop
 800c558:	0800d96c 	.word	0x0800d96c
 800c55c:	0800d98c 	.word	0x0800d98c
 800c560:	0800d94c 	.word	0x0800d94c

0800c564 <__swsetup_r>:
 800c564:	4b32      	ldr	r3, [pc, #200]	; (800c630 <__swsetup_r+0xcc>)
 800c566:	b570      	push	{r4, r5, r6, lr}
 800c568:	681d      	ldr	r5, [r3, #0]
 800c56a:	4606      	mov	r6, r0
 800c56c:	460c      	mov	r4, r1
 800c56e:	b125      	cbz	r5, 800c57a <__swsetup_r+0x16>
 800c570:	69ab      	ldr	r3, [r5, #24]
 800c572:	b913      	cbnz	r3, 800c57a <__swsetup_r+0x16>
 800c574:	4628      	mov	r0, r5
 800c576:	f7ff fd43 	bl	800c000 <__sinit>
 800c57a:	4b2e      	ldr	r3, [pc, #184]	; (800c634 <__swsetup_r+0xd0>)
 800c57c:	429c      	cmp	r4, r3
 800c57e:	d10f      	bne.n	800c5a0 <__swsetup_r+0x3c>
 800c580:	686c      	ldr	r4, [r5, #4]
 800c582:	89a3      	ldrh	r3, [r4, #12]
 800c584:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c588:	0719      	lsls	r1, r3, #28
 800c58a:	d42c      	bmi.n	800c5e6 <__swsetup_r+0x82>
 800c58c:	06dd      	lsls	r5, r3, #27
 800c58e:	d411      	bmi.n	800c5b4 <__swsetup_r+0x50>
 800c590:	2309      	movs	r3, #9
 800c592:	6033      	str	r3, [r6, #0]
 800c594:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c598:	81a3      	strh	r3, [r4, #12]
 800c59a:	f04f 30ff 	mov.w	r0, #4294967295
 800c59e:	e03e      	b.n	800c61e <__swsetup_r+0xba>
 800c5a0:	4b25      	ldr	r3, [pc, #148]	; (800c638 <__swsetup_r+0xd4>)
 800c5a2:	429c      	cmp	r4, r3
 800c5a4:	d101      	bne.n	800c5aa <__swsetup_r+0x46>
 800c5a6:	68ac      	ldr	r4, [r5, #8]
 800c5a8:	e7eb      	b.n	800c582 <__swsetup_r+0x1e>
 800c5aa:	4b24      	ldr	r3, [pc, #144]	; (800c63c <__swsetup_r+0xd8>)
 800c5ac:	429c      	cmp	r4, r3
 800c5ae:	bf08      	it	eq
 800c5b0:	68ec      	ldreq	r4, [r5, #12]
 800c5b2:	e7e6      	b.n	800c582 <__swsetup_r+0x1e>
 800c5b4:	0758      	lsls	r0, r3, #29
 800c5b6:	d512      	bpl.n	800c5de <__swsetup_r+0x7a>
 800c5b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c5ba:	b141      	cbz	r1, 800c5ce <__swsetup_r+0x6a>
 800c5bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c5c0:	4299      	cmp	r1, r3
 800c5c2:	d002      	beq.n	800c5ca <__swsetup_r+0x66>
 800c5c4:	4630      	mov	r0, r6
 800c5c6:	f7fe fd63 	bl	800b090 <_free_r>
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	6363      	str	r3, [r4, #52]	; 0x34
 800c5ce:	89a3      	ldrh	r3, [r4, #12]
 800c5d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c5d4:	81a3      	strh	r3, [r4, #12]
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	6063      	str	r3, [r4, #4]
 800c5da:	6923      	ldr	r3, [r4, #16]
 800c5dc:	6023      	str	r3, [r4, #0]
 800c5de:	89a3      	ldrh	r3, [r4, #12]
 800c5e0:	f043 0308 	orr.w	r3, r3, #8
 800c5e4:	81a3      	strh	r3, [r4, #12]
 800c5e6:	6923      	ldr	r3, [r4, #16]
 800c5e8:	b94b      	cbnz	r3, 800c5fe <__swsetup_r+0x9a>
 800c5ea:	89a3      	ldrh	r3, [r4, #12]
 800c5ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c5f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c5f4:	d003      	beq.n	800c5fe <__swsetup_r+0x9a>
 800c5f6:	4621      	mov	r1, r4
 800c5f8:	4630      	mov	r0, r6
 800c5fa:	f000 f84d 	bl	800c698 <__smakebuf_r>
 800c5fe:	89a0      	ldrh	r0, [r4, #12]
 800c600:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c604:	f010 0301 	ands.w	r3, r0, #1
 800c608:	d00a      	beq.n	800c620 <__swsetup_r+0xbc>
 800c60a:	2300      	movs	r3, #0
 800c60c:	60a3      	str	r3, [r4, #8]
 800c60e:	6963      	ldr	r3, [r4, #20]
 800c610:	425b      	negs	r3, r3
 800c612:	61a3      	str	r3, [r4, #24]
 800c614:	6923      	ldr	r3, [r4, #16]
 800c616:	b943      	cbnz	r3, 800c62a <__swsetup_r+0xc6>
 800c618:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c61c:	d1ba      	bne.n	800c594 <__swsetup_r+0x30>
 800c61e:	bd70      	pop	{r4, r5, r6, pc}
 800c620:	0781      	lsls	r1, r0, #30
 800c622:	bf58      	it	pl
 800c624:	6963      	ldrpl	r3, [r4, #20]
 800c626:	60a3      	str	r3, [r4, #8]
 800c628:	e7f4      	b.n	800c614 <__swsetup_r+0xb0>
 800c62a:	2000      	movs	r0, #0
 800c62c:	e7f7      	b.n	800c61e <__swsetup_r+0xba>
 800c62e:	bf00      	nop
 800c630:	2000000c 	.word	0x2000000c
 800c634:	0800d96c 	.word	0x0800d96c
 800c638:	0800d98c 	.word	0x0800d98c
 800c63c:	0800d94c 	.word	0x0800d94c

0800c640 <abort>:
 800c640:	b508      	push	{r3, lr}
 800c642:	2006      	movs	r0, #6
 800c644:	f000 f898 	bl	800c778 <raise>
 800c648:	2001      	movs	r0, #1
 800c64a:	f7f6 f9b1 	bl	80029b0 <_exit>

0800c64e <__swhatbuf_r>:
 800c64e:	b570      	push	{r4, r5, r6, lr}
 800c650:	460e      	mov	r6, r1
 800c652:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c656:	2900      	cmp	r1, #0
 800c658:	b096      	sub	sp, #88	; 0x58
 800c65a:	4614      	mov	r4, r2
 800c65c:	461d      	mov	r5, r3
 800c65e:	da08      	bge.n	800c672 <__swhatbuf_r+0x24>
 800c660:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c664:	2200      	movs	r2, #0
 800c666:	602a      	str	r2, [r5, #0]
 800c668:	061a      	lsls	r2, r3, #24
 800c66a:	d410      	bmi.n	800c68e <__swhatbuf_r+0x40>
 800c66c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c670:	e00e      	b.n	800c690 <__swhatbuf_r+0x42>
 800c672:	466a      	mov	r2, sp
 800c674:	f000 f89c 	bl	800c7b0 <_fstat_r>
 800c678:	2800      	cmp	r0, #0
 800c67a:	dbf1      	blt.n	800c660 <__swhatbuf_r+0x12>
 800c67c:	9a01      	ldr	r2, [sp, #4]
 800c67e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c682:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c686:	425a      	negs	r2, r3
 800c688:	415a      	adcs	r2, r3
 800c68a:	602a      	str	r2, [r5, #0]
 800c68c:	e7ee      	b.n	800c66c <__swhatbuf_r+0x1e>
 800c68e:	2340      	movs	r3, #64	; 0x40
 800c690:	2000      	movs	r0, #0
 800c692:	6023      	str	r3, [r4, #0]
 800c694:	b016      	add	sp, #88	; 0x58
 800c696:	bd70      	pop	{r4, r5, r6, pc}

0800c698 <__smakebuf_r>:
 800c698:	898b      	ldrh	r3, [r1, #12]
 800c69a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c69c:	079d      	lsls	r5, r3, #30
 800c69e:	4606      	mov	r6, r0
 800c6a0:	460c      	mov	r4, r1
 800c6a2:	d507      	bpl.n	800c6b4 <__smakebuf_r+0x1c>
 800c6a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c6a8:	6023      	str	r3, [r4, #0]
 800c6aa:	6123      	str	r3, [r4, #16]
 800c6ac:	2301      	movs	r3, #1
 800c6ae:	6163      	str	r3, [r4, #20]
 800c6b0:	b002      	add	sp, #8
 800c6b2:	bd70      	pop	{r4, r5, r6, pc}
 800c6b4:	ab01      	add	r3, sp, #4
 800c6b6:	466a      	mov	r2, sp
 800c6b8:	f7ff ffc9 	bl	800c64e <__swhatbuf_r>
 800c6bc:	9900      	ldr	r1, [sp, #0]
 800c6be:	4605      	mov	r5, r0
 800c6c0:	4630      	mov	r0, r6
 800c6c2:	f7fe fd51 	bl	800b168 <_malloc_r>
 800c6c6:	b948      	cbnz	r0, 800c6dc <__smakebuf_r+0x44>
 800c6c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6cc:	059a      	lsls	r2, r3, #22
 800c6ce:	d4ef      	bmi.n	800c6b0 <__smakebuf_r+0x18>
 800c6d0:	f023 0303 	bic.w	r3, r3, #3
 800c6d4:	f043 0302 	orr.w	r3, r3, #2
 800c6d8:	81a3      	strh	r3, [r4, #12]
 800c6da:	e7e3      	b.n	800c6a4 <__smakebuf_r+0xc>
 800c6dc:	4b0d      	ldr	r3, [pc, #52]	; (800c714 <__smakebuf_r+0x7c>)
 800c6de:	62b3      	str	r3, [r6, #40]	; 0x28
 800c6e0:	89a3      	ldrh	r3, [r4, #12]
 800c6e2:	6020      	str	r0, [r4, #0]
 800c6e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6e8:	81a3      	strh	r3, [r4, #12]
 800c6ea:	9b00      	ldr	r3, [sp, #0]
 800c6ec:	6163      	str	r3, [r4, #20]
 800c6ee:	9b01      	ldr	r3, [sp, #4]
 800c6f0:	6120      	str	r0, [r4, #16]
 800c6f2:	b15b      	cbz	r3, 800c70c <__smakebuf_r+0x74>
 800c6f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c6f8:	4630      	mov	r0, r6
 800c6fa:	f000 f86b 	bl	800c7d4 <_isatty_r>
 800c6fe:	b128      	cbz	r0, 800c70c <__smakebuf_r+0x74>
 800c700:	89a3      	ldrh	r3, [r4, #12]
 800c702:	f023 0303 	bic.w	r3, r3, #3
 800c706:	f043 0301 	orr.w	r3, r3, #1
 800c70a:	81a3      	strh	r3, [r4, #12]
 800c70c:	89a0      	ldrh	r0, [r4, #12]
 800c70e:	4305      	orrs	r5, r0
 800c710:	81a5      	strh	r5, [r4, #12]
 800c712:	e7cd      	b.n	800c6b0 <__smakebuf_r+0x18>
 800c714:	0800bf99 	.word	0x0800bf99

0800c718 <_malloc_usable_size_r>:
 800c718:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c71c:	1f18      	subs	r0, r3, #4
 800c71e:	2b00      	cmp	r3, #0
 800c720:	bfbc      	itt	lt
 800c722:	580b      	ldrlt	r3, [r1, r0]
 800c724:	18c0      	addlt	r0, r0, r3
 800c726:	4770      	bx	lr

0800c728 <_raise_r>:
 800c728:	291f      	cmp	r1, #31
 800c72a:	b538      	push	{r3, r4, r5, lr}
 800c72c:	4604      	mov	r4, r0
 800c72e:	460d      	mov	r5, r1
 800c730:	d904      	bls.n	800c73c <_raise_r+0x14>
 800c732:	2316      	movs	r3, #22
 800c734:	6003      	str	r3, [r0, #0]
 800c736:	f04f 30ff 	mov.w	r0, #4294967295
 800c73a:	bd38      	pop	{r3, r4, r5, pc}
 800c73c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c73e:	b112      	cbz	r2, 800c746 <_raise_r+0x1e>
 800c740:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c744:	b94b      	cbnz	r3, 800c75a <_raise_r+0x32>
 800c746:	4620      	mov	r0, r4
 800c748:	f000 f830 	bl	800c7ac <_getpid_r>
 800c74c:	462a      	mov	r2, r5
 800c74e:	4601      	mov	r1, r0
 800c750:	4620      	mov	r0, r4
 800c752:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c756:	f000 b817 	b.w	800c788 <_kill_r>
 800c75a:	2b01      	cmp	r3, #1
 800c75c:	d00a      	beq.n	800c774 <_raise_r+0x4c>
 800c75e:	1c59      	adds	r1, r3, #1
 800c760:	d103      	bne.n	800c76a <_raise_r+0x42>
 800c762:	2316      	movs	r3, #22
 800c764:	6003      	str	r3, [r0, #0]
 800c766:	2001      	movs	r0, #1
 800c768:	e7e7      	b.n	800c73a <_raise_r+0x12>
 800c76a:	2400      	movs	r4, #0
 800c76c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c770:	4628      	mov	r0, r5
 800c772:	4798      	blx	r3
 800c774:	2000      	movs	r0, #0
 800c776:	e7e0      	b.n	800c73a <_raise_r+0x12>

0800c778 <raise>:
 800c778:	4b02      	ldr	r3, [pc, #8]	; (800c784 <raise+0xc>)
 800c77a:	4601      	mov	r1, r0
 800c77c:	6818      	ldr	r0, [r3, #0]
 800c77e:	f7ff bfd3 	b.w	800c728 <_raise_r>
 800c782:	bf00      	nop
 800c784:	2000000c 	.word	0x2000000c

0800c788 <_kill_r>:
 800c788:	b538      	push	{r3, r4, r5, lr}
 800c78a:	4d07      	ldr	r5, [pc, #28]	; (800c7a8 <_kill_r+0x20>)
 800c78c:	2300      	movs	r3, #0
 800c78e:	4604      	mov	r4, r0
 800c790:	4608      	mov	r0, r1
 800c792:	4611      	mov	r1, r2
 800c794:	602b      	str	r3, [r5, #0]
 800c796:	f7f6 f8fb 	bl	8002990 <_kill>
 800c79a:	1c43      	adds	r3, r0, #1
 800c79c:	d102      	bne.n	800c7a4 <_kill_r+0x1c>
 800c79e:	682b      	ldr	r3, [r5, #0]
 800c7a0:	b103      	cbz	r3, 800c7a4 <_kill_r+0x1c>
 800c7a2:	6023      	str	r3, [r4, #0]
 800c7a4:	bd38      	pop	{r3, r4, r5, pc}
 800c7a6:	bf00      	nop
 800c7a8:	20000508 	.word	0x20000508

0800c7ac <_getpid_r>:
 800c7ac:	f7f6 b8e8 	b.w	8002980 <_getpid>

0800c7b0 <_fstat_r>:
 800c7b0:	b538      	push	{r3, r4, r5, lr}
 800c7b2:	4d07      	ldr	r5, [pc, #28]	; (800c7d0 <_fstat_r+0x20>)
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	4604      	mov	r4, r0
 800c7b8:	4608      	mov	r0, r1
 800c7ba:	4611      	mov	r1, r2
 800c7bc:	602b      	str	r3, [r5, #0]
 800c7be:	f7f6 f946 	bl	8002a4e <_fstat>
 800c7c2:	1c43      	adds	r3, r0, #1
 800c7c4:	d102      	bne.n	800c7cc <_fstat_r+0x1c>
 800c7c6:	682b      	ldr	r3, [r5, #0]
 800c7c8:	b103      	cbz	r3, 800c7cc <_fstat_r+0x1c>
 800c7ca:	6023      	str	r3, [r4, #0]
 800c7cc:	bd38      	pop	{r3, r4, r5, pc}
 800c7ce:	bf00      	nop
 800c7d0:	20000508 	.word	0x20000508

0800c7d4 <_isatty_r>:
 800c7d4:	b538      	push	{r3, r4, r5, lr}
 800c7d6:	4d06      	ldr	r5, [pc, #24]	; (800c7f0 <_isatty_r+0x1c>)
 800c7d8:	2300      	movs	r3, #0
 800c7da:	4604      	mov	r4, r0
 800c7dc:	4608      	mov	r0, r1
 800c7de:	602b      	str	r3, [r5, #0]
 800c7e0:	f7f6 f945 	bl	8002a6e <_isatty>
 800c7e4:	1c43      	adds	r3, r0, #1
 800c7e6:	d102      	bne.n	800c7ee <_isatty_r+0x1a>
 800c7e8:	682b      	ldr	r3, [r5, #0]
 800c7ea:	b103      	cbz	r3, 800c7ee <_isatty_r+0x1a>
 800c7ec:	6023      	str	r3, [r4, #0]
 800c7ee:	bd38      	pop	{r3, r4, r5, pc}
 800c7f0:	20000508 	.word	0x20000508

0800c7f4 <acos>:
 800c7f4:	b538      	push	{r3, r4, r5, lr}
 800c7f6:	ed2d 8b02 	vpush	{d8}
 800c7fa:	ec55 4b10 	vmov	r4, r5, d0
 800c7fe:	f000 f85b 	bl	800c8b8 <__ieee754_acos>
 800c802:	4622      	mov	r2, r4
 800c804:	462b      	mov	r3, r5
 800c806:	4620      	mov	r0, r4
 800c808:	4629      	mov	r1, r5
 800c80a:	eeb0 8a40 	vmov.f32	s16, s0
 800c80e:	eef0 8a60 	vmov.f32	s17, s1
 800c812:	f7f4 f99b 	bl	8000b4c <__aeabi_dcmpun>
 800c816:	b9a8      	cbnz	r0, 800c844 <acos+0x50>
 800c818:	ec45 4b10 	vmov	d0, r4, r5
 800c81c:	f000 fdc8 	bl	800d3b0 <fabs>
 800c820:	4b0c      	ldr	r3, [pc, #48]	; (800c854 <acos+0x60>)
 800c822:	ec51 0b10 	vmov	r0, r1, d0
 800c826:	2200      	movs	r2, #0
 800c828:	f7f4 f986 	bl	8000b38 <__aeabi_dcmpgt>
 800c82c:	b150      	cbz	r0, 800c844 <acos+0x50>
 800c82e:	f7fa ff07 	bl	8007640 <__errno>
 800c832:	ecbd 8b02 	vpop	{d8}
 800c836:	2321      	movs	r3, #33	; 0x21
 800c838:	6003      	str	r3, [r0, #0]
 800c83a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c83e:	4806      	ldr	r0, [pc, #24]	; (800c858 <acos+0x64>)
 800c840:	f7ff b99a 	b.w	800bb78 <nan>
 800c844:	eeb0 0a48 	vmov.f32	s0, s16
 800c848:	eef0 0a68 	vmov.f32	s1, s17
 800c84c:	ecbd 8b02 	vpop	{d8}
 800c850:	bd38      	pop	{r3, r4, r5, pc}
 800c852:	bf00      	nop
 800c854:	3ff00000 	.word	0x3ff00000
 800c858:	0800d94b 	.word	0x0800d94b

0800c85c <atan2>:
 800c85c:	f000 ba8c 	b.w	800cd78 <__ieee754_atan2>

0800c860 <sqrt>:
 800c860:	b538      	push	{r3, r4, r5, lr}
 800c862:	ed2d 8b02 	vpush	{d8}
 800c866:	ec55 4b10 	vmov	r4, r5, d0
 800c86a:	f000 fb4f 	bl	800cf0c <__ieee754_sqrt>
 800c86e:	4622      	mov	r2, r4
 800c870:	462b      	mov	r3, r5
 800c872:	4620      	mov	r0, r4
 800c874:	4629      	mov	r1, r5
 800c876:	eeb0 8a40 	vmov.f32	s16, s0
 800c87a:	eef0 8a60 	vmov.f32	s17, s1
 800c87e:	f7f4 f965 	bl	8000b4c <__aeabi_dcmpun>
 800c882:	b990      	cbnz	r0, 800c8aa <sqrt+0x4a>
 800c884:	2200      	movs	r2, #0
 800c886:	2300      	movs	r3, #0
 800c888:	4620      	mov	r0, r4
 800c88a:	4629      	mov	r1, r5
 800c88c:	f7f4 f936 	bl	8000afc <__aeabi_dcmplt>
 800c890:	b158      	cbz	r0, 800c8aa <sqrt+0x4a>
 800c892:	f7fa fed5 	bl	8007640 <__errno>
 800c896:	2321      	movs	r3, #33	; 0x21
 800c898:	6003      	str	r3, [r0, #0]
 800c89a:	2200      	movs	r2, #0
 800c89c:	2300      	movs	r3, #0
 800c89e:	4610      	mov	r0, r2
 800c8a0:	4619      	mov	r1, r3
 800c8a2:	f7f3 ffe3 	bl	800086c <__aeabi_ddiv>
 800c8a6:	ec41 0b18 	vmov	d8, r0, r1
 800c8aa:	eeb0 0a48 	vmov.f32	s0, s16
 800c8ae:	eef0 0a68 	vmov.f32	s1, s17
 800c8b2:	ecbd 8b02 	vpop	{d8}
 800c8b6:	bd38      	pop	{r3, r4, r5, pc}

0800c8b8 <__ieee754_acos>:
 800c8b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8bc:	ec55 4b10 	vmov	r4, r5, d0
 800c8c0:	49b7      	ldr	r1, [pc, #732]	; (800cba0 <__ieee754_acos+0x2e8>)
 800c8c2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c8c6:	428b      	cmp	r3, r1
 800c8c8:	dd1b      	ble.n	800c902 <__ieee754_acos+0x4a>
 800c8ca:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800c8ce:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c8d2:	4323      	orrs	r3, r4
 800c8d4:	d106      	bne.n	800c8e4 <__ieee754_acos+0x2c>
 800c8d6:	2d00      	cmp	r5, #0
 800c8d8:	f300 8211 	bgt.w	800ccfe <__ieee754_acos+0x446>
 800c8dc:	ed9f 0b96 	vldr	d0, [pc, #600]	; 800cb38 <__ieee754_acos+0x280>
 800c8e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8e4:	ee10 2a10 	vmov	r2, s0
 800c8e8:	462b      	mov	r3, r5
 800c8ea:	ee10 0a10 	vmov	r0, s0
 800c8ee:	4629      	mov	r1, r5
 800c8f0:	f7f3 fcda 	bl	80002a8 <__aeabi_dsub>
 800c8f4:	4602      	mov	r2, r0
 800c8f6:	460b      	mov	r3, r1
 800c8f8:	f7f3 ffb8 	bl	800086c <__aeabi_ddiv>
 800c8fc:	ec41 0b10 	vmov	d0, r0, r1
 800c900:	e7ee      	b.n	800c8e0 <__ieee754_acos+0x28>
 800c902:	49a8      	ldr	r1, [pc, #672]	; (800cba4 <__ieee754_acos+0x2ec>)
 800c904:	428b      	cmp	r3, r1
 800c906:	f300 8087 	bgt.w	800ca18 <__ieee754_acos+0x160>
 800c90a:	4aa7      	ldr	r2, [pc, #668]	; (800cba8 <__ieee754_acos+0x2f0>)
 800c90c:	4293      	cmp	r3, r2
 800c90e:	f340 81f9 	ble.w	800cd04 <__ieee754_acos+0x44c>
 800c912:	ee10 2a10 	vmov	r2, s0
 800c916:	ee10 0a10 	vmov	r0, s0
 800c91a:	462b      	mov	r3, r5
 800c91c:	4629      	mov	r1, r5
 800c91e:	f7f3 fe7b 	bl	8000618 <__aeabi_dmul>
 800c922:	a387      	add	r3, pc, #540	; (adr r3, 800cb40 <__ieee754_acos+0x288>)
 800c924:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c928:	4606      	mov	r6, r0
 800c92a:	460f      	mov	r7, r1
 800c92c:	f7f3 fe74 	bl	8000618 <__aeabi_dmul>
 800c930:	a385      	add	r3, pc, #532	; (adr r3, 800cb48 <__ieee754_acos+0x290>)
 800c932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c936:	f7f3 fcb9 	bl	80002ac <__adddf3>
 800c93a:	4632      	mov	r2, r6
 800c93c:	463b      	mov	r3, r7
 800c93e:	f7f3 fe6b 	bl	8000618 <__aeabi_dmul>
 800c942:	a383      	add	r3, pc, #524	; (adr r3, 800cb50 <__ieee754_acos+0x298>)
 800c944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c948:	f7f3 fcae 	bl	80002a8 <__aeabi_dsub>
 800c94c:	4632      	mov	r2, r6
 800c94e:	463b      	mov	r3, r7
 800c950:	f7f3 fe62 	bl	8000618 <__aeabi_dmul>
 800c954:	a380      	add	r3, pc, #512	; (adr r3, 800cb58 <__ieee754_acos+0x2a0>)
 800c956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c95a:	f7f3 fca7 	bl	80002ac <__adddf3>
 800c95e:	4632      	mov	r2, r6
 800c960:	463b      	mov	r3, r7
 800c962:	f7f3 fe59 	bl	8000618 <__aeabi_dmul>
 800c966:	a37e      	add	r3, pc, #504	; (adr r3, 800cb60 <__ieee754_acos+0x2a8>)
 800c968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c96c:	f7f3 fc9c 	bl	80002a8 <__aeabi_dsub>
 800c970:	4632      	mov	r2, r6
 800c972:	463b      	mov	r3, r7
 800c974:	f7f3 fe50 	bl	8000618 <__aeabi_dmul>
 800c978:	a37b      	add	r3, pc, #492	; (adr r3, 800cb68 <__ieee754_acos+0x2b0>)
 800c97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c97e:	f7f3 fc95 	bl	80002ac <__adddf3>
 800c982:	4632      	mov	r2, r6
 800c984:	463b      	mov	r3, r7
 800c986:	f7f3 fe47 	bl	8000618 <__aeabi_dmul>
 800c98a:	a379      	add	r3, pc, #484	; (adr r3, 800cb70 <__ieee754_acos+0x2b8>)
 800c98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c990:	4680      	mov	r8, r0
 800c992:	4689      	mov	r9, r1
 800c994:	4630      	mov	r0, r6
 800c996:	4639      	mov	r1, r7
 800c998:	f7f3 fe3e 	bl	8000618 <__aeabi_dmul>
 800c99c:	a376      	add	r3, pc, #472	; (adr r3, 800cb78 <__ieee754_acos+0x2c0>)
 800c99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9a2:	f7f3 fc81 	bl	80002a8 <__aeabi_dsub>
 800c9a6:	4632      	mov	r2, r6
 800c9a8:	463b      	mov	r3, r7
 800c9aa:	f7f3 fe35 	bl	8000618 <__aeabi_dmul>
 800c9ae:	a374      	add	r3, pc, #464	; (adr r3, 800cb80 <__ieee754_acos+0x2c8>)
 800c9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b4:	f7f3 fc7a 	bl	80002ac <__adddf3>
 800c9b8:	4632      	mov	r2, r6
 800c9ba:	463b      	mov	r3, r7
 800c9bc:	f7f3 fe2c 	bl	8000618 <__aeabi_dmul>
 800c9c0:	a371      	add	r3, pc, #452	; (adr r3, 800cb88 <__ieee754_acos+0x2d0>)
 800c9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c6:	f7f3 fc6f 	bl	80002a8 <__aeabi_dsub>
 800c9ca:	4632      	mov	r2, r6
 800c9cc:	463b      	mov	r3, r7
 800c9ce:	f7f3 fe23 	bl	8000618 <__aeabi_dmul>
 800c9d2:	4b76      	ldr	r3, [pc, #472]	; (800cbac <__ieee754_acos+0x2f4>)
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	f7f3 fc69 	bl	80002ac <__adddf3>
 800c9da:	4602      	mov	r2, r0
 800c9dc:	460b      	mov	r3, r1
 800c9de:	4640      	mov	r0, r8
 800c9e0:	4649      	mov	r1, r9
 800c9e2:	f7f3 ff43 	bl	800086c <__aeabi_ddiv>
 800c9e6:	4622      	mov	r2, r4
 800c9e8:	462b      	mov	r3, r5
 800c9ea:	f7f3 fe15 	bl	8000618 <__aeabi_dmul>
 800c9ee:	4602      	mov	r2, r0
 800c9f0:	460b      	mov	r3, r1
 800c9f2:	a167      	add	r1, pc, #412	; (adr r1, 800cb90 <__ieee754_acos+0x2d8>)
 800c9f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c9f8:	f7f3 fc56 	bl	80002a8 <__aeabi_dsub>
 800c9fc:	4602      	mov	r2, r0
 800c9fe:	460b      	mov	r3, r1
 800ca00:	4620      	mov	r0, r4
 800ca02:	4629      	mov	r1, r5
 800ca04:	f7f3 fc50 	bl	80002a8 <__aeabi_dsub>
 800ca08:	4602      	mov	r2, r0
 800ca0a:	460b      	mov	r3, r1
 800ca0c:	a162      	add	r1, pc, #392	; (adr r1, 800cb98 <__ieee754_acos+0x2e0>)
 800ca0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca12:	f7f3 fc49 	bl	80002a8 <__aeabi_dsub>
 800ca16:	e771      	b.n	800c8fc <__ieee754_acos+0x44>
 800ca18:	2d00      	cmp	r5, #0
 800ca1a:	f280 80cb 	bge.w	800cbb4 <__ieee754_acos+0x2fc>
 800ca1e:	ee10 0a10 	vmov	r0, s0
 800ca22:	4b62      	ldr	r3, [pc, #392]	; (800cbac <__ieee754_acos+0x2f4>)
 800ca24:	2200      	movs	r2, #0
 800ca26:	4629      	mov	r1, r5
 800ca28:	f7f3 fc40 	bl	80002ac <__adddf3>
 800ca2c:	4b60      	ldr	r3, [pc, #384]	; (800cbb0 <__ieee754_acos+0x2f8>)
 800ca2e:	2200      	movs	r2, #0
 800ca30:	f7f3 fdf2 	bl	8000618 <__aeabi_dmul>
 800ca34:	a342      	add	r3, pc, #264	; (adr r3, 800cb40 <__ieee754_acos+0x288>)
 800ca36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca3a:	4604      	mov	r4, r0
 800ca3c:	460d      	mov	r5, r1
 800ca3e:	f7f3 fdeb 	bl	8000618 <__aeabi_dmul>
 800ca42:	a341      	add	r3, pc, #260	; (adr r3, 800cb48 <__ieee754_acos+0x290>)
 800ca44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca48:	f7f3 fc30 	bl	80002ac <__adddf3>
 800ca4c:	4622      	mov	r2, r4
 800ca4e:	462b      	mov	r3, r5
 800ca50:	f7f3 fde2 	bl	8000618 <__aeabi_dmul>
 800ca54:	a33e      	add	r3, pc, #248	; (adr r3, 800cb50 <__ieee754_acos+0x298>)
 800ca56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca5a:	f7f3 fc25 	bl	80002a8 <__aeabi_dsub>
 800ca5e:	4622      	mov	r2, r4
 800ca60:	462b      	mov	r3, r5
 800ca62:	f7f3 fdd9 	bl	8000618 <__aeabi_dmul>
 800ca66:	a33c      	add	r3, pc, #240	; (adr r3, 800cb58 <__ieee754_acos+0x2a0>)
 800ca68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca6c:	f7f3 fc1e 	bl	80002ac <__adddf3>
 800ca70:	4622      	mov	r2, r4
 800ca72:	462b      	mov	r3, r5
 800ca74:	f7f3 fdd0 	bl	8000618 <__aeabi_dmul>
 800ca78:	a339      	add	r3, pc, #228	; (adr r3, 800cb60 <__ieee754_acos+0x2a8>)
 800ca7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca7e:	f7f3 fc13 	bl	80002a8 <__aeabi_dsub>
 800ca82:	4622      	mov	r2, r4
 800ca84:	462b      	mov	r3, r5
 800ca86:	f7f3 fdc7 	bl	8000618 <__aeabi_dmul>
 800ca8a:	a337      	add	r3, pc, #220	; (adr r3, 800cb68 <__ieee754_acos+0x2b0>)
 800ca8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca90:	f7f3 fc0c 	bl	80002ac <__adddf3>
 800ca94:	4622      	mov	r2, r4
 800ca96:	462b      	mov	r3, r5
 800ca98:	f7f3 fdbe 	bl	8000618 <__aeabi_dmul>
 800ca9c:	ec45 4b10 	vmov	d0, r4, r5
 800caa0:	4680      	mov	r8, r0
 800caa2:	4689      	mov	r9, r1
 800caa4:	f000 fa32 	bl	800cf0c <__ieee754_sqrt>
 800caa8:	a331      	add	r3, pc, #196	; (adr r3, 800cb70 <__ieee754_acos+0x2b8>)
 800caaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caae:	4620      	mov	r0, r4
 800cab0:	4629      	mov	r1, r5
 800cab2:	ec57 6b10 	vmov	r6, r7, d0
 800cab6:	f7f3 fdaf 	bl	8000618 <__aeabi_dmul>
 800caba:	a32f      	add	r3, pc, #188	; (adr r3, 800cb78 <__ieee754_acos+0x2c0>)
 800cabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cac0:	f7f3 fbf2 	bl	80002a8 <__aeabi_dsub>
 800cac4:	4622      	mov	r2, r4
 800cac6:	462b      	mov	r3, r5
 800cac8:	f7f3 fda6 	bl	8000618 <__aeabi_dmul>
 800cacc:	a32c      	add	r3, pc, #176	; (adr r3, 800cb80 <__ieee754_acos+0x2c8>)
 800cace:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cad2:	f7f3 fbeb 	bl	80002ac <__adddf3>
 800cad6:	4622      	mov	r2, r4
 800cad8:	462b      	mov	r3, r5
 800cada:	f7f3 fd9d 	bl	8000618 <__aeabi_dmul>
 800cade:	a32a      	add	r3, pc, #168	; (adr r3, 800cb88 <__ieee754_acos+0x2d0>)
 800cae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cae4:	f7f3 fbe0 	bl	80002a8 <__aeabi_dsub>
 800cae8:	4622      	mov	r2, r4
 800caea:	462b      	mov	r3, r5
 800caec:	f7f3 fd94 	bl	8000618 <__aeabi_dmul>
 800caf0:	4b2e      	ldr	r3, [pc, #184]	; (800cbac <__ieee754_acos+0x2f4>)
 800caf2:	2200      	movs	r2, #0
 800caf4:	f7f3 fbda 	bl	80002ac <__adddf3>
 800caf8:	4602      	mov	r2, r0
 800cafa:	460b      	mov	r3, r1
 800cafc:	4640      	mov	r0, r8
 800cafe:	4649      	mov	r1, r9
 800cb00:	f7f3 feb4 	bl	800086c <__aeabi_ddiv>
 800cb04:	4632      	mov	r2, r6
 800cb06:	463b      	mov	r3, r7
 800cb08:	f7f3 fd86 	bl	8000618 <__aeabi_dmul>
 800cb0c:	a320      	add	r3, pc, #128	; (adr r3, 800cb90 <__ieee754_acos+0x2d8>)
 800cb0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb12:	f7f3 fbc9 	bl	80002a8 <__aeabi_dsub>
 800cb16:	4632      	mov	r2, r6
 800cb18:	463b      	mov	r3, r7
 800cb1a:	f7f3 fbc7 	bl	80002ac <__adddf3>
 800cb1e:	4602      	mov	r2, r0
 800cb20:	460b      	mov	r3, r1
 800cb22:	f7f3 fbc3 	bl	80002ac <__adddf3>
 800cb26:	4602      	mov	r2, r0
 800cb28:	460b      	mov	r3, r1
 800cb2a:	a103      	add	r1, pc, #12	; (adr r1, 800cb38 <__ieee754_acos+0x280>)
 800cb2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb30:	e76f      	b.n	800ca12 <__ieee754_acos+0x15a>
 800cb32:	bf00      	nop
 800cb34:	f3af 8000 	nop.w
 800cb38:	54442d18 	.word	0x54442d18
 800cb3c:	400921fb 	.word	0x400921fb
 800cb40:	0dfdf709 	.word	0x0dfdf709
 800cb44:	3f023de1 	.word	0x3f023de1
 800cb48:	7501b288 	.word	0x7501b288
 800cb4c:	3f49efe0 	.word	0x3f49efe0
 800cb50:	b5688f3b 	.word	0xb5688f3b
 800cb54:	3fa48228 	.word	0x3fa48228
 800cb58:	0e884455 	.word	0x0e884455
 800cb5c:	3fc9c155 	.word	0x3fc9c155
 800cb60:	03eb6f7d 	.word	0x03eb6f7d
 800cb64:	3fd4d612 	.word	0x3fd4d612
 800cb68:	55555555 	.word	0x55555555
 800cb6c:	3fc55555 	.word	0x3fc55555
 800cb70:	b12e9282 	.word	0xb12e9282
 800cb74:	3fb3b8c5 	.word	0x3fb3b8c5
 800cb78:	1b8d0159 	.word	0x1b8d0159
 800cb7c:	3fe6066c 	.word	0x3fe6066c
 800cb80:	9c598ac8 	.word	0x9c598ac8
 800cb84:	40002ae5 	.word	0x40002ae5
 800cb88:	1c8a2d4b 	.word	0x1c8a2d4b
 800cb8c:	40033a27 	.word	0x40033a27
 800cb90:	33145c07 	.word	0x33145c07
 800cb94:	3c91a626 	.word	0x3c91a626
 800cb98:	54442d18 	.word	0x54442d18
 800cb9c:	3ff921fb 	.word	0x3ff921fb
 800cba0:	3fefffff 	.word	0x3fefffff
 800cba4:	3fdfffff 	.word	0x3fdfffff
 800cba8:	3c600000 	.word	0x3c600000
 800cbac:	3ff00000 	.word	0x3ff00000
 800cbb0:	3fe00000 	.word	0x3fe00000
 800cbb4:	ee10 2a10 	vmov	r2, s0
 800cbb8:	462b      	mov	r3, r5
 800cbba:	496d      	ldr	r1, [pc, #436]	; (800cd70 <__ieee754_acos+0x4b8>)
 800cbbc:	2000      	movs	r0, #0
 800cbbe:	f7f3 fb73 	bl	80002a8 <__aeabi_dsub>
 800cbc2:	4b6c      	ldr	r3, [pc, #432]	; (800cd74 <__ieee754_acos+0x4bc>)
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	f7f3 fd27 	bl	8000618 <__aeabi_dmul>
 800cbca:	4604      	mov	r4, r0
 800cbcc:	460d      	mov	r5, r1
 800cbce:	ec45 4b10 	vmov	d0, r4, r5
 800cbd2:	f000 f99b 	bl	800cf0c <__ieee754_sqrt>
 800cbd6:	a34e      	add	r3, pc, #312	; (adr r3, 800cd10 <__ieee754_acos+0x458>)
 800cbd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbdc:	4620      	mov	r0, r4
 800cbde:	4629      	mov	r1, r5
 800cbe0:	ec59 8b10 	vmov	r8, r9, d0
 800cbe4:	f7f3 fd18 	bl	8000618 <__aeabi_dmul>
 800cbe8:	a34b      	add	r3, pc, #300	; (adr r3, 800cd18 <__ieee754_acos+0x460>)
 800cbea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbee:	f7f3 fb5d 	bl	80002ac <__adddf3>
 800cbf2:	4622      	mov	r2, r4
 800cbf4:	462b      	mov	r3, r5
 800cbf6:	f7f3 fd0f 	bl	8000618 <__aeabi_dmul>
 800cbfa:	a349      	add	r3, pc, #292	; (adr r3, 800cd20 <__ieee754_acos+0x468>)
 800cbfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc00:	f7f3 fb52 	bl	80002a8 <__aeabi_dsub>
 800cc04:	4622      	mov	r2, r4
 800cc06:	462b      	mov	r3, r5
 800cc08:	f7f3 fd06 	bl	8000618 <__aeabi_dmul>
 800cc0c:	a346      	add	r3, pc, #280	; (adr r3, 800cd28 <__ieee754_acos+0x470>)
 800cc0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc12:	f7f3 fb4b 	bl	80002ac <__adddf3>
 800cc16:	4622      	mov	r2, r4
 800cc18:	462b      	mov	r3, r5
 800cc1a:	f7f3 fcfd 	bl	8000618 <__aeabi_dmul>
 800cc1e:	a344      	add	r3, pc, #272	; (adr r3, 800cd30 <__ieee754_acos+0x478>)
 800cc20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc24:	f7f3 fb40 	bl	80002a8 <__aeabi_dsub>
 800cc28:	4622      	mov	r2, r4
 800cc2a:	462b      	mov	r3, r5
 800cc2c:	f7f3 fcf4 	bl	8000618 <__aeabi_dmul>
 800cc30:	a341      	add	r3, pc, #260	; (adr r3, 800cd38 <__ieee754_acos+0x480>)
 800cc32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc36:	f7f3 fb39 	bl	80002ac <__adddf3>
 800cc3a:	4622      	mov	r2, r4
 800cc3c:	462b      	mov	r3, r5
 800cc3e:	f7f3 fceb 	bl	8000618 <__aeabi_dmul>
 800cc42:	a33f      	add	r3, pc, #252	; (adr r3, 800cd40 <__ieee754_acos+0x488>)
 800cc44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc48:	4682      	mov	sl, r0
 800cc4a:	468b      	mov	fp, r1
 800cc4c:	4620      	mov	r0, r4
 800cc4e:	4629      	mov	r1, r5
 800cc50:	f7f3 fce2 	bl	8000618 <__aeabi_dmul>
 800cc54:	a33c      	add	r3, pc, #240	; (adr r3, 800cd48 <__ieee754_acos+0x490>)
 800cc56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc5a:	f7f3 fb25 	bl	80002a8 <__aeabi_dsub>
 800cc5e:	4622      	mov	r2, r4
 800cc60:	462b      	mov	r3, r5
 800cc62:	f7f3 fcd9 	bl	8000618 <__aeabi_dmul>
 800cc66:	a33a      	add	r3, pc, #232	; (adr r3, 800cd50 <__ieee754_acos+0x498>)
 800cc68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc6c:	f7f3 fb1e 	bl	80002ac <__adddf3>
 800cc70:	4622      	mov	r2, r4
 800cc72:	462b      	mov	r3, r5
 800cc74:	f7f3 fcd0 	bl	8000618 <__aeabi_dmul>
 800cc78:	a337      	add	r3, pc, #220	; (adr r3, 800cd58 <__ieee754_acos+0x4a0>)
 800cc7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc7e:	f7f3 fb13 	bl	80002a8 <__aeabi_dsub>
 800cc82:	4622      	mov	r2, r4
 800cc84:	462b      	mov	r3, r5
 800cc86:	f7f3 fcc7 	bl	8000618 <__aeabi_dmul>
 800cc8a:	4b39      	ldr	r3, [pc, #228]	; (800cd70 <__ieee754_acos+0x4b8>)
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	f7f3 fb0d 	bl	80002ac <__adddf3>
 800cc92:	4602      	mov	r2, r0
 800cc94:	460b      	mov	r3, r1
 800cc96:	4650      	mov	r0, sl
 800cc98:	4659      	mov	r1, fp
 800cc9a:	f7f3 fde7 	bl	800086c <__aeabi_ddiv>
 800cc9e:	4642      	mov	r2, r8
 800cca0:	464b      	mov	r3, r9
 800cca2:	f7f3 fcb9 	bl	8000618 <__aeabi_dmul>
 800cca6:	2600      	movs	r6, #0
 800cca8:	4682      	mov	sl, r0
 800ccaa:	468b      	mov	fp, r1
 800ccac:	4632      	mov	r2, r6
 800ccae:	464b      	mov	r3, r9
 800ccb0:	4630      	mov	r0, r6
 800ccb2:	4649      	mov	r1, r9
 800ccb4:	f7f3 fcb0 	bl	8000618 <__aeabi_dmul>
 800ccb8:	4602      	mov	r2, r0
 800ccba:	460b      	mov	r3, r1
 800ccbc:	4620      	mov	r0, r4
 800ccbe:	4629      	mov	r1, r5
 800ccc0:	f7f3 faf2 	bl	80002a8 <__aeabi_dsub>
 800ccc4:	4632      	mov	r2, r6
 800ccc6:	4604      	mov	r4, r0
 800ccc8:	460d      	mov	r5, r1
 800ccca:	464b      	mov	r3, r9
 800cccc:	4640      	mov	r0, r8
 800ccce:	4649      	mov	r1, r9
 800ccd0:	f7f3 faec 	bl	80002ac <__adddf3>
 800ccd4:	4602      	mov	r2, r0
 800ccd6:	460b      	mov	r3, r1
 800ccd8:	4620      	mov	r0, r4
 800ccda:	4629      	mov	r1, r5
 800ccdc:	f7f3 fdc6 	bl	800086c <__aeabi_ddiv>
 800cce0:	4602      	mov	r2, r0
 800cce2:	460b      	mov	r3, r1
 800cce4:	4650      	mov	r0, sl
 800cce6:	4659      	mov	r1, fp
 800cce8:	f7f3 fae0 	bl	80002ac <__adddf3>
 800ccec:	4632      	mov	r2, r6
 800ccee:	464b      	mov	r3, r9
 800ccf0:	f7f3 fadc 	bl	80002ac <__adddf3>
 800ccf4:	4602      	mov	r2, r0
 800ccf6:	460b      	mov	r3, r1
 800ccf8:	f7f3 fad8 	bl	80002ac <__adddf3>
 800ccfc:	e5fe      	b.n	800c8fc <__ieee754_acos+0x44>
 800ccfe:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800cd60 <__ieee754_acos+0x4a8>
 800cd02:	e5ed      	b.n	800c8e0 <__ieee754_acos+0x28>
 800cd04:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800cd68 <__ieee754_acos+0x4b0>
 800cd08:	e5ea      	b.n	800c8e0 <__ieee754_acos+0x28>
 800cd0a:	bf00      	nop
 800cd0c:	f3af 8000 	nop.w
 800cd10:	0dfdf709 	.word	0x0dfdf709
 800cd14:	3f023de1 	.word	0x3f023de1
 800cd18:	7501b288 	.word	0x7501b288
 800cd1c:	3f49efe0 	.word	0x3f49efe0
 800cd20:	b5688f3b 	.word	0xb5688f3b
 800cd24:	3fa48228 	.word	0x3fa48228
 800cd28:	0e884455 	.word	0x0e884455
 800cd2c:	3fc9c155 	.word	0x3fc9c155
 800cd30:	03eb6f7d 	.word	0x03eb6f7d
 800cd34:	3fd4d612 	.word	0x3fd4d612
 800cd38:	55555555 	.word	0x55555555
 800cd3c:	3fc55555 	.word	0x3fc55555
 800cd40:	b12e9282 	.word	0xb12e9282
 800cd44:	3fb3b8c5 	.word	0x3fb3b8c5
 800cd48:	1b8d0159 	.word	0x1b8d0159
 800cd4c:	3fe6066c 	.word	0x3fe6066c
 800cd50:	9c598ac8 	.word	0x9c598ac8
 800cd54:	40002ae5 	.word	0x40002ae5
 800cd58:	1c8a2d4b 	.word	0x1c8a2d4b
 800cd5c:	40033a27 	.word	0x40033a27
	...
 800cd68:	54442d18 	.word	0x54442d18
 800cd6c:	3ff921fb 	.word	0x3ff921fb
 800cd70:	3ff00000 	.word	0x3ff00000
 800cd74:	3fe00000 	.word	0x3fe00000

0800cd78 <__ieee754_atan2>:
 800cd78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd7c:	ec57 6b11 	vmov	r6, r7, d1
 800cd80:	4273      	negs	r3, r6
 800cd82:	f8df e184 	ldr.w	lr, [pc, #388]	; 800cf08 <__ieee754_atan2+0x190>
 800cd86:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800cd8a:	4333      	orrs	r3, r6
 800cd8c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800cd90:	4573      	cmp	r3, lr
 800cd92:	ec51 0b10 	vmov	r0, r1, d0
 800cd96:	ee11 8a10 	vmov	r8, s2
 800cd9a:	d80a      	bhi.n	800cdb2 <__ieee754_atan2+0x3a>
 800cd9c:	4244      	negs	r4, r0
 800cd9e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cda2:	4304      	orrs	r4, r0
 800cda4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800cda8:	4574      	cmp	r4, lr
 800cdaa:	ee10 9a10 	vmov	r9, s0
 800cdae:	468c      	mov	ip, r1
 800cdb0:	d907      	bls.n	800cdc2 <__ieee754_atan2+0x4a>
 800cdb2:	4632      	mov	r2, r6
 800cdb4:	463b      	mov	r3, r7
 800cdb6:	f7f3 fa79 	bl	80002ac <__adddf3>
 800cdba:	ec41 0b10 	vmov	d0, r0, r1
 800cdbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdc2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800cdc6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800cdca:	4334      	orrs	r4, r6
 800cdcc:	d103      	bne.n	800cdd6 <__ieee754_atan2+0x5e>
 800cdce:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdd2:	f000 b94d 	b.w	800d070 <atan>
 800cdd6:	17bc      	asrs	r4, r7, #30
 800cdd8:	f004 0402 	and.w	r4, r4, #2
 800cddc:	ea53 0909 	orrs.w	r9, r3, r9
 800cde0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800cde4:	d107      	bne.n	800cdf6 <__ieee754_atan2+0x7e>
 800cde6:	2c02      	cmp	r4, #2
 800cde8:	d060      	beq.n	800ceac <__ieee754_atan2+0x134>
 800cdea:	2c03      	cmp	r4, #3
 800cdec:	d1e5      	bne.n	800cdba <__ieee754_atan2+0x42>
 800cdee:	a142      	add	r1, pc, #264	; (adr r1, 800cef8 <__ieee754_atan2+0x180>)
 800cdf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cdf4:	e7e1      	b.n	800cdba <__ieee754_atan2+0x42>
 800cdf6:	ea52 0808 	orrs.w	r8, r2, r8
 800cdfa:	d106      	bne.n	800ce0a <__ieee754_atan2+0x92>
 800cdfc:	f1bc 0f00 	cmp.w	ip, #0
 800ce00:	da5f      	bge.n	800cec2 <__ieee754_atan2+0x14a>
 800ce02:	a13f      	add	r1, pc, #252	; (adr r1, 800cf00 <__ieee754_atan2+0x188>)
 800ce04:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce08:	e7d7      	b.n	800cdba <__ieee754_atan2+0x42>
 800ce0a:	4572      	cmp	r2, lr
 800ce0c:	d10f      	bne.n	800ce2e <__ieee754_atan2+0xb6>
 800ce0e:	4293      	cmp	r3, r2
 800ce10:	f104 34ff 	add.w	r4, r4, #4294967295
 800ce14:	d107      	bne.n	800ce26 <__ieee754_atan2+0xae>
 800ce16:	2c02      	cmp	r4, #2
 800ce18:	d84c      	bhi.n	800ceb4 <__ieee754_atan2+0x13c>
 800ce1a:	4b35      	ldr	r3, [pc, #212]	; (800cef0 <__ieee754_atan2+0x178>)
 800ce1c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800ce20:	e9d4 0100 	ldrd	r0, r1, [r4]
 800ce24:	e7c9      	b.n	800cdba <__ieee754_atan2+0x42>
 800ce26:	2c02      	cmp	r4, #2
 800ce28:	d848      	bhi.n	800cebc <__ieee754_atan2+0x144>
 800ce2a:	4b32      	ldr	r3, [pc, #200]	; (800cef4 <__ieee754_atan2+0x17c>)
 800ce2c:	e7f6      	b.n	800ce1c <__ieee754_atan2+0xa4>
 800ce2e:	4573      	cmp	r3, lr
 800ce30:	d0e4      	beq.n	800cdfc <__ieee754_atan2+0x84>
 800ce32:	1a9b      	subs	r3, r3, r2
 800ce34:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800ce38:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ce3c:	da1e      	bge.n	800ce7c <__ieee754_atan2+0x104>
 800ce3e:	2f00      	cmp	r7, #0
 800ce40:	da01      	bge.n	800ce46 <__ieee754_atan2+0xce>
 800ce42:	323c      	adds	r2, #60	; 0x3c
 800ce44:	db1e      	blt.n	800ce84 <__ieee754_atan2+0x10c>
 800ce46:	4632      	mov	r2, r6
 800ce48:	463b      	mov	r3, r7
 800ce4a:	f7f3 fd0f 	bl	800086c <__aeabi_ddiv>
 800ce4e:	ec41 0b10 	vmov	d0, r0, r1
 800ce52:	f000 faad 	bl	800d3b0 <fabs>
 800ce56:	f000 f90b 	bl	800d070 <atan>
 800ce5a:	ec51 0b10 	vmov	r0, r1, d0
 800ce5e:	2c01      	cmp	r4, #1
 800ce60:	d013      	beq.n	800ce8a <__ieee754_atan2+0x112>
 800ce62:	2c02      	cmp	r4, #2
 800ce64:	d015      	beq.n	800ce92 <__ieee754_atan2+0x11a>
 800ce66:	2c00      	cmp	r4, #0
 800ce68:	d0a7      	beq.n	800cdba <__ieee754_atan2+0x42>
 800ce6a:	a319      	add	r3, pc, #100	; (adr r3, 800ced0 <__ieee754_atan2+0x158>)
 800ce6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce70:	f7f3 fa1a 	bl	80002a8 <__aeabi_dsub>
 800ce74:	a318      	add	r3, pc, #96	; (adr r3, 800ced8 <__ieee754_atan2+0x160>)
 800ce76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce7a:	e014      	b.n	800cea6 <__ieee754_atan2+0x12e>
 800ce7c:	a118      	add	r1, pc, #96	; (adr r1, 800cee0 <__ieee754_atan2+0x168>)
 800ce7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce82:	e7ec      	b.n	800ce5e <__ieee754_atan2+0xe6>
 800ce84:	2000      	movs	r0, #0
 800ce86:	2100      	movs	r1, #0
 800ce88:	e7e9      	b.n	800ce5e <__ieee754_atan2+0xe6>
 800ce8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ce8e:	4619      	mov	r1, r3
 800ce90:	e793      	b.n	800cdba <__ieee754_atan2+0x42>
 800ce92:	a30f      	add	r3, pc, #60	; (adr r3, 800ced0 <__ieee754_atan2+0x158>)
 800ce94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce98:	f7f3 fa06 	bl	80002a8 <__aeabi_dsub>
 800ce9c:	4602      	mov	r2, r0
 800ce9e:	460b      	mov	r3, r1
 800cea0:	a10d      	add	r1, pc, #52	; (adr r1, 800ced8 <__ieee754_atan2+0x160>)
 800cea2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cea6:	f7f3 f9ff 	bl	80002a8 <__aeabi_dsub>
 800ceaa:	e786      	b.n	800cdba <__ieee754_atan2+0x42>
 800ceac:	a10a      	add	r1, pc, #40	; (adr r1, 800ced8 <__ieee754_atan2+0x160>)
 800ceae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ceb2:	e782      	b.n	800cdba <__ieee754_atan2+0x42>
 800ceb4:	a10c      	add	r1, pc, #48	; (adr r1, 800cee8 <__ieee754_atan2+0x170>)
 800ceb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ceba:	e77e      	b.n	800cdba <__ieee754_atan2+0x42>
 800cebc:	2000      	movs	r0, #0
 800cebe:	2100      	movs	r1, #0
 800cec0:	e77b      	b.n	800cdba <__ieee754_atan2+0x42>
 800cec2:	a107      	add	r1, pc, #28	; (adr r1, 800cee0 <__ieee754_atan2+0x168>)
 800cec4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cec8:	e777      	b.n	800cdba <__ieee754_atan2+0x42>
 800ceca:	bf00      	nop
 800cecc:	f3af 8000 	nop.w
 800ced0:	33145c07 	.word	0x33145c07
 800ced4:	3ca1a626 	.word	0x3ca1a626
 800ced8:	54442d18 	.word	0x54442d18
 800cedc:	400921fb 	.word	0x400921fb
 800cee0:	54442d18 	.word	0x54442d18
 800cee4:	3ff921fb 	.word	0x3ff921fb
 800cee8:	54442d18 	.word	0x54442d18
 800ceec:	3fe921fb 	.word	0x3fe921fb
 800cef0:	0800d9b0 	.word	0x0800d9b0
 800cef4:	0800d9c8 	.word	0x0800d9c8
 800cef8:	54442d18 	.word	0x54442d18
 800cefc:	c00921fb 	.word	0xc00921fb
 800cf00:	54442d18 	.word	0x54442d18
 800cf04:	bff921fb 	.word	0xbff921fb
 800cf08:	7ff00000 	.word	0x7ff00000

0800cf0c <__ieee754_sqrt>:
 800cf0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf10:	ec55 4b10 	vmov	r4, r5, d0
 800cf14:	4e55      	ldr	r6, [pc, #340]	; (800d06c <__ieee754_sqrt+0x160>)
 800cf16:	43ae      	bics	r6, r5
 800cf18:	ee10 0a10 	vmov	r0, s0
 800cf1c:	ee10 3a10 	vmov	r3, s0
 800cf20:	462a      	mov	r2, r5
 800cf22:	4629      	mov	r1, r5
 800cf24:	d110      	bne.n	800cf48 <__ieee754_sqrt+0x3c>
 800cf26:	ee10 2a10 	vmov	r2, s0
 800cf2a:	462b      	mov	r3, r5
 800cf2c:	f7f3 fb74 	bl	8000618 <__aeabi_dmul>
 800cf30:	4602      	mov	r2, r0
 800cf32:	460b      	mov	r3, r1
 800cf34:	4620      	mov	r0, r4
 800cf36:	4629      	mov	r1, r5
 800cf38:	f7f3 f9b8 	bl	80002ac <__adddf3>
 800cf3c:	4604      	mov	r4, r0
 800cf3e:	460d      	mov	r5, r1
 800cf40:	ec45 4b10 	vmov	d0, r4, r5
 800cf44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf48:	2d00      	cmp	r5, #0
 800cf4a:	dc10      	bgt.n	800cf6e <__ieee754_sqrt+0x62>
 800cf4c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cf50:	4330      	orrs	r0, r6
 800cf52:	d0f5      	beq.n	800cf40 <__ieee754_sqrt+0x34>
 800cf54:	b15d      	cbz	r5, 800cf6e <__ieee754_sqrt+0x62>
 800cf56:	ee10 2a10 	vmov	r2, s0
 800cf5a:	462b      	mov	r3, r5
 800cf5c:	ee10 0a10 	vmov	r0, s0
 800cf60:	f7f3 f9a2 	bl	80002a8 <__aeabi_dsub>
 800cf64:	4602      	mov	r2, r0
 800cf66:	460b      	mov	r3, r1
 800cf68:	f7f3 fc80 	bl	800086c <__aeabi_ddiv>
 800cf6c:	e7e6      	b.n	800cf3c <__ieee754_sqrt+0x30>
 800cf6e:	1512      	asrs	r2, r2, #20
 800cf70:	d074      	beq.n	800d05c <__ieee754_sqrt+0x150>
 800cf72:	07d4      	lsls	r4, r2, #31
 800cf74:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800cf78:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800cf7c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800cf80:	bf5e      	ittt	pl
 800cf82:	0fda      	lsrpl	r2, r3, #31
 800cf84:	005b      	lslpl	r3, r3, #1
 800cf86:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800cf8a:	2400      	movs	r4, #0
 800cf8c:	0fda      	lsrs	r2, r3, #31
 800cf8e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800cf92:	107f      	asrs	r7, r7, #1
 800cf94:	005b      	lsls	r3, r3, #1
 800cf96:	2516      	movs	r5, #22
 800cf98:	4620      	mov	r0, r4
 800cf9a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800cf9e:	1886      	adds	r6, r0, r2
 800cfa0:	428e      	cmp	r6, r1
 800cfa2:	bfde      	ittt	le
 800cfa4:	1b89      	suble	r1, r1, r6
 800cfa6:	18b0      	addle	r0, r6, r2
 800cfa8:	18a4      	addle	r4, r4, r2
 800cfaa:	0049      	lsls	r1, r1, #1
 800cfac:	3d01      	subs	r5, #1
 800cfae:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800cfb2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800cfb6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cfba:	d1f0      	bne.n	800cf9e <__ieee754_sqrt+0x92>
 800cfbc:	462a      	mov	r2, r5
 800cfbe:	f04f 0e20 	mov.w	lr, #32
 800cfc2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800cfc6:	4281      	cmp	r1, r0
 800cfc8:	eb06 0c05 	add.w	ip, r6, r5
 800cfcc:	dc02      	bgt.n	800cfd4 <__ieee754_sqrt+0xc8>
 800cfce:	d113      	bne.n	800cff8 <__ieee754_sqrt+0xec>
 800cfd0:	459c      	cmp	ip, r3
 800cfd2:	d811      	bhi.n	800cff8 <__ieee754_sqrt+0xec>
 800cfd4:	f1bc 0f00 	cmp.w	ip, #0
 800cfd8:	eb0c 0506 	add.w	r5, ip, r6
 800cfdc:	da43      	bge.n	800d066 <__ieee754_sqrt+0x15a>
 800cfde:	2d00      	cmp	r5, #0
 800cfe0:	db41      	blt.n	800d066 <__ieee754_sqrt+0x15a>
 800cfe2:	f100 0801 	add.w	r8, r0, #1
 800cfe6:	1a09      	subs	r1, r1, r0
 800cfe8:	459c      	cmp	ip, r3
 800cfea:	bf88      	it	hi
 800cfec:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800cff0:	eba3 030c 	sub.w	r3, r3, ip
 800cff4:	4432      	add	r2, r6
 800cff6:	4640      	mov	r0, r8
 800cff8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800cffc:	f1be 0e01 	subs.w	lr, lr, #1
 800d000:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800d004:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d008:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d00c:	d1db      	bne.n	800cfc6 <__ieee754_sqrt+0xba>
 800d00e:	430b      	orrs	r3, r1
 800d010:	d006      	beq.n	800d020 <__ieee754_sqrt+0x114>
 800d012:	1c50      	adds	r0, r2, #1
 800d014:	bf13      	iteet	ne
 800d016:	3201      	addne	r2, #1
 800d018:	3401      	addeq	r4, #1
 800d01a:	4672      	moveq	r2, lr
 800d01c:	f022 0201 	bicne.w	r2, r2, #1
 800d020:	1063      	asrs	r3, r4, #1
 800d022:	0852      	lsrs	r2, r2, #1
 800d024:	07e1      	lsls	r1, r4, #31
 800d026:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800d02a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d02e:	bf48      	it	mi
 800d030:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800d034:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800d038:	4614      	mov	r4, r2
 800d03a:	e781      	b.n	800cf40 <__ieee754_sqrt+0x34>
 800d03c:	0ad9      	lsrs	r1, r3, #11
 800d03e:	3815      	subs	r0, #21
 800d040:	055b      	lsls	r3, r3, #21
 800d042:	2900      	cmp	r1, #0
 800d044:	d0fa      	beq.n	800d03c <__ieee754_sqrt+0x130>
 800d046:	02cd      	lsls	r5, r1, #11
 800d048:	d50a      	bpl.n	800d060 <__ieee754_sqrt+0x154>
 800d04a:	f1c2 0420 	rsb	r4, r2, #32
 800d04e:	fa23 f404 	lsr.w	r4, r3, r4
 800d052:	1e55      	subs	r5, r2, #1
 800d054:	4093      	lsls	r3, r2
 800d056:	4321      	orrs	r1, r4
 800d058:	1b42      	subs	r2, r0, r5
 800d05a:	e78a      	b.n	800cf72 <__ieee754_sqrt+0x66>
 800d05c:	4610      	mov	r0, r2
 800d05e:	e7f0      	b.n	800d042 <__ieee754_sqrt+0x136>
 800d060:	0049      	lsls	r1, r1, #1
 800d062:	3201      	adds	r2, #1
 800d064:	e7ef      	b.n	800d046 <__ieee754_sqrt+0x13a>
 800d066:	4680      	mov	r8, r0
 800d068:	e7bd      	b.n	800cfe6 <__ieee754_sqrt+0xda>
 800d06a:	bf00      	nop
 800d06c:	7ff00000 	.word	0x7ff00000

0800d070 <atan>:
 800d070:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d074:	ec55 4b10 	vmov	r4, r5, d0
 800d078:	4bc3      	ldr	r3, [pc, #780]	; (800d388 <atan+0x318>)
 800d07a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d07e:	429e      	cmp	r6, r3
 800d080:	46ab      	mov	fp, r5
 800d082:	dd18      	ble.n	800d0b6 <atan+0x46>
 800d084:	4bc1      	ldr	r3, [pc, #772]	; (800d38c <atan+0x31c>)
 800d086:	429e      	cmp	r6, r3
 800d088:	dc01      	bgt.n	800d08e <atan+0x1e>
 800d08a:	d109      	bne.n	800d0a0 <atan+0x30>
 800d08c:	b144      	cbz	r4, 800d0a0 <atan+0x30>
 800d08e:	4622      	mov	r2, r4
 800d090:	462b      	mov	r3, r5
 800d092:	4620      	mov	r0, r4
 800d094:	4629      	mov	r1, r5
 800d096:	f7f3 f909 	bl	80002ac <__adddf3>
 800d09a:	4604      	mov	r4, r0
 800d09c:	460d      	mov	r5, r1
 800d09e:	e006      	b.n	800d0ae <atan+0x3e>
 800d0a0:	f1bb 0f00 	cmp.w	fp, #0
 800d0a4:	f300 8131 	bgt.w	800d30a <atan+0x29a>
 800d0a8:	a59b      	add	r5, pc, #620	; (adr r5, 800d318 <atan+0x2a8>)
 800d0aa:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d0ae:	ec45 4b10 	vmov	d0, r4, r5
 800d0b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0b6:	4bb6      	ldr	r3, [pc, #728]	; (800d390 <atan+0x320>)
 800d0b8:	429e      	cmp	r6, r3
 800d0ba:	dc14      	bgt.n	800d0e6 <atan+0x76>
 800d0bc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800d0c0:	429e      	cmp	r6, r3
 800d0c2:	dc0d      	bgt.n	800d0e0 <atan+0x70>
 800d0c4:	a396      	add	r3, pc, #600	; (adr r3, 800d320 <atan+0x2b0>)
 800d0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ca:	ee10 0a10 	vmov	r0, s0
 800d0ce:	4629      	mov	r1, r5
 800d0d0:	f7f3 f8ec 	bl	80002ac <__adddf3>
 800d0d4:	4baf      	ldr	r3, [pc, #700]	; (800d394 <atan+0x324>)
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	f7f3 fd2e 	bl	8000b38 <__aeabi_dcmpgt>
 800d0dc:	2800      	cmp	r0, #0
 800d0de:	d1e6      	bne.n	800d0ae <atan+0x3e>
 800d0e0:	f04f 3aff 	mov.w	sl, #4294967295
 800d0e4:	e02b      	b.n	800d13e <atan+0xce>
 800d0e6:	f000 f963 	bl	800d3b0 <fabs>
 800d0ea:	4bab      	ldr	r3, [pc, #684]	; (800d398 <atan+0x328>)
 800d0ec:	429e      	cmp	r6, r3
 800d0ee:	ec55 4b10 	vmov	r4, r5, d0
 800d0f2:	f300 80bf 	bgt.w	800d274 <atan+0x204>
 800d0f6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800d0fa:	429e      	cmp	r6, r3
 800d0fc:	f300 80a0 	bgt.w	800d240 <atan+0x1d0>
 800d100:	ee10 2a10 	vmov	r2, s0
 800d104:	ee10 0a10 	vmov	r0, s0
 800d108:	462b      	mov	r3, r5
 800d10a:	4629      	mov	r1, r5
 800d10c:	f7f3 f8ce 	bl	80002ac <__adddf3>
 800d110:	4ba0      	ldr	r3, [pc, #640]	; (800d394 <atan+0x324>)
 800d112:	2200      	movs	r2, #0
 800d114:	f7f3 f8c8 	bl	80002a8 <__aeabi_dsub>
 800d118:	2200      	movs	r2, #0
 800d11a:	4606      	mov	r6, r0
 800d11c:	460f      	mov	r7, r1
 800d11e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d122:	4620      	mov	r0, r4
 800d124:	4629      	mov	r1, r5
 800d126:	f7f3 f8c1 	bl	80002ac <__adddf3>
 800d12a:	4602      	mov	r2, r0
 800d12c:	460b      	mov	r3, r1
 800d12e:	4630      	mov	r0, r6
 800d130:	4639      	mov	r1, r7
 800d132:	f7f3 fb9b 	bl	800086c <__aeabi_ddiv>
 800d136:	f04f 0a00 	mov.w	sl, #0
 800d13a:	4604      	mov	r4, r0
 800d13c:	460d      	mov	r5, r1
 800d13e:	4622      	mov	r2, r4
 800d140:	462b      	mov	r3, r5
 800d142:	4620      	mov	r0, r4
 800d144:	4629      	mov	r1, r5
 800d146:	f7f3 fa67 	bl	8000618 <__aeabi_dmul>
 800d14a:	4602      	mov	r2, r0
 800d14c:	460b      	mov	r3, r1
 800d14e:	4680      	mov	r8, r0
 800d150:	4689      	mov	r9, r1
 800d152:	f7f3 fa61 	bl	8000618 <__aeabi_dmul>
 800d156:	a374      	add	r3, pc, #464	; (adr r3, 800d328 <atan+0x2b8>)
 800d158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d15c:	4606      	mov	r6, r0
 800d15e:	460f      	mov	r7, r1
 800d160:	f7f3 fa5a 	bl	8000618 <__aeabi_dmul>
 800d164:	a372      	add	r3, pc, #456	; (adr r3, 800d330 <atan+0x2c0>)
 800d166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d16a:	f7f3 f89f 	bl	80002ac <__adddf3>
 800d16e:	4632      	mov	r2, r6
 800d170:	463b      	mov	r3, r7
 800d172:	f7f3 fa51 	bl	8000618 <__aeabi_dmul>
 800d176:	a370      	add	r3, pc, #448	; (adr r3, 800d338 <atan+0x2c8>)
 800d178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d17c:	f7f3 f896 	bl	80002ac <__adddf3>
 800d180:	4632      	mov	r2, r6
 800d182:	463b      	mov	r3, r7
 800d184:	f7f3 fa48 	bl	8000618 <__aeabi_dmul>
 800d188:	a36d      	add	r3, pc, #436	; (adr r3, 800d340 <atan+0x2d0>)
 800d18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d18e:	f7f3 f88d 	bl	80002ac <__adddf3>
 800d192:	4632      	mov	r2, r6
 800d194:	463b      	mov	r3, r7
 800d196:	f7f3 fa3f 	bl	8000618 <__aeabi_dmul>
 800d19a:	a36b      	add	r3, pc, #428	; (adr r3, 800d348 <atan+0x2d8>)
 800d19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1a0:	f7f3 f884 	bl	80002ac <__adddf3>
 800d1a4:	4632      	mov	r2, r6
 800d1a6:	463b      	mov	r3, r7
 800d1a8:	f7f3 fa36 	bl	8000618 <__aeabi_dmul>
 800d1ac:	a368      	add	r3, pc, #416	; (adr r3, 800d350 <atan+0x2e0>)
 800d1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1b2:	f7f3 f87b 	bl	80002ac <__adddf3>
 800d1b6:	4642      	mov	r2, r8
 800d1b8:	464b      	mov	r3, r9
 800d1ba:	f7f3 fa2d 	bl	8000618 <__aeabi_dmul>
 800d1be:	a366      	add	r3, pc, #408	; (adr r3, 800d358 <atan+0x2e8>)
 800d1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1c4:	4680      	mov	r8, r0
 800d1c6:	4689      	mov	r9, r1
 800d1c8:	4630      	mov	r0, r6
 800d1ca:	4639      	mov	r1, r7
 800d1cc:	f7f3 fa24 	bl	8000618 <__aeabi_dmul>
 800d1d0:	a363      	add	r3, pc, #396	; (adr r3, 800d360 <atan+0x2f0>)
 800d1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1d6:	f7f3 f867 	bl	80002a8 <__aeabi_dsub>
 800d1da:	4632      	mov	r2, r6
 800d1dc:	463b      	mov	r3, r7
 800d1de:	f7f3 fa1b 	bl	8000618 <__aeabi_dmul>
 800d1e2:	a361      	add	r3, pc, #388	; (adr r3, 800d368 <atan+0x2f8>)
 800d1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1e8:	f7f3 f85e 	bl	80002a8 <__aeabi_dsub>
 800d1ec:	4632      	mov	r2, r6
 800d1ee:	463b      	mov	r3, r7
 800d1f0:	f7f3 fa12 	bl	8000618 <__aeabi_dmul>
 800d1f4:	a35e      	add	r3, pc, #376	; (adr r3, 800d370 <atan+0x300>)
 800d1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1fa:	f7f3 f855 	bl	80002a8 <__aeabi_dsub>
 800d1fe:	4632      	mov	r2, r6
 800d200:	463b      	mov	r3, r7
 800d202:	f7f3 fa09 	bl	8000618 <__aeabi_dmul>
 800d206:	a35c      	add	r3, pc, #368	; (adr r3, 800d378 <atan+0x308>)
 800d208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d20c:	f7f3 f84c 	bl	80002a8 <__aeabi_dsub>
 800d210:	4632      	mov	r2, r6
 800d212:	463b      	mov	r3, r7
 800d214:	f7f3 fa00 	bl	8000618 <__aeabi_dmul>
 800d218:	4602      	mov	r2, r0
 800d21a:	460b      	mov	r3, r1
 800d21c:	4640      	mov	r0, r8
 800d21e:	4649      	mov	r1, r9
 800d220:	f7f3 f844 	bl	80002ac <__adddf3>
 800d224:	4622      	mov	r2, r4
 800d226:	462b      	mov	r3, r5
 800d228:	f7f3 f9f6 	bl	8000618 <__aeabi_dmul>
 800d22c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800d230:	4602      	mov	r2, r0
 800d232:	460b      	mov	r3, r1
 800d234:	d14b      	bne.n	800d2ce <atan+0x25e>
 800d236:	4620      	mov	r0, r4
 800d238:	4629      	mov	r1, r5
 800d23a:	f7f3 f835 	bl	80002a8 <__aeabi_dsub>
 800d23e:	e72c      	b.n	800d09a <atan+0x2a>
 800d240:	ee10 0a10 	vmov	r0, s0
 800d244:	4b53      	ldr	r3, [pc, #332]	; (800d394 <atan+0x324>)
 800d246:	2200      	movs	r2, #0
 800d248:	4629      	mov	r1, r5
 800d24a:	f7f3 f82d 	bl	80002a8 <__aeabi_dsub>
 800d24e:	4b51      	ldr	r3, [pc, #324]	; (800d394 <atan+0x324>)
 800d250:	4606      	mov	r6, r0
 800d252:	460f      	mov	r7, r1
 800d254:	2200      	movs	r2, #0
 800d256:	4620      	mov	r0, r4
 800d258:	4629      	mov	r1, r5
 800d25a:	f7f3 f827 	bl	80002ac <__adddf3>
 800d25e:	4602      	mov	r2, r0
 800d260:	460b      	mov	r3, r1
 800d262:	4630      	mov	r0, r6
 800d264:	4639      	mov	r1, r7
 800d266:	f7f3 fb01 	bl	800086c <__aeabi_ddiv>
 800d26a:	f04f 0a01 	mov.w	sl, #1
 800d26e:	4604      	mov	r4, r0
 800d270:	460d      	mov	r5, r1
 800d272:	e764      	b.n	800d13e <atan+0xce>
 800d274:	4b49      	ldr	r3, [pc, #292]	; (800d39c <atan+0x32c>)
 800d276:	429e      	cmp	r6, r3
 800d278:	da1d      	bge.n	800d2b6 <atan+0x246>
 800d27a:	ee10 0a10 	vmov	r0, s0
 800d27e:	4b48      	ldr	r3, [pc, #288]	; (800d3a0 <atan+0x330>)
 800d280:	2200      	movs	r2, #0
 800d282:	4629      	mov	r1, r5
 800d284:	f7f3 f810 	bl	80002a8 <__aeabi_dsub>
 800d288:	4b45      	ldr	r3, [pc, #276]	; (800d3a0 <atan+0x330>)
 800d28a:	4606      	mov	r6, r0
 800d28c:	460f      	mov	r7, r1
 800d28e:	2200      	movs	r2, #0
 800d290:	4620      	mov	r0, r4
 800d292:	4629      	mov	r1, r5
 800d294:	f7f3 f9c0 	bl	8000618 <__aeabi_dmul>
 800d298:	4b3e      	ldr	r3, [pc, #248]	; (800d394 <atan+0x324>)
 800d29a:	2200      	movs	r2, #0
 800d29c:	f7f3 f806 	bl	80002ac <__adddf3>
 800d2a0:	4602      	mov	r2, r0
 800d2a2:	460b      	mov	r3, r1
 800d2a4:	4630      	mov	r0, r6
 800d2a6:	4639      	mov	r1, r7
 800d2a8:	f7f3 fae0 	bl	800086c <__aeabi_ddiv>
 800d2ac:	f04f 0a02 	mov.w	sl, #2
 800d2b0:	4604      	mov	r4, r0
 800d2b2:	460d      	mov	r5, r1
 800d2b4:	e743      	b.n	800d13e <atan+0xce>
 800d2b6:	462b      	mov	r3, r5
 800d2b8:	ee10 2a10 	vmov	r2, s0
 800d2bc:	4939      	ldr	r1, [pc, #228]	; (800d3a4 <atan+0x334>)
 800d2be:	2000      	movs	r0, #0
 800d2c0:	f7f3 fad4 	bl	800086c <__aeabi_ddiv>
 800d2c4:	f04f 0a03 	mov.w	sl, #3
 800d2c8:	4604      	mov	r4, r0
 800d2ca:	460d      	mov	r5, r1
 800d2cc:	e737      	b.n	800d13e <atan+0xce>
 800d2ce:	4b36      	ldr	r3, [pc, #216]	; (800d3a8 <atan+0x338>)
 800d2d0:	4e36      	ldr	r6, [pc, #216]	; (800d3ac <atan+0x33c>)
 800d2d2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800d2d6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800d2da:	e9da 2300 	ldrd	r2, r3, [sl]
 800d2de:	f7f2 ffe3 	bl	80002a8 <__aeabi_dsub>
 800d2e2:	4622      	mov	r2, r4
 800d2e4:	462b      	mov	r3, r5
 800d2e6:	f7f2 ffdf 	bl	80002a8 <__aeabi_dsub>
 800d2ea:	4602      	mov	r2, r0
 800d2ec:	460b      	mov	r3, r1
 800d2ee:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d2f2:	f7f2 ffd9 	bl	80002a8 <__aeabi_dsub>
 800d2f6:	f1bb 0f00 	cmp.w	fp, #0
 800d2fa:	4604      	mov	r4, r0
 800d2fc:	460d      	mov	r5, r1
 800d2fe:	f6bf aed6 	bge.w	800d0ae <atan+0x3e>
 800d302:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d306:	461d      	mov	r5, r3
 800d308:	e6d1      	b.n	800d0ae <atan+0x3e>
 800d30a:	a51d      	add	r5, pc, #116	; (adr r5, 800d380 <atan+0x310>)
 800d30c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d310:	e6cd      	b.n	800d0ae <atan+0x3e>
 800d312:	bf00      	nop
 800d314:	f3af 8000 	nop.w
 800d318:	54442d18 	.word	0x54442d18
 800d31c:	bff921fb 	.word	0xbff921fb
 800d320:	8800759c 	.word	0x8800759c
 800d324:	7e37e43c 	.word	0x7e37e43c
 800d328:	e322da11 	.word	0xe322da11
 800d32c:	3f90ad3a 	.word	0x3f90ad3a
 800d330:	24760deb 	.word	0x24760deb
 800d334:	3fa97b4b 	.word	0x3fa97b4b
 800d338:	a0d03d51 	.word	0xa0d03d51
 800d33c:	3fb10d66 	.word	0x3fb10d66
 800d340:	c54c206e 	.word	0xc54c206e
 800d344:	3fb745cd 	.word	0x3fb745cd
 800d348:	920083ff 	.word	0x920083ff
 800d34c:	3fc24924 	.word	0x3fc24924
 800d350:	5555550d 	.word	0x5555550d
 800d354:	3fd55555 	.word	0x3fd55555
 800d358:	2c6a6c2f 	.word	0x2c6a6c2f
 800d35c:	bfa2b444 	.word	0xbfa2b444
 800d360:	52defd9a 	.word	0x52defd9a
 800d364:	3fadde2d 	.word	0x3fadde2d
 800d368:	af749a6d 	.word	0xaf749a6d
 800d36c:	3fb3b0f2 	.word	0x3fb3b0f2
 800d370:	fe231671 	.word	0xfe231671
 800d374:	3fbc71c6 	.word	0x3fbc71c6
 800d378:	9998ebc4 	.word	0x9998ebc4
 800d37c:	3fc99999 	.word	0x3fc99999
 800d380:	54442d18 	.word	0x54442d18
 800d384:	3ff921fb 	.word	0x3ff921fb
 800d388:	440fffff 	.word	0x440fffff
 800d38c:	7ff00000 	.word	0x7ff00000
 800d390:	3fdbffff 	.word	0x3fdbffff
 800d394:	3ff00000 	.word	0x3ff00000
 800d398:	3ff2ffff 	.word	0x3ff2ffff
 800d39c:	40038000 	.word	0x40038000
 800d3a0:	3ff80000 	.word	0x3ff80000
 800d3a4:	bff00000 	.word	0xbff00000
 800d3a8:	0800da00 	.word	0x0800da00
 800d3ac:	0800d9e0 	.word	0x0800d9e0

0800d3b0 <fabs>:
 800d3b0:	ec51 0b10 	vmov	r0, r1, d0
 800d3b4:	ee10 2a10 	vmov	r2, s0
 800d3b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d3bc:	ec43 2b10 	vmov	d0, r2, r3
 800d3c0:	4770      	bx	lr
	...

0800d3c4 <_init>:
 800d3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3c6:	bf00      	nop
 800d3c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3ca:	bc08      	pop	{r3}
 800d3cc:	469e      	mov	lr, r3
 800d3ce:	4770      	bx	lr

0800d3d0 <_fini>:
 800d3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3d2:	bf00      	nop
 800d3d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3d6:	bc08      	pop	{r3}
 800d3d8:	469e      	mov	lr, r3
 800d3da:	4770      	bx	lr
