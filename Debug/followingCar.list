
followingCar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5b4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000628  0800c768  0800c768  0001c768  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd90  0800cd90  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd90  0800cd90  0001cd90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd98  0800cd98  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd98  0800cd98  0001cd98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cd9c  0800cd9c  0001cd9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800cda0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          000002fc  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004dc  200004dc  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001670a  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035e9  00000000  00000000  0003691a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001380  00000000  00000000  00039f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001200  00000000  00000000  0003b288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027bca  00000000  00000000  0003c488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019f78  00000000  00000000  00064052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6088  00000000  00000000  0007dfca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00164052  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006850  00000000  00000000  001640a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800c74c 	.word	0x0800c74c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	0800c74c 	.word	0x0800c74c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <HMC5883L_readNormalize>:

    return v;
}

Vector HMC5883L_readNormalize(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af00      	add	r7, sp, #0
    v.XAxis = ((float)HMC5883L_readRegister16(HMC5883L_REG_OUT_X_M) - xOffset) * mgPerDigit;
 800101e:	2003      	movs	r0, #3
 8001020:	f000 f960 	bl	80012e4 <HMC5883L_readRegister16>
 8001024:	4603      	mov	r3, r0
 8001026:	ee07 3a90 	vmov	s15, r3
 800102a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800102e:	4b28      	ldr	r3, [pc, #160]	; (80010d0 <HMC5883L_readNormalize+0xb8>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	ee07 3a90 	vmov	s15, r3
 8001036:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800103a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800103e:	4b25      	ldr	r3, [pc, #148]	; (80010d4 <HMC5883L_readNormalize+0xbc>)
 8001040:	edd3 7a00 	vldr	s15, [r3]
 8001044:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001048:	4b23      	ldr	r3, [pc, #140]	; (80010d8 <HMC5883L_readNormalize+0xc0>)
 800104a:	edc3 7a00 	vstr	s15, [r3]
    v.YAxis = ((float)HMC5883L_readRegister16(HMC5883L_REG_OUT_Y_M) - yOffset) * mgPerDigit;
 800104e:	2007      	movs	r0, #7
 8001050:	f000 f948 	bl	80012e4 <HMC5883L_readRegister16>
 8001054:	4603      	mov	r3, r0
 8001056:	ee07 3a90 	vmov	s15, r3
 800105a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800105e:	4b1f      	ldr	r3, [pc, #124]	; (80010dc <HMC5883L_readNormalize+0xc4>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	ee07 3a90 	vmov	s15, r3
 8001066:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800106a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800106e:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <HMC5883L_readNormalize+0xbc>)
 8001070:	edd3 7a00 	vldr	s15, [r3]
 8001074:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001078:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <HMC5883L_readNormalize+0xc0>)
 800107a:	edc3 7a01 	vstr	s15, [r3, #4]
    v.ZAxis = (float)HMC5883L_readRegister16(HMC5883L_REG_OUT_Z_M) * mgPerDigit;
 800107e:	2005      	movs	r0, #5
 8001080:	f000 f930 	bl	80012e4 <HMC5883L_readRegister16>
 8001084:	4603      	mov	r3, r0
 8001086:	ee07 3a90 	vmov	s15, r3
 800108a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800108e:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <HMC5883L_readNormalize+0xbc>)
 8001090:	edd3 7a00 	vldr	s15, [r3]
 8001094:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001098:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <HMC5883L_readNormalize+0xc0>)
 800109a:	edc3 7a02 	vstr	s15, [r3, #8]

    return v;
 800109e:	4a0e      	ldr	r2, [pc, #56]	; (80010d8 <HMC5883L_readNormalize+0xc0>)
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80010a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80010aa:	6979      	ldr	r1, [r7, #20]
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	ee06 1a90 	vmov	s13, r1
 80010b4:	ee07 2a10 	vmov	s14, r2
 80010b8:	ee07 3a90 	vmov	s15, r3
}
 80010bc:	eeb0 0a66 	vmov.f32	s0, s13
 80010c0:	eef0 0a47 	vmov.f32	s1, s14
 80010c4:	eeb0 1a67 	vmov.f32	s2, s15
 80010c8:	3720      	adds	r7, #32
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	2000020c 	.word	0x2000020c
 80010d4:	200001fc 	.word	0x200001fc
 80010d8:	20000200 	.word	0x20000200
 80010dc:	20000210 	.word	0x20000210

080010e0 <HMC5883L_setOffset>:

void HMC5883L_setOffset(int xo, int yo)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
    xOffset = xo;
 80010ea:	4a06      	ldr	r2, [pc, #24]	; (8001104 <HMC5883L_setOffset+0x24>)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6013      	str	r3, [r2, #0]
    yOffset = yo;
 80010f0:	4a05      	ldr	r2, [pc, #20]	; (8001108 <HMC5883L_setOffset+0x28>)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	6013      	str	r3, [r2, #0]
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	2000020c 	.word	0x2000020c
 8001108:	20000210 	.word	0x20000210

0800110c <HMC5883L_setRange>:

void HMC5883L_setRange(hmc5883l_range_t range)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
    switch(range)
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	2b07      	cmp	r3, #7
 800111a:	d833      	bhi.n	8001184 <HMC5883L_setRange+0x78>
 800111c:	a201      	add	r2, pc, #4	; (adr r2, 8001124 <HMC5883L_setRange+0x18>)
 800111e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001122:	bf00      	nop
 8001124:	08001145 	.word	0x08001145
 8001128:	0800114d 	.word	0x0800114d
 800112c:	08001155 	.word	0x08001155
 8001130:	0800115d 	.word	0x0800115d
 8001134:	08001165 	.word	0x08001165
 8001138:	0800116d 	.word	0x0800116d
 800113c:	08001175 	.word	0x08001175
 8001140:	0800117d 	.word	0x0800117d
    {
	case HMC5883L_RANGE_0_88GA:
	    mgPerDigit = 0.73f;
 8001144:	4b15      	ldr	r3, [pc, #84]	; (800119c <HMC5883L_setRange+0x90>)
 8001146:	4a16      	ldr	r2, [pc, #88]	; (80011a0 <HMC5883L_setRange+0x94>)
 8001148:	601a      	str	r2, [r3, #0]
	    break;
 800114a:	e01c      	b.n	8001186 <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_1_3GA:
	    mgPerDigit = 0.92f;
 800114c:	4b13      	ldr	r3, [pc, #76]	; (800119c <HMC5883L_setRange+0x90>)
 800114e:	4a15      	ldr	r2, [pc, #84]	; (80011a4 <HMC5883L_setRange+0x98>)
 8001150:	601a      	str	r2, [r3, #0]
	    break;
 8001152:	e018      	b.n	8001186 <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_1_9GA:
	    mgPerDigit = 1.22f;
 8001154:	4b11      	ldr	r3, [pc, #68]	; (800119c <HMC5883L_setRange+0x90>)
 8001156:	4a14      	ldr	r2, [pc, #80]	; (80011a8 <HMC5883L_setRange+0x9c>)
 8001158:	601a      	str	r2, [r3, #0]
	    break;
 800115a:	e014      	b.n	8001186 <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_2_5GA:
	    mgPerDigit = 1.52f;
 800115c:	4b0f      	ldr	r3, [pc, #60]	; (800119c <HMC5883L_setRange+0x90>)
 800115e:	4a13      	ldr	r2, [pc, #76]	; (80011ac <HMC5883L_setRange+0xa0>)
 8001160:	601a      	str	r2, [r3, #0]
	    break;
 8001162:	e010      	b.n	8001186 <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_4GA:
	    mgPerDigit = 2.27f;
 8001164:	4b0d      	ldr	r3, [pc, #52]	; (800119c <HMC5883L_setRange+0x90>)
 8001166:	4a12      	ldr	r2, [pc, #72]	; (80011b0 <HMC5883L_setRange+0xa4>)
 8001168:	601a      	str	r2, [r3, #0]
	    break;
 800116a:	e00c      	b.n	8001186 <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_4_7GA:
	    mgPerDigit = 2.56f;
 800116c:	4b0b      	ldr	r3, [pc, #44]	; (800119c <HMC5883L_setRange+0x90>)
 800116e:	4a11      	ldr	r2, [pc, #68]	; (80011b4 <HMC5883L_setRange+0xa8>)
 8001170:	601a      	str	r2, [r3, #0]
	    break;
 8001172:	e008      	b.n	8001186 <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_5_6GA:
	    mgPerDigit = 3.03f;
 8001174:	4b09      	ldr	r3, [pc, #36]	; (800119c <HMC5883L_setRange+0x90>)
 8001176:	4a10      	ldr	r2, [pc, #64]	; (80011b8 <HMC5883L_setRange+0xac>)
 8001178:	601a      	str	r2, [r3, #0]
	    break;
 800117a:	e004      	b.n	8001186 <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_8_1GA:
	    mgPerDigit = 4.35f;
 800117c:	4b07      	ldr	r3, [pc, #28]	; (800119c <HMC5883L_setRange+0x90>)
 800117e:	4a0f      	ldr	r2, [pc, #60]	; (80011bc <HMC5883L_setRange+0xb0>)
 8001180:	601a      	str	r2, [r3, #0]
	    break;
 8001182:	e000      	b.n	8001186 <HMC5883L_setRange+0x7a>

	default:
	    break;
 8001184:	bf00      	nop
    }

    HMC5883L_writeRegister8(HMC5883L_REG_CONFIG_B, range << 5);
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	015b      	lsls	r3, r3, #5
 800118a:	b2db      	uxtb	r3, r3
 800118c:	4619      	mov	r1, r3
 800118e:	2001      	movs	r0, #1
 8001190:	f000 f870 	bl	8001274 <HMC5883L_writeRegister8>
}
 8001194:	bf00      	nop
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	200001fc 	.word	0x200001fc
 80011a0:	3f3ae148 	.word	0x3f3ae148
 80011a4:	3f6b851f 	.word	0x3f6b851f
 80011a8:	3f9c28f6 	.word	0x3f9c28f6
 80011ac:	3fc28f5c 	.word	0x3fc28f5c
 80011b0:	401147ae 	.word	0x401147ae
 80011b4:	4023d70a 	.word	0x4023d70a
 80011b8:	4041eb85 	.word	0x4041eb85
 80011bc:	408b3333 	.word	0x408b3333

080011c0 <HMC5883L_setMeasurementMode>:
{
    return (hmc5883l_range_t)((HMC5883L_readRegister8(HMC5883L_REG_CONFIG_B) >> 5));
}

void HMC5883L_setMeasurementMode(hmc5883l_mode_t mode)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;

    value = HMC5883L_readRegister8(HMC5883L_REG_MODE);
 80011ca:	2002      	movs	r0, #2
 80011cc:	f000 f86e 	bl	80012ac <HMC5883L_readRegister8>
 80011d0:	4603      	mov	r3, r0
 80011d2:	73fb      	strb	r3, [r7, #15]
    value &= 0xFC;
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
 80011d6:	f023 0303 	bic.w	r3, r3, #3
 80011da:	73fb      	strb	r3, [r7, #15]
    value |= mode;
 80011dc:	7bfa      	ldrb	r2, [r7, #15]
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	73fb      	strb	r3, [r7, #15]

    HMC5883L_writeRegister8(HMC5883L_REG_MODE, value);
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	4619      	mov	r1, r3
 80011e8:	2002      	movs	r0, #2
 80011ea:	f000 f843 	bl	8001274 <HMC5883L_writeRegister8>
}
 80011ee:	bf00      	nop
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HMC5883L_setDataRate>:

    return (hmc5883l_mode_t)value;
}

void HMC5883L_setDataRate(hmc5883l_dataRate_t dataRate)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b084      	sub	sp, #16
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	4603      	mov	r3, r0
 80011fe:	71fb      	strb	r3, [r7, #7]
    uint8_t value;

    value = HMC5883L_readRegister8(HMC5883L_REG_CONFIG_A);
 8001200:	2000      	movs	r0, #0
 8001202:	f000 f853 	bl	80012ac <HMC5883L_readRegister8>
 8001206:	4603      	mov	r3, r0
 8001208:	73fb      	strb	r3, [r7, #15]
    value &= 0xE3;
 800120a:	7bfb      	ldrb	r3, [r7, #15]
 800120c:	f023 031c 	bic.w	r3, r3, #28
 8001210:	73fb      	strb	r3, [r7, #15]
    value |= (dataRate << 2);
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	b25a      	sxtb	r2, r3
 8001218:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800121c:	4313      	orrs	r3, r2
 800121e:	b25b      	sxtb	r3, r3
 8001220:	73fb      	strb	r3, [r7, #15]

    HMC5883L_writeRegister8(HMC5883L_REG_CONFIG_A, value);
 8001222:	7bfb      	ldrb	r3, [r7, #15]
 8001224:	4619      	mov	r1, r3
 8001226:	2000      	movs	r0, #0
 8001228:	f000 f824 	bl	8001274 <HMC5883L_writeRegister8>
}
 800122c:	bf00      	nop
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <HMC5883L_setSamples>:

    return (hmc5883l_dataRate_t)value;
}

void HMC5883L_setSamples(hmc5883l_samples_t samples)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;

    value = HMC5883L_readRegister8(HMC5883L_REG_CONFIG_A);
 800123e:	2000      	movs	r0, #0
 8001240:	f000 f834 	bl	80012ac <HMC5883L_readRegister8>
 8001244:	4603      	mov	r3, r0
 8001246:	73fb      	strb	r3, [r7, #15]
    value &= 0x9F;
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800124e:	73fb      	strb	r3, [r7, #15]
    value |= (samples << 5);
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	015b      	lsls	r3, r3, #5
 8001254:	b25a      	sxtb	r2, r3
 8001256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800125a:	4313      	orrs	r3, r2
 800125c:	b25b      	sxtb	r3, r3
 800125e:	73fb      	strb	r3, [r7, #15]

    HMC5883L_writeRegister8(HMC5883L_REG_CONFIG_A, value);
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	4619      	mov	r1, r3
 8001264:	2000      	movs	r0, #0
 8001266:	f000 f805 	bl	8001274 <HMC5883L_writeRegister8>
}
 800126a:	bf00      	nop
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <HMC5883L_writeRegister8>:
    return (hmc5883l_samples_t)value;
}

// Write byte to register
void HMC5883L_writeRegister8(uint8_t reg, uint8_t value)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af04      	add	r7, sp, #16
 800127a:	4603      	mov	r3, r0
 800127c:	460a      	mov	r2, r1
 800127e:	71fb      	strb	r3, [r7, #7]
 8001280:	4613      	mov	r3, r2
 8001282:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&I2C, HMC5883L_DEFAULT_ADDRESS, reg, 1 , &value,1,500);
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	b29a      	uxth	r2, r3
 8001288:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800128c:	9302      	str	r3, [sp, #8]
 800128e:	2301      	movs	r3, #1
 8001290:	9301      	str	r3, [sp, #4]
 8001292:	1dbb      	adds	r3, r7, #6
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	2301      	movs	r3, #1
 8001298:	213c      	movs	r1, #60	; 0x3c
 800129a:	4803      	ldr	r0, [pc, #12]	; (80012a8 <HMC5883L_writeRegister8+0x34>)
 800129c:	f002 f93c 	bl	8003518 <HAL_I2C_Mem_Write>
}
 80012a0:	bf00      	nop
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	2000033c 	.word	0x2000033c

080012ac <HMC5883L_readRegister8>:
    return value;
}

// Read byte from register
uint8_t HMC5883L_readRegister8(uint8_t reg)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b088      	sub	sp, #32
 80012b0:	af04      	add	r7, sp, #16
 80012b2:	4603      	mov	r3, r0
 80012b4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    HAL_I2C_Mem_Read(&I2C, HMC5883L_DEFAULT_ADDRESS , reg, 1, &value, 1, 500);
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012be:	9302      	str	r3, [sp, #8]
 80012c0:	2301      	movs	r3, #1
 80012c2:	9301      	str	r3, [sp, #4]
 80012c4:	f107 030f 	add.w	r3, r7, #15
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	2301      	movs	r3, #1
 80012cc:	213c      	movs	r1, #60	; 0x3c
 80012ce:	4804      	ldr	r0, [pc, #16]	; (80012e0 <HMC5883L_readRegister8+0x34>)
 80012d0:	f002 fa1c 	bl	800370c <HAL_I2C_Mem_Read>
    return value;
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	2000033c 	.word	0x2000033c

080012e4 <HMC5883L_readRegister16>:

// Read word from register
int16_t HMC5883L_readRegister16(uint8_t reg)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b088      	sub	sp, #32
 80012e8:	af04      	add	r7, sp, #16
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
    int16_t value;
	  
	  uint8_t vha[2];
	
    HAL_I2C_Mem_Read(&I2C,  HMC5883L_DEFAULT_ADDRESS, reg, 1, vha, 2, 500);
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012f6:	9302      	str	r3, [sp, #8]
 80012f8:	2302      	movs	r3, #2
 80012fa:	9301      	str	r3, [sp, #4]
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	2301      	movs	r3, #1
 8001304:	213c      	movs	r1, #60	; 0x3c
 8001306:	4808      	ldr	r0, [pc, #32]	; (8001328 <HMC5883L_readRegister16+0x44>)
 8001308:	f002 fa00 	bl	800370c <HAL_I2C_Mem_Read>
	  
	  value = vha[0] <<8 | vha[1];
 800130c:	7b3b      	ldrb	r3, [r7, #12]
 800130e:	021b      	lsls	r3, r3, #8
 8001310:	b21a      	sxth	r2, r3
 8001312:	7b7b      	ldrb	r3, [r7, #13]
 8001314:	b21b      	sxth	r3, r3
 8001316:	4313      	orrs	r3, r2
 8001318:	81fb      	strh	r3, [r7, #14]
    return value;
 800131a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800131e:	4618      	mov	r0, r3
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	2000033c 	.word	0x2000033c

0800132c <Compass_Init>:

void Compass_Init(){
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
	HMC5883L_setRange (HMC5883L_RANGE_1_3GA);
 8001330:	2001      	movs	r0, #1
 8001332:	f7ff feeb 	bl	800110c <HMC5883L_setRange>
	HMC5883L_setMeasurementMode (HMC5883L_CONTINOUS);
 8001336:	2000      	movs	r0, #0
 8001338:	f7ff ff42 	bl	80011c0 <HMC5883L_setMeasurementMode>
	HMC5883L_setDataRate (HMC5883L_DATARATE_15HZ);
 800133c:	2004      	movs	r0, #4
 800133e:	f7ff ff5a 	bl	80011f6 <HMC5883L_setDataRate>
	HMC5883L_setSamples (HMC5883L_SAMPLES_1);
 8001342:	2000      	movs	r0, #0
 8001344:	f7ff ff76 	bl	8001234 <HMC5883L_setSamples>
	HMC5883L_setOffset (0, 0);
 8001348:	2100      	movs	r1, #0
 800134a:	2000      	movs	r0, #0
 800134c:	f7ff fec8 	bl	80010e0 <HMC5883L_setOffset>
}
 8001350:	bf00      	nop
 8001352:	bd80      	pop	{r7, pc}
 8001354:	0000      	movs	r0, r0
	...

08001358 <calculateHeading>:

void calculateHeading(void){
 8001358:	b5b0      	push	{r4, r5, r7, lr}
 800135a:	af00      	add	r7, sp, #0
	  mag = HMC5883L_readNormalize ();
 800135c:	f7ff fe5c 	bl	8001018 <HMC5883L_readNormalize>
 8001360:	eef0 6a40 	vmov.f32	s13, s0
 8001364:	eeb0 7a60 	vmov.f32	s14, s1
 8001368:	eef0 7a41 	vmov.f32	s15, s2
 800136c:	4b48      	ldr	r3, [pc, #288]	; (8001490 <calculateHeading+0x138>)
 800136e:	edc3 6a00 	vstr	s13, [r3]
 8001372:	ed83 7a01 	vstr	s14, [r3, #4]
 8001376:	edc3 7a02 	vstr	s15, [r3, #8]
//	  printf ("XAxis %0.2f, YAxis %0.2f, ZAxis %0.2f \r\n", mag.XAxis, mag.YAxis, mag.ZAxis);

	  // Calculate heading
	  heading = atan2(mag.YAxis, mag.XAxis);
 800137a:	4b45      	ldr	r3, [pc, #276]	; (8001490 <calculateHeading+0x138>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff f8f2 	bl	8000568 <__aeabi_f2d>
 8001384:	4604      	mov	r4, r0
 8001386:	460d      	mov	r5, r1
 8001388:	4b41      	ldr	r3, [pc, #260]	; (8001490 <calculateHeading+0x138>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff f8eb 	bl	8000568 <__aeabi_f2d>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	ec43 2b11 	vmov	d1, r2, r3
 800139a:	ec45 4b10 	vmov	d0, r4, r5
 800139e:	f00a ff5d 	bl	800c25c <atan2>
 80013a2:	ec53 2b10 	vmov	r2, r3, d0
 80013a6:	4610      	mov	r0, r2
 80013a8:	4619      	mov	r1, r3
 80013aa:	f7ff fc2d 	bl	8000c08 <__aeabi_d2f>
 80013ae:	4603      	mov	r3, r0
 80013b0:	4a38      	ldr	r2, [pc, #224]	; (8001494 <calculateHeading+0x13c>)
 80013b2:	6013      	str	r3, [r2, #0]
	  // Set declination angle on your location and fix heading
	  // You can find your declination on: http://magnetic-declination.com/
	  // (+) Positive or (-) for negative
	  // For Bytom / Poland declination angle is 4'26E (positive)
	  // Formula: (deg + (min / 60.0)) / (180 / M_PI);
	  declinationAngle = (8.0 + (50.0 / 60.0)) / (180 / M_PI);
 80013b4:	4b38      	ldr	r3, [pc, #224]	; (8001498 <calculateHeading+0x140>)
 80013b6:	4a39      	ldr	r2, [pc, #228]	; (800149c <calculateHeading+0x144>)
 80013b8:	601a      	str	r2, [r3, #0]
	  heading += declinationAngle;
 80013ba:	4b36      	ldr	r3, [pc, #216]	; (8001494 <calculateHeading+0x13c>)
 80013bc:	ed93 7a00 	vldr	s14, [r3]
 80013c0:	4b35      	ldr	r3, [pc, #212]	; (8001498 <calculateHeading+0x140>)
 80013c2:	edd3 7a00 	vldr	s15, [r3]
 80013c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ca:	4b32      	ldr	r3, [pc, #200]	; (8001494 <calculateHeading+0x13c>)
 80013cc:	edc3 7a00 	vstr	s15, [r3]
	  // Correct for heading < 0deg and heading > 360deg
	  if (heading < 0)
 80013d0:	4b30      	ldr	r3, [pc, #192]	; (8001494 <calculateHeading+0x13c>)
 80013d2:	edd3 7a00 	vldr	s15, [r3]
 80013d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013de:	d512      	bpl.n	8001406 <calculateHeading+0xae>
	  {
	  heading += 2 * M_PI;
 80013e0:	4b2c      	ldr	r3, [pc, #176]	; (8001494 <calculateHeading+0x13c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff f8bf 	bl	8000568 <__aeabi_f2d>
 80013ea:	a325      	add	r3, pc, #148	; (adr r3, 8001480 <calculateHeading+0x128>)
 80013ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f0:	f7fe ff5c 	bl	80002ac <__adddf3>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	4610      	mov	r0, r2
 80013fa:	4619      	mov	r1, r3
 80013fc:	f7ff fc04 	bl	8000c08 <__aeabi_d2f>
 8001400:	4603      	mov	r3, r0
 8001402:	4a24      	ldr	r2, [pc, #144]	; (8001494 <calculateHeading+0x13c>)
 8001404:	6013      	str	r3, [r2, #0]
	  }
	  if (heading > 2 * M_PI)
 8001406:	4b23      	ldr	r3, [pc, #140]	; (8001494 <calculateHeading+0x13c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff f8ac 	bl	8000568 <__aeabi_f2d>
 8001410:	a31b      	add	r3, pc, #108	; (adr r3, 8001480 <calculateHeading+0x128>)
 8001412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001416:	f7ff fb8f 	bl	8000b38 <__aeabi_dcmpgt>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d012      	beq.n	8001446 <calculateHeading+0xee>
	  {
	  heading -= 2 * M_PI;
 8001420:	4b1c      	ldr	r3, [pc, #112]	; (8001494 <calculateHeading+0x13c>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff f89f 	bl	8000568 <__aeabi_f2d>
 800142a:	a315      	add	r3, pc, #84	; (adr r3, 8001480 <calculateHeading+0x128>)
 800142c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001430:	f7fe ff3a 	bl	80002a8 <__aeabi_dsub>
 8001434:	4602      	mov	r2, r0
 8001436:	460b      	mov	r3, r1
 8001438:	4610      	mov	r0, r2
 800143a:	4619      	mov	r1, r3
 800143c:	f7ff fbe4 	bl	8000c08 <__aeabi_d2f>
 8001440:	4603      	mov	r3, r0
 8001442:	4a14      	ldr	r2, [pc, #80]	; (8001494 <calculateHeading+0x13c>)
 8001444:	6013      	str	r3, [r2, #0]
	  }
	  // Convert to degrees
	  headingDegrees = heading * 180/M_PI; // Fix HMC5883L issue with angles
 8001446:	4b13      	ldr	r3, [pc, #76]	; (8001494 <calculateHeading+0x13c>)
 8001448:	edd3 7a00 	vldr	s15, [r3]
 800144c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80014a0 <calculateHeading+0x148>
 8001450:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001454:	ee17 0a90 	vmov	r0, s15
 8001458:	f7ff f886 	bl	8000568 <__aeabi_f2d>
 800145c:	a30a      	add	r3, pc, #40	; (adr r3, 8001488 <calculateHeading+0x130>)
 800145e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001462:	f7ff fa03 	bl	800086c <__aeabi_ddiv>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	4610      	mov	r0, r2
 800146c:	4619      	mov	r1, r3
 800146e:	f7ff fbcb 	bl	8000c08 <__aeabi_d2f>
 8001472:	4603      	mov	r3, r0
 8001474:	4a0b      	ldr	r2, [pc, #44]	; (80014a4 <calculateHeading+0x14c>)
 8001476:	6013      	str	r3, [r2, #0]
//	  printf ("headingDegrees : %.0f\r\n", headingDegrees);
//	  printf ("headingDegrees : %.0f\r\n", fixedHeadingDegrees);
//	  printf ("headingDegrees : %.0f\r\n", smoothHeadingDegrees);

	  // We need delay ~28ms for allow data rate 30Hz (~33ms)
}
 8001478:	bf00      	nop
 800147a:	bdb0      	pop	{r4, r5, r7, pc}
 800147c:	f3af 8000 	nop.w
 8001480:	54442d18 	.word	0x54442d18
 8001484:	401921fb 	.word	0x401921fb
 8001488:	54442d18 	.word	0x54442d18
 800148c:	400921fb 	.word	0x400921fb
 8001490:	20000214 	.word	0x20000214
 8001494:	20000220 	.word	0x20000220
 8001498:	20000224 	.word	0x20000224
 800149c:	3e1ddef0 	.word	0x3e1ddef0
 80014a0:	43340000 	.word	0x43340000
 80014a4:	20000228 	.word	0x20000228

080014a8 <BT_Init>:
uint8_t rx7_index;
uint8_t Mode_Flag;
int controlCMD;

void BT_Init()
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart7, &rx7_data, sizeof(rx7_data));
 80014ac:	2201      	movs	r2, #1
 80014ae:	4903      	ldr	r1, [pc, #12]	; (80014bc <BT_Init+0x14>)
 80014b0:	4803      	ldr	r0, [pc, #12]	; (80014c0 <BT_Init+0x18>)
 80014b2:	f004 fe5e 	bl	8006172 <HAL_UART_Receive_IT>
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	2000023c 	.word	0x2000023c
 80014c0:	200003fc 	.word	0x200003fc

080014c4 <Phone_UART_CallBack>:

void Phone_UART_CallBack(){
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0


	if(Mode_Flag==CONTROL_MODE && rx7_data==AUTO_MODE_SIGNAL){
 80014c8:	4b3e      	ldr	r3, [pc, #248]	; (80015c4 <Phone_UART_CallBack+0x100>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d10c      	bne.n	80014ea <Phone_UART_CallBack+0x26>
 80014d0:	4b3d      	ldr	r3, [pc, #244]	; (80015c8 <Phone_UART_CallBack+0x104>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b41      	cmp	r3, #65	; 0x41
 80014d6:	d108      	bne.n	80014ea <Phone_UART_CallBack+0x26>
		memset(rx7_buffer, 0, sizeof(rx7_buffer));
 80014d8:	2214      	movs	r2, #20
 80014da:	2100      	movs	r1, #0
 80014dc:	483b      	ldr	r0, [pc, #236]	; (80015cc <Phone_UART_CallBack+0x108>)
 80014de:	f005 fe0b 	bl	80070f8 <memset>
		Mode_Flag=AUTO_MODE;
 80014e2:	4b38      	ldr	r3, [pc, #224]	; (80015c4 <Phone_UART_CallBack+0x100>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	701a      	strb	r2, [r3, #0]
 80014e8:	e00f      	b.n	800150a <Phone_UART_CallBack+0x46>
	}else if(Mode_Flag==AUTO_MODE && rx7_data==CONTROL_MODE_SIGNAL){
 80014ea:	4b36      	ldr	r3, [pc, #216]	; (80015c4 <Phone_UART_CallBack+0x100>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d10b      	bne.n	800150a <Phone_UART_CallBack+0x46>
 80014f2:	4b35      	ldr	r3, [pc, #212]	; (80015c8 <Phone_UART_CallBack+0x104>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b43      	cmp	r3, #67	; 0x43
 80014f8:	d107      	bne.n	800150a <Phone_UART_CallBack+0x46>
		memset(rx7_buffer, 0, sizeof(rx7_buffer));
 80014fa:	2214      	movs	r2, #20
 80014fc:	2100      	movs	r1, #0
 80014fe:	4833      	ldr	r0, [pc, #204]	; (80015cc <Phone_UART_CallBack+0x108>)
 8001500:	f005 fdfa 	bl	80070f8 <memset>
		Mode_Flag=CONTROL_MODE;
 8001504:	4b2f      	ldr	r3, [pc, #188]	; (80015c4 <Phone_UART_CallBack+0x100>)
 8001506:	2200      	movs	r2, #0
 8001508:	701a      	strb	r2, [r3, #0]
	}

	if(Mode_Flag==CONTROL_MODE){
 800150a:	4b2e      	ldr	r3, [pc, #184]	; (80015c4 <Phone_UART_CallBack+0x100>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d123      	bne.n	800155a <Phone_UART_CallBack+0x96>
		if (rx7_data != '\n' && rx7_index < sizeof(rx7_buffer)) {
 8001512:	4b2d      	ldr	r3, [pc, #180]	; (80015c8 <Phone_UART_CallBack+0x104>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	2b0a      	cmp	r3, #10
 8001518:	d00f      	beq.n	800153a <Phone_UART_CallBack+0x76>
 800151a:	4b2d      	ldr	r3, [pc, #180]	; (80015d0 <Phone_UART_CallBack+0x10c>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b13      	cmp	r3, #19
 8001520:	d80b      	bhi.n	800153a <Phone_UART_CallBack+0x76>
			rx7_buffer[rx7_index++] = rx7_data;
 8001522:	4b2b      	ldr	r3, [pc, #172]	; (80015d0 <Phone_UART_CallBack+0x10c>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	1c5a      	adds	r2, r3, #1
 8001528:	b2d1      	uxtb	r1, r2
 800152a:	4a29      	ldr	r2, [pc, #164]	; (80015d0 <Phone_UART_CallBack+0x10c>)
 800152c:	7011      	strb	r1, [r2, #0]
 800152e:	461a      	mov	r2, r3
 8001530:	4b25      	ldr	r3, [pc, #148]	; (80015c8 <Phone_UART_CallBack+0x104>)
 8001532:	7819      	ldrb	r1, [r3, #0]
 8001534:	4b25      	ldr	r3, [pc, #148]	; (80015cc <Phone_UART_CallBack+0x108>)
 8001536:	5499      	strb	r1, [r3, r2]
 8001538:	e036      	b.n	80015a8 <Phone_UART_CallBack+0xe4>
		} else {
			rx7_buffer[rx7_index]=0;
 800153a:	4b25      	ldr	r3, [pc, #148]	; (80015d0 <Phone_UART_CallBack+0x10c>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	461a      	mov	r2, r3
 8001540:	4b22      	ldr	r3, [pc, #136]	; (80015cc <Phone_UART_CallBack+0x108>)
 8001542:	2100      	movs	r1, #0
 8001544:	5499      	strb	r1, [r3, r2]
			rx7_index = 0;
 8001546:	4b22      	ldr	r3, [pc, #136]	; (80015d0 <Phone_UART_CallBack+0x10c>)
 8001548:	2200      	movs	r2, #0
 800154a:	701a      	strb	r2, [r3, #0]
			sscanf((const char*)(rx7_buffer+2), "%d", &controlCMD);
 800154c:	4b21      	ldr	r3, [pc, #132]	; (80015d4 <Phone_UART_CallBack+0x110>)
 800154e:	4a22      	ldr	r2, [pc, #136]	; (80015d8 <Phone_UART_CallBack+0x114>)
 8001550:	4922      	ldr	r1, [pc, #136]	; (80015dc <Phone_UART_CallBack+0x118>)
 8001552:	4618      	mov	r0, r3
 8001554:	f006 fc78 	bl	8007e48 <siscanf>
 8001558:	e026      	b.n	80015a8 <Phone_UART_CallBack+0xe4>


		}
	}else if(Mode_Flag==AUTO_MODE){
 800155a:	4b1a      	ldr	r3, [pc, #104]	; (80015c4 <Phone_UART_CallBack+0x100>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d122      	bne.n	80015a8 <Phone_UART_CallBack+0xe4>
		if (rx7_data != '\n' && rx7_index < sizeof(rx7_buffer)) {
 8001562:	4b19      	ldr	r3, [pc, #100]	; (80015c8 <Phone_UART_CallBack+0x104>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2b0a      	cmp	r3, #10
 8001568:	d00f      	beq.n	800158a <Phone_UART_CallBack+0xc6>
 800156a:	4b19      	ldr	r3, [pc, #100]	; (80015d0 <Phone_UART_CallBack+0x10c>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	2b13      	cmp	r3, #19
 8001570:	d80b      	bhi.n	800158a <Phone_UART_CallBack+0xc6>
			rx7_buffer[rx7_index++] = rx7_data;
 8001572:	4b17      	ldr	r3, [pc, #92]	; (80015d0 <Phone_UART_CallBack+0x10c>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	1c5a      	adds	r2, r3, #1
 8001578:	b2d1      	uxtb	r1, r2
 800157a:	4a15      	ldr	r2, [pc, #84]	; (80015d0 <Phone_UART_CallBack+0x10c>)
 800157c:	7011      	strb	r1, [r2, #0]
 800157e:	461a      	mov	r2, r3
 8001580:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <Phone_UART_CallBack+0x104>)
 8001582:	7819      	ldrb	r1, [r3, #0]
 8001584:	4b11      	ldr	r3, [pc, #68]	; (80015cc <Phone_UART_CallBack+0x108>)
 8001586:	5499      	strb	r1, [r3, r2]
 8001588:	e00e      	b.n	80015a8 <Phone_UART_CallBack+0xe4>
		} else {
			rx7_buffer[rx7_index]=0;
 800158a:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <Phone_UART_CallBack+0x10c>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	461a      	mov	r2, r3
 8001590:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <Phone_UART_CallBack+0x108>)
 8001592:	2100      	movs	r1, #0
 8001594:	5499      	strb	r1, [r3, r2]
			rx7_index = 0;
 8001596:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <Phone_UART_CallBack+0x10c>)
 8001598:	2200      	movs	r2, #0
 800159a:	701a      	strb	r2, [r3, #0]
			sscanf((const char*)(rx7_buffer+1), "%f,%f", &phoneGPS.latitude, &phoneGPS.longitude);
 800159c:	4810      	ldr	r0, [pc, #64]	; (80015e0 <Phone_UART_CallBack+0x11c>)
 800159e:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <Phone_UART_CallBack+0x120>)
 80015a0:	4a11      	ldr	r2, [pc, #68]	; (80015e8 <Phone_UART_CallBack+0x124>)
 80015a2:	4912      	ldr	r1, [pc, #72]	; (80015ec <Phone_UART_CallBack+0x128>)
 80015a4:	f006 fc50 	bl	8007e48 <siscanf>


		}
	}

	HAL_UART_Transmit(&huart3, &rx7_data, sizeof(rx7_data), 10);
 80015a8:	230a      	movs	r3, #10
 80015aa:	2201      	movs	r2, #1
 80015ac:	4906      	ldr	r1, [pc, #24]	; (80015c8 <Phone_UART_CallBack+0x104>)
 80015ae:	4810      	ldr	r0, [pc, #64]	; (80015f0 <Phone_UART_CallBack+0x12c>)
 80015b0:	f004 fd4d 	bl	800604e <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart7, &rx7_data, sizeof(rx7_data));
 80015b4:	2201      	movs	r2, #1
 80015b6:	4904      	ldr	r1, [pc, #16]	; (80015c8 <Phone_UART_CallBack+0x104>)
 80015b8:	480e      	ldr	r0, [pc, #56]	; (80015f4 <Phone_UART_CallBack+0x130>)
 80015ba:	f004 fdda 	bl	8006172 <HAL_UART_Receive_IT>
}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20000255 	.word	0x20000255
 80015c8:	2000023c 	.word	0x2000023c
 80015cc:	20000240 	.word	0x20000240
 80015d0:	20000254 	.word	0x20000254
 80015d4:	20000242 	.word	0x20000242
 80015d8:	20000258 	.word	0x20000258
 80015dc:	0800c768 	.word	0x0800c768
 80015e0:	20000241 	.word	0x20000241
 80015e4:	20000234 	.word	0x20000234
 80015e8:	20000238 	.word	0x20000238
 80015ec:	0800c76c 	.word	0x0800c76c
 80015f0:	20000484 	.word	0x20000484
 80015f4:	200003fc 	.word	0x200003fc

080015f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08c      	sub	sp, #48	; 0x30
 80015fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fe:	f107 031c 	add.w	r3, r7, #28
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	60da      	str	r2, [r3, #12]
 800160c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	61bb      	str	r3, [r7, #24]
 8001612:	4b50      	ldr	r3, [pc, #320]	; (8001754 <MX_GPIO_Init+0x15c>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	4a4f      	ldr	r2, [pc, #316]	; (8001754 <MX_GPIO_Init+0x15c>)
 8001618:	f043 0304 	orr.w	r3, r3, #4
 800161c:	6313      	str	r3, [r2, #48]	; 0x30
 800161e:	4b4d      	ldr	r3, [pc, #308]	; (8001754 <MX_GPIO_Init+0x15c>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	f003 0304 	and.w	r3, r3, #4
 8001626:	61bb      	str	r3, [r7, #24]
 8001628:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
 800162e:	4b49      	ldr	r3, [pc, #292]	; (8001754 <MX_GPIO_Init+0x15c>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	4a48      	ldr	r2, [pc, #288]	; (8001754 <MX_GPIO_Init+0x15c>)
 8001634:	f043 0320 	orr.w	r3, r3, #32
 8001638:	6313      	str	r3, [r2, #48]	; 0x30
 800163a:	4b46      	ldr	r3, [pc, #280]	; (8001754 <MX_GPIO_Init+0x15c>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	f003 0320 	and.w	r3, r3, #32
 8001642:	617b      	str	r3, [r7, #20]
 8001644:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	613b      	str	r3, [r7, #16]
 800164a:	4b42      	ldr	r3, [pc, #264]	; (8001754 <MX_GPIO_Init+0x15c>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	4a41      	ldr	r2, [pc, #260]	; (8001754 <MX_GPIO_Init+0x15c>)
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	6313      	str	r3, [r2, #48]	; 0x30
 8001656:	4b3f      	ldr	r3, [pc, #252]	; (8001754 <MX_GPIO_Init+0x15c>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	613b      	str	r3, [r7, #16]
 8001660:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	4b3b      	ldr	r3, [pc, #236]	; (8001754 <MX_GPIO_Init+0x15c>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	4a3a      	ldr	r2, [pc, #232]	; (8001754 <MX_GPIO_Init+0x15c>)
 800166c:	f043 0302 	orr.w	r3, r3, #2
 8001670:	6313      	str	r3, [r2, #48]	; 0x30
 8001672:	4b38      	ldr	r3, [pc, #224]	; (8001754 <MX_GPIO_Init+0x15c>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	4b34      	ldr	r3, [pc, #208]	; (8001754 <MX_GPIO_Init+0x15c>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a33      	ldr	r2, [pc, #204]	; (8001754 <MX_GPIO_Init+0x15c>)
 8001688:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b31      	ldr	r3, [pc, #196]	; (8001754 <MX_GPIO_Init+0x15c>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	607b      	str	r3, [r7, #4]
 800169e:	4b2d      	ldr	r3, [pc, #180]	; (8001754 <MX_GPIO_Init+0x15c>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	4a2c      	ldr	r2, [pc, #176]	; (8001754 <MX_GPIO_Init+0x15c>)
 80016a4:	f043 0310 	orr.w	r3, r3, #16
 80016a8:	6313      	str	r3, [r2, #48]	; 0x30
 80016aa:	4b2a      	ldr	r3, [pc, #168]	; (8001754 <MX_GPIO_Init+0x15c>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	f003 0310 	and.w	r3, r3, #16
 80016b2:	607b      	str	r3, [r7, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	603b      	str	r3, [r7, #0]
 80016ba:	4b26      	ldr	r3, [pc, #152]	; (8001754 <MX_GPIO_Init+0x15c>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	4a25      	ldr	r2, [pc, #148]	; (8001754 <MX_GPIO_Init+0x15c>)
 80016c0:	f043 0308 	orr.w	r3, r3, #8
 80016c4:	6313      	str	r3, [r2, #48]	; 0x30
 80016c6:	4b23      	ldr	r3, [pc, #140]	; (8001754 <MX_GPIO_Init+0x15c>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	f003 0308 	and.w	r3, r3, #8
 80016ce:	603b      	str	r3, [r7, #0]
 80016d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80016d2:	2200      	movs	r2, #0
 80016d4:	f44f 7160 	mov.w	r1, #896	; 0x380
 80016d8:	481f      	ldr	r0, [pc, #124]	; (8001758 <MX_GPIO_Init+0x160>)
 80016da:	f001 fdbf 	bl	800325c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 80016de:	2200      	movs	r2, #0
 80016e0:	f244 0181 	movw	r1, #16513	; 0x4081
 80016e4:	481d      	ldr	r0, [pc, #116]	; (800175c <MX_GPIO_Init+0x164>)
 80016e6:	f001 fdb9 	bl	800325c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_RESET);
 80016ea:	2200      	movs	r2, #0
 80016ec:	2102      	movs	r1, #2
 80016ee:	481c      	ldr	r0, [pc, #112]	; (8001760 <MX_GPIO_Init+0x168>)
 80016f0:	f001 fdb4 	bl	800325c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF7 PF8 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80016f4:	f44f 7360 	mov.w	r3, #896	; 0x380
 80016f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fa:	2301      	movs	r3, #1
 80016fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001702:	2300      	movs	r3, #0
 8001704:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001706:	f107 031c 	add.w	r3, r7, #28
 800170a:	4619      	mov	r1, r3
 800170c:	4812      	ldr	r0, [pc, #72]	; (8001758 <MX_GPIO_Init+0x160>)
 800170e:	f001 fbf9 	bl	8002f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 8001712:	f244 0381 	movw	r3, #16513	; 0x4081
 8001716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001718:	2301      	movs	r3, #1
 800171a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001720:	2300      	movs	r3, #0
 8001722:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001724:	f107 031c 	add.w	r3, r7, #28
 8001728:	4619      	mov	r1, r3
 800172a:	480c      	ldr	r0, [pc, #48]	; (800175c <MX_GPIO_Init+0x164>)
 800172c:	f001 fbea 	bl	8002f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001730:	2302      	movs	r3, #2
 8001732:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001734:	2301      	movs	r3, #1
 8001736:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173c:	2300      	movs	r3, #0
 800173e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001740:	f107 031c 	add.w	r3, r7, #28
 8001744:	4619      	mov	r1, r3
 8001746:	4806      	ldr	r0, [pc, #24]	; (8001760 <MX_GPIO_Init+0x168>)
 8001748:	f001 fbdc 	bl	8002f04 <HAL_GPIO_Init>

}
 800174c:	bf00      	nop
 800174e:	3730      	adds	r7, #48	; 0x30
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40023800 	.word	0x40023800
 8001758:	40021400 	.word	0x40021400
 800175c:	40020400 	.word	0x40020400
 8001760:	40021800 	.word	0x40021800

08001764 <GPS_Init>:
/*	CDC_Transmit_FS((unsigned char *) buf, (uint16_t) strlen(buf));*/
}
#endif

void GPS_Init()
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 8001768:	2201      	movs	r2, #1
 800176a:	4903      	ldr	r1, [pc, #12]	; (8001778 <GPS_Init+0x14>)
 800176c:	4803      	ldr	r0, [pc, #12]	; (800177c <GPS_Init+0x18>)
 800176e:	f004 fd00 	bl	8006172 <HAL_UART_Receive_IT>
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	2000025c 	.word	0x2000025c
 800177c:	20000440 	.word	0x20000440

08001780 <GPS_UART_CallBack>:


void GPS_UART_CallBack(){
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
	if (rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 8001784:	4b16      	ldr	r3, [pc, #88]	; (80017e0 <GPS_UART_CallBack+0x60>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b0a      	cmp	r3, #10
 800178a:	d010      	beq.n	80017ae <GPS_UART_CallBack+0x2e>
 800178c:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <GPS_UART_CallBack+0x64>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	b25b      	sxtb	r3, r3
 8001792:	2b00      	cmp	r3, #0
 8001794:	db0b      	blt.n	80017ae <GPS_UART_CallBack+0x2e>
		rx_buffer[rx_index++] = rx_data;
 8001796:	4b13      	ldr	r3, [pc, #76]	; (80017e4 <GPS_UART_CallBack+0x64>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	1c5a      	adds	r2, r3, #1
 800179c:	b2d1      	uxtb	r1, r2
 800179e:	4a11      	ldr	r2, [pc, #68]	; (80017e4 <GPS_UART_CallBack+0x64>)
 80017a0:	7011      	strb	r1, [r2, #0]
 80017a2:	461a      	mov	r2, r3
 80017a4:	4b0e      	ldr	r3, [pc, #56]	; (80017e0 <GPS_UART_CallBack+0x60>)
 80017a6:	7819      	ldrb	r1, [r3, #0]
 80017a8:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <GPS_UART_CallBack+0x68>)
 80017aa:	5499      	strb	r1, [r3, r2]
 80017ac:	e010      	b.n	80017d0 <GPS_UART_CallBack+0x50>

/*		#if (GPS_DEBUG == 1)*/

/*		#endif*/

		if(GPS_validate((char*) rx_buffer)){
 80017ae:	480e      	ldr	r0, [pc, #56]	; (80017e8 <GPS_UART_CallBack+0x68>)
 80017b0:	f000 f81e 	bl	80017f0 <GPS_validate>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d002      	beq.n	80017c0 <GPS_UART_CallBack+0x40>

//			GPS_print((char*)rx_buffer);

			GPS_parse((char*) rx_buffer);
 80017ba:	480b      	ldr	r0, [pc, #44]	; (80017e8 <GPS_UART_CallBack+0x68>)
 80017bc:	f000 f87a 	bl	80018b4 <GPS_parse>
		}
		rx_index = 0;
 80017c0:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <GPS_UART_CallBack+0x64>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	701a      	strb	r2, [r3, #0]
		memset(rx_buffer, 0, sizeof(rx_buffer));
 80017c6:	2280      	movs	r2, #128	; 0x80
 80017c8:	2100      	movs	r1, #0
 80017ca:	4807      	ldr	r0, [pc, #28]	; (80017e8 <GPS_UART_CallBack+0x68>)
 80017cc:	f005 fc94 	bl	80070f8 <memset>
	}
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 80017d0:	2201      	movs	r2, #1
 80017d2:	4903      	ldr	r1, [pc, #12]	; (80017e0 <GPS_UART_CallBack+0x60>)
 80017d4:	4805      	ldr	r0, [pc, #20]	; (80017ec <GPS_UART_CallBack+0x6c>)
 80017d6:	f004 fccc 	bl	8006172 <HAL_UART_Receive_IT>
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	2000025c 	.word	0x2000025c
 80017e4:	200002e0 	.word	0x200002e0
 80017e8:	20000260 	.word	0x20000260
 80017ec:	20000440 	.word	0x20000440

080017f0 <GPS_validate>:


int GPS_validate(char *nmeastr){
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 80017fc:	2300      	movs	r3, #0
 80017fe:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	4413      	add	r3, r2
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b24      	cmp	r3, #36	; 0x24
 800180a:	d103      	bne.n	8001814 <GPS_validate+0x24>
        i++;
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	3301      	adds	r3, #1
 8001810:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8001812:	e00c      	b.n	800182e <GPS_validate+0x3e>
        return 0;
 8001814:	2300      	movs	r3, #0
 8001816:	e047      	b.n	80018a8 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	4413      	add	r3, r2
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	461a      	mov	r2, r3
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	4053      	eors	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
        i++;
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	3301      	adds	r3, #1
 800182c:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	4413      	add	r3, r2
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d008      	beq.n	800184c <GPS_validate+0x5c>
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	4413      	add	r3, r2
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b2a      	cmp	r3, #42	; 0x2a
 8001844:	d002      	beq.n	800184c <GPS_validate+0x5c>
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	2b4a      	cmp	r3, #74	; 0x4a
 800184a:	dde5      	ble.n	8001818 <GPS_validate+0x28>
    }

    if(i >= 75){
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	2b4a      	cmp	r3, #74	; 0x4a
 8001850:	dd01      	ble.n	8001856 <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 8001852:	2300      	movs	r3, #0
 8001854:	e028      	b.n	80018a8 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	4413      	add	r3, r2
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	2b2a      	cmp	r3, #42	; 0x2a
 8001860:	d119      	bne.n	8001896 <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	3301      	adds	r3, #1
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	3302      	adds	r3, #2
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	4413      	add	r3, r2
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 800187a:	2300      	movs	r3, #0
 800187c:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 800187e:	f107 0308 	add.w	r3, r7, #8
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	490a      	ldr	r1, [pc, #40]	; (80018b0 <GPS_validate+0xc0>)
 8001886:	4618      	mov	r0, r3
 8001888:	f006 fabe 	bl	8007e08 <siprintf>
    return((checkcalcstr[0] == check[0])
 800188c:	7a3a      	ldrb	r2, [r7, #8]
 800188e:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8001890:	429a      	cmp	r2, r3
 8001892:	d108      	bne.n	80018a6 <GPS_validate+0xb6>
 8001894:	e001      	b.n	800189a <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 8001896:	2300      	movs	r3, #0
 8001898:	e006      	b.n	80018a8 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 800189a:	7a7a      	ldrb	r2, [r7, #9]
 800189c:	7b7b      	ldrb	r3, [r7, #13]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d101      	bne.n	80018a6 <GPS_validate+0xb6>
 80018a2:	2301      	movs	r3, #1
 80018a4:	e000      	b.n	80018a8 <GPS_validate+0xb8>
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	0800c78c 	.word	0x0800c78c

080018b4 <GPS_parse>:

void GPS_parse(char *GPSstrParse){
 80018b4:	b5b0      	push	{r4, r5, r7, lr}
 80018b6:	b0aa      	sub	sp, #168	; 0xa8
 80018b8:	af08      	add	r7, sp, #32
 80018ba:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GPGGA", 6)){
 80018bc:	2206      	movs	r2, #6
 80018be:	4961      	ldr	r1, [pc, #388]	; (8001a44 <GPS_parse+0x190>)
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f006 fb32 	bl	8007f2a <strncmp>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d165      	bne.n	8001998 <GPS_parse+0xe4>
    	if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 80018cc:	4b5e      	ldr	r3, [pc, #376]	; (8001a48 <GPS_parse+0x194>)
 80018ce:	9307      	str	r3, [sp, #28]
 80018d0:	4b5e      	ldr	r3, [pc, #376]	; (8001a4c <GPS_parse+0x198>)
 80018d2:	9306      	str	r3, [sp, #24]
 80018d4:	4b5e      	ldr	r3, [pc, #376]	; (8001a50 <GPS_parse+0x19c>)
 80018d6:	9305      	str	r3, [sp, #20]
 80018d8:	4b5e      	ldr	r3, [pc, #376]	; (8001a54 <GPS_parse+0x1a0>)
 80018da:	9304      	str	r3, [sp, #16]
 80018dc:	4b5e      	ldr	r3, [pc, #376]	; (8001a58 <GPS_parse+0x1a4>)
 80018de:	9303      	str	r3, [sp, #12]
 80018e0:	4b5e      	ldr	r3, [pc, #376]	; (8001a5c <GPS_parse+0x1a8>)
 80018e2:	9302      	str	r3, [sp, #8]
 80018e4:	4b5e      	ldr	r3, [pc, #376]	; (8001a60 <GPS_parse+0x1ac>)
 80018e6:	9301      	str	r3, [sp, #4]
 80018e8:	4b5e      	ldr	r3, [pc, #376]	; (8001a64 <GPS_parse+0x1b0>)
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	4b5e      	ldr	r3, [pc, #376]	; (8001a68 <GPS_parse+0x1b4>)
 80018ee:	4a5f      	ldr	r2, [pc, #380]	; (8001a6c <GPS_parse+0x1b8>)
 80018f0:	495f      	ldr	r1, [pc, #380]	; (8001a70 <GPS_parse+0x1bc>)
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f006 faa8 	bl	8007e48 <siscanf>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f340 809e 	ble.w	8001a3c <GPS_parse+0x188>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8001900:	4b5c      	ldr	r3, [pc, #368]	; (8001a74 <GPS_parse+0x1c0>)
 8001902:	edd3 7a04 	vldr	s15, [r3, #16]
 8001906:	4b5b      	ldr	r3, [pc, #364]	; (8001a74 <GPS_parse+0x1c0>)
 8001908:	7e1b      	ldrb	r3, [r3, #24]
 800190a:	4618      	mov	r0, r3
 800190c:	eeb0 0a67 	vmov.f32	s0, s15
 8001910:	f000 f8d8 	bl	8001ac4 <GPS_nmea_to_dec>
 8001914:	eef0 7a40 	vmov.f32	s15, s0
 8001918:	4b56      	ldr	r3, [pc, #344]	; (8001a74 <GPS_parse+0x1c0>)
 800191a:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 800191e:	4b55      	ldr	r3, [pc, #340]	; (8001a74 <GPS_parse+0x1c0>)
 8001920:	edd3 7a03 	vldr	s15, [r3, #12]
 8001924:	4b53      	ldr	r3, [pc, #332]	; (8001a74 <GPS_parse+0x1c0>)
 8001926:	7e5b      	ldrb	r3, [r3, #25]
 8001928:	4618      	mov	r0, r3
 800192a:	eeb0 0a67 	vmov.f32	s0, s15
 800192e:	f000 f8c9 	bl	8001ac4 <GPS_nmea_to_dec>
 8001932:	eef0 7a40 	vmov.f32	s15, s0
 8001936:	4b4f      	ldr	r3, [pc, #316]	; (8001a74 <GPS_parse+0x1c0>)
 8001938:	edc3 7a00 	vstr	s15, [r3]

    		char buf[GPSBUFSIZE] = {0,};
 800193c:	2300      	movs	r3, #0
 800193e:	60bb      	str	r3, [r7, #8]
 8001940:	f107 030c 	add.w	r3, r7, #12
 8001944:	227c      	movs	r2, #124	; 0x7c
 8001946:	2100      	movs	r1, #0
 8001948:	4618      	mov	r0, r3
 800194a:	f005 fbd5 	bl	80070f8 <memset>
			sprintf(buf, ",%f,%f\n\r", GPS.dec_latitude, GPS.dec_longitude);
 800194e:	4b49      	ldr	r3, [pc, #292]	; (8001a74 <GPS_parse+0x1c0>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	4618      	mov	r0, r3
 8001954:	f7fe fe08 	bl	8000568 <__aeabi_f2d>
 8001958:	4604      	mov	r4, r0
 800195a:	460d      	mov	r5, r1
 800195c:	4b45      	ldr	r3, [pc, #276]	; (8001a74 <GPS_parse+0x1c0>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f7fe fe01 	bl	8000568 <__aeabi_f2d>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	f107 0008 	add.w	r0, r7, #8
 800196e:	e9cd 2300 	strd	r2, r3, [sp]
 8001972:	4622      	mov	r2, r4
 8001974:	462b      	mov	r3, r5
 8001976:	4940      	ldr	r1, [pc, #256]	; (8001a78 <GPS_parse+0x1c4>)
 8001978:	f006 fa46 	bl	8007e08 <siprintf>
			// transmit data to bluetooth module
			HAL_UART_Transmit(&huart7, (unsigned char *)buf, strlen(buf), 10);
 800197c:	f107 0308 	add.w	r3, r7, #8
 8001980:	4618      	mov	r0, r3
 8001982:	f7fe fc35 	bl	80001f0 <strlen>
 8001986:	4603      	mov	r3, r0
 8001988:	b29a      	uxth	r2, r3
 800198a:	f107 0108 	add.w	r1, r7, #8
 800198e:	230a      	movs	r3, #10
 8001990:	483a      	ldr	r0, [pc, #232]	; (8001a7c <GPS_parse+0x1c8>)
 8001992:	f004 fb5c 	bl	800604e <HAL_UART_Transmit>
 8001996:	e051      	b.n	8001a3c <GPS_parse+0x188>
			// transmit data to huart3 for check
/*			HAL_UART_Transmit(&huart3, (unsigned char *)buf, strlen(buf), 10);*/
    		return;
    	}
    }
    else if (!strncmp(GPSstrParse, "$GPRMC", 6)){
 8001998:	2206      	movs	r2, #6
 800199a:	4939      	ldr	r1, [pc, #228]	; (8001a80 <GPS_parse+0x1cc>)
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f006 fac4 	bl	8007f2a <strncmp>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d114      	bne.n	80019d2 <GPS_parse+0x11e>
    	if(sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1)
 80019a8:	4b36      	ldr	r3, [pc, #216]	; (8001a84 <GPS_parse+0x1d0>)
 80019aa:	9305      	str	r3, [sp, #20]
 80019ac:	4b36      	ldr	r3, [pc, #216]	; (8001a88 <GPS_parse+0x1d4>)
 80019ae:	9304      	str	r3, [sp, #16]
 80019b0:	4b36      	ldr	r3, [pc, #216]	; (8001a8c <GPS_parse+0x1d8>)
 80019b2:	9303      	str	r3, [sp, #12]
 80019b4:	4b29      	ldr	r3, [pc, #164]	; (8001a5c <GPS_parse+0x1a8>)
 80019b6:	9302      	str	r3, [sp, #8]
 80019b8:	4b29      	ldr	r3, [pc, #164]	; (8001a60 <GPS_parse+0x1ac>)
 80019ba:	9301      	str	r3, [sp, #4]
 80019bc:	4b29      	ldr	r3, [pc, #164]	; (8001a64 <GPS_parse+0x1b0>)
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	4b29      	ldr	r3, [pc, #164]	; (8001a68 <GPS_parse+0x1b4>)
 80019c2:	4a2a      	ldr	r2, [pc, #168]	; (8001a6c <GPS_parse+0x1b8>)
 80019c4:	4932      	ldr	r1, [pc, #200]	; (8001a90 <GPS_parse+0x1dc>)
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f006 fa3e 	bl	8007e48 <siscanf>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	e034      	b.n	8001a3c <GPS_parse+0x188>
    		return;

    }
    else if (!strncmp(GPSstrParse, "$GPGLL", 6)){
 80019d2:	2206      	movs	r2, #6
 80019d4:	492f      	ldr	r1, [pc, #188]	; (8001a94 <GPS_parse+0x1e0>)
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f006 faa7 	bl	8007f2a <strncmp>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d110      	bne.n	8001a04 <GPS_parse+0x150>
        if(sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1)
 80019e2:	4b2d      	ldr	r3, [pc, #180]	; (8001a98 <GPS_parse+0x1e4>)
 80019e4:	9303      	str	r3, [sp, #12]
 80019e6:	4b21      	ldr	r3, [pc, #132]	; (8001a6c <GPS_parse+0x1b8>)
 80019e8:	9302      	str	r3, [sp, #8]
 80019ea:	4b1c      	ldr	r3, [pc, #112]	; (8001a5c <GPS_parse+0x1a8>)
 80019ec:	9301      	str	r3, [sp, #4]
 80019ee:	4b1c      	ldr	r3, [pc, #112]	; (8001a60 <GPS_parse+0x1ac>)
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	4b1c      	ldr	r3, [pc, #112]	; (8001a64 <GPS_parse+0x1b0>)
 80019f4:	4a1c      	ldr	r2, [pc, #112]	; (8001a68 <GPS_parse+0x1b4>)
 80019f6:	4929      	ldr	r1, [pc, #164]	; (8001a9c <GPS_parse+0x1e8>)
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f006 fa25 	bl	8007e48 <siscanf>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	e01b      	b.n	8001a3c <GPS_parse+0x188>
            return;
    }
    else if (!strncmp(GPSstrParse, "$GPVTG", 6)){
 8001a04:	2206      	movs	r2, #6
 8001a06:	4926      	ldr	r1, [pc, #152]	; (8001aa0 <GPS_parse+0x1ec>)
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f006 fa8e 	bl	8007f2a <strncmp>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d113      	bne.n	8001a3c <GPS_parse+0x188>
        if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8001a14:	4b23      	ldr	r3, [pc, #140]	; (8001aa4 <GPS_parse+0x1f0>)
 8001a16:	9305      	str	r3, [sp, #20]
 8001a18:	4b23      	ldr	r3, [pc, #140]	; (8001aa8 <GPS_parse+0x1f4>)
 8001a1a:	9304      	str	r3, [sp, #16]
 8001a1c:	4b23      	ldr	r3, [pc, #140]	; (8001aac <GPS_parse+0x1f8>)
 8001a1e:	9303      	str	r3, [sp, #12]
 8001a20:	4b1a      	ldr	r3, [pc, #104]	; (8001a8c <GPS_parse+0x1d8>)
 8001a22:	9302      	str	r3, [sp, #8]
 8001a24:	4b22      	ldr	r3, [pc, #136]	; (8001ab0 <GPS_parse+0x1fc>)
 8001a26:	9301      	str	r3, [sp, #4]
 8001a28:	4b22      	ldr	r3, [pc, #136]	; (8001ab4 <GPS_parse+0x200>)
 8001a2a:	9300      	str	r3, [sp, #0]
 8001a2c:	4b22      	ldr	r3, [pc, #136]	; (8001ab8 <GPS_parse+0x204>)
 8001a2e:	4a23      	ldr	r2, [pc, #140]	; (8001abc <GPS_parse+0x208>)
 8001a30:	4923      	ldr	r1, [pc, #140]	; (8001ac0 <GPS_parse+0x20c>)
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f006 fa08 	bl	8007e48 <siscanf>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
            return;
    }
}
 8001a3c:	3788      	adds	r7, #136	; 0x88
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bdb0      	pop	{r4, r5, r7, pc}
 8001a42:	bf00      	nop
 8001a44:	0800c794 	.word	0x0800c794
 8001a48:	20000310 	.word	0x20000310
 8001a4c:	2000030c 	.word	0x2000030c
 8001a50:	20000308 	.word	0x20000308
 8001a54:	20000304 	.word	0x20000304
 8001a58:	20000300 	.word	0x20000300
 8001a5c:	200002fd 	.word	0x200002fd
 8001a60:	200002f0 	.word	0x200002f0
 8001a64:	200002fc 	.word	0x200002fc
 8001a68:	200002f4 	.word	0x200002f4
 8001a6c:	200002f8 	.word	0x200002f8
 8001a70:	0800c79c 	.word	0x0800c79c
 8001a74:	200002e4 	.word	0x200002e4
 8001a78:	0800c7c4 	.word	0x0800c7c4
 8001a7c:	200003fc 	.word	0x200003fc
 8001a80:	0800c77c 	.word	0x0800c77c
 8001a84:	2000031c 	.word	0x2000031c
 8001a88:	20000318 	.word	0x20000318
 8001a8c:	20000314 	.word	0x20000314
 8001a90:	0800c7d0 	.word	0x0800c7d0
 8001a94:	0800c7f0 	.word	0x0800c7f0
 8001a98:	20000320 	.word	0x20000320
 8001a9c:	0800c7f8 	.word	0x0800c7f8
 8001aa0:	0800c814 	.word	0x0800c814
 8001aa4:	20000338 	.word	0x20000338
 8001aa8:	20000334 	.word	0x20000334
 8001aac:	20000331 	.word	0x20000331
 8001ab0:	20000330 	.word	0x20000330
 8001ab4:	2000032c 	.word	0x2000032c
 8001ab8:	20000328 	.word	0x20000328
 8001abc:	20000324 	.word	0x20000324
 8001ac0:	0800c81c 	.word	0x0800c81c

08001ac4 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8001ac4:	b480      	push	{r7}
 8001ac6:	b087      	sub	sp, #28
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	ed87 0a01 	vstr	s0, [r7, #4]
 8001ace:	4603      	mov	r3, r0
 8001ad0:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8001ad2:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ad6:	eddf 6a20 	vldr	s13, [pc, #128]	; 8001b58 <GPS_nmea_to_dec+0x94>
 8001ada:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ade:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ae2:	ee17 3a90 	vmov	r3, s15
 8001ae6:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	2264      	movs	r2, #100	; 0x64
 8001aec:	fb02 f303 	mul.w	r3, r2, r3
 8001af0:	ee07 3a90 	vmov	s15, r3
 8001af4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001af8:	ed97 7a01 	vldr	s14, [r7, #4]
 8001afc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b00:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8001b04:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b08:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001b5c <GPS_nmea_to_dec+0x98>
 8001b0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b10:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	ee07 3a90 	vmov	s15, r3
 8001b1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b1e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b26:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 8001b2a:	78fb      	ldrb	r3, [r7, #3]
 8001b2c:	2b53      	cmp	r3, #83	; 0x53
 8001b2e:	d002      	beq.n	8001b36 <GPS_nmea_to_dec+0x72>
 8001b30:	78fb      	ldrb	r3, [r7, #3]
 8001b32:	2b57      	cmp	r3, #87	; 0x57
 8001b34:	d105      	bne.n	8001b42 <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 8001b36:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b3a:	eef1 7a67 	vneg.f32	s15, s15
 8001b3e:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	ee07 3a90 	vmov	s15, r3
}
 8001b48:	eeb0 0a67 	vmov.f32	s0, s15
 8001b4c:	371c      	adds	r7, #28
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	42c80000 	.word	0x42c80000
 8001b5c:	42700000 	.word	0x42700000

08001b60 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b64:	4b1b      	ldr	r3, [pc, #108]	; (8001bd4 <MX_I2C1_Init+0x74>)
 8001b66:	4a1c      	ldr	r2, [pc, #112]	; (8001bd8 <MX_I2C1_Init+0x78>)
 8001b68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b6a:	4b1a      	ldr	r3, [pc, #104]	; (8001bd4 <MX_I2C1_Init+0x74>)
 8001b6c:	4a1b      	ldr	r2, [pc, #108]	; (8001bdc <MX_I2C1_Init+0x7c>)
 8001b6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b70:	4b18      	ldr	r3, [pc, #96]	; (8001bd4 <MX_I2C1_Init+0x74>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b76:	4b17      	ldr	r3, [pc, #92]	; (8001bd4 <MX_I2C1_Init+0x74>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b7c:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <MX_I2C1_Init+0x74>)
 8001b7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b82:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b84:	4b13      	ldr	r3, [pc, #76]	; (8001bd4 <MX_I2C1_Init+0x74>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b8a:	4b12      	ldr	r3, [pc, #72]	; (8001bd4 <MX_I2C1_Init+0x74>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b90:	4b10      	ldr	r3, [pc, #64]	; (8001bd4 <MX_I2C1_Init+0x74>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b96:	4b0f      	ldr	r3, [pc, #60]	; (8001bd4 <MX_I2C1_Init+0x74>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b9c:	480d      	ldr	r0, [pc, #52]	; (8001bd4 <MX_I2C1_Init+0x74>)
 8001b9e:	f001 fb77 	bl	8003290 <HAL_I2C_Init>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ba8:	f000 f95c 	bl	8001e64 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bac:	2100      	movs	r1, #0
 8001bae:	4809      	ldr	r0, [pc, #36]	; (8001bd4 <MX_I2C1_Init+0x74>)
 8001bb0:	f002 fb2d 	bl	800420e <HAL_I2CEx_ConfigAnalogFilter>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001bba:	f000 f953 	bl	8001e64 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	4804      	ldr	r0, [pc, #16]	; (8001bd4 <MX_I2C1_Init+0x74>)
 8001bc2:	f002 fb60 	bl	8004286 <HAL_I2CEx_ConfigDigitalFilter>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001bcc:	f000 f94a 	bl	8001e64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bd0:	bf00      	nop
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	2000033c 	.word	0x2000033c
 8001bd8:	40005400 	.word	0x40005400
 8001bdc:	000186a0 	.word	0x000186a0

08001be0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08a      	sub	sp, #40	; 0x28
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be8:	f107 0314 	add.w	r3, r7, #20
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a19      	ldr	r2, [pc, #100]	; (8001c64 <HAL_I2C_MspInit+0x84>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d12c      	bne.n	8001c5c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	613b      	str	r3, [r7, #16]
 8001c06:	4b18      	ldr	r3, [pc, #96]	; (8001c68 <HAL_I2C_MspInit+0x88>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	4a17      	ldr	r2, [pc, #92]	; (8001c68 <HAL_I2C_MspInit+0x88>)
 8001c0c:	f043 0302 	orr.w	r3, r3, #2
 8001c10:	6313      	str	r3, [r2, #48]	; 0x30
 8001c12:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <HAL_I2C_MspInit+0x88>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	613b      	str	r3, [r7, #16]
 8001c1c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c24:	2312      	movs	r3, #18
 8001c26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c30:	2304      	movs	r3, #4
 8001c32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c34:	f107 0314 	add.w	r3, r7, #20
 8001c38:	4619      	mov	r1, r3
 8001c3a:	480c      	ldr	r0, [pc, #48]	; (8001c6c <HAL_I2C_MspInit+0x8c>)
 8001c3c:	f001 f962 	bl	8002f04 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c40:	2300      	movs	r3, #0
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <HAL_I2C_MspInit+0x88>)
 8001c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c48:	4a07      	ldr	r2, [pc, #28]	; (8001c68 <HAL_I2C_MspInit+0x88>)
 8001c4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c4e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c50:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <HAL_I2C_MspInit+0x88>)
 8001c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001c5c:	bf00      	nop
 8001c5e:	3728      	adds	r7, #40	; 0x28
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40005400 	.word	0x40005400
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	40020400 	.word	0x40020400

08001c70 <__io_putchar>:
  #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8001c78:	1d39      	adds	r1, r7, #4
 8001c7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c7e:	2201      	movs	r2, #1
 8001c80:	4803      	ldr	r0, [pc, #12]	; (8001c90 <__io_putchar+0x20>)
 8001c82:	f004 f9e4 	bl	800604e <HAL_UART_Transmit>

  return ch;
 8001c86:	687b      	ldr	r3, [r7, #4]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	20000484 	.word	0x20000484

08001c94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c9a:	f000 ff1d 	bl	8002ad8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c9e:	f000 f855 	bl	8001d4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ca2:	f7ff fca9 	bl	80015f8 <MX_GPIO_Init>
  MX_RTC_Init();
 8001ca6:	f000 fadd 	bl	8002264 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8001caa:	f000 fdab 	bl	8002804 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001cae:	f000 fdd3 	bl	8002858 <MX_USART3_UART_Init>
  MX_UART7_Init();
 8001cb2:	f000 fd7d 	bl	80027b0 <MX_UART7_Init>
  MX_I2C1_Init();
 8001cb6:	f7ff ff53 	bl	8001b60 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001cba:	f000 fc6b 	bl	8002594 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */


  GPS_Init();
 8001cbe:	f7ff fd51 	bl	8001764 <GPS_Init>
  BT_Init();
 8001cc2:	f7ff fbf1 	bl	80014a8 <BT_Init>
  Compass_Init();
 8001cc6:	f7ff fb31 	bl	800132c <Compass_Init>
  Motor_Init();
 8001cca:	f000 faaf 	bl	800222c <Motor_Init>

  uint32_t start_tick = HAL_GetTick();
 8001cce:	f000 ff69 	bl	8002ba4 <HAL_GetTick>
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  current_tick = HAL_GetTick();
 8001cd4:	f000 ff66 	bl	8002ba4 <HAL_GetTick>
 8001cd8:	6038      	str	r0, [r7, #0]
	  if(current_tick - start_tick >= 70){
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b45      	cmp	r3, #69	; 0x45
 8001ce2:	d903      	bls.n	8001cec <main+0x58>
		  calculateHeading();
 8001ce4:	f7ff fb38 	bl	8001358 <calculateHeading>
		  start_tick = current_tick;
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	607b      	str	r3, [r7, #4]
	  }



	  Move(controlCMD);
 8001cec:	4b11      	ldr	r3, [pc, #68]	; (8001d34 <main+0xa0>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f000 f8bd 	bl	8001e70 <Move>





	  distance_long=(phoneGPS.longitude - GPS.dec_longitude)*100000;
 8001cf6:	4b10      	ldr	r3, [pc, #64]	; (8001d38 <main+0xa4>)
 8001cf8:	ed93 7a00 	vldr	s14, [r3]
 8001cfc:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <main+0xa8>)
 8001cfe:	edd3 7a00 	vldr	s15, [r3]
 8001d02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d06:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001d40 <main+0xac>
 8001d0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d0e:	4b0d      	ldr	r3, [pc, #52]	; (8001d44 <main+0xb0>)
 8001d10:	edc3 7a00 	vstr	s15, [r3]
	  distance_lat=(phoneGPS.latitude - GPS.dec_latitude)*100000;
 8001d14:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <main+0xa4>)
 8001d16:	ed93 7a01 	vldr	s14, [r3, #4]
 8001d1a:	4b08      	ldr	r3, [pc, #32]	; (8001d3c <main+0xa8>)
 8001d1c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d24:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001d40 <main+0xac>
 8001d28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d2c:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <main+0xb4>)
 8001d2e:	edc3 7a00 	vstr	s15, [r3]
	  current_tick = HAL_GetTick();
 8001d32:	e7cf      	b.n	8001cd4 <main+0x40>
 8001d34:	20000258 	.word	0x20000258
 8001d38:	20000234 	.word	0x20000234
 8001d3c:	200002e4 	.word	0x200002e4
 8001d40:	47c35000 	.word	0x47c35000
 8001d44:	2000022c 	.word	0x2000022c
 8001d48:	20000230 	.word	0x20000230

08001d4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b094      	sub	sp, #80	; 0x50
 8001d50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d52:	f107 0320 	add.w	r3, r7, #32
 8001d56:	2230      	movs	r2, #48	; 0x30
 8001d58:	2100      	movs	r1, #0
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f005 f9cc 	bl	80070f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d60:	f107 030c 	add.w	r3, r7, #12
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	60da      	str	r2, [r3, #12]
 8001d6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d70:	2300      	movs	r3, #0
 8001d72:	60bb      	str	r3, [r7, #8]
 8001d74:	4b2c      	ldr	r3, [pc, #176]	; (8001e28 <SystemClock_Config+0xdc>)
 8001d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d78:	4a2b      	ldr	r2, [pc, #172]	; (8001e28 <SystemClock_Config+0xdc>)
 8001d7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d7e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d80:	4b29      	ldr	r3, [pc, #164]	; (8001e28 <SystemClock_Config+0xdc>)
 8001d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d88:	60bb      	str	r3, [r7, #8]
 8001d8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	607b      	str	r3, [r7, #4]
 8001d90:	4b26      	ldr	r3, [pc, #152]	; (8001e2c <SystemClock_Config+0xe0>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a25      	ldr	r2, [pc, #148]	; (8001e2c <SystemClock_Config+0xe0>)
 8001d96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d9a:	6013      	str	r3, [r2, #0]
 8001d9c:	4b23      	ldr	r3, [pc, #140]	; (8001e2c <SystemClock_Config+0xe0>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001da4:	607b      	str	r3, [r7, #4]
 8001da6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001da8:	2306      	movs	r3, #6
 8001daa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001dac:	2301      	movs	r3, #1
 8001dae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001db0:	2301      	movs	r3, #1
 8001db2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001db4:	2310      	movs	r3, #16
 8001db6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001db8:	2302      	movs	r3, #2
 8001dba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001dc0:	2308      	movs	r3, #8
 8001dc2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001dc4:	23b4      	movs	r3, #180	; 0xb4
 8001dc6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001dcc:	2304      	movs	r3, #4
 8001dce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dd0:	f107 0320 	add.w	r3, r7, #32
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f002 fae5 	bl	80043a4 <HAL_RCC_OscConfig>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001de0:	f000 f840 	bl	8001e64 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001de4:	f002 fa8e 	bl	8004304 <HAL_PWREx_EnableOverDrive>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001dee:	f000 f839 	bl	8001e64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001df2:	230f      	movs	r3, #15
 8001df4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001df6:	2302      	movs	r3, #2
 8001df8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001dfe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e02:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e08:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001e0a:	f107 030c 	add.w	r3, r7, #12
 8001e0e:	2105      	movs	r1, #5
 8001e10:	4618      	mov	r0, r3
 8001e12:	f002 fd3f 	bl	8004894 <HAL_RCC_ClockConfig>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001e1c:	f000 f822 	bl	8001e64 <Error_Handler>
  }
}
 8001e20:	bf00      	nop
 8001e22:	3750      	adds	r7, #80	; 0x50
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	40007000 	.word	0x40007000

08001e30 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
	if(huart == &huart2) GPS_UART_CallBack();
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4a08      	ldr	r2, [pc, #32]	; (8001e5c <HAL_UART_RxCpltCallback+0x2c>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d101      	bne.n	8001e44 <HAL_UART_RxCpltCallback+0x14>
 8001e40:	f7ff fc9e 	bl	8001780 <GPS_UART_CallBack>
	if(huart->Instance == UART7) Phone_UART_CallBack();
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a05      	ldr	r2, [pc, #20]	; (8001e60 <HAL_UART_RxCpltCallback+0x30>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d101      	bne.n	8001e52 <HAL_UART_RxCpltCallback+0x22>
 8001e4e:	f7ff fb39 	bl	80014c4 <Phone_UART_CallBack>

}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	20000440 	.word	0x20000440
 8001e60:	40007800 	.word	0x40007800

08001e64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e68:	b672      	cpsid	i
}
 8001e6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e6c:	e7fe      	b.n	8001e6c <Error_Handler+0x8>
	...

08001e70 <Move>:





void Move(int controlcmd){
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]



	switch(controlcmd){
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b06      	cmp	r3, #6
 8001e7c:	f200 8097 	bhi.w	8001fae <Move+0x13e>
 8001e80:	a201      	add	r2, pc, #4	; (adr r2, 8001e88 <Move+0x18>)
 8001e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e86:	bf00      	nop
 8001e88:	08001f89 	.word	0x08001f89
 8001e8c:	08001ea5 	.word	0x08001ea5
 8001e90:	08001ef1 	.word	0x08001ef1
 8001e94:	08001ecb 	.word	0x08001ecb
 8001e98:	08001f17 	.word	0x08001f17
 8001e9c:	08001f3d 	.word	0x08001f3d
 8001ea0:	08001f63 	.word	0x08001f63
		case FORWARD:
			Forward();
 8001ea4:	f000 f88c 	bl	8001fc0 <Forward>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	2101      	movs	r1, #1
 8001eac:	4843      	ldr	r0, [pc, #268]	; (8001fbc <Move+0x14c>)
 8001eae:	f001 f9d5 	bl	800325c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2180      	movs	r1, #128	; 0x80
 8001eb6:	4841      	ldr	r0, [pc, #260]	; (8001fbc <Move+0x14c>)
 8001eb8:	f001 f9d0 	bl	800325c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ec2:	483e      	ldr	r0, [pc, #248]	; (8001fbc <Move+0x14c>)
 8001ec4:	f001 f9ca 	bl	800325c <HAL_GPIO_WritePin>
			break;
 8001ec8:	e074      	b.n	8001fb4 <Move+0x144>
		case BACKWARD:
			Backward();
 8001eca:	f000 f8a9 	bl	8002020 <Backward>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	483a      	ldr	r0, [pc, #232]	; (8001fbc <Move+0x14c>)
 8001ed4:	f001 f9c2 	bl	800325c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8001ed8:	2201      	movs	r2, #1
 8001eda:	2180      	movs	r1, #128	; 0x80
 8001edc:	4837      	ldr	r0, [pc, #220]	; (8001fbc <Move+0x14c>)
 8001ede:	f001 f9bd 	bl	800325c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ee8:	4834      	ldr	r0, [pc, #208]	; (8001fbc <Move+0x14c>)
 8001eea:	f001 f9b7 	bl	800325c <HAL_GPIO_WritePin>
			break;
 8001eee:	e061      	b.n	8001fb4 <Move+0x144>
		case RIGHT:
			Right();
 8001ef0:	f000 f8c6 	bl	8002080 <Right>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	4830      	ldr	r0, [pc, #192]	; (8001fbc <Move+0x14c>)
 8001efa:	f001 f9af 	bl	800325c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 8001efe:	2200      	movs	r2, #0
 8001f00:	2180      	movs	r1, #128	; 0x80
 8001f02:	482e      	ldr	r0, [pc, #184]	; (8001fbc <Move+0x14c>)
 8001f04:	f001 f9aa 	bl	800325c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f0e:	482b      	ldr	r0, [pc, #172]	; (8001fbc <Move+0x14c>)
 8001f10:	f001 f9a4 	bl	800325c <HAL_GPIO_WritePin>
			break;
 8001f14:	e04e      	b.n	8001fb4 <Move+0x144>
		case LEFT:
			Left();
 8001f16:	f000 f8e3 	bl	80020e0 <Left>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	2101      	movs	r1, #1
 8001f1e:	4827      	ldr	r0, [pc, #156]	; (8001fbc <Move+0x14c>)
 8001f20:	f001 f99c 	bl	800325c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8001f24:	2201      	movs	r2, #1
 8001f26:	2180      	movs	r1, #128	; 0x80
 8001f28:	4824      	ldr	r0, [pc, #144]	; (8001fbc <Move+0x14c>)
 8001f2a:	f001 f997 	bl	800325c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f34:	4821      	ldr	r0, [pc, #132]	; (8001fbc <Move+0x14c>)
 8001f36:	f001 f991 	bl	800325c <HAL_GPIO_WritePin>
			break;
 8001f3a:	e03b      	b.n	8001fb4 <Move+0x144>
		case CW:
			Cw();
 8001f3c:	f000 f900 	bl	8002140 <Cw>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8001f40:	2201      	movs	r2, #1
 8001f42:	2101      	movs	r1, #1
 8001f44:	481d      	ldr	r0, [pc, #116]	; (8001fbc <Move+0x14c>)
 8001f46:	f001 f989 	bl	800325c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	2180      	movs	r1, #128	; 0x80
 8001f4e:	481b      	ldr	r0, [pc, #108]	; (8001fbc <Move+0x14c>)
 8001f50:	f001 f984 	bl	800325c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8001f54:	2200      	movs	r2, #0
 8001f56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f5a:	4818      	ldr	r0, [pc, #96]	; (8001fbc <Move+0x14c>)
 8001f5c:	f001 f97e 	bl	800325c <HAL_GPIO_WritePin>
			break;
 8001f60:	e028      	b.n	8001fb4 <Move+0x144>
		case CCW:
			Ccw();
 8001f62:	f000 f91d 	bl	80021a0 <Ccw>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8001f66:	2201      	movs	r2, #1
 8001f68:	2101      	movs	r1, #1
 8001f6a:	4814      	ldr	r0, [pc, #80]	; (8001fbc <Move+0x14c>)
 8001f6c:	f001 f976 	bl	800325c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8001f70:	2201      	movs	r2, #1
 8001f72:	2180      	movs	r1, #128	; 0x80
 8001f74:	4811      	ldr	r0, [pc, #68]	; (8001fbc <Move+0x14c>)
 8001f76:	f001 f971 	bl	800325c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f80:	480e      	ldr	r0, [pc, #56]	; (8001fbc <Move+0x14c>)
 8001f82:	f001 f96b 	bl	800325c <HAL_GPIO_WritePin>
			break;
 8001f86:	e015      	b.n	8001fb4 <Move+0x144>
		case STOP:
			Stop();
 8001f88:	f000 f93a 	bl	8002200 <Stop>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	2101      	movs	r1, #1
 8001f90:	480a      	ldr	r0, [pc, #40]	; (8001fbc <Move+0x14c>)
 8001f92:	f001 f963 	bl	800325c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 8001f96:	2200      	movs	r2, #0
 8001f98:	2180      	movs	r1, #128	; 0x80
 8001f9a:	4808      	ldr	r0, [pc, #32]	; (8001fbc <Move+0x14c>)
 8001f9c:	f001 f95e 	bl	800325c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fa6:	4805      	ldr	r0, [pc, #20]	; (8001fbc <Move+0x14c>)
 8001fa8:	f001 f958 	bl	800325c <HAL_GPIO_WritePin>
			break;
 8001fac:	e002      	b.n	8001fb4 <Move+0x144>
		default:
			Stop();
 8001fae:	f000 f927 	bl	8002200 <Stop>
			break;
 8001fb2:	bf00      	nop
		}
}
 8001fb4:	bf00      	nop
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40020400 	.word	0x40020400

08001fc0 <Forward>:

void Forward()
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_RESET);
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	2102      	movs	r1, #2
 8001fc8:	4812      	ldr	r0, [pc, #72]	; (8002014 <Forward+0x54>)
 8001fca:	f001 f947 	bl	800325c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_SET);
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fd4:	4810      	ldr	r0, [pc, #64]	; (8002018 <Forward+0x58>)
 8001fd6:	f001 f941 	bl	800325c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_RESET);
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2180      	movs	r1, #128	; 0x80
 8001fde:	480e      	ldr	r0, [pc, #56]	; (8002018 <Forward+0x58>)
 8001fe0:	f001 f93c 	bl	800325c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_SET);
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fea:	480b      	ldr	r0, [pc, #44]	; (8002018 <Forward+0x58>)
 8001fec:	f001 f936 	bl	800325c <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	480a      	ldr	r0, [pc, #40]	; (800201c <Forward+0x5c>)
 8001ff4:	f003 f990 	bl	8005318 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001ff8:	2104      	movs	r1, #4
 8001ffa:	4808      	ldr	r0, [pc, #32]	; (800201c <Forward+0x5c>)
 8001ffc:	f003 f98c 	bl	8005318 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002000:	2108      	movs	r1, #8
 8002002:	4806      	ldr	r0, [pc, #24]	; (800201c <Forward+0x5c>)
 8002004:	f003 f988 	bl	8005318 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8002008:	210c      	movs	r1, #12
 800200a:	4804      	ldr	r0, [pc, #16]	; (800201c <Forward+0x5c>)
 800200c:	f003 f984 	bl	8005318 <HAL_TIM_PWM_Start>
}
 8002010:	bf00      	nop
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40021800 	.word	0x40021800
 8002018:	40021400 	.word	0x40021400
 800201c:	200003b4 	.word	0x200003b4

08002020 <Backward>:

void Backward()
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_SET);
 8002024:	2201      	movs	r2, #1
 8002026:	2102      	movs	r1, #2
 8002028:	4812      	ldr	r0, [pc, #72]	; (8002074 <Backward+0x54>)
 800202a:	f001 f917 	bl	800325c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_RESET);
 800202e:	2200      	movs	r2, #0
 8002030:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002034:	4810      	ldr	r0, [pc, #64]	; (8002078 <Backward+0x58>)
 8002036:	f001 f911 	bl	800325c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_SET);
 800203a:	2201      	movs	r2, #1
 800203c:	2180      	movs	r1, #128	; 0x80
 800203e:	480e      	ldr	r0, [pc, #56]	; (8002078 <Backward+0x58>)
 8002040:	f001 f90c 	bl	800325c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_RESET);
 8002044:	2200      	movs	r2, #0
 8002046:	f44f 7180 	mov.w	r1, #256	; 0x100
 800204a:	480b      	ldr	r0, [pc, #44]	; (8002078 <Backward+0x58>)
 800204c:	f001 f906 	bl	800325c <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002050:	2100      	movs	r1, #0
 8002052:	480a      	ldr	r0, [pc, #40]	; (800207c <Backward+0x5c>)
 8002054:	f003 f960 	bl	8005318 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8002058:	2104      	movs	r1, #4
 800205a:	4808      	ldr	r0, [pc, #32]	; (800207c <Backward+0x5c>)
 800205c:	f003 f95c 	bl	8005318 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002060:	2108      	movs	r1, #8
 8002062:	4806      	ldr	r0, [pc, #24]	; (800207c <Backward+0x5c>)
 8002064:	f003 f958 	bl	8005318 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8002068:	210c      	movs	r1, #12
 800206a:	4804      	ldr	r0, [pc, #16]	; (800207c <Backward+0x5c>)
 800206c:	f003 f954 	bl	8005318 <HAL_TIM_PWM_Start>
}
 8002070:	bf00      	nop
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40021800 	.word	0x40021800
 8002078:	40021400 	.word	0x40021400
 800207c:	200003b4 	.word	0x200003b4

08002080 <Right>:

void Right()
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_SET);
 8002084:	2201      	movs	r2, #1
 8002086:	2102      	movs	r1, #2
 8002088:	4812      	ldr	r0, [pc, #72]	; (80020d4 <Right+0x54>)
 800208a:	f001 f8e7 	bl	800325c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_RESET);
 800208e:	2200      	movs	r2, #0
 8002090:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002094:	4810      	ldr	r0, [pc, #64]	; (80020d8 <Right+0x58>)
 8002096:	f001 f8e1 	bl	800325c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_RESET);
 800209a:	2200      	movs	r2, #0
 800209c:	2180      	movs	r1, #128	; 0x80
 800209e:	480e      	ldr	r0, [pc, #56]	; (80020d8 <Right+0x58>)
 80020a0:	f001 f8dc 	bl	800325c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_SET);
 80020a4:	2201      	movs	r2, #1
 80020a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020aa:	480b      	ldr	r0, [pc, #44]	; (80020d8 <Right+0x58>)
 80020ac:	f001 f8d6 	bl	800325c <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80020b0:	2100      	movs	r1, #0
 80020b2:	480a      	ldr	r0, [pc, #40]	; (80020dc <Right+0x5c>)
 80020b4:	f003 f930 	bl	8005318 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80020b8:	2104      	movs	r1, #4
 80020ba:	4808      	ldr	r0, [pc, #32]	; (80020dc <Right+0x5c>)
 80020bc:	f003 f92c 	bl	8005318 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80020c0:	2108      	movs	r1, #8
 80020c2:	4806      	ldr	r0, [pc, #24]	; (80020dc <Right+0x5c>)
 80020c4:	f003 f928 	bl	8005318 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80020c8:	210c      	movs	r1, #12
 80020ca:	4804      	ldr	r0, [pc, #16]	; (80020dc <Right+0x5c>)
 80020cc:	f003 f924 	bl	8005318 <HAL_TIM_PWM_Start>
}
 80020d0:	bf00      	nop
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40021800 	.word	0x40021800
 80020d8:	40021400 	.word	0x40021400
 80020dc:	200003b4 	.word	0x200003b4

080020e0 <Left>:

void Left()
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_RESET);
 80020e4:	2200      	movs	r2, #0
 80020e6:	2102      	movs	r1, #2
 80020e8:	4812      	ldr	r0, [pc, #72]	; (8002134 <Left+0x54>)
 80020ea:	f001 f8b7 	bl	800325c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_SET);
 80020ee:	2201      	movs	r2, #1
 80020f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020f4:	4810      	ldr	r0, [pc, #64]	; (8002138 <Left+0x58>)
 80020f6:	f001 f8b1 	bl	800325c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_SET);
 80020fa:	2201      	movs	r2, #1
 80020fc:	2180      	movs	r1, #128	; 0x80
 80020fe:	480e      	ldr	r0, [pc, #56]	; (8002138 <Left+0x58>)
 8002100:	f001 f8ac 	bl	800325c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_RESET);
 8002104:	2200      	movs	r2, #0
 8002106:	f44f 7180 	mov.w	r1, #256	; 0x100
 800210a:	480b      	ldr	r0, [pc, #44]	; (8002138 <Left+0x58>)
 800210c:	f001 f8a6 	bl	800325c <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002110:	2100      	movs	r1, #0
 8002112:	480a      	ldr	r0, [pc, #40]	; (800213c <Left+0x5c>)
 8002114:	f003 f900 	bl	8005318 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8002118:	2104      	movs	r1, #4
 800211a:	4808      	ldr	r0, [pc, #32]	; (800213c <Left+0x5c>)
 800211c:	f003 f8fc 	bl	8005318 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002120:	2108      	movs	r1, #8
 8002122:	4806      	ldr	r0, [pc, #24]	; (800213c <Left+0x5c>)
 8002124:	f003 f8f8 	bl	8005318 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8002128:	210c      	movs	r1, #12
 800212a:	4804      	ldr	r0, [pc, #16]	; (800213c <Left+0x5c>)
 800212c:	f003 f8f4 	bl	8005318 <HAL_TIM_PWM_Start>
}
 8002130:	bf00      	nop
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40021800 	.word	0x40021800
 8002138:	40021400 	.word	0x40021400
 800213c:	200003b4 	.word	0x200003b4

08002140 <Cw>:

void Cw()
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_RESET);
 8002144:	2200      	movs	r2, #0
 8002146:	2102      	movs	r1, #2
 8002148:	4812      	ldr	r0, [pc, #72]	; (8002194 <Cw+0x54>)
 800214a:	f001 f887 	bl	800325c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_RESET);
 800214e:	2200      	movs	r2, #0
 8002150:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002154:	4810      	ldr	r0, [pc, #64]	; (8002198 <Cw+0x58>)
 8002156:	f001 f881 	bl	800325c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_RESET);
 800215a:	2200      	movs	r2, #0
 800215c:	2180      	movs	r1, #128	; 0x80
 800215e:	480e      	ldr	r0, [pc, #56]	; (8002198 <Cw+0x58>)
 8002160:	f001 f87c 	bl	800325c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_RESET);
 8002164:	2200      	movs	r2, #0
 8002166:	f44f 7180 	mov.w	r1, #256	; 0x100
 800216a:	480b      	ldr	r0, [pc, #44]	; (8002198 <Cw+0x58>)
 800216c:	f001 f876 	bl	800325c <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002170:	2100      	movs	r1, #0
 8002172:	480a      	ldr	r0, [pc, #40]	; (800219c <Cw+0x5c>)
 8002174:	f003 f8d0 	bl	8005318 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8002178:	2104      	movs	r1, #4
 800217a:	4808      	ldr	r0, [pc, #32]	; (800219c <Cw+0x5c>)
 800217c:	f003 f8cc 	bl	8005318 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002180:	2108      	movs	r1, #8
 8002182:	4806      	ldr	r0, [pc, #24]	; (800219c <Cw+0x5c>)
 8002184:	f003 f8c8 	bl	8005318 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8002188:	210c      	movs	r1, #12
 800218a:	4804      	ldr	r0, [pc, #16]	; (800219c <Cw+0x5c>)
 800218c:	f003 f8c4 	bl	8005318 <HAL_TIM_PWM_Start>
}
 8002190:	bf00      	nop
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40021800 	.word	0x40021800
 8002198:	40021400 	.word	0x40021400
 800219c:	200003b4 	.word	0x200003b4

080021a0 <Ccw>:

void Ccw()
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_SET);
 80021a4:	2201      	movs	r2, #1
 80021a6:	2102      	movs	r1, #2
 80021a8:	4812      	ldr	r0, [pc, #72]	; (80021f4 <Ccw+0x54>)
 80021aa:	f001 f857 	bl	800325c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_SET);
 80021ae:	2201      	movs	r2, #1
 80021b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021b4:	4810      	ldr	r0, [pc, #64]	; (80021f8 <Ccw+0x58>)
 80021b6:	f001 f851 	bl	800325c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_SET);
 80021ba:	2201      	movs	r2, #1
 80021bc:	2180      	movs	r1, #128	; 0x80
 80021be:	480e      	ldr	r0, [pc, #56]	; (80021f8 <Ccw+0x58>)
 80021c0:	f001 f84c 	bl	800325c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_SET);
 80021c4:	2201      	movs	r2, #1
 80021c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021ca:	480b      	ldr	r0, [pc, #44]	; (80021f8 <Ccw+0x58>)
 80021cc:	f001 f846 	bl	800325c <HAL_GPIO_WritePin>


	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80021d0:	2100      	movs	r1, #0
 80021d2:	480a      	ldr	r0, [pc, #40]	; (80021fc <Ccw+0x5c>)
 80021d4:	f003 f8a0 	bl	8005318 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80021d8:	2104      	movs	r1, #4
 80021da:	4808      	ldr	r0, [pc, #32]	; (80021fc <Ccw+0x5c>)
 80021dc:	f003 f89c 	bl	8005318 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80021e0:	2108      	movs	r1, #8
 80021e2:	4806      	ldr	r0, [pc, #24]	; (80021fc <Ccw+0x5c>)
 80021e4:	f003 f898 	bl	8005318 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80021e8:	210c      	movs	r1, #12
 80021ea:	4804      	ldr	r0, [pc, #16]	; (80021fc <Ccw+0x5c>)
 80021ec:	f003 f894 	bl	8005318 <HAL_TIM_PWM_Start>
}
 80021f0:	bf00      	nop
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40021800 	.word	0x40021800
 80021f8:	40021400 	.word	0x40021400
 80021fc:	200003b4 	.word	0x200003b4

08002200 <Stop>:

void Stop()
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8002204:	2100      	movs	r1, #0
 8002206:	4808      	ldr	r0, [pc, #32]	; (8002228 <Stop+0x28>)
 8002208:	f003 f94e 	bl	80054a8 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 800220c:	2104      	movs	r1, #4
 800220e:	4806      	ldr	r0, [pc, #24]	; (8002228 <Stop+0x28>)
 8002210:	f003 f94a 	bl	80054a8 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8002214:	2108      	movs	r1, #8
 8002216:	4804      	ldr	r0, [pc, #16]	; (8002228 <Stop+0x28>)
 8002218:	f003 f946 	bl	80054a8 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 800221c:	210c      	movs	r1, #12
 800221e:	4802      	ldr	r0, [pc, #8]	; (8002228 <Stop+0x28>)
 8002220:	f003 f942 	bl	80054a8 <HAL_TIM_PWM_Stop>


}
 8002224:	bf00      	nop
 8002226:	bd80      	pop	{r7, pc}
 8002228:	200003b4 	.word	0x200003b4

0800222c <Motor_Init>:

void Motor_Init(){
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
	TIM2->CCR1 = SPEED;
 8002230:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002234:	f240 32b6 	movw	r2, #950	; 0x3b6
 8002238:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCR2 = SPEED;
 800223a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800223e:	f240 32b6 	movw	r2, #950	; 0x3b6
 8002242:	639a      	str	r2, [r3, #56]	; 0x38
	TIM2->CCR3 = SPEED;
 8002244:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002248:	f240 32b6 	movw	r2, #950	; 0x3b6
 800224c:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM2->CCR4 = SPEED;
 800224e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002252:	f240 32b6 	movw	r2, #950	; 0x3b6
 8002256:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002258:	bf00      	nop
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
	...

08002264 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002268:	4b0f      	ldr	r3, [pc, #60]	; (80022a8 <MX_RTC_Init+0x44>)
 800226a:	4a10      	ldr	r2, [pc, #64]	; (80022ac <MX_RTC_Init+0x48>)
 800226c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800226e:	4b0e      	ldr	r3, [pc, #56]	; (80022a8 <MX_RTC_Init+0x44>)
 8002270:	2200      	movs	r2, #0
 8002272:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002274:	4b0c      	ldr	r3, [pc, #48]	; (80022a8 <MX_RTC_Init+0x44>)
 8002276:	227f      	movs	r2, #127	; 0x7f
 8002278:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800227a:	4b0b      	ldr	r3, [pc, #44]	; (80022a8 <MX_RTC_Init+0x44>)
 800227c:	22ff      	movs	r2, #255	; 0xff
 800227e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002280:	4b09      	ldr	r3, [pc, #36]	; (80022a8 <MX_RTC_Init+0x44>)
 8002282:	2200      	movs	r2, #0
 8002284:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002286:	4b08      	ldr	r3, [pc, #32]	; (80022a8 <MX_RTC_Init+0x44>)
 8002288:	2200      	movs	r2, #0
 800228a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800228c:	4b06      	ldr	r3, [pc, #24]	; (80022a8 <MX_RTC_Init+0x44>)
 800228e:	2200      	movs	r2, #0
 8002290:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002292:	4805      	ldr	r0, [pc, #20]	; (80022a8 <MX_RTC_Init+0x44>)
 8002294:	f002 fe9e 	bl	8004fd4 <HAL_RTC_Init>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800229e:	f7ff fde1 	bl	8001e64 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	20000390 	.word	0x20000390
 80022ac:	40002800 	.word	0x40002800

080022b0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b08e      	sub	sp, #56	; 0x38
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022b8:	f107 0308 	add.w	r3, r7, #8
 80022bc:	2230      	movs	r2, #48	; 0x30
 80022be:	2100      	movs	r1, #0
 80022c0:	4618      	mov	r0, r3
 80022c2:	f004 ff19 	bl	80070f8 <memset>
  if(rtcHandle->Instance==RTC)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a0c      	ldr	r2, [pc, #48]	; (80022fc <HAL_RTC_MspInit+0x4c>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d111      	bne.n	80022f4 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80022d0:	2320      	movs	r3, #32
 80022d2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80022d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022d8:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022da:	f107 0308 	add.w	r3, r7, #8
 80022de:	4618      	mov	r0, r3
 80022e0:	f002 fcb8 	bl	8004c54 <HAL_RCCEx_PeriphCLKConfig>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80022ea:	f7ff fdbb 	bl	8001e64 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80022ee:	4b04      	ldr	r3, [pc, #16]	; (8002300 <HAL_RTC_MspInit+0x50>)
 80022f0:	2201      	movs	r2, #1
 80022f2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80022f4:	bf00      	nop
 80022f6:	3738      	adds	r7, #56	; 0x38
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40002800 	.word	0x40002800
 8002300:	42470e3c 	.word	0x42470e3c

08002304 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	607b      	str	r3, [r7, #4]
 800230e:	4b10      	ldr	r3, [pc, #64]	; (8002350 <HAL_MspInit+0x4c>)
 8002310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002312:	4a0f      	ldr	r2, [pc, #60]	; (8002350 <HAL_MspInit+0x4c>)
 8002314:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002318:	6453      	str	r3, [r2, #68]	; 0x44
 800231a:	4b0d      	ldr	r3, [pc, #52]	; (8002350 <HAL_MspInit+0x4c>)
 800231c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002322:	607b      	str	r3, [r7, #4]
 8002324:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002326:	2300      	movs	r3, #0
 8002328:	603b      	str	r3, [r7, #0]
 800232a:	4b09      	ldr	r3, [pc, #36]	; (8002350 <HAL_MspInit+0x4c>)
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	4a08      	ldr	r2, [pc, #32]	; (8002350 <HAL_MspInit+0x4c>)
 8002330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002334:	6413      	str	r3, [r2, #64]	; 0x40
 8002336:	4b06      	ldr	r3, [pc, #24]	; (8002350 <HAL_MspInit+0x4c>)
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800233e:	603b      	str	r3, [r7, #0]
 8002340:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	40023800 	.word	0x40023800

08002354 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002358:	e7fe      	b.n	8002358 <NMI_Handler+0x4>

0800235a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800235a:	b480      	push	{r7}
 800235c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800235e:	e7fe      	b.n	800235e <HardFault_Handler+0x4>

08002360 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002364:	e7fe      	b.n	8002364 <MemManage_Handler+0x4>

08002366 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002366:	b480      	push	{r7}
 8002368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800236a:	e7fe      	b.n	800236a <BusFault_Handler+0x4>

0800236c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002370:	e7fe      	b.n	8002370 <UsageFault_Handler+0x4>

08002372 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002372:	b480      	push	{r7}
 8002374:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002376:	bf00      	nop
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002384:	bf00      	nop
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800238e:	b480      	push	{r7}
 8002390:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002392:	bf00      	nop
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023a0:	f000 fbec 	bl	8002b7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023a4:	bf00      	nop
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80023ac:	4802      	ldr	r0, [pc, #8]	; (80023b8 <USART2_IRQHandler+0x10>)
 80023ae:	f003 ff11 	bl	80061d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80023b2:	bf00      	nop
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	20000440 	.word	0x20000440

080023bc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80023c0:	4802      	ldr	r0, [pc, #8]	; (80023cc <USART3_IRQHandler+0x10>)
 80023c2:	f003 ff07 	bl	80061d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	20000484 	.word	0x20000484

080023d0 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80023d4:	4802      	ldr	r0, [pc, #8]	; (80023e0 <UART7_IRQHandler+0x10>)
 80023d6:	f003 fefd 	bl	80061d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	200003fc 	.word	0x200003fc

080023e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
	return 1;
 80023e8:	2301      	movs	r3, #1
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <_kill>:

int _kill(int pid, int sig)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80023fe:	f004 fe51 	bl	80070a4 <__errno>
 8002402:	4603      	mov	r3, r0
 8002404:	2216      	movs	r2, #22
 8002406:	601a      	str	r2, [r3, #0]
	return -1;
 8002408:	f04f 33ff 	mov.w	r3, #4294967295
}
 800240c:	4618      	mov	r0, r3
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <_exit>:

void _exit (int status)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800241c:	f04f 31ff 	mov.w	r1, #4294967295
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f7ff ffe7 	bl	80023f4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002426:	e7fe      	b.n	8002426 <_exit+0x12>

08002428 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002434:	2300      	movs	r3, #0
 8002436:	617b      	str	r3, [r7, #20]
 8002438:	e00a      	b.n	8002450 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800243a:	f3af 8000 	nop.w
 800243e:	4601      	mov	r1, r0
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	1c5a      	adds	r2, r3, #1
 8002444:	60ba      	str	r2, [r7, #8]
 8002446:	b2ca      	uxtb	r2, r1
 8002448:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	3301      	adds	r3, #1
 800244e:	617b      	str	r3, [r7, #20]
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	429a      	cmp	r2, r3
 8002456:	dbf0      	blt.n	800243a <_read+0x12>
	}

return len;
 8002458:	687b      	ldr	r3, [r7, #4]
}
 800245a:	4618      	mov	r0, r3
 800245c:	3718      	adds	r7, #24
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b086      	sub	sp, #24
 8002466:	af00      	add	r7, sp, #0
 8002468:	60f8      	str	r0, [r7, #12]
 800246a:	60b9      	str	r1, [r7, #8]
 800246c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800246e:	2300      	movs	r3, #0
 8002470:	617b      	str	r3, [r7, #20]
 8002472:	e009      	b.n	8002488 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	1c5a      	adds	r2, r3, #1
 8002478:	60ba      	str	r2, [r7, #8]
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff fbf7 	bl	8001c70 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	3301      	adds	r3, #1
 8002486:	617b      	str	r3, [r7, #20]
 8002488:	697a      	ldr	r2, [r7, #20]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	429a      	cmp	r2, r3
 800248e:	dbf1      	blt.n	8002474 <_write+0x12>
	}
	return len;
 8002490:	687b      	ldr	r3, [r7, #4]
}
 8002492:	4618      	mov	r0, r3
 8002494:	3718      	adds	r7, #24
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <_close>:

int _close(int file)
{
 800249a:	b480      	push	{r7}
 800249c:	b083      	sub	sp, #12
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
	return -1;
 80024a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
 80024ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024c2:	605a      	str	r2, [r3, #4]
	return 0;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <_isatty>:

int _isatty(int file)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b083      	sub	sp, #12
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
	return 1;
 80024da:	2301      	movs	r3, #1
}
 80024dc:	4618      	mov	r0, r3
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
	return 0;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3714      	adds	r7, #20
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
	...

08002504 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800250c:	4a14      	ldr	r2, [pc, #80]	; (8002560 <_sbrk+0x5c>)
 800250e:	4b15      	ldr	r3, [pc, #84]	; (8002564 <_sbrk+0x60>)
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002518:	4b13      	ldr	r3, [pc, #76]	; (8002568 <_sbrk+0x64>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d102      	bne.n	8002526 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002520:	4b11      	ldr	r3, [pc, #68]	; (8002568 <_sbrk+0x64>)
 8002522:	4a12      	ldr	r2, [pc, #72]	; (800256c <_sbrk+0x68>)
 8002524:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002526:	4b10      	ldr	r3, [pc, #64]	; (8002568 <_sbrk+0x64>)
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4413      	add	r3, r2
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	429a      	cmp	r2, r3
 8002532:	d207      	bcs.n	8002544 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002534:	f004 fdb6 	bl	80070a4 <__errno>
 8002538:	4603      	mov	r3, r0
 800253a:	220c      	movs	r2, #12
 800253c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800253e:	f04f 33ff 	mov.w	r3, #4294967295
 8002542:	e009      	b.n	8002558 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002544:	4b08      	ldr	r3, [pc, #32]	; (8002568 <_sbrk+0x64>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800254a:	4b07      	ldr	r3, [pc, #28]	; (8002568 <_sbrk+0x64>)
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4413      	add	r3, r2
 8002552:	4a05      	ldr	r2, [pc, #20]	; (8002568 <_sbrk+0x64>)
 8002554:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002556:	68fb      	ldr	r3, [r7, #12]
}
 8002558:	4618      	mov	r0, r3
 800255a:	3718      	adds	r7, #24
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	20030000 	.word	0x20030000
 8002564:	00000400 	.word	0x00000400
 8002568:	200003b0 	.word	0x200003b0
 800256c:	200004e0 	.word	0x200004e0

08002570 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002574:	4b06      	ldr	r3, [pc, #24]	; (8002590 <SystemInit+0x20>)
 8002576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257a:	4a05      	ldr	r2, [pc, #20]	; (8002590 <SystemInit+0x20>)
 800257c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002580:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002584:	bf00      	nop
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	e000ed00 	.word	0xe000ed00

08002594 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b08e      	sub	sp, #56	; 0x38
 8002598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800259a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800259e:	2200      	movs	r2, #0
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	605a      	str	r2, [r3, #4]
 80025a4:	609a      	str	r2, [r3, #8]
 80025a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025a8:	f107 0320 	add.w	r3, r7, #32
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025b2:	1d3b      	adds	r3, r7, #4
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	605a      	str	r2, [r3, #4]
 80025ba:	609a      	str	r2, [r3, #8]
 80025bc:	60da      	str	r2, [r3, #12]
 80025be:	611a      	str	r2, [r3, #16]
 80025c0:	615a      	str	r2, [r3, #20]
 80025c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80025c4:	4b3d      	ldr	r3, [pc, #244]	; (80026bc <MX_TIM2_Init+0x128>)
 80025c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 80025cc:	4b3b      	ldr	r3, [pc, #236]	; (80026bc <MX_TIM2_Init+0x128>)
 80025ce:	2259      	movs	r2, #89	; 0x59
 80025d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025d2:	4b3a      	ldr	r3, [pc, #232]	; (80026bc <MX_TIM2_Init+0x128>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80025d8:	4b38      	ldr	r3, [pc, #224]	; (80026bc <MX_TIM2_Init+0x128>)
 80025da:	f240 32e7 	movw	r2, #999	; 0x3e7
 80025de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025e0:	4b36      	ldr	r3, [pc, #216]	; (80026bc <MX_TIM2_Init+0x128>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025e6:	4b35      	ldr	r3, [pc, #212]	; (80026bc <MX_TIM2_Init+0x128>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80025ec:	4833      	ldr	r0, [pc, #204]	; (80026bc <MX_TIM2_Init+0x128>)
 80025ee:	f002 fdeb 	bl	80051c8 <HAL_TIM_Base_Init>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80025f8:	f7ff fc34 	bl	8001e64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002600:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002602:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002606:	4619      	mov	r1, r3
 8002608:	482c      	ldr	r0, [pc, #176]	; (80026bc <MX_TIM2_Init+0x128>)
 800260a:	f003 f87f 	bl	800570c <HAL_TIM_ConfigClockSource>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002614:	f7ff fc26 	bl	8001e64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002618:	4828      	ldr	r0, [pc, #160]	; (80026bc <MX_TIM2_Init+0x128>)
 800261a:	f002 fe24 	bl	8005266 <HAL_TIM_PWM_Init>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002624:	f7ff fc1e 	bl	8001e64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002628:	2300      	movs	r3, #0
 800262a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800262c:	2300      	movs	r3, #0
 800262e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002630:	f107 0320 	add.w	r3, r7, #32
 8002634:	4619      	mov	r1, r3
 8002636:	4821      	ldr	r0, [pc, #132]	; (80026bc <MX_TIM2_Init+0x128>)
 8002638:	f003 fc40 	bl	8005ebc <HAL_TIMEx_MasterConfigSynchronization>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002642:	f7ff fc0f 	bl	8001e64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002646:	2370      	movs	r3, #112	; 0x70
 8002648:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800264a:	2300      	movs	r3, #0
 800264c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800264e:	2300      	movs	r3, #0
 8002650:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002652:	2300      	movs	r3, #0
 8002654:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002656:	1d3b      	adds	r3, r7, #4
 8002658:	2200      	movs	r2, #0
 800265a:	4619      	mov	r1, r3
 800265c:	4817      	ldr	r0, [pc, #92]	; (80026bc <MX_TIM2_Init+0x128>)
 800265e:	f002 ff93 	bl	8005588 <HAL_TIM_PWM_ConfigChannel>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002668:	f7ff fbfc 	bl	8001e64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800266c:	1d3b      	adds	r3, r7, #4
 800266e:	2204      	movs	r2, #4
 8002670:	4619      	mov	r1, r3
 8002672:	4812      	ldr	r0, [pc, #72]	; (80026bc <MX_TIM2_Init+0x128>)
 8002674:	f002 ff88 	bl	8005588 <HAL_TIM_PWM_ConfigChannel>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800267e:	f7ff fbf1 	bl	8001e64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002682:	1d3b      	adds	r3, r7, #4
 8002684:	2208      	movs	r2, #8
 8002686:	4619      	mov	r1, r3
 8002688:	480c      	ldr	r0, [pc, #48]	; (80026bc <MX_TIM2_Init+0x128>)
 800268a:	f002 ff7d 	bl	8005588 <HAL_TIM_PWM_ConfigChannel>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8002694:	f7ff fbe6 	bl	8001e64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002698:	1d3b      	adds	r3, r7, #4
 800269a:	220c      	movs	r2, #12
 800269c:	4619      	mov	r1, r3
 800269e:	4807      	ldr	r0, [pc, #28]	; (80026bc <MX_TIM2_Init+0x128>)
 80026a0:	f002 ff72 	bl	8005588 <HAL_TIM_PWM_ConfigChannel>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 80026aa:	f7ff fbdb 	bl	8001e64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80026ae:	4803      	ldr	r0, [pc, #12]	; (80026bc <MX_TIM2_Init+0x128>)
 80026b0:	f000 f826 	bl	8002700 <HAL_TIM_MspPostInit>

}
 80026b4:	bf00      	nop
 80026b6:	3738      	adds	r7, #56	; 0x38
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	200003b4 	.word	0x200003b4

080026c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026d0:	d10d      	bne.n	80026ee <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026d2:	2300      	movs	r3, #0
 80026d4:	60fb      	str	r3, [r7, #12]
 80026d6:	4b09      	ldr	r3, [pc, #36]	; (80026fc <HAL_TIM_Base_MspInit+0x3c>)
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	4a08      	ldr	r2, [pc, #32]	; (80026fc <HAL_TIM_Base_MspInit+0x3c>)
 80026dc:	f043 0301 	orr.w	r3, r3, #1
 80026e0:	6413      	str	r3, [r2, #64]	; 0x40
 80026e2:	4b06      	ldr	r3, [pc, #24]	; (80026fc <HAL_TIM_Base_MspInit+0x3c>)
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	60fb      	str	r3, [r7, #12]
 80026ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80026ee:	bf00      	nop
 80026f0:	3714      	adds	r7, #20
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	40023800 	.word	0x40023800

08002700 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b08a      	sub	sp, #40	; 0x28
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002708:	f107 0314 	add.w	r3, r7, #20
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	605a      	str	r2, [r3, #4]
 8002712:	609a      	str	r2, [r3, #8]
 8002714:	60da      	str	r2, [r3, #12]
 8002716:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002720:	d13c      	bne.n	800279c <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002722:	2300      	movs	r3, #0
 8002724:	613b      	str	r3, [r7, #16]
 8002726:	4b1f      	ldr	r3, [pc, #124]	; (80027a4 <HAL_TIM_MspPostInit+0xa4>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	4a1e      	ldr	r2, [pc, #120]	; (80027a4 <HAL_TIM_MspPostInit+0xa4>)
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	6313      	str	r3, [r2, #48]	; 0x30
 8002732:	4b1c      	ldr	r3, [pc, #112]	; (80027a4 <HAL_TIM_MspPostInit+0xa4>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	613b      	str	r3, [r7, #16]
 800273c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800273e:	2300      	movs	r3, #0
 8002740:	60fb      	str	r3, [r7, #12]
 8002742:	4b18      	ldr	r3, [pc, #96]	; (80027a4 <HAL_TIM_MspPostInit+0xa4>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	4a17      	ldr	r2, [pc, #92]	; (80027a4 <HAL_TIM_MspPostInit+0xa4>)
 8002748:	f043 0302 	orr.w	r3, r3, #2
 800274c:	6313      	str	r3, [r2, #48]	; 0x30
 800274e:	4b15      	ldr	r3, [pc, #84]	; (80027a4 <HAL_TIM_MspPostInit+0xa4>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	68fb      	ldr	r3, [r7, #12]
    PA0/WKUP     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800275a:	2301      	movs	r3, #1
 800275c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275e:	2302      	movs	r3, #2
 8002760:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002762:	2300      	movs	r3, #0
 8002764:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002766:	2300      	movs	r3, #0
 8002768:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800276a:	2301      	movs	r3, #1
 800276c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800276e:	f107 0314 	add.w	r3, r7, #20
 8002772:	4619      	mov	r1, r3
 8002774:	480c      	ldr	r0, [pc, #48]	; (80027a8 <HAL_TIM_MspPostInit+0xa8>)
 8002776:	f000 fbc5 	bl	8002f04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_3;
 800277a:	f640 4308 	movw	r3, #3080	; 0xc08
 800277e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002780:	2302      	movs	r3, #2
 8002782:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002784:	2300      	movs	r3, #0
 8002786:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002788:	2300      	movs	r3, #0
 800278a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800278c:	2301      	movs	r3, #1
 800278e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002790:	f107 0314 	add.w	r3, r7, #20
 8002794:	4619      	mov	r1, r3
 8002796:	4805      	ldr	r0, [pc, #20]	; (80027ac <HAL_TIM_MspPostInit+0xac>)
 8002798:	f000 fbb4 	bl	8002f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800279c:	bf00      	nop
 800279e:	3728      	adds	r7, #40	; 0x28
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40023800 	.word	0x40023800
 80027a8:	40020000 	.word	0x40020000
 80027ac:	40020400 	.word	0x40020400

080027b0 <MX_UART7_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART7 init function */
void MX_UART7_Init(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80027b4:	4b11      	ldr	r3, [pc, #68]	; (80027fc <MX_UART7_Init+0x4c>)
 80027b6:	4a12      	ldr	r2, [pc, #72]	; (8002800 <MX_UART7_Init+0x50>)
 80027b8:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 80027ba:	4b10      	ldr	r3, [pc, #64]	; (80027fc <MX_UART7_Init+0x4c>)
 80027bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80027c0:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80027c2:	4b0e      	ldr	r3, [pc, #56]	; (80027fc <MX_UART7_Init+0x4c>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80027c8:	4b0c      	ldr	r3, [pc, #48]	; (80027fc <MX_UART7_Init+0x4c>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80027ce:	4b0b      	ldr	r3, [pc, #44]	; (80027fc <MX_UART7_Init+0x4c>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80027d4:	4b09      	ldr	r3, [pc, #36]	; (80027fc <MX_UART7_Init+0x4c>)
 80027d6:	220c      	movs	r2, #12
 80027d8:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027da:	4b08      	ldr	r3, [pc, #32]	; (80027fc <MX_UART7_Init+0x4c>)
 80027dc:	2200      	movs	r2, #0
 80027de:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80027e0:	4b06      	ldr	r3, [pc, #24]	; (80027fc <MX_UART7_Init+0x4c>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80027e6:	4805      	ldr	r0, [pc, #20]	; (80027fc <MX_UART7_Init+0x4c>)
 80027e8:	f003 fbe4 	bl	8005fb4 <HAL_UART_Init>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <MX_UART7_Init+0x46>
  {
    Error_Handler();
 80027f2:	f7ff fb37 	bl	8001e64 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80027f6:	bf00      	nop
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	200003fc 	.word	0x200003fc
 8002800:	40007800 	.word	0x40007800

08002804 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002808:	4b11      	ldr	r3, [pc, #68]	; (8002850 <MX_USART2_UART_Init+0x4c>)
 800280a:	4a12      	ldr	r2, [pc, #72]	; (8002854 <MX_USART2_UART_Init+0x50>)
 800280c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800280e:	4b10      	ldr	r3, [pc, #64]	; (8002850 <MX_USART2_UART_Init+0x4c>)
 8002810:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002814:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002816:	4b0e      	ldr	r3, [pc, #56]	; (8002850 <MX_USART2_UART_Init+0x4c>)
 8002818:	2200      	movs	r2, #0
 800281a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800281c:	4b0c      	ldr	r3, [pc, #48]	; (8002850 <MX_USART2_UART_Init+0x4c>)
 800281e:	2200      	movs	r2, #0
 8002820:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002822:	4b0b      	ldr	r3, [pc, #44]	; (8002850 <MX_USART2_UART_Init+0x4c>)
 8002824:	2200      	movs	r2, #0
 8002826:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002828:	4b09      	ldr	r3, [pc, #36]	; (8002850 <MX_USART2_UART_Init+0x4c>)
 800282a:	220c      	movs	r2, #12
 800282c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800282e:	4b08      	ldr	r3, [pc, #32]	; (8002850 <MX_USART2_UART_Init+0x4c>)
 8002830:	2200      	movs	r2, #0
 8002832:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002834:	4b06      	ldr	r3, [pc, #24]	; (8002850 <MX_USART2_UART_Init+0x4c>)
 8002836:	2200      	movs	r2, #0
 8002838:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800283a:	4805      	ldr	r0, [pc, #20]	; (8002850 <MX_USART2_UART_Init+0x4c>)
 800283c:	f003 fbba 	bl	8005fb4 <HAL_UART_Init>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002846:	f7ff fb0d 	bl	8001e64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800284a:	bf00      	nop
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	20000440 	.word	0x20000440
 8002854:	40004400 	.word	0x40004400

08002858 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800285c:	4b11      	ldr	r3, [pc, #68]	; (80028a4 <MX_USART3_UART_Init+0x4c>)
 800285e:	4a12      	ldr	r2, [pc, #72]	; (80028a8 <MX_USART3_UART_Init+0x50>)
 8002860:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002862:	4b10      	ldr	r3, [pc, #64]	; (80028a4 <MX_USART3_UART_Init+0x4c>)
 8002864:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002868:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800286a:	4b0e      	ldr	r3, [pc, #56]	; (80028a4 <MX_USART3_UART_Init+0x4c>)
 800286c:	2200      	movs	r2, #0
 800286e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002870:	4b0c      	ldr	r3, [pc, #48]	; (80028a4 <MX_USART3_UART_Init+0x4c>)
 8002872:	2200      	movs	r2, #0
 8002874:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002876:	4b0b      	ldr	r3, [pc, #44]	; (80028a4 <MX_USART3_UART_Init+0x4c>)
 8002878:	2200      	movs	r2, #0
 800287a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800287c:	4b09      	ldr	r3, [pc, #36]	; (80028a4 <MX_USART3_UART_Init+0x4c>)
 800287e:	220c      	movs	r2, #12
 8002880:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002882:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <MX_USART3_UART_Init+0x4c>)
 8002884:	2200      	movs	r2, #0
 8002886:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002888:	4b06      	ldr	r3, [pc, #24]	; (80028a4 <MX_USART3_UART_Init+0x4c>)
 800288a:	2200      	movs	r2, #0
 800288c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800288e:	4805      	ldr	r0, [pc, #20]	; (80028a4 <MX_USART3_UART_Init+0x4c>)
 8002890:	f003 fb90 	bl	8005fb4 <HAL_UART_Init>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800289a:	f7ff fae3 	bl	8001e64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800289e:	bf00      	nop
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	20000484 	.word	0x20000484
 80028a8:	40004800 	.word	0x40004800

080028ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b08e      	sub	sp, #56	; 0x38
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	605a      	str	r2, [r3, #4]
 80028be:	609a      	str	r2, [r3, #8]
 80028c0:	60da      	str	r2, [r3, #12]
 80028c2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a67      	ldr	r2, [pc, #412]	; (8002a68 <HAL_UART_MspInit+0x1bc>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d135      	bne.n	800293a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80028ce:	2300      	movs	r3, #0
 80028d0:	623b      	str	r3, [r7, #32]
 80028d2:	4b66      	ldr	r3, [pc, #408]	; (8002a6c <HAL_UART_MspInit+0x1c0>)
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	4a65      	ldr	r2, [pc, #404]	; (8002a6c <HAL_UART_MspInit+0x1c0>)
 80028d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80028dc:	6413      	str	r3, [r2, #64]	; 0x40
 80028de:	4b63      	ldr	r3, [pc, #396]	; (8002a6c <HAL_UART_MspInit+0x1c0>)
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80028e6:	623b      	str	r3, [r7, #32]
 80028e8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028ea:	2300      	movs	r3, #0
 80028ec:	61fb      	str	r3, [r7, #28]
 80028ee:	4b5f      	ldr	r3, [pc, #380]	; (8002a6c <HAL_UART_MspInit+0x1c0>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	4a5e      	ldr	r2, [pc, #376]	; (8002a6c <HAL_UART_MspInit+0x1c0>)
 80028f4:	f043 0310 	orr.w	r3, r3, #16
 80028f8:	6313      	str	r3, [r2, #48]	; 0x30
 80028fa:	4b5c      	ldr	r3, [pc, #368]	; (8002a6c <HAL_UART_MspInit+0x1c0>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	f003 0310 	and.w	r3, r3, #16
 8002902:	61fb      	str	r3, [r7, #28]
 8002904:	69fb      	ldr	r3, [r7, #28]
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002906:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800290a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800290c:	2302      	movs	r3, #2
 800290e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002910:	2300      	movs	r3, #0
 8002912:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002914:	2303      	movs	r3, #3
 8002916:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002918:	2308      	movs	r3, #8
 800291a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800291c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002920:	4619      	mov	r1, r3
 8002922:	4853      	ldr	r0, [pc, #332]	; (8002a70 <HAL_UART_MspInit+0x1c4>)
 8002924:	f000 faee 	bl	8002f04 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8002928:	2200      	movs	r2, #0
 800292a:	2100      	movs	r1, #0
 800292c:	2052      	movs	r0, #82	; 0x52
 800292e:	f000 fa20 	bl	8002d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8002932:	2052      	movs	r0, #82	; 0x52
 8002934:	f000 fa39 	bl	8002daa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002938:	e091      	b.n	8002a5e <HAL_UART_MspInit+0x1b2>
  else if(uartHandle->Instance==USART2)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a4d      	ldr	r2, [pc, #308]	; (8002a74 <HAL_UART_MspInit+0x1c8>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d152      	bne.n	80029ea <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002944:	2300      	movs	r3, #0
 8002946:	61bb      	str	r3, [r7, #24]
 8002948:	4b48      	ldr	r3, [pc, #288]	; (8002a6c <HAL_UART_MspInit+0x1c0>)
 800294a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294c:	4a47      	ldr	r2, [pc, #284]	; (8002a6c <HAL_UART_MspInit+0x1c0>)
 800294e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002952:	6413      	str	r3, [r2, #64]	; 0x40
 8002954:	4b45      	ldr	r3, [pc, #276]	; (8002a6c <HAL_UART_MspInit+0x1c0>)
 8002956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295c:	61bb      	str	r3, [r7, #24]
 800295e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002960:	2300      	movs	r3, #0
 8002962:	617b      	str	r3, [r7, #20]
 8002964:	4b41      	ldr	r3, [pc, #260]	; (8002a6c <HAL_UART_MspInit+0x1c0>)
 8002966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002968:	4a40      	ldr	r2, [pc, #256]	; (8002a6c <HAL_UART_MspInit+0x1c0>)
 800296a:	f043 0301 	orr.w	r3, r3, #1
 800296e:	6313      	str	r3, [r2, #48]	; 0x30
 8002970:	4b3e      	ldr	r3, [pc, #248]	; (8002a6c <HAL_UART_MspInit+0x1c0>)
 8002972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	617b      	str	r3, [r7, #20]
 800297a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800297c:	2300      	movs	r3, #0
 800297e:	613b      	str	r3, [r7, #16]
 8002980:	4b3a      	ldr	r3, [pc, #232]	; (8002a6c <HAL_UART_MspInit+0x1c0>)
 8002982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002984:	4a39      	ldr	r2, [pc, #228]	; (8002a6c <HAL_UART_MspInit+0x1c0>)
 8002986:	f043 0308 	orr.w	r3, r3, #8
 800298a:	6313      	str	r3, [r2, #48]	; 0x30
 800298c:	4b37      	ldr	r3, [pc, #220]	; (8002a6c <HAL_UART_MspInit+0x1c0>)
 800298e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002990:	f003 0308 	and.w	r3, r3, #8
 8002994:	613b      	str	r3, [r7, #16]
 8002996:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002998:	2308      	movs	r3, #8
 800299a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299c:	2302      	movs	r3, #2
 800299e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a4:	2303      	movs	r3, #3
 80029a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029a8:	2307      	movs	r3, #7
 80029aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029b0:	4619      	mov	r1, r3
 80029b2:	4831      	ldr	r0, [pc, #196]	; (8002a78 <HAL_UART_MspInit+0x1cc>)
 80029b4:	f000 faa6 	bl	8002f04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80029b8:	2320      	movs	r3, #32
 80029ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029bc:	2302      	movs	r3, #2
 80029be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c0:	2300      	movs	r3, #0
 80029c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029c4:	2303      	movs	r3, #3
 80029c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029c8:	2307      	movs	r3, #7
 80029ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029d0:	4619      	mov	r1, r3
 80029d2:	482a      	ldr	r0, [pc, #168]	; (8002a7c <HAL_UART_MspInit+0x1d0>)
 80029d4:	f000 fa96 	bl	8002f04 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80029d8:	2200      	movs	r2, #0
 80029da:	2100      	movs	r1, #0
 80029dc:	2026      	movs	r0, #38	; 0x26
 80029de:	f000 f9c8 	bl	8002d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80029e2:	2026      	movs	r0, #38	; 0x26
 80029e4:	f000 f9e1 	bl	8002daa <HAL_NVIC_EnableIRQ>
}
 80029e8:	e039      	b.n	8002a5e <HAL_UART_MspInit+0x1b2>
  else if(uartHandle->Instance==USART3)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a24      	ldr	r2, [pc, #144]	; (8002a80 <HAL_UART_MspInit+0x1d4>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d134      	bne.n	8002a5e <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_USART3_CLK_ENABLE();
 80029f4:	2300      	movs	r3, #0
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	4b1c      	ldr	r3, [pc, #112]	; (8002a6c <HAL_UART_MspInit+0x1c0>)
 80029fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fc:	4a1b      	ldr	r2, [pc, #108]	; (8002a6c <HAL_UART_MspInit+0x1c0>)
 80029fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a02:	6413      	str	r3, [r2, #64]	; 0x40
 8002a04:	4b19      	ldr	r3, [pc, #100]	; (8002a6c <HAL_UART_MspInit+0x1c0>)
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a0c:	60fb      	str	r3, [r7, #12]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a10:	2300      	movs	r3, #0
 8002a12:	60bb      	str	r3, [r7, #8]
 8002a14:	4b15      	ldr	r3, [pc, #84]	; (8002a6c <HAL_UART_MspInit+0x1c0>)
 8002a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a18:	4a14      	ldr	r2, [pc, #80]	; (8002a6c <HAL_UART_MspInit+0x1c0>)
 8002a1a:	f043 0308 	orr.w	r3, r3, #8
 8002a1e:	6313      	str	r3, [r2, #48]	; 0x30
 8002a20:	4b12      	ldr	r3, [pc, #72]	; (8002a6c <HAL_UART_MspInit+0x1c0>)
 8002a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a24:	f003 0308 	and.w	r3, r3, #8
 8002a28:	60bb      	str	r3, [r7, #8]
 8002a2a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a2c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a32:	2302      	movs	r3, #2
 8002a34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a36:	2300      	movs	r3, #0
 8002a38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a3e:	2307      	movs	r3, #7
 8002a40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a46:	4619      	mov	r1, r3
 8002a48:	480c      	ldr	r0, [pc, #48]	; (8002a7c <HAL_UART_MspInit+0x1d0>)
 8002a4a:	f000 fa5b 	bl	8002f04 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002a4e:	2200      	movs	r2, #0
 8002a50:	2100      	movs	r1, #0
 8002a52:	2027      	movs	r0, #39	; 0x27
 8002a54:	f000 f98d 	bl	8002d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002a58:	2027      	movs	r0, #39	; 0x27
 8002a5a:	f000 f9a6 	bl	8002daa <HAL_NVIC_EnableIRQ>
}
 8002a5e:	bf00      	nop
 8002a60:	3738      	adds	r7, #56	; 0x38
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	40007800 	.word	0x40007800
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	40021000 	.word	0x40021000
 8002a74:	40004400 	.word	0x40004400
 8002a78:	40020000 	.word	0x40020000
 8002a7c:	40020c00 	.word	0x40020c00
 8002a80:	40004800 	.word	0x40004800

08002a84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002a84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002abc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a88:	480d      	ldr	r0, [pc, #52]	; (8002ac0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a8a:	490e      	ldr	r1, [pc, #56]	; (8002ac4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a8c:	4a0e      	ldr	r2, [pc, #56]	; (8002ac8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a90:	e002      	b.n	8002a98 <LoopCopyDataInit>

08002a92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a96:	3304      	adds	r3, #4

08002a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a9c:	d3f9      	bcc.n	8002a92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a9e:	4a0b      	ldr	r2, [pc, #44]	; (8002acc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002aa0:	4c0b      	ldr	r4, [pc, #44]	; (8002ad0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002aa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002aa4:	e001      	b.n	8002aaa <LoopFillZerobss>

08002aa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002aa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002aa8:	3204      	adds	r2, #4

08002aaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002aaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002aac:	d3fb      	bcc.n	8002aa6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002aae:	f7ff fd5f 	bl	8002570 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ab2:	f004 fafd 	bl	80070b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ab6:	f7ff f8ed 	bl	8001c94 <main>
  bx  lr    
 8002aba:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002abc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002ac0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ac4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002ac8:	0800cda0 	.word	0x0800cda0
  ldr r2, =_sbss
 8002acc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002ad0:	200004dc 	.word	0x200004dc

08002ad4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ad4:	e7fe      	b.n	8002ad4 <ADC_IRQHandler>
	...

08002ad8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002adc:	4b0e      	ldr	r3, [pc, #56]	; (8002b18 <HAL_Init+0x40>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a0d      	ldr	r2, [pc, #52]	; (8002b18 <HAL_Init+0x40>)
 8002ae2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ae6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ae8:	4b0b      	ldr	r3, [pc, #44]	; (8002b18 <HAL_Init+0x40>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a0a      	ldr	r2, [pc, #40]	; (8002b18 <HAL_Init+0x40>)
 8002aee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002af2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002af4:	4b08      	ldr	r3, [pc, #32]	; (8002b18 <HAL_Init+0x40>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a07      	ldr	r2, [pc, #28]	; (8002b18 <HAL_Init+0x40>)
 8002afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002afe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b00:	2003      	movs	r0, #3
 8002b02:	f000 f92b 	bl	8002d5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b06:	200f      	movs	r0, #15
 8002b08:	f000 f808 	bl	8002b1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b0c:	f7ff fbfa 	bl	8002304 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	40023c00 	.word	0x40023c00

08002b1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b24:	4b12      	ldr	r3, [pc, #72]	; (8002b70 <HAL_InitTick+0x54>)
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	4b12      	ldr	r3, [pc, #72]	; (8002b74 <HAL_InitTick+0x58>)
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b32:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f000 f943 	bl	8002dc6 <HAL_SYSTICK_Config>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e00e      	b.n	8002b68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2b0f      	cmp	r3, #15
 8002b4e:	d80a      	bhi.n	8002b66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b50:	2200      	movs	r2, #0
 8002b52:	6879      	ldr	r1, [r7, #4]
 8002b54:	f04f 30ff 	mov.w	r0, #4294967295
 8002b58:	f000 f90b 	bl	8002d72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b5c:	4a06      	ldr	r2, [pc, #24]	; (8002b78 <HAL_InitTick+0x5c>)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
 8002b64:	e000      	b.n	8002b68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	20000000 	.word	0x20000000
 8002b74:	20000008 	.word	0x20000008
 8002b78:	20000004 	.word	0x20000004

08002b7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b80:	4b06      	ldr	r3, [pc, #24]	; (8002b9c <HAL_IncTick+0x20>)
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	461a      	mov	r2, r3
 8002b86:	4b06      	ldr	r3, [pc, #24]	; (8002ba0 <HAL_IncTick+0x24>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	4a04      	ldr	r2, [pc, #16]	; (8002ba0 <HAL_IncTick+0x24>)
 8002b8e:	6013      	str	r3, [r2, #0]
}
 8002b90:	bf00      	nop
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	20000008 	.word	0x20000008
 8002ba0:	200004c8 	.word	0x200004c8

08002ba4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ba8:	4b03      	ldr	r3, [pc, #12]	; (8002bb8 <HAL_GetTick+0x14>)
 8002baa:	681b      	ldr	r3, [r3, #0]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	200004c8 	.word	0x200004c8

08002bbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f003 0307 	and.w	r3, r3, #7
 8002bca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bcc:	4b0c      	ldr	r3, [pc, #48]	; (8002c00 <__NVIC_SetPriorityGrouping+0x44>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bd2:	68ba      	ldr	r2, [r7, #8]
 8002bd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bd8:	4013      	ands	r3, r2
 8002bda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002be4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bee:	4a04      	ldr	r2, [pc, #16]	; (8002c00 <__NVIC_SetPriorityGrouping+0x44>)
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	60d3      	str	r3, [r2, #12]
}
 8002bf4:	bf00      	nop
 8002bf6:	3714      	adds	r7, #20
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr
 8002c00:	e000ed00 	.word	0xe000ed00

08002c04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c08:	4b04      	ldr	r3, [pc, #16]	; (8002c1c <__NVIC_GetPriorityGrouping+0x18>)
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	0a1b      	lsrs	r3, r3, #8
 8002c0e:	f003 0307 	and.w	r3, r3, #7
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	e000ed00 	.word	0xe000ed00

08002c20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	4603      	mov	r3, r0
 8002c28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	db0b      	blt.n	8002c4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c32:	79fb      	ldrb	r3, [r7, #7]
 8002c34:	f003 021f 	and.w	r2, r3, #31
 8002c38:	4907      	ldr	r1, [pc, #28]	; (8002c58 <__NVIC_EnableIRQ+0x38>)
 8002c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3e:	095b      	lsrs	r3, r3, #5
 8002c40:	2001      	movs	r0, #1
 8002c42:	fa00 f202 	lsl.w	r2, r0, r2
 8002c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c4a:	bf00      	nop
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	e000e100 	.word	0xe000e100

08002c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	4603      	mov	r3, r0
 8002c64:	6039      	str	r1, [r7, #0]
 8002c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	db0a      	blt.n	8002c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	b2da      	uxtb	r2, r3
 8002c74:	490c      	ldr	r1, [pc, #48]	; (8002ca8 <__NVIC_SetPriority+0x4c>)
 8002c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7a:	0112      	lsls	r2, r2, #4
 8002c7c:	b2d2      	uxtb	r2, r2
 8002c7e:	440b      	add	r3, r1
 8002c80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c84:	e00a      	b.n	8002c9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	4908      	ldr	r1, [pc, #32]	; (8002cac <__NVIC_SetPriority+0x50>)
 8002c8c:	79fb      	ldrb	r3, [r7, #7]
 8002c8e:	f003 030f 	and.w	r3, r3, #15
 8002c92:	3b04      	subs	r3, #4
 8002c94:	0112      	lsls	r2, r2, #4
 8002c96:	b2d2      	uxtb	r2, r2
 8002c98:	440b      	add	r3, r1
 8002c9a:	761a      	strb	r2, [r3, #24]
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr
 8002ca8:	e000e100 	.word	0xe000e100
 8002cac:	e000ed00 	.word	0xe000ed00

08002cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b089      	sub	sp, #36	; 0x24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f003 0307 	and.w	r3, r3, #7
 8002cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	f1c3 0307 	rsb	r3, r3, #7
 8002cca:	2b04      	cmp	r3, #4
 8002ccc:	bf28      	it	cs
 8002cce:	2304      	movcs	r3, #4
 8002cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	3304      	adds	r3, #4
 8002cd6:	2b06      	cmp	r3, #6
 8002cd8:	d902      	bls.n	8002ce0 <NVIC_EncodePriority+0x30>
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	3b03      	subs	r3, #3
 8002cde:	e000      	b.n	8002ce2 <NVIC_EncodePriority+0x32>
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	fa02 f303 	lsl.w	r3, r2, r3
 8002cee:	43da      	mvns	r2, r3
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	401a      	ands	r2, r3
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002d02:	43d9      	mvns	r1, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d08:	4313      	orrs	r3, r2
         );
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3724      	adds	r7, #36	; 0x24
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
	...

08002d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3b01      	subs	r3, #1
 8002d24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d28:	d301      	bcc.n	8002d2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e00f      	b.n	8002d4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d2e:	4a0a      	ldr	r2, [pc, #40]	; (8002d58 <SysTick_Config+0x40>)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	3b01      	subs	r3, #1
 8002d34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d36:	210f      	movs	r1, #15
 8002d38:	f04f 30ff 	mov.w	r0, #4294967295
 8002d3c:	f7ff ff8e 	bl	8002c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d40:	4b05      	ldr	r3, [pc, #20]	; (8002d58 <SysTick_Config+0x40>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d46:	4b04      	ldr	r3, [pc, #16]	; (8002d58 <SysTick_Config+0x40>)
 8002d48:	2207      	movs	r2, #7
 8002d4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	e000e010 	.word	0xe000e010

08002d5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f7ff ff29 	bl	8002bbc <__NVIC_SetPriorityGrouping>
}
 8002d6a:	bf00      	nop
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b086      	sub	sp, #24
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	4603      	mov	r3, r0
 8002d7a:	60b9      	str	r1, [r7, #8]
 8002d7c:	607a      	str	r2, [r7, #4]
 8002d7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d80:	2300      	movs	r3, #0
 8002d82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d84:	f7ff ff3e 	bl	8002c04 <__NVIC_GetPriorityGrouping>
 8002d88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	68b9      	ldr	r1, [r7, #8]
 8002d8e:	6978      	ldr	r0, [r7, #20]
 8002d90:	f7ff ff8e 	bl	8002cb0 <NVIC_EncodePriority>
 8002d94:	4602      	mov	r2, r0
 8002d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d9a:	4611      	mov	r1, r2
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff ff5d 	bl	8002c5c <__NVIC_SetPriority>
}
 8002da2:	bf00      	nop
 8002da4:	3718      	adds	r7, #24
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b082      	sub	sp, #8
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	4603      	mov	r3, r0
 8002db2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff ff31 	bl	8002c20 <__NVIC_EnableIRQ>
}
 8002dbe:	bf00      	nop
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b082      	sub	sp, #8
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f7ff ffa2 	bl	8002d18 <SysTick_Config>
 8002dd4:	4603      	mov	r3, r0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b084      	sub	sp, #16
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dea:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002dec:	f7ff feda 	bl	8002ba4 <HAL_GetTick>
 8002df0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d008      	beq.n	8002e10 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2280      	movs	r2, #128	; 0x80
 8002e02:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e052      	b.n	8002eb6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 0216 	bic.w	r2, r2, #22
 8002e1e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	695a      	ldr	r2, [r3, #20]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e2e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d103      	bne.n	8002e40 <HAL_DMA_Abort+0x62>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d007      	beq.n	8002e50 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f022 0208 	bic.w	r2, r2, #8
 8002e4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f022 0201 	bic.w	r2, r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e60:	e013      	b.n	8002e8a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e62:	f7ff fe9f 	bl	8002ba4 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b05      	cmp	r3, #5
 8002e6e:	d90c      	bls.n	8002e8a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2220      	movs	r2, #32
 8002e74:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2203      	movs	r2, #3
 8002e7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e015      	b.n	8002eb6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1e4      	bne.n	8002e62 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e9c:	223f      	movs	r2, #63	; 0x3f
 8002e9e:	409a      	lsls	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b083      	sub	sp, #12
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d004      	beq.n	8002edc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2280      	movs	r2, #128	; 0x80
 8002ed6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e00c      	b.n	8002ef6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2205      	movs	r2, #5
 8002ee0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 0201 	bic.w	r2, r2, #1
 8002ef2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
	...

08002f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b089      	sub	sp, #36	; 0x24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f12:	2300      	movs	r3, #0
 8002f14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f16:	2300      	movs	r3, #0
 8002f18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	61fb      	str	r3, [r7, #28]
 8002f1e:	e177      	b.n	8003210 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f20:	2201      	movs	r2, #1
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	4013      	ands	r3, r2
 8002f32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	f040 8166 	bne.w	800320a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f003 0303 	and.w	r3, r3, #3
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d005      	beq.n	8002f56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d130      	bne.n	8002fb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	2203      	movs	r2, #3
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	43db      	mvns	r3, r3
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	68da      	ldr	r2, [r3, #12]
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	43db      	mvns	r3, r3
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	091b      	lsrs	r3, r3, #4
 8002fa2:	f003 0201 	and.w	r2, r3, #1
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f003 0303 	and.w	r3, r3, #3
 8002fc0:	2b03      	cmp	r3, #3
 8002fc2:	d017      	beq.n	8002ff4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	2203      	movs	r2, #3
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	43db      	mvns	r3, r3
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f003 0303 	and.w	r3, r3, #3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d123      	bne.n	8003048 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	08da      	lsrs	r2, r3, #3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	3208      	adds	r2, #8
 8003008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800300c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	f003 0307 	and.w	r3, r3, #7
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	220f      	movs	r2, #15
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	43db      	mvns	r3, r3
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	4013      	ands	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	691a      	ldr	r2, [r3, #16]
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	4313      	orrs	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	08da      	lsrs	r2, r3, #3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	3208      	adds	r2, #8
 8003042:	69b9      	ldr	r1, [r7, #24]
 8003044:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	2203      	movs	r2, #3
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	43db      	mvns	r3, r3
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	4013      	ands	r3, r2
 800305e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f003 0203 	and.w	r2, r3, #3
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	4313      	orrs	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 80c0 	beq.w	800320a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800308a:	2300      	movs	r3, #0
 800308c:	60fb      	str	r3, [r7, #12]
 800308e:	4b66      	ldr	r3, [pc, #408]	; (8003228 <HAL_GPIO_Init+0x324>)
 8003090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003092:	4a65      	ldr	r2, [pc, #404]	; (8003228 <HAL_GPIO_Init+0x324>)
 8003094:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003098:	6453      	str	r3, [r2, #68]	; 0x44
 800309a:	4b63      	ldr	r3, [pc, #396]	; (8003228 <HAL_GPIO_Init+0x324>)
 800309c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030a2:	60fb      	str	r3, [r7, #12]
 80030a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030a6:	4a61      	ldr	r2, [pc, #388]	; (800322c <HAL_GPIO_Init+0x328>)
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	089b      	lsrs	r3, r3, #2
 80030ac:	3302      	adds	r3, #2
 80030ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	f003 0303 	and.w	r3, r3, #3
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	220f      	movs	r2, #15
 80030be:	fa02 f303 	lsl.w	r3, r2, r3
 80030c2:	43db      	mvns	r3, r3
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	4013      	ands	r3, r2
 80030c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a58      	ldr	r2, [pc, #352]	; (8003230 <HAL_GPIO_Init+0x32c>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d037      	beq.n	8003142 <HAL_GPIO_Init+0x23e>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a57      	ldr	r2, [pc, #348]	; (8003234 <HAL_GPIO_Init+0x330>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d031      	beq.n	800313e <HAL_GPIO_Init+0x23a>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a56      	ldr	r2, [pc, #344]	; (8003238 <HAL_GPIO_Init+0x334>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d02b      	beq.n	800313a <HAL_GPIO_Init+0x236>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a55      	ldr	r2, [pc, #340]	; (800323c <HAL_GPIO_Init+0x338>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d025      	beq.n	8003136 <HAL_GPIO_Init+0x232>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a54      	ldr	r2, [pc, #336]	; (8003240 <HAL_GPIO_Init+0x33c>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d01f      	beq.n	8003132 <HAL_GPIO_Init+0x22e>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a53      	ldr	r2, [pc, #332]	; (8003244 <HAL_GPIO_Init+0x340>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d019      	beq.n	800312e <HAL_GPIO_Init+0x22a>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a52      	ldr	r2, [pc, #328]	; (8003248 <HAL_GPIO_Init+0x344>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d013      	beq.n	800312a <HAL_GPIO_Init+0x226>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a51      	ldr	r2, [pc, #324]	; (800324c <HAL_GPIO_Init+0x348>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d00d      	beq.n	8003126 <HAL_GPIO_Init+0x222>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a50      	ldr	r2, [pc, #320]	; (8003250 <HAL_GPIO_Init+0x34c>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d007      	beq.n	8003122 <HAL_GPIO_Init+0x21e>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a4f      	ldr	r2, [pc, #316]	; (8003254 <HAL_GPIO_Init+0x350>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d101      	bne.n	800311e <HAL_GPIO_Init+0x21a>
 800311a:	2309      	movs	r3, #9
 800311c:	e012      	b.n	8003144 <HAL_GPIO_Init+0x240>
 800311e:	230a      	movs	r3, #10
 8003120:	e010      	b.n	8003144 <HAL_GPIO_Init+0x240>
 8003122:	2308      	movs	r3, #8
 8003124:	e00e      	b.n	8003144 <HAL_GPIO_Init+0x240>
 8003126:	2307      	movs	r3, #7
 8003128:	e00c      	b.n	8003144 <HAL_GPIO_Init+0x240>
 800312a:	2306      	movs	r3, #6
 800312c:	e00a      	b.n	8003144 <HAL_GPIO_Init+0x240>
 800312e:	2305      	movs	r3, #5
 8003130:	e008      	b.n	8003144 <HAL_GPIO_Init+0x240>
 8003132:	2304      	movs	r3, #4
 8003134:	e006      	b.n	8003144 <HAL_GPIO_Init+0x240>
 8003136:	2303      	movs	r3, #3
 8003138:	e004      	b.n	8003144 <HAL_GPIO_Init+0x240>
 800313a:	2302      	movs	r3, #2
 800313c:	e002      	b.n	8003144 <HAL_GPIO_Init+0x240>
 800313e:	2301      	movs	r3, #1
 8003140:	e000      	b.n	8003144 <HAL_GPIO_Init+0x240>
 8003142:	2300      	movs	r3, #0
 8003144:	69fa      	ldr	r2, [r7, #28]
 8003146:	f002 0203 	and.w	r2, r2, #3
 800314a:	0092      	lsls	r2, r2, #2
 800314c:	4093      	lsls	r3, r2
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	4313      	orrs	r3, r2
 8003152:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003154:	4935      	ldr	r1, [pc, #212]	; (800322c <HAL_GPIO_Init+0x328>)
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	089b      	lsrs	r3, r3, #2
 800315a:	3302      	adds	r3, #2
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003162:	4b3d      	ldr	r3, [pc, #244]	; (8003258 <HAL_GPIO_Init+0x354>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	43db      	mvns	r3, r3
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	4013      	ands	r3, r2
 8003170:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d003      	beq.n	8003186 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800317e:	69ba      	ldr	r2, [r7, #24]
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	4313      	orrs	r3, r2
 8003184:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003186:	4a34      	ldr	r2, [pc, #208]	; (8003258 <HAL_GPIO_Init+0x354>)
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800318c:	4b32      	ldr	r3, [pc, #200]	; (8003258 <HAL_GPIO_Init+0x354>)
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	43db      	mvns	r3, r3
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	4013      	ands	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d003      	beq.n	80031b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031b0:	4a29      	ldr	r2, [pc, #164]	; (8003258 <HAL_GPIO_Init+0x354>)
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031b6:	4b28      	ldr	r3, [pc, #160]	; (8003258 <HAL_GPIO_Init+0x354>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	43db      	mvns	r3, r3
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	4013      	ands	r3, r2
 80031c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031da:	4a1f      	ldr	r2, [pc, #124]	; (8003258 <HAL_GPIO_Init+0x354>)
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031e0:	4b1d      	ldr	r3, [pc, #116]	; (8003258 <HAL_GPIO_Init+0x354>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	43db      	mvns	r3, r3
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	4013      	ands	r3, r2
 80031ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d003      	beq.n	8003204 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	4313      	orrs	r3, r2
 8003202:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003204:	4a14      	ldr	r2, [pc, #80]	; (8003258 <HAL_GPIO_Init+0x354>)
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	3301      	adds	r3, #1
 800320e:	61fb      	str	r3, [r7, #28]
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	2b0f      	cmp	r3, #15
 8003214:	f67f ae84 	bls.w	8002f20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003218:	bf00      	nop
 800321a:	bf00      	nop
 800321c:	3724      	adds	r7, #36	; 0x24
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	40023800 	.word	0x40023800
 800322c:	40013800 	.word	0x40013800
 8003230:	40020000 	.word	0x40020000
 8003234:	40020400 	.word	0x40020400
 8003238:	40020800 	.word	0x40020800
 800323c:	40020c00 	.word	0x40020c00
 8003240:	40021000 	.word	0x40021000
 8003244:	40021400 	.word	0x40021400
 8003248:	40021800 	.word	0x40021800
 800324c:	40021c00 	.word	0x40021c00
 8003250:	40022000 	.word	0x40022000
 8003254:	40022400 	.word	0x40022400
 8003258:	40013c00 	.word	0x40013c00

0800325c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	460b      	mov	r3, r1
 8003266:	807b      	strh	r3, [r7, #2]
 8003268:	4613      	mov	r3, r2
 800326a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800326c:	787b      	ldrb	r3, [r7, #1]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d003      	beq.n	800327a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003272:	887a      	ldrh	r2, [r7, #2]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003278:	e003      	b.n	8003282 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800327a:	887b      	ldrh	r3, [r7, #2]
 800327c:	041a      	lsls	r2, r3, #16
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	619a      	str	r2, [r3, #24]
}
 8003282:	bf00      	nop
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
	...

08003290 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e12b      	b.n	80034fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d106      	bne.n	80032bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f7fe fc92 	bl	8001be0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2224      	movs	r2, #36	; 0x24
 80032c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 0201 	bic.w	r2, r2, #1
 80032d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032f4:	f001 fc86 	bl	8004c04 <HAL_RCC_GetPCLK1Freq>
 80032f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	4a81      	ldr	r2, [pc, #516]	; (8003504 <HAL_I2C_Init+0x274>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d807      	bhi.n	8003314 <HAL_I2C_Init+0x84>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	4a80      	ldr	r2, [pc, #512]	; (8003508 <HAL_I2C_Init+0x278>)
 8003308:	4293      	cmp	r3, r2
 800330a:	bf94      	ite	ls
 800330c:	2301      	movls	r3, #1
 800330e:	2300      	movhi	r3, #0
 8003310:	b2db      	uxtb	r3, r3
 8003312:	e006      	b.n	8003322 <HAL_I2C_Init+0x92>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	4a7d      	ldr	r2, [pc, #500]	; (800350c <HAL_I2C_Init+0x27c>)
 8003318:	4293      	cmp	r3, r2
 800331a:	bf94      	ite	ls
 800331c:	2301      	movls	r3, #1
 800331e:	2300      	movhi	r3, #0
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e0e7      	b.n	80034fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	4a78      	ldr	r2, [pc, #480]	; (8003510 <HAL_I2C_Init+0x280>)
 800332e:	fba2 2303 	umull	r2, r3, r2, r3
 8003332:	0c9b      	lsrs	r3, r3, #18
 8003334:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68ba      	ldr	r2, [r7, #8]
 8003346:	430a      	orrs	r2, r1
 8003348:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	4a6a      	ldr	r2, [pc, #424]	; (8003504 <HAL_I2C_Init+0x274>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d802      	bhi.n	8003364 <HAL_I2C_Init+0xd4>
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	3301      	adds	r3, #1
 8003362:	e009      	b.n	8003378 <HAL_I2C_Init+0xe8>
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800336a:	fb02 f303 	mul.w	r3, r2, r3
 800336e:	4a69      	ldr	r2, [pc, #420]	; (8003514 <HAL_I2C_Init+0x284>)
 8003370:	fba2 2303 	umull	r2, r3, r2, r3
 8003374:	099b      	lsrs	r3, r3, #6
 8003376:	3301      	adds	r3, #1
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	6812      	ldr	r2, [r2, #0]
 800337c:	430b      	orrs	r3, r1
 800337e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	69db      	ldr	r3, [r3, #28]
 8003386:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800338a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	495c      	ldr	r1, [pc, #368]	; (8003504 <HAL_I2C_Init+0x274>)
 8003394:	428b      	cmp	r3, r1
 8003396:	d819      	bhi.n	80033cc <HAL_I2C_Init+0x13c>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	1e59      	subs	r1, r3, #1
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80033a6:	1c59      	adds	r1, r3, #1
 80033a8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80033ac:	400b      	ands	r3, r1
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00a      	beq.n	80033c8 <HAL_I2C_Init+0x138>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	1e59      	subs	r1, r3, #1
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80033c0:	3301      	adds	r3, #1
 80033c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033c6:	e051      	b.n	800346c <HAL_I2C_Init+0x1dc>
 80033c8:	2304      	movs	r3, #4
 80033ca:	e04f      	b.n	800346c <HAL_I2C_Init+0x1dc>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d111      	bne.n	80033f8 <HAL_I2C_Init+0x168>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	1e58      	subs	r0, r3, #1
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6859      	ldr	r1, [r3, #4]
 80033dc:	460b      	mov	r3, r1
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	440b      	add	r3, r1
 80033e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80033e6:	3301      	adds	r3, #1
 80033e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	bf0c      	ite	eq
 80033f0:	2301      	moveq	r3, #1
 80033f2:	2300      	movne	r3, #0
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	e012      	b.n	800341e <HAL_I2C_Init+0x18e>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	1e58      	subs	r0, r3, #1
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6859      	ldr	r1, [r3, #4]
 8003400:	460b      	mov	r3, r1
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	440b      	add	r3, r1
 8003406:	0099      	lsls	r1, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	fbb0 f3f3 	udiv	r3, r0, r3
 800340e:	3301      	adds	r3, #1
 8003410:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003414:	2b00      	cmp	r3, #0
 8003416:	bf0c      	ite	eq
 8003418:	2301      	moveq	r3, #1
 800341a:	2300      	movne	r3, #0
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <HAL_I2C_Init+0x196>
 8003422:	2301      	movs	r3, #1
 8003424:	e022      	b.n	800346c <HAL_I2C_Init+0x1dc>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10e      	bne.n	800344c <HAL_I2C_Init+0x1bc>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	1e58      	subs	r0, r3, #1
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6859      	ldr	r1, [r3, #4]
 8003436:	460b      	mov	r3, r1
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	440b      	add	r3, r1
 800343c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003440:	3301      	adds	r3, #1
 8003442:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003446:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800344a:	e00f      	b.n	800346c <HAL_I2C_Init+0x1dc>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	1e58      	subs	r0, r3, #1
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6859      	ldr	r1, [r3, #4]
 8003454:	460b      	mov	r3, r1
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	440b      	add	r3, r1
 800345a:	0099      	lsls	r1, r3, #2
 800345c:	440b      	add	r3, r1
 800345e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003462:	3301      	adds	r3, #1
 8003464:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003468:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800346c:	6879      	ldr	r1, [r7, #4]
 800346e:	6809      	ldr	r1, [r1, #0]
 8003470:	4313      	orrs	r3, r2
 8003472:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	69da      	ldr	r2, [r3, #28]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	431a      	orrs	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	430a      	orrs	r2, r1
 800348e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800349a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	6911      	ldr	r1, [r2, #16]
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	68d2      	ldr	r2, [r2, #12]
 80034a6:	4311      	orrs	r1, r2
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	6812      	ldr	r2, [r2, #0]
 80034ac:	430b      	orrs	r3, r1
 80034ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	695a      	ldr	r2, [r3, #20]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	431a      	orrs	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	430a      	orrs	r2, r1
 80034ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f042 0201 	orr.w	r2, r2, #1
 80034da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2220      	movs	r2, #32
 80034e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	000186a0 	.word	0x000186a0
 8003508:	001e847f 	.word	0x001e847f
 800350c:	003d08ff 	.word	0x003d08ff
 8003510:	431bde83 	.word	0x431bde83
 8003514:	10624dd3 	.word	0x10624dd3

08003518 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b088      	sub	sp, #32
 800351c:	af02      	add	r7, sp, #8
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	4608      	mov	r0, r1
 8003522:	4611      	mov	r1, r2
 8003524:	461a      	mov	r2, r3
 8003526:	4603      	mov	r3, r0
 8003528:	817b      	strh	r3, [r7, #10]
 800352a:	460b      	mov	r3, r1
 800352c:	813b      	strh	r3, [r7, #8]
 800352e:	4613      	mov	r3, r2
 8003530:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003532:	f7ff fb37 	bl	8002ba4 <HAL_GetTick>
 8003536:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800353e:	b2db      	uxtb	r3, r3
 8003540:	2b20      	cmp	r3, #32
 8003542:	f040 80d9 	bne.w	80036f8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	2319      	movs	r3, #25
 800354c:	2201      	movs	r2, #1
 800354e:	496d      	ldr	r1, [pc, #436]	; (8003704 <HAL_I2C_Mem_Write+0x1ec>)
 8003550:	68f8      	ldr	r0, [r7, #12]
 8003552:	f000 fc7f 	bl	8003e54 <I2C_WaitOnFlagUntilTimeout>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d001      	beq.n	8003560 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800355c:	2302      	movs	r3, #2
 800355e:	e0cc      	b.n	80036fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003566:	2b01      	cmp	r3, #1
 8003568:	d101      	bne.n	800356e <HAL_I2C_Mem_Write+0x56>
 800356a:	2302      	movs	r3, #2
 800356c:	e0c5      	b.n	80036fa <HAL_I2C_Mem_Write+0x1e2>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	2b01      	cmp	r3, #1
 8003582:	d007      	beq.n	8003594 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f042 0201 	orr.w	r2, r2, #1
 8003592:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2221      	movs	r2, #33	; 0x21
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2240      	movs	r2, #64	; 0x40
 80035b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6a3a      	ldr	r2, [r7, #32]
 80035be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80035c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	4a4d      	ldr	r2, [pc, #308]	; (8003708 <HAL_I2C_Mem_Write+0x1f0>)
 80035d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035d6:	88f8      	ldrh	r0, [r7, #6]
 80035d8:	893a      	ldrh	r2, [r7, #8]
 80035da:	8979      	ldrh	r1, [r7, #10]
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	9301      	str	r3, [sp, #4]
 80035e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	4603      	mov	r3, r0
 80035e6:	68f8      	ldr	r0, [r7, #12]
 80035e8:	f000 fab6 	bl	8003b58 <I2C_RequestMemoryWrite>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d052      	beq.n	8003698 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e081      	b.n	80036fa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f000 fd00 	bl	8004000 <I2C_WaitOnTXEFlagUntilTimeout>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00d      	beq.n	8003622 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360a:	2b04      	cmp	r3, #4
 800360c:	d107      	bne.n	800361e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800361c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e06b      	b.n	80036fa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003626:	781a      	ldrb	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003632:	1c5a      	adds	r2, r3, #1
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800363c:	3b01      	subs	r3, #1
 800363e:	b29a      	uxth	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003648:	b29b      	uxth	r3, r3
 800364a:	3b01      	subs	r3, #1
 800364c:	b29a      	uxth	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	f003 0304 	and.w	r3, r3, #4
 800365c:	2b04      	cmp	r3, #4
 800365e:	d11b      	bne.n	8003698 <HAL_I2C_Mem_Write+0x180>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003664:	2b00      	cmp	r3, #0
 8003666:	d017      	beq.n	8003698 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366c:	781a      	ldrb	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003678:	1c5a      	adds	r2, r3, #1
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003682:	3b01      	subs	r3, #1
 8003684:	b29a      	uxth	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800368e:	b29b      	uxth	r3, r3
 8003690:	3b01      	subs	r3, #1
 8003692:	b29a      	uxth	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1aa      	bne.n	80035f6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	f000 fcec 	bl	8004082 <I2C_WaitOnBTFFlagUntilTimeout>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00d      	beq.n	80036cc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b4:	2b04      	cmp	r3, #4
 80036b6:	d107      	bne.n	80036c8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036c6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e016      	b.n	80036fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2220      	movs	r2, #32
 80036e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80036f4:	2300      	movs	r3, #0
 80036f6:	e000      	b.n	80036fa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80036f8:	2302      	movs	r3, #2
  }
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3718      	adds	r7, #24
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	00100002 	.word	0x00100002
 8003708:	ffff0000 	.word	0xffff0000

0800370c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b08c      	sub	sp, #48	; 0x30
 8003710:	af02      	add	r7, sp, #8
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	4608      	mov	r0, r1
 8003716:	4611      	mov	r1, r2
 8003718:	461a      	mov	r2, r3
 800371a:	4603      	mov	r3, r0
 800371c:	817b      	strh	r3, [r7, #10]
 800371e:	460b      	mov	r3, r1
 8003720:	813b      	strh	r3, [r7, #8]
 8003722:	4613      	mov	r3, r2
 8003724:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003726:	f7ff fa3d 	bl	8002ba4 <HAL_GetTick>
 800372a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b20      	cmp	r3, #32
 8003736:	f040 8208 	bne.w	8003b4a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800373a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373c:	9300      	str	r3, [sp, #0]
 800373e:	2319      	movs	r3, #25
 8003740:	2201      	movs	r2, #1
 8003742:	497b      	ldr	r1, [pc, #492]	; (8003930 <HAL_I2C_Mem_Read+0x224>)
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f000 fb85 	bl	8003e54 <I2C_WaitOnFlagUntilTimeout>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d001      	beq.n	8003754 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003750:	2302      	movs	r3, #2
 8003752:	e1fb      	b.n	8003b4c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800375a:	2b01      	cmp	r3, #1
 800375c:	d101      	bne.n	8003762 <HAL_I2C_Mem_Read+0x56>
 800375e:	2302      	movs	r3, #2
 8003760:	e1f4      	b.n	8003b4c <HAL_I2C_Mem_Read+0x440>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	2b01      	cmp	r3, #1
 8003776:	d007      	beq.n	8003788 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f042 0201 	orr.w	r2, r2, #1
 8003786:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003796:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2222      	movs	r2, #34	; 0x22
 800379c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2240      	movs	r2, #64	; 0x40
 80037a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80037b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037be:	b29a      	uxth	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4a5b      	ldr	r2, [pc, #364]	; (8003934 <HAL_I2C_Mem_Read+0x228>)
 80037c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037ca:	88f8      	ldrh	r0, [r7, #6]
 80037cc:	893a      	ldrh	r2, [r7, #8]
 80037ce:	8979      	ldrh	r1, [r7, #10]
 80037d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d2:	9301      	str	r3, [sp, #4]
 80037d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	4603      	mov	r3, r0
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f000 fa52 	bl	8003c84 <I2C_RequestMemoryRead>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e1b0      	b.n	8003b4c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d113      	bne.n	800381a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037f2:	2300      	movs	r3, #0
 80037f4:	623b      	str	r3, [r7, #32]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	695b      	ldr	r3, [r3, #20]
 80037fc:	623b      	str	r3, [r7, #32]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	623b      	str	r3, [r7, #32]
 8003806:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003816:	601a      	str	r2, [r3, #0]
 8003818:	e184      	b.n	8003b24 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800381e:	2b01      	cmp	r3, #1
 8003820:	d11b      	bne.n	800385a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003830:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003832:	2300      	movs	r3, #0
 8003834:	61fb      	str	r3, [r7, #28]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	695b      	ldr	r3, [r3, #20]
 800383c:	61fb      	str	r3, [r7, #28]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	61fb      	str	r3, [r7, #28]
 8003846:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003856:	601a      	str	r2, [r3, #0]
 8003858:	e164      	b.n	8003b24 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800385e:	2b02      	cmp	r3, #2
 8003860:	d11b      	bne.n	800389a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003870:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003880:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003882:	2300      	movs	r3, #0
 8003884:	61bb      	str	r3, [r7, #24]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	61bb      	str	r3, [r7, #24]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	61bb      	str	r3, [r7, #24]
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	e144      	b.n	8003b24 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800389a:	2300      	movs	r3, #0
 800389c:	617b      	str	r3, [r7, #20]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	695b      	ldr	r3, [r3, #20]
 80038a4:	617b      	str	r3, [r7, #20]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	617b      	str	r3, [r7, #20]
 80038ae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80038b0:	e138      	b.n	8003b24 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b6:	2b03      	cmp	r3, #3
 80038b8:	f200 80f1 	bhi.w	8003a9e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d123      	bne.n	800390c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f000 fc1b 	bl	8004104 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e139      	b.n	8003b4c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	691a      	ldr	r2, [r3, #16]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e2:	b2d2      	uxtb	r2, r2
 80038e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	1c5a      	adds	r2, r3, #1
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f4:	3b01      	subs	r3, #1
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003900:	b29b      	uxth	r3, r3
 8003902:	3b01      	subs	r3, #1
 8003904:	b29a      	uxth	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	855a      	strh	r2, [r3, #42]	; 0x2a
 800390a:	e10b      	b.n	8003b24 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003910:	2b02      	cmp	r3, #2
 8003912:	d14e      	bne.n	80039b2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003916:	9300      	str	r3, [sp, #0]
 8003918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800391a:	2200      	movs	r2, #0
 800391c:	4906      	ldr	r1, [pc, #24]	; (8003938 <HAL_I2C_Mem_Read+0x22c>)
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f000 fa98 	bl	8003e54 <I2C_WaitOnFlagUntilTimeout>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d008      	beq.n	800393c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e10e      	b.n	8003b4c <HAL_I2C_Mem_Read+0x440>
 800392e:	bf00      	nop
 8003930:	00100002 	.word	0x00100002
 8003934:	ffff0000 	.word	0xffff0000
 8003938:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800394a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	691a      	ldr	r2, [r3, #16]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003956:	b2d2      	uxtb	r2, r2
 8003958:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395e:	1c5a      	adds	r2, r3, #1
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003968:	3b01      	subs	r3, #1
 800396a:	b29a      	uxth	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003974:	b29b      	uxth	r3, r3
 8003976:	3b01      	subs	r3, #1
 8003978:	b29a      	uxth	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	691a      	ldr	r2, [r3, #16]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	b2d2      	uxtb	r2, r2
 800398a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	1c5a      	adds	r2, r3, #1
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800399a:	3b01      	subs	r3, #1
 800399c:	b29a      	uxth	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	3b01      	subs	r3, #1
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039b0:	e0b8      	b.n	8003b24 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b4:	9300      	str	r3, [sp, #0]
 80039b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b8:	2200      	movs	r2, #0
 80039ba:	4966      	ldr	r1, [pc, #408]	; (8003b54 <HAL_I2C_Mem_Read+0x448>)
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	f000 fa49 	bl	8003e54 <I2C_WaitOnFlagUntilTimeout>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e0bf      	b.n	8003b4c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	691a      	ldr	r2, [r3, #16]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e6:	b2d2      	uxtb	r2, r2
 80039e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ee:	1c5a      	adds	r2, r3, #1
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039f8:	3b01      	subs	r3, #1
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	3b01      	subs	r3, #1
 8003a08:	b29a      	uxth	r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a14:	2200      	movs	r2, #0
 8003a16:	494f      	ldr	r1, [pc, #316]	; (8003b54 <HAL_I2C_Mem_Read+0x448>)
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f000 fa1b 	bl	8003e54 <I2C_WaitOnFlagUntilTimeout>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d001      	beq.n	8003a28 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e091      	b.n	8003b4c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	691a      	ldr	r2, [r3, #16]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a42:	b2d2      	uxtb	r2, r2
 8003a44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4a:	1c5a      	adds	r2, r3, #1
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a54:	3b01      	subs	r3, #1
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	3b01      	subs	r3, #1
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	691a      	ldr	r2, [r3, #16]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a74:	b2d2      	uxtb	r2, r2
 8003a76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7c:	1c5a      	adds	r2, r3, #1
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a86:	3b01      	subs	r3, #1
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	3b01      	subs	r3, #1
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a9c:	e042      	b.n	8003b24 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aa0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f000 fb2e 	bl	8004104 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e04c      	b.n	8003b4c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	691a      	ldr	r2, [r3, #16]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abc:	b2d2      	uxtb	r2, r2
 8003abe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac4:	1c5a      	adds	r2, r3, #1
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	b29a      	uxth	r2, r3
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	3b01      	subs	r3, #1
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	f003 0304 	and.w	r3, r3, #4
 8003aee:	2b04      	cmp	r3, #4
 8003af0:	d118      	bne.n	8003b24 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	691a      	ldr	r2, [r3, #16]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afc:	b2d2      	uxtb	r2, r2
 8003afe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	1c5a      	adds	r2, r3, #1
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f47f aec2 	bne.w	80038b2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2220      	movs	r2, #32
 8003b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b46:	2300      	movs	r3, #0
 8003b48:	e000      	b.n	8003b4c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003b4a:	2302      	movs	r3, #2
  }
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3728      	adds	r7, #40	; 0x28
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	00010004 	.word	0x00010004

08003b58 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b088      	sub	sp, #32
 8003b5c:	af02      	add	r7, sp, #8
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	4608      	mov	r0, r1
 8003b62:	4611      	mov	r1, r2
 8003b64:	461a      	mov	r2, r3
 8003b66:	4603      	mov	r3, r0
 8003b68:	817b      	strh	r3, [r7, #10]
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	813b      	strh	r3, [r7, #8]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b80:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b84:	9300      	str	r3, [sp, #0]
 8003b86:	6a3b      	ldr	r3, [r7, #32]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b8e:	68f8      	ldr	r0, [r7, #12]
 8003b90:	f000 f960 	bl	8003e54 <I2C_WaitOnFlagUntilTimeout>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00d      	beq.n	8003bb6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ba8:	d103      	bne.n	8003bb2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bb0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e05f      	b.n	8003c76 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003bb6:	897b      	ldrh	r3, [r7, #10]
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	461a      	mov	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003bc4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc8:	6a3a      	ldr	r2, [r7, #32]
 8003bca:	492d      	ldr	r1, [pc, #180]	; (8003c80 <I2C_RequestMemoryWrite+0x128>)
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f000 f998 	bl	8003f02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d001      	beq.n	8003bdc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e04c      	b.n	8003c76 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bdc:	2300      	movs	r3, #0
 8003bde:	617b      	str	r3, [r7, #20]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	617b      	str	r3, [r7, #20]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	617b      	str	r3, [r7, #20]
 8003bf0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf4:	6a39      	ldr	r1, [r7, #32]
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f000 fa02 	bl	8004000 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00d      	beq.n	8003c1e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	2b04      	cmp	r3, #4
 8003c08:	d107      	bne.n	8003c1a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c18:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e02b      	b.n	8003c76 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c1e:	88fb      	ldrh	r3, [r7, #6]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d105      	bne.n	8003c30 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c24:	893b      	ldrh	r3, [r7, #8]
 8003c26:	b2da      	uxtb	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	611a      	str	r2, [r3, #16]
 8003c2e:	e021      	b.n	8003c74 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c30:	893b      	ldrh	r3, [r7, #8]
 8003c32:	0a1b      	lsrs	r3, r3, #8
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	b2da      	uxtb	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c40:	6a39      	ldr	r1, [r7, #32]
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f000 f9dc 	bl	8004000 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00d      	beq.n	8003c6a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	2b04      	cmp	r3, #4
 8003c54:	d107      	bne.n	8003c66 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c64:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e005      	b.n	8003c76 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c6a:	893b      	ldrh	r3, [r7, #8]
 8003c6c:	b2da      	uxtb	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3718      	adds	r7, #24
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	00010002 	.word	0x00010002

08003c84 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b088      	sub	sp, #32
 8003c88:	af02      	add	r7, sp, #8
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	4608      	mov	r0, r1
 8003c8e:	4611      	mov	r1, r2
 8003c90:	461a      	mov	r2, r3
 8003c92:	4603      	mov	r3, r0
 8003c94:	817b      	strh	r3, [r7, #10]
 8003c96:	460b      	mov	r3, r1
 8003c98:	813b      	strh	r3, [r7, #8]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cac:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cbc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	6a3b      	ldr	r3, [r7, #32]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f000 f8c2 	bl	8003e54 <I2C_WaitOnFlagUntilTimeout>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00d      	beq.n	8003cf2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ce4:	d103      	bne.n	8003cee <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e0aa      	b.n	8003e48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003cf2:	897b      	ldrh	r3, [r7, #10]
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d00:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d04:	6a3a      	ldr	r2, [r7, #32]
 8003d06:	4952      	ldr	r1, [pc, #328]	; (8003e50 <I2C_RequestMemoryRead+0x1cc>)
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	f000 f8fa 	bl	8003f02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d001      	beq.n	8003d18 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e097      	b.n	8003e48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d18:	2300      	movs	r3, #0
 8003d1a:	617b      	str	r3, [r7, #20]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	617b      	str	r3, [r7, #20]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	617b      	str	r3, [r7, #20]
 8003d2c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d30:	6a39      	ldr	r1, [r7, #32]
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	f000 f964 	bl	8004000 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00d      	beq.n	8003d5a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d42:	2b04      	cmp	r3, #4
 8003d44:	d107      	bne.n	8003d56 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d54:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e076      	b.n	8003e48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d5a:	88fb      	ldrh	r3, [r7, #6]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d105      	bne.n	8003d6c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d60:	893b      	ldrh	r3, [r7, #8]
 8003d62:	b2da      	uxtb	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	611a      	str	r2, [r3, #16]
 8003d6a:	e021      	b.n	8003db0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d6c:	893b      	ldrh	r3, [r7, #8]
 8003d6e:	0a1b      	lsrs	r3, r3, #8
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	b2da      	uxtb	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d7c:	6a39      	ldr	r1, [r7, #32]
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f000 f93e 	bl	8004000 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00d      	beq.n	8003da6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	2b04      	cmp	r3, #4
 8003d90:	d107      	bne.n	8003da2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003da0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e050      	b.n	8003e48 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003da6:	893b      	ldrh	r3, [r7, #8]
 8003da8:	b2da      	uxtb	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003db2:	6a39      	ldr	r1, [r7, #32]
 8003db4:	68f8      	ldr	r0, [r7, #12]
 8003db6:	f000 f923 	bl	8004000 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00d      	beq.n	8003ddc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc4:	2b04      	cmp	r3, #4
 8003dc6:	d107      	bne.n	8003dd8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dd6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e035      	b.n	8003e48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dea:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dee:	9300      	str	r3, [sp, #0]
 8003df0:	6a3b      	ldr	r3, [r7, #32]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	f000 f82b 	bl	8003e54 <I2C_WaitOnFlagUntilTimeout>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00d      	beq.n	8003e20 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e12:	d103      	bne.n	8003e1c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e1a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e013      	b.n	8003e48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003e20:	897b      	ldrh	r3, [r7, #10]
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	f043 0301 	orr.w	r3, r3, #1
 8003e28:	b2da      	uxtb	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e32:	6a3a      	ldr	r2, [r7, #32]
 8003e34:	4906      	ldr	r1, [pc, #24]	; (8003e50 <I2C_RequestMemoryRead+0x1cc>)
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f000 f863 	bl	8003f02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e000      	b.n	8003e48 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3718      	adds	r7, #24
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	00010002 	.word	0x00010002

08003e54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	603b      	str	r3, [r7, #0]
 8003e60:	4613      	mov	r3, r2
 8003e62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e64:	e025      	b.n	8003eb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e6c:	d021      	beq.n	8003eb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e6e:	f7fe fe99 	bl	8002ba4 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	683a      	ldr	r2, [r7, #0]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d302      	bcc.n	8003e84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d116      	bne.n	8003eb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2220      	movs	r2, #32
 8003e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	f043 0220 	orr.w	r2, r3, #32
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e023      	b.n	8003efa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	0c1b      	lsrs	r3, r3, #16
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d10d      	bne.n	8003ed8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	43da      	mvns	r2, r3
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	bf0c      	ite	eq
 8003ece:	2301      	moveq	r3, #1
 8003ed0:	2300      	movne	r3, #0
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	e00c      	b.n	8003ef2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	43da      	mvns	r2, r3
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	bf0c      	ite	eq
 8003eea:	2301      	moveq	r3, #1
 8003eec:	2300      	movne	r3, #0
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	79fb      	ldrb	r3, [r7, #7]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d0b6      	beq.n	8003e66 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b084      	sub	sp, #16
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	60f8      	str	r0, [r7, #12]
 8003f0a:	60b9      	str	r1, [r7, #8]
 8003f0c:	607a      	str	r2, [r7, #4]
 8003f0e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f10:	e051      	b.n	8003fb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f20:	d123      	bne.n	8003f6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f30:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f3a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2220      	movs	r2, #32
 8003f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f56:	f043 0204 	orr.w	r2, r3, #4
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e046      	b.n	8003ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f70:	d021      	beq.n	8003fb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f72:	f7fe fe17 	bl	8002ba4 <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d302      	bcc.n	8003f88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d116      	bne.n	8003fb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2220      	movs	r2, #32
 8003f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa2:	f043 0220 	orr.w	r2, r3, #32
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e020      	b.n	8003ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	0c1b      	lsrs	r3, r3, #16
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d10c      	bne.n	8003fda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	43da      	mvns	r2, r3
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	4013      	ands	r3, r2
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	bf14      	ite	ne
 8003fd2:	2301      	movne	r3, #1
 8003fd4:	2300      	moveq	r3, #0
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	e00b      	b.n	8003ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	43da      	mvns	r2, r3
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	bf14      	ite	ne
 8003fec:	2301      	movne	r3, #1
 8003fee:	2300      	moveq	r3, #0
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d18d      	bne.n	8003f12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800400c:	e02d      	b.n	800406a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f000 f8ce 	bl	80041b0 <I2C_IsAcknowledgeFailed>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e02d      	b.n	800407a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004024:	d021      	beq.n	800406a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004026:	f7fe fdbd 	bl	8002ba4 <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	68ba      	ldr	r2, [r7, #8]
 8004032:	429a      	cmp	r2, r3
 8004034:	d302      	bcc.n	800403c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d116      	bne.n	800406a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2220      	movs	r2, #32
 8004046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004056:	f043 0220 	orr.w	r2, r3, #32
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e007      	b.n	800407a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	695b      	ldr	r3, [r3, #20]
 8004070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004074:	2b80      	cmp	r3, #128	; 0x80
 8004076:	d1ca      	bne.n	800400e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3710      	adds	r7, #16
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}

08004082 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004082:	b580      	push	{r7, lr}
 8004084:	b084      	sub	sp, #16
 8004086:	af00      	add	r7, sp, #0
 8004088:	60f8      	str	r0, [r7, #12]
 800408a:	60b9      	str	r1, [r7, #8]
 800408c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800408e:	e02d      	b.n	80040ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f000 f88d 	bl	80041b0 <I2C_IsAcknowledgeFailed>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d001      	beq.n	80040a0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e02d      	b.n	80040fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a6:	d021      	beq.n	80040ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040a8:	f7fe fd7c 	bl	8002ba4 <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	68ba      	ldr	r2, [r7, #8]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d302      	bcc.n	80040be <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d116      	bne.n	80040ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2220      	movs	r2, #32
 80040c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d8:	f043 0220 	orr.w	r2, r3, #32
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e007      	b.n	80040fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	f003 0304 	and.w	r3, r3, #4
 80040f6:	2b04      	cmp	r3, #4
 80040f8:	d1ca      	bne.n	8004090 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3710      	adds	r7, #16
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004110:	e042      	b.n	8004198 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	f003 0310 	and.w	r3, r3, #16
 800411c:	2b10      	cmp	r3, #16
 800411e:	d119      	bne.n	8004154 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f06f 0210 	mvn.w	r2, #16
 8004128:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2220      	movs	r2, #32
 8004134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e029      	b.n	80041a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004154:	f7fe fd26 	bl	8002ba4 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	68ba      	ldr	r2, [r7, #8]
 8004160:	429a      	cmp	r2, r3
 8004162:	d302      	bcc.n	800416a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d116      	bne.n	8004198 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2220      	movs	r2, #32
 8004174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004184:	f043 0220 	orr.w	r2, r3, #32
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e007      	b.n	80041a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a2:	2b40      	cmp	r3, #64	; 0x40
 80041a4:	d1b5      	bne.n	8004112 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041c6:	d11b      	bne.n	8004200 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041d0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2220      	movs	r2, #32
 80041dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ec:	f043 0204 	orr.w	r2, r3, #4
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e000      	b.n	8004202 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr

0800420e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800420e:	b480      	push	{r7}
 8004210:	b083      	sub	sp, #12
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
 8004216:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b20      	cmp	r3, #32
 8004222:	d129      	bne.n	8004278 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2224      	movs	r2, #36	; 0x24
 8004228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f022 0201 	bic.w	r2, r2, #1
 800423a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f022 0210 	bic.w	r2, r2, #16
 800424a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	430a      	orrs	r2, r1
 800425a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f042 0201 	orr.w	r2, r2, #1
 800426a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2220      	movs	r2, #32
 8004270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004274:	2300      	movs	r3, #0
 8004276:	e000      	b.n	800427a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004278:	2302      	movs	r3, #2
  }
}
 800427a:	4618      	mov	r0, r3
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr

08004286 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004286:	b480      	push	{r7}
 8004288:	b085      	sub	sp, #20
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
 800428e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004290:	2300      	movs	r3, #0
 8004292:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2b20      	cmp	r3, #32
 800429e:	d12a      	bne.n	80042f6 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2224      	movs	r2, #36	; 0x24
 80042a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f022 0201 	bic.w	r2, r2, #1
 80042b6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042be:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80042c0:	89fb      	ldrh	r3, [r7, #14]
 80042c2:	f023 030f 	bic.w	r3, r3, #15
 80042c6:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	89fb      	ldrh	r3, [r7, #14]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	89fa      	ldrh	r2, [r7, #14]
 80042d8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f042 0201 	orr.w	r2, r2, #1
 80042e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2220      	movs	r2, #32
 80042ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80042f2:	2300      	movs	r3, #0
 80042f4:	e000      	b.n	80042f8 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80042f6:	2302      	movs	r3, #2
  }
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3714      	adds	r7, #20
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800430a:	2300      	movs	r3, #0
 800430c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800430e:	2300      	movs	r3, #0
 8004310:	603b      	str	r3, [r7, #0]
 8004312:	4b20      	ldr	r3, [pc, #128]	; (8004394 <HAL_PWREx_EnableOverDrive+0x90>)
 8004314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004316:	4a1f      	ldr	r2, [pc, #124]	; (8004394 <HAL_PWREx_EnableOverDrive+0x90>)
 8004318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800431c:	6413      	str	r3, [r2, #64]	; 0x40
 800431e:	4b1d      	ldr	r3, [pc, #116]	; (8004394 <HAL_PWREx_EnableOverDrive+0x90>)
 8004320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004326:	603b      	str	r3, [r7, #0]
 8004328:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800432a:	4b1b      	ldr	r3, [pc, #108]	; (8004398 <HAL_PWREx_EnableOverDrive+0x94>)
 800432c:	2201      	movs	r2, #1
 800432e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004330:	f7fe fc38 	bl	8002ba4 <HAL_GetTick>
 8004334:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004336:	e009      	b.n	800434c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004338:	f7fe fc34 	bl	8002ba4 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004346:	d901      	bls.n	800434c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e01f      	b.n	800438c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800434c:	4b13      	ldr	r3, [pc, #76]	; (800439c <HAL_PWREx_EnableOverDrive+0x98>)
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004358:	d1ee      	bne.n	8004338 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800435a:	4b11      	ldr	r3, [pc, #68]	; (80043a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800435c:	2201      	movs	r2, #1
 800435e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004360:	f7fe fc20 	bl	8002ba4 <HAL_GetTick>
 8004364:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004366:	e009      	b.n	800437c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004368:	f7fe fc1c 	bl	8002ba4 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004376:	d901      	bls.n	800437c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e007      	b.n	800438c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800437c:	4b07      	ldr	r3, [pc, #28]	; (800439c <HAL_PWREx_EnableOverDrive+0x98>)
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004384:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004388:	d1ee      	bne.n	8004368 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3708      	adds	r7, #8
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	40023800 	.word	0x40023800
 8004398:	420e0040 	.word	0x420e0040
 800439c:	40007000 	.word	0x40007000
 80043a0:	420e0044 	.word	0x420e0044

080043a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e267      	b.n	8004886 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d075      	beq.n	80044ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043c2:	4b88      	ldr	r3, [pc, #544]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f003 030c 	and.w	r3, r3, #12
 80043ca:	2b04      	cmp	r3, #4
 80043cc:	d00c      	beq.n	80043e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043ce:	4b85      	ldr	r3, [pc, #532]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043d6:	2b08      	cmp	r3, #8
 80043d8:	d112      	bne.n	8004400 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043da:	4b82      	ldr	r3, [pc, #520]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043e6:	d10b      	bne.n	8004400 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043e8:	4b7e      	ldr	r3, [pc, #504]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d05b      	beq.n	80044ac <HAL_RCC_OscConfig+0x108>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d157      	bne.n	80044ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e242      	b.n	8004886 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004408:	d106      	bne.n	8004418 <HAL_RCC_OscConfig+0x74>
 800440a:	4b76      	ldr	r3, [pc, #472]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a75      	ldr	r2, [pc, #468]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 8004410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004414:	6013      	str	r3, [r2, #0]
 8004416:	e01d      	b.n	8004454 <HAL_RCC_OscConfig+0xb0>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004420:	d10c      	bne.n	800443c <HAL_RCC_OscConfig+0x98>
 8004422:	4b70      	ldr	r3, [pc, #448]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a6f      	ldr	r2, [pc, #444]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 8004428:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800442c:	6013      	str	r3, [r2, #0]
 800442e:	4b6d      	ldr	r3, [pc, #436]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a6c      	ldr	r2, [pc, #432]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 8004434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004438:	6013      	str	r3, [r2, #0]
 800443a:	e00b      	b.n	8004454 <HAL_RCC_OscConfig+0xb0>
 800443c:	4b69      	ldr	r3, [pc, #420]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a68      	ldr	r2, [pc, #416]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 8004442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004446:	6013      	str	r3, [r2, #0]
 8004448:	4b66      	ldr	r3, [pc, #408]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a65      	ldr	r2, [pc, #404]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 800444e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004452:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d013      	beq.n	8004484 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800445c:	f7fe fba2 	bl	8002ba4 <HAL_GetTick>
 8004460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004462:	e008      	b.n	8004476 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004464:	f7fe fb9e 	bl	8002ba4 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b64      	cmp	r3, #100	; 0x64
 8004470:	d901      	bls.n	8004476 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e207      	b.n	8004886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004476:	4b5b      	ldr	r3, [pc, #364]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d0f0      	beq.n	8004464 <HAL_RCC_OscConfig+0xc0>
 8004482:	e014      	b.n	80044ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004484:	f7fe fb8e 	bl	8002ba4 <HAL_GetTick>
 8004488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800448a:	e008      	b.n	800449e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800448c:	f7fe fb8a 	bl	8002ba4 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b64      	cmp	r3, #100	; 0x64
 8004498:	d901      	bls.n	800449e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e1f3      	b.n	8004886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800449e:	4b51      	ldr	r3, [pc, #324]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1f0      	bne.n	800448c <HAL_RCC_OscConfig+0xe8>
 80044aa:	e000      	b.n	80044ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d063      	beq.n	8004582 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044ba:	4b4a      	ldr	r3, [pc, #296]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f003 030c 	and.w	r3, r3, #12
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00b      	beq.n	80044de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044c6:	4b47      	ldr	r3, [pc, #284]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044ce:	2b08      	cmp	r3, #8
 80044d0:	d11c      	bne.n	800450c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044d2:	4b44      	ldr	r3, [pc, #272]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d116      	bne.n	800450c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044de:	4b41      	ldr	r3, [pc, #260]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d005      	beq.n	80044f6 <HAL_RCC_OscConfig+0x152>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d001      	beq.n	80044f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e1c7      	b.n	8004886 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044f6:	4b3b      	ldr	r3, [pc, #236]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	00db      	lsls	r3, r3, #3
 8004504:	4937      	ldr	r1, [pc, #220]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 8004506:	4313      	orrs	r3, r2
 8004508:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800450a:	e03a      	b.n	8004582 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d020      	beq.n	8004556 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004514:	4b34      	ldr	r3, [pc, #208]	; (80045e8 <HAL_RCC_OscConfig+0x244>)
 8004516:	2201      	movs	r2, #1
 8004518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800451a:	f7fe fb43 	bl	8002ba4 <HAL_GetTick>
 800451e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004520:	e008      	b.n	8004534 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004522:	f7fe fb3f 	bl	8002ba4 <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	2b02      	cmp	r3, #2
 800452e:	d901      	bls.n	8004534 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e1a8      	b.n	8004886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004534:	4b2b      	ldr	r3, [pc, #172]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d0f0      	beq.n	8004522 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004540:	4b28      	ldr	r3, [pc, #160]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	00db      	lsls	r3, r3, #3
 800454e:	4925      	ldr	r1, [pc, #148]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 8004550:	4313      	orrs	r3, r2
 8004552:	600b      	str	r3, [r1, #0]
 8004554:	e015      	b.n	8004582 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004556:	4b24      	ldr	r3, [pc, #144]	; (80045e8 <HAL_RCC_OscConfig+0x244>)
 8004558:	2200      	movs	r2, #0
 800455a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800455c:	f7fe fb22 	bl	8002ba4 <HAL_GetTick>
 8004560:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004562:	e008      	b.n	8004576 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004564:	f7fe fb1e 	bl	8002ba4 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e187      	b.n	8004886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004576:	4b1b      	ldr	r3, [pc, #108]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1f0      	bne.n	8004564 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0308 	and.w	r3, r3, #8
 800458a:	2b00      	cmp	r3, #0
 800458c:	d036      	beq.n	80045fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d016      	beq.n	80045c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004596:	4b15      	ldr	r3, [pc, #84]	; (80045ec <HAL_RCC_OscConfig+0x248>)
 8004598:	2201      	movs	r2, #1
 800459a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800459c:	f7fe fb02 	bl	8002ba4 <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045a2:	e008      	b.n	80045b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045a4:	f7fe fafe 	bl	8002ba4 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e167      	b.n	8004886 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045b6:	4b0b      	ldr	r3, [pc, #44]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 80045b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d0f0      	beq.n	80045a4 <HAL_RCC_OscConfig+0x200>
 80045c2:	e01b      	b.n	80045fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045c4:	4b09      	ldr	r3, [pc, #36]	; (80045ec <HAL_RCC_OscConfig+0x248>)
 80045c6:	2200      	movs	r2, #0
 80045c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045ca:	f7fe faeb 	bl	8002ba4 <HAL_GetTick>
 80045ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045d0:	e00e      	b.n	80045f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045d2:	f7fe fae7 	bl	8002ba4 <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d907      	bls.n	80045f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	e150      	b.n	8004886 <HAL_RCC_OscConfig+0x4e2>
 80045e4:	40023800 	.word	0x40023800
 80045e8:	42470000 	.word	0x42470000
 80045ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045f0:	4b88      	ldr	r3, [pc, #544]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 80045f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045f4:	f003 0302 	and.w	r3, r3, #2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1ea      	bne.n	80045d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0304 	and.w	r3, r3, #4
 8004604:	2b00      	cmp	r3, #0
 8004606:	f000 8097 	beq.w	8004738 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800460a:	2300      	movs	r3, #0
 800460c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800460e:	4b81      	ldr	r3, [pc, #516]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 8004610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10f      	bne.n	800463a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800461a:	2300      	movs	r3, #0
 800461c:	60bb      	str	r3, [r7, #8]
 800461e:	4b7d      	ldr	r3, [pc, #500]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 8004620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004622:	4a7c      	ldr	r2, [pc, #496]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 8004624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004628:	6413      	str	r3, [r2, #64]	; 0x40
 800462a:	4b7a      	ldr	r3, [pc, #488]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004632:	60bb      	str	r3, [r7, #8]
 8004634:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004636:	2301      	movs	r3, #1
 8004638:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800463a:	4b77      	ldr	r3, [pc, #476]	; (8004818 <HAL_RCC_OscConfig+0x474>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004642:	2b00      	cmp	r3, #0
 8004644:	d118      	bne.n	8004678 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004646:	4b74      	ldr	r3, [pc, #464]	; (8004818 <HAL_RCC_OscConfig+0x474>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a73      	ldr	r2, [pc, #460]	; (8004818 <HAL_RCC_OscConfig+0x474>)
 800464c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004650:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004652:	f7fe faa7 	bl	8002ba4 <HAL_GetTick>
 8004656:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004658:	e008      	b.n	800466c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800465a:	f7fe faa3 	bl	8002ba4 <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	2b02      	cmp	r3, #2
 8004666:	d901      	bls.n	800466c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e10c      	b.n	8004886 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800466c:	4b6a      	ldr	r3, [pc, #424]	; (8004818 <HAL_RCC_OscConfig+0x474>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004674:	2b00      	cmp	r3, #0
 8004676:	d0f0      	beq.n	800465a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d106      	bne.n	800468e <HAL_RCC_OscConfig+0x2ea>
 8004680:	4b64      	ldr	r3, [pc, #400]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 8004682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004684:	4a63      	ldr	r2, [pc, #396]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 8004686:	f043 0301 	orr.w	r3, r3, #1
 800468a:	6713      	str	r3, [r2, #112]	; 0x70
 800468c:	e01c      	b.n	80046c8 <HAL_RCC_OscConfig+0x324>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	2b05      	cmp	r3, #5
 8004694:	d10c      	bne.n	80046b0 <HAL_RCC_OscConfig+0x30c>
 8004696:	4b5f      	ldr	r3, [pc, #380]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 8004698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469a:	4a5e      	ldr	r2, [pc, #376]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 800469c:	f043 0304 	orr.w	r3, r3, #4
 80046a0:	6713      	str	r3, [r2, #112]	; 0x70
 80046a2:	4b5c      	ldr	r3, [pc, #368]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 80046a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a6:	4a5b      	ldr	r2, [pc, #364]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 80046a8:	f043 0301 	orr.w	r3, r3, #1
 80046ac:	6713      	str	r3, [r2, #112]	; 0x70
 80046ae:	e00b      	b.n	80046c8 <HAL_RCC_OscConfig+0x324>
 80046b0:	4b58      	ldr	r3, [pc, #352]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 80046b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b4:	4a57      	ldr	r2, [pc, #348]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 80046b6:	f023 0301 	bic.w	r3, r3, #1
 80046ba:	6713      	str	r3, [r2, #112]	; 0x70
 80046bc:	4b55      	ldr	r3, [pc, #340]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 80046be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c0:	4a54      	ldr	r2, [pc, #336]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 80046c2:	f023 0304 	bic.w	r3, r3, #4
 80046c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d015      	beq.n	80046fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046d0:	f7fe fa68 	bl	8002ba4 <HAL_GetTick>
 80046d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046d6:	e00a      	b.n	80046ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046d8:	f7fe fa64 	bl	8002ba4 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d901      	bls.n	80046ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e0cb      	b.n	8004886 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ee:	4b49      	ldr	r3, [pc, #292]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 80046f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d0ee      	beq.n	80046d8 <HAL_RCC_OscConfig+0x334>
 80046fa:	e014      	b.n	8004726 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046fc:	f7fe fa52 	bl	8002ba4 <HAL_GetTick>
 8004700:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004702:	e00a      	b.n	800471a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004704:	f7fe fa4e 	bl	8002ba4 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004712:	4293      	cmp	r3, r2
 8004714:	d901      	bls.n	800471a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e0b5      	b.n	8004886 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800471a:	4b3e      	ldr	r3, [pc, #248]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 800471c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800471e:	f003 0302 	and.w	r3, r3, #2
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1ee      	bne.n	8004704 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004726:	7dfb      	ldrb	r3, [r7, #23]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d105      	bne.n	8004738 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800472c:	4b39      	ldr	r3, [pc, #228]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 800472e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004730:	4a38      	ldr	r2, [pc, #224]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 8004732:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004736:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 80a1 	beq.w	8004884 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004742:	4b34      	ldr	r3, [pc, #208]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f003 030c 	and.w	r3, r3, #12
 800474a:	2b08      	cmp	r3, #8
 800474c:	d05c      	beq.n	8004808 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	2b02      	cmp	r3, #2
 8004754:	d141      	bne.n	80047da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004756:	4b31      	ldr	r3, [pc, #196]	; (800481c <HAL_RCC_OscConfig+0x478>)
 8004758:	2200      	movs	r2, #0
 800475a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800475c:	f7fe fa22 	bl	8002ba4 <HAL_GetTick>
 8004760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004762:	e008      	b.n	8004776 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004764:	f7fe fa1e 	bl	8002ba4 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b02      	cmp	r3, #2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e087      	b.n	8004886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004776:	4b27      	ldr	r3, [pc, #156]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1f0      	bne.n	8004764 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	69da      	ldr	r2, [r3, #28]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a1b      	ldr	r3, [r3, #32]
 800478a:	431a      	orrs	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004790:	019b      	lsls	r3, r3, #6
 8004792:	431a      	orrs	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004798:	085b      	lsrs	r3, r3, #1
 800479a:	3b01      	subs	r3, #1
 800479c:	041b      	lsls	r3, r3, #16
 800479e:	431a      	orrs	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a4:	061b      	lsls	r3, r3, #24
 80047a6:	491b      	ldr	r1, [pc, #108]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047ac:	4b1b      	ldr	r3, [pc, #108]	; (800481c <HAL_RCC_OscConfig+0x478>)
 80047ae:	2201      	movs	r2, #1
 80047b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b2:	f7fe f9f7 	bl	8002ba4 <HAL_GetTick>
 80047b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047b8:	e008      	b.n	80047cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047ba:	f7fe f9f3 	bl	8002ba4 <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d901      	bls.n	80047cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e05c      	b.n	8004886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047cc:	4b11      	ldr	r3, [pc, #68]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d0f0      	beq.n	80047ba <HAL_RCC_OscConfig+0x416>
 80047d8:	e054      	b.n	8004884 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047da:	4b10      	ldr	r3, [pc, #64]	; (800481c <HAL_RCC_OscConfig+0x478>)
 80047dc:	2200      	movs	r2, #0
 80047de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e0:	f7fe f9e0 	bl	8002ba4 <HAL_GetTick>
 80047e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047e6:	e008      	b.n	80047fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047e8:	f7fe f9dc 	bl	8002ba4 <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d901      	bls.n	80047fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e045      	b.n	8004886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047fa:	4b06      	ldr	r3, [pc, #24]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1f0      	bne.n	80047e8 <HAL_RCC_OscConfig+0x444>
 8004806:	e03d      	b.n	8004884 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d107      	bne.n	8004820 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e038      	b.n	8004886 <HAL_RCC_OscConfig+0x4e2>
 8004814:	40023800 	.word	0x40023800
 8004818:	40007000 	.word	0x40007000
 800481c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004820:	4b1b      	ldr	r3, [pc, #108]	; (8004890 <HAL_RCC_OscConfig+0x4ec>)
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	2b01      	cmp	r3, #1
 800482c:	d028      	beq.n	8004880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004838:	429a      	cmp	r2, r3
 800483a:	d121      	bne.n	8004880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004846:	429a      	cmp	r2, r3
 8004848:	d11a      	bne.n	8004880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004850:	4013      	ands	r3, r2
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004856:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004858:	4293      	cmp	r3, r2
 800485a:	d111      	bne.n	8004880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004866:	085b      	lsrs	r3, r3, #1
 8004868:	3b01      	subs	r3, #1
 800486a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800486c:	429a      	cmp	r2, r3
 800486e:	d107      	bne.n	8004880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800487c:	429a      	cmp	r2, r3
 800487e:	d001      	beq.n	8004884 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e000      	b.n	8004886 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3718      	adds	r7, #24
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	40023800 	.word	0x40023800

08004894 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d101      	bne.n	80048a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e0cc      	b.n	8004a42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048a8:	4b68      	ldr	r3, [pc, #416]	; (8004a4c <HAL_RCC_ClockConfig+0x1b8>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 030f 	and.w	r3, r3, #15
 80048b0:	683a      	ldr	r2, [r7, #0]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d90c      	bls.n	80048d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048b6:	4b65      	ldr	r3, [pc, #404]	; (8004a4c <HAL_RCC_ClockConfig+0x1b8>)
 80048b8:	683a      	ldr	r2, [r7, #0]
 80048ba:	b2d2      	uxtb	r2, r2
 80048bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048be:	4b63      	ldr	r3, [pc, #396]	; (8004a4c <HAL_RCC_ClockConfig+0x1b8>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 030f 	and.w	r3, r3, #15
 80048c6:	683a      	ldr	r2, [r7, #0]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d001      	beq.n	80048d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e0b8      	b.n	8004a42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0302 	and.w	r3, r3, #2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d020      	beq.n	800491e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0304 	and.w	r3, r3, #4
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d005      	beq.n	80048f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048e8:	4b59      	ldr	r3, [pc, #356]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	4a58      	ldr	r2, [pc, #352]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 80048ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0308 	and.w	r3, r3, #8
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d005      	beq.n	800490c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004900:	4b53      	ldr	r3, [pc, #332]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	4a52      	ldr	r2, [pc, #328]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 8004906:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800490a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800490c:	4b50      	ldr	r3, [pc, #320]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	494d      	ldr	r1, [pc, #308]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 800491a:	4313      	orrs	r3, r2
 800491c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	2b00      	cmp	r3, #0
 8004928:	d044      	beq.n	80049b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d107      	bne.n	8004942 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004932:	4b47      	ldr	r3, [pc, #284]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d119      	bne.n	8004972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e07f      	b.n	8004a42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	2b02      	cmp	r3, #2
 8004948:	d003      	beq.n	8004952 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800494e:	2b03      	cmp	r3, #3
 8004950:	d107      	bne.n	8004962 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004952:	4b3f      	ldr	r3, [pc, #252]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d109      	bne.n	8004972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e06f      	b.n	8004a42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004962:	4b3b      	ldr	r3, [pc, #236]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e067      	b.n	8004a42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004972:	4b37      	ldr	r3, [pc, #220]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f023 0203 	bic.w	r2, r3, #3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	4934      	ldr	r1, [pc, #208]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 8004980:	4313      	orrs	r3, r2
 8004982:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004984:	f7fe f90e 	bl	8002ba4 <HAL_GetTick>
 8004988:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800498a:	e00a      	b.n	80049a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800498c:	f7fe f90a 	bl	8002ba4 <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	f241 3288 	movw	r2, #5000	; 0x1388
 800499a:	4293      	cmp	r3, r2
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e04f      	b.n	8004a42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049a2:	4b2b      	ldr	r3, [pc, #172]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f003 020c 	and.w	r2, r3, #12
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d1eb      	bne.n	800498c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049b4:	4b25      	ldr	r3, [pc, #148]	; (8004a4c <HAL_RCC_ClockConfig+0x1b8>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 030f 	and.w	r3, r3, #15
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d20c      	bcs.n	80049dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049c2:	4b22      	ldr	r3, [pc, #136]	; (8004a4c <HAL_RCC_ClockConfig+0x1b8>)
 80049c4:	683a      	ldr	r2, [r7, #0]
 80049c6:	b2d2      	uxtb	r2, r2
 80049c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ca:	4b20      	ldr	r3, [pc, #128]	; (8004a4c <HAL_RCC_ClockConfig+0x1b8>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 030f 	and.w	r3, r3, #15
 80049d2:	683a      	ldr	r2, [r7, #0]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d001      	beq.n	80049dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e032      	b.n	8004a42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0304 	and.w	r3, r3, #4
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d008      	beq.n	80049fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049e8:	4b19      	ldr	r3, [pc, #100]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	4916      	ldr	r1, [pc, #88]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0308 	and.w	r3, r3, #8
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d009      	beq.n	8004a1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a06:	4b12      	ldr	r3, [pc, #72]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	00db      	lsls	r3, r3, #3
 8004a14:	490e      	ldr	r1, [pc, #56]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a1a:	f000 f821 	bl	8004a60 <HAL_RCC_GetSysClockFreq>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	4b0b      	ldr	r3, [pc, #44]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	091b      	lsrs	r3, r3, #4
 8004a26:	f003 030f 	and.w	r3, r3, #15
 8004a2a:	490a      	ldr	r1, [pc, #40]	; (8004a54 <HAL_RCC_ClockConfig+0x1c0>)
 8004a2c:	5ccb      	ldrb	r3, [r1, r3]
 8004a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a32:	4a09      	ldr	r2, [pc, #36]	; (8004a58 <HAL_RCC_ClockConfig+0x1c4>)
 8004a34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a36:	4b09      	ldr	r3, [pc, #36]	; (8004a5c <HAL_RCC_ClockConfig+0x1c8>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7fe f86e 	bl	8002b1c <HAL_InitTick>

  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3710      	adds	r7, #16
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	40023c00 	.word	0x40023c00
 8004a50:	40023800 	.word	0x40023800
 8004a54:	0800c848 	.word	0x0800c848
 8004a58:	20000000 	.word	0x20000000
 8004a5c:	20000004 	.word	0x20000004

08004a60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a64:	b090      	sub	sp, #64	; 0x40
 8004a66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	637b      	str	r3, [r7, #52]	; 0x34
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a70:	2300      	movs	r3, #0
 8004a72:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004a74:	2300      	movs	r3, #0
 8004a76:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a78:	4b59      	ldr	r3, [pc, #356]	; (8004be0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f003 030c 	and.w	r3, r3, #12
 8004a80:	2b08      	cmp	r3, #8
 8004a82:	d00d      	beq.n	8004aa0 <HAL_RCC_GetSysClockFreq+0x40>
 8004a84:	2b08      	cmp	r3, #8
 8004a86:	f200 80a1 	bhi.w	8004bcc <HAL_RCC_GetSysClockFreq+0x16c>
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d002      	beq.n	8004a94 <HAL_RCC_GetSysClockFreq+0x34>
 8004a8e:	2b04      	cmp	r3, #4
 8004a90:	d003      	beq.n	8004a9a <HAL_RCC_GetSysClockFreq+0x3a>
 8004a92:	e09b      	b.n	8004bcc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a94:	4b53      	ldr	r3, [pc, #332]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004a96:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004a98:	e09b      	b.n	8004bd2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a9a:	4b53      	ldr	r3, [pc, #332]	; (8004be8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a9c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004a9e:	e098      	b.n	8004bd2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004aa0:	4b4f      	ldr	r3, [pc, #316]	; (8004be0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004aa8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004aaa:	4b4d      	ldr	r3, [pc, #308]	; (8004be0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d028      	beq.n	8004b08 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ab6:	4b4a      	ldr	r3, [pc, #296]	; (8004be0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	099b      	lsrs	r3, r3, #6
 8004abc:	2200      	movs	r2, #0
 8004abe:	623b      	str	r3, [r7, #32]
 8004ac0:	627a      	str	r2, [r7, #36]	; 0x24
 8004ac2:	6a3b      	ldr	r3, [r7, #32]
 8004ac4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004ac8:	2100      	movs	r1, #0
 8004aca:	4b47      	ldr	r3, [pc, #284]	; (8004be8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004acc:	fb03 f201 	mul.w	r2, r3, r1
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	fb00 f303 	mul.w	r3, r0, r3
 8004ad6:	4413      	add	r3, r2
 8004ad8:	4a43      	ldr	r2, [pc, #268]	; (8004be8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004ada:	fba0 1202 	umull	r1, r2, r0, r2
 8004ade:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ae0:	460a      	mov	r2, r1
 8004ae2:	62ba      	str	r2, [r7, #40]	; 0x28
 8004ae4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ae6:	4413      	add	r3, r2
 8004ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aec:	2200      	movs	r2, #0
 8004aee:	61bb      	str	r3, [r7, #24]
 8004af0:	61fa      	str	r2, [r7, #28]
 8004af2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004af6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004afa:	f7fc f8d5 	bl	8000ca8 <__aeabi_uldivmod>
 8004afe:	4602      	mov	r2, r0
 8004b00:	460b      	mov	r3, r1
 8004b02:	4613      	mov	r3, r2
 8004b04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b06:	e053      	b.n	8004bb0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b08:	4b35      	ldr	r3, [pc, #212]	; (8004be0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	099b      	lsrs	r3, r3, #6
 8004b0e:	2200      	movs	r2, #0
 8004b10:	613b      	str	r3, [r7, #16]
 8004b12:	617a      	str	r2, [r7, #20]
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004b1a:	f04f 0b00 	mov.w	fp, #0
 8004b1e:	4652      	mov	r2, sl
 8004b20:	465b      	mov	r3, fp
 8004b22:	f04f 0000 	mov.w	r0, #0
 8004b26:	f04f 0100 	mov.w	r1, #0
 8004b2a:	0159      	lsls	r1, r3, #5
 8004b2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b30:	0150      	lsls	r0, r2, #5
 8004b32:	4602      	mov	r2, r0
 8004b34:	460b      	mov	r3, r1
 8004b36:	ebb2 080a 	subs.w	r8, r2, sl
 8004b3a:	eb63 090b 	sbc.w	r9, r3, fp
 8004b3e:	f04f 0200 	mov.w	r2, #0
 8004b42:	f04f 0300 	mov.w	r3, #0
 8004b46:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004b4a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004b4e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004b52:	ebb2 0408 	subs.w	r4, r2, r8
 8004b56:	eb63 0509 	sbc.w	r5, r3, r9
 8004b5a:	f04f 0200 	mov.w	r2, #0
 8004b5e:	f04f 0300 	mov.w	r3, #0
 8004b62:	00eb      	lsls	r3, r5, #3
 8004b64:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b68:	00e2      	lsls	r2, r4, #3
 8004b6a:	4614      	mov	r4, r2
 8004b6c:	461d      	mov	r5, r3
 8004b6e:	eb14 030a 	adds.w	r3, r4, sl
 8004b72:	603b      	str	r3, [r7, #0]
 8004b74:	eb45 030b 	adc.w	r3, r5, fp
 8004b78:	607b      	str	r3, [r7, #4]
 8004b7a:	f04f 0200 	mov.w	r2, #0
 8004b7e:	f04f 0300 	mov.w	r3, #0
 8004b82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b86:	4629      	mov	r1, r5
 8004b88:	028b      	lsls	r3, r1, #10
 8004b8a:	4621      	mov	r1, r4
 8004b8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b90:	4621      	mov	r1, r4
 8004b92:	028a      	lsls	r2, r1, #10
 8004b94:	4610      	mov	r0, r2
 8004b96:	4619      	mov	r1, r3
 8004b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	60bb      	str	r3, [r7, #8]
 8004b9e:	60fa      	str	r2, [r7, #12]
 8004ba0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ba4:	f7fc f880 	bl	8000ca8 <__aeabi_uldivmod>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	460b      	mov	r3, r1
 8004bac:	4613      	mov	r3, r2
 8004bae:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004bb0:	4b0b      	ldr	r3, [pc, #44]	; (8004be0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	0c1b      	lsrs	r3, r3, #16
 8004bb6:	f003 0303 	and.w	r3, r3, #3
 8004bba:	3301      	adds	r3, #1
 8004bbc:	005b      	lsls	r3, r3, #1
 8004bbe:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004bc0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004bca:	e002      	b.n	8004bd2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bcc:	4b05      	ldr	r3, [pc, #20]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004bce:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004bd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3740      	adds	r7, #64	; 0x40
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bde:	bf00      	nop
 8004be0:	40023800 	.word	0x40023800
 8004be4:	00f42400 	.word	0x00f42400
 8004be8:	017d7840 	.word	0x017d7840

08004bec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bec:	b480      	push	{r7}
 8004bee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bf0:	4b03      	ldr	r3, [pc, #12]	; (8004c00 <HAL_RCC_GetHCLKFreq+0x14>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	20000000 	.word	0x20000000

08004c04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c08:	f7ff fff0 	bl	8004bec <HAL_RCC_GetHCLKFreq>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	4b05      	ldr	r3, [pc, #20]	; (8004c24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	0a9b      	lsrs	r3, r3, #10
 8004c14:	f003 0307 	and.w	r3, r3, #7
 8004c18:	4903      	ldr	r1, [pc, #12]	; (8004c28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c1a:	5ccb      	ldrb	r3, [r1, r3]
 8004c1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	40023800 	.word	0x40023800
 8004c28:	0800c858 	.word	0x0800c858

08004c2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c30:	f7ff ffdc 	bl	8004bec <HAL_RCC_GetHCLKFreq>
 8004c34:	4602      	mov	r2, r0
 8004c36:	4b05      	ldr	r3, [pc, #20]	; (8004c4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	0b5b      	lsrs	r3, r3, #13
 8004c3c:	f003 0307 	and.w	r3, r3, #7
 8004c40:	4903      	ldr	r1, [pc, #12]	; (8004c50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c42:	5ccb      	ldrb	r3, [r1, r3]
 8004c44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	40023800 	.word	0x40023800
 8004c50:	0800c858 	.word	0x0800c858

08004c54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b086      	sub	sp, #24
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004c60:	2300      	movs	r3, #0
 8004c62:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0301 	and.w	r3, r3, #1
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d10b      	bne.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d105      	bne.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d075      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c88:	4b91      	ldr	r3, [pc, #580]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c8e:	f7fd ff89 	bl	8002ba4 <HAL_GetTick>
 8004c92:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c94:	e008      	b.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c96:	f7fd ff85 	bl	8002ba4 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d901      	bls.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e189      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ca8:	4b8a      	ldr	r3, [pc, #552]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d1f0      	bne.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0301 	and.w	r3, r3, #1
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d009      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	019a      	lsls	r2, r3, #6
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	071b      	lsls	r3, r3, #28
 8004ccc:	4981      	ldr	r1, [pc, #516]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d01f      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004ce0:	4b7c      	ldr	r3, [pc, #496]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ce2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ce6:	0f1b      	lsrs	r3, r3, #28
 8004ce8:	f003 0307 	and.w	r3, r3, #7
 8004cec:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	019a      	lsls	r2, r3, #6
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	061b      	lsls	r3, r3, #24
 8004cfa:	431a      	orrs	r2, r3
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	071b      	lsls	r3, r3, #28
 8004d00:	4974      	ldr	r1, [pc, #464]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004d08:	4b72      	ldr	r3, [pc, #456]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d0e:	f023 021f 	bic.w	r2, r3, #31
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	69db      	ldr	r3, [r3, #28]
 8004d16:	3b01      	subs	r3, #1
 8004d18:	496e      	ldr	r1, [pc, #440]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00d      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	019a      	lsls	r2, r3, #6
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	061b      	lsls	r3, r3, #24
 8004d38:	431a      	orrs	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	071b      	lsls	r3, r3, #28
 8004d40:	4964      	ldr	r1, [pc, #400]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004d48:	4b61      	ldr	r3, [pc, #388]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d4e:	f7fd ff29 	bl	8002ba4 <HAL_GetTick>
 8004d52:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d54:	e008      	b.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004d56:	f7fd ff25 	bl	8002ba4 <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d901      	bls.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e129      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d68:	4b5a      	ldr	r3, [pc, #360]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d0f0      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0304 	and.w	r3, r3, #4
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d105      	bne.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d079      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004d8c:	4b52      	ldr	r3, [pc, #328]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004d8e:	2200      	movs	r2, #0
 8004d90:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d92:	f7fd ff07 	bl	8002ba4 <HAL_GetTick>
 8004d96:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d98:	e008      	b.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004d9a:	f7fd ff03 	bl	8002ba4 <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d901      	bls.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e107      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004dac:	4b49      	ldr	r3, [pc, #292]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004db4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004db8:	d0ef      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0304 	and.w	r3, r3, #4
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d020      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004dc6:	4b43      	ldr	r3, [pc, #268]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dcc:	0f1b      	lsrs	r3, r3, #28
 8004dce:	f003 0307 	and.w	r3, r3, #7
 8004dd2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	019a      	lsls	r2, r3, #6
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	061b      	lsls	r3, r3, #24
 8004de0:	431a      	orrs	r2, r3
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	071b      	lsls	r3, r3, #28
 8004de6:	493b      	ldr	r1, [pc, #236]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004dee:	4b39      	ldr	r3, [pc, #228]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004df0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004df4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a1b      	ldr	r3, [r3, #32]
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	021b      	lsls	r3, r3, #8
 8004e00:	4934      	ldr	r1, [pc, #208]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0308 	and.w	r3, r3, #8
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d01e      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004e14:	4b2f      	ldr	r3, [pc, #188]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e1a:	0e1b      	lsrs	r3, r3, #24
 8004e1c:	f003 030f 	and.w	r3, r3, #15
 8004e20:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	019a      	lsls	r2, r3, #6
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	061b      	lsls	r3, r3, #24
 8004e2c:	431a      	orrs	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	699b      	ldr	r3, [r3, #24]
 8004e32:	071b      	lsls	r3, r3, #28
 8004e34:	4927      	ldr	r1, [pc, #156]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004e3c:	4b25      	ldr	r3, [pc, #148]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e42:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4a:	4922      	ldr	r1, [pc, #136]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004e52:	4b21      	ldr	r3, [pc, #132]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004e54:	2201      	movs	r2, #1
 8004e56:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e58:	f7fd fea4 	bl	8002ba4 <HAL_GetTick>
 8004e5c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e5e:	e008      	b.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004e60:	f7fd fea0 	bl	8002ba4 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d901      	bls.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e0a4      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e72:	4b18      	ldr	r3, [pc, #96]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e7e:	d1ef      	bne.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0320 	and.w	r3, r3, #32
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	f000 808b 	beq.w	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e8e:	2300      	movs	r3, #0
 8004e90:	60fb      	str	r3, [r7, #12]
 8004e92:	4b10      	ldr	r3, [pc, #64]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e96:	4a0f      	ldr	r2, [pc, #60]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e9e:	4b0d      	ldr	r3, [pc, #52]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ea6:	60fb      	str	r3, [r7, #12]
 8004ea8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004eaa:	4b0c      	ldr	r3, [pc, #48]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a0b      	ldr	r2, [pc, #44]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eb4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004eb6:	f7fd fe75 	bl	8002ba4 <HAL_GetTick>
 8004eba:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ebc:	e010      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004ebe:	f7fd fe71 	bl	8002ba4 <HAL_GetTick>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d909      	bls.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e075      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004ed0:	42470068 	.word	0x42470068
 8004ed4:	40023800 	.word	0x40023800
 8004ed8:	42470070 	.word	0x42470070
 8004edc:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ee0:	4b38      	ldr	r3, [pc, #224]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d0e8      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004eec:	4b36      	ldr	r3, [pc, #216]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ef4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d02f      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f04:	693a      	ldr	r2, [r7, #16]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d028      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f0a:	4b2f      	ldr	r3, [pc, #188]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f12:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f14:	4b2d      	ldr	r3, [pc, #180]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004f16:	2201      	movs	r2, #1
 8004f18:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f1a:	4b2c      	ldr	r3, [pc, #176]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004f20:	4a29      	ldr	r2, [pc, #164]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004f26:	4b28      	ldr	r3, [pc, #160]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d114      	bne.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004f32:	f7fd fe37 	bl	8002ba4 <HAL_GetTick>
 8004f36:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f38:	e00a      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f3a:	f7fd fe33 	bl	8002ba4 <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d901      	bls.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	e035      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f50:	4b1d      	ldr	r3, [pc, #116]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f54:	f003 0302 	and.w	r3, r3, #2
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d0ee      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f68:	d10d      	bne.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004f6a:	4b17      	ldr	r3, [pc, #92]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f76:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004f7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f7e:	4912      	ldr	r1, [pc, #72]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	608b      	str	r3, [r1, #8]
 8004f84:	e005      	b.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004f86:	4b10      	ldr	r3, [pc, #64]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	4a0f      	ldr	r2, [pc, #60]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f8c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004f90:	6093      	str	r3, [r2, #8]
 8004f92:	4b0d      	ldr	r3, [pc, #52]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f94:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f9e:	490a      	ldr	r1, [pc, #40]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0310 	and.w	r3, r3, #16
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d004      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004fb6:	4b06      	ldr	r3, [pc, #24]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004fb8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3718      	adds	r7, #24
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	40007000 	.word	0x40007000
 8004fc8:	40023800 	.word	0x40023800
 8004fcc:	42470e40 	.word	0x42470e40
 8004fd0:	424711e0 	.word	0x424711e0

08004fd4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d101      	bne.n	8004fea <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e066      	b.n	80050b8 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	7f5b      	ldrb	r3, [r3, #29]
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d105      	bne.n	8005000 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f7fd f958 	bl	80022b0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2202      	movs	r2, #2
 8005004:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	22ca      	movs	r2, #202	; 0xca
 800500c:	625a      	str	r2, [r3, #36]	; 0x24
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2253      	movs	r2, #83	; 0x53
 8005014:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f87a 	bl	8005110 <RTC_EnterInitMode>
 800501c:	4603      	mov	r3, r0
 800501e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005020:	7bfb      	ldrb	r3, [r7, #15]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d12c      	bne.n	8005080 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	6812      	ldr	r2, [r2, #0]
 8005030:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005034:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005038:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	6899      	ldr	r1, [r3, #8]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685a      	ldr	r2, [r3, #4]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	431a      	orrs	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	431a      	orrs	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	430a      	orrs	r2, r1
 8005056:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	68d2      	ldr	r2, [r2, #12]
 8005060:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	6919      	ldr	r1, [r3, #16]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	041a      	lsls	r2, r3, #16
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	430a      	orrs	r2, r1
 8005074:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 f881 	bl	800517e <RTC_ExitInitMode>
 800507c:	4603      	mov	r3, r0
 800507e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005080:	7bfb      	ldrb	r3, [r7, #15]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d113      	bne.n	80050ae <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005094:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	699a      	ldr	r2, [r3, #24]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	430a      	orrs	r2, r1
 80050a6:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	22ff      	movs	r2, #255	; 0xff
 80050b4:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80050b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3710      	adds	r7, #16
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050c8:	2300      	movs	r3, #0
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68da      	ldr	r2, [r3, #12]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80050da:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80050dc:	f7fd fd62 	bl	8002ba4 <HAL_GetTick>
 80050e0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80050e2:	e009      	b.n	80050f8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80050e4:	f7fd fd5e 	bl	8002ba4 <HAL_GetTick>
 80050e8:	4602      	mov	r2, r0
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050f2:	d901      	bls.n	80050f8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e007      	b.n	8005108 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	f003 0320 	and.w	r3, r3, #32
 8005102:	2b00      	cmp	r3, #0
 8005104:	d0ee      	beq.n	80050e4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005106:	2300      	movs	r3, #0
}
 8005108:	4618      	mov	r0, r3
 800510a:	3710      	adds	r7, #16
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005118:	2300      	movs	r3, #0
 800511a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800511c:	2300      	movs	r3, #0
 800511e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800512a:	2b00      	cmp	r3, #0
 800512c:	d122      	bne.n	8005174 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68da      	ldr	r2, [r3, #12]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800513c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800513e:	f7fd fd31 	bl	8002ba4 <HAL_GetTick>
 8005142:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005144:	e00c      	b.n	8005160 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005146:	f7fd fd2d 	bl	8002ba4 <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005154:	d904      	bls.n	8005160 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2204      	movs	r2, #4
 800515a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800516a:	2b00      	cmp	r3, #0
 800516c:	d102      	bne.n	8005174 <RTC_EnterInitMode+0x64>
 800516e:	7bfb      	ldrb	r3, [r7, #15]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d1e8      	bne.n	8005146 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005174:	7bfb      	ldrb	r3, [r7, #15]
}
 8005176:	4618      	mov	r0, r3
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800517e:	b580      	push	{r7, lr}
 8005180:	b084      	sub	sp, #16
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005186:	2300      	movs	r3, #0
 8005188:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68da      	ldr	r2, [r3, #12]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005198:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f003 0320 	and.w	r3, r3, #32
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d10a      	bne.n	80051be <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f7ff ff89 	bl	80050c0 <HAL_RTC_WaitForSynchro>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d004      	beq.n	80051be <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2204      	movs	r2, #4
 80051b8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80051be:	7bfb      	ldrb	r3, [r7, #15]
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3710      	adds	r7, #16
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d101      	bne.n	80051da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e041      	b.n	800525e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d106      	bne.n	80051f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f7fd fa66 	bl	80026c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2202      	movs	r2, #2
 80051f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	3304      	adds	r3, #4
 8005204:	4619      	mov	r1, r3
 8005206:	4610      	mov	r0, r2
 8005208:	f000 fb48 	bl	800589c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3708      	adds	r7, #8
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b082      	sub	sp, #8
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d101      	bne.n	8005278 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e041      	b.n	80052fc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800527e:	b2db      	uxtb	r3, r3
 8005280:	2b00      	cmp	r3, #0
 8005282:	d106      	bne.n	8005292 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 f839 	bl	8005304 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2202      	movs	r2, #2
 8005296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	3304      	adds	r3, #4
 80052a2:	4619      	mov	r1, r3
 80052a4:	4610      	mov	r0, r2
 80052a6:	f000 faf9 	bl	800589c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2201      	movs	r2, #1
 80052b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2201      	movs	r2, #1
 80052be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3708      	adds	r7, #8
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800530c:	bf00      	nop
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d109      	bne.n	800533c <HAL_TIM_PWM_Start+0x24>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800532e:	b2db      	uxtb	r3, r3
 8005330:	2b01      	cmp	r3, #1
 8005332:	bf14      	ite	ne
 8005334:	2301      	movne	r3, #1
 8005336:	2300      	moveq	r3, #0
 8005338:	b2db      	uxtb	r3, r3
 800533a:	e022      	b.n	8005382 <HAL_TIM_PWM_Start+0x6a>
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	2b04      	cmp	r3, #4
 8005340:	d109      	bne.n	8005356 <HAL_TIM_PWM_Start+0x3e>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005348:	b2db      	uxtb	r3, r3
 800534a:	2b01      	cmp	r3, #1
 800534c:	bf14      	ite	ne
 800534e:	2301      	movne	r3, #1
 8005350:	2300      	moveq	r3, #0
 8005352:	b2db      	uxtb	r3, r3
 8005354:	e015      	b.n	8005382 <HAL_TIM_PWM_Start+0x6a>
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	2b08      	cmp	r3, #8
 800535a:	d109      	bne.n	8005370 <HAL_TIM_PWM_Start+0x58>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b01      	cmp	r3, #1
 8005366:	bf14      	ite	ne
 8005368:	2301      	movne	r3, #1
 800536a:	2300      	moveq	r3, #0
 800536c:	b2db      	uxtb	r3, r3
 800536e:	e008      	b.n	8005382 <HAL_TIM_PWM_Start+0x6a>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005376:	b2db      	uxtb	r3, r3
 8005378:	2b01      	cmp	r3, #1
 800537a:	bf14      	ite	ne
 800537c:	2301      	movne	r3, #1
 800537e:	2300      	moveq	r3, #0
 8005380:	b2db      	uxtb	r3, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	d001      	beq.n	800538a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e07c      	b.n	8005484 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d104      	bne.n	800539a <HAL_TIM_PWM_Start+0x82>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2202      	movs	r2, #2
 8005394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005398:	e013      	b.n	80053c2 <HAL_TIM_PWM_Start+0xaa>
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	2b04      	cmp	r3, #4
 800539e:	d104      	bne.n	80053aa <HAL_TIM_PWM_Start+0x92>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2202      	movs	r2, #2
 80053a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053a8:	e00b      	b.n	80053c2 <HAL_TIM_PWM_Start+0xaa>
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	2b08      	cmp	r3, #8
 80053ae:	d104      	bne.n	80053ba <HAL_TIM_PWM_Start+0xa2>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2202      	movs	r2, #2
 80053b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053b8:	e003      	b.n	80053c2 <HAL_TIM_PWM_Start+0xaa>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2202      	movs	r2, #2
 80053be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2201      	movs	r2, #1
 80053c8:	6839      	ldr	r1, [r7, #0]
 80053ca:	4618      	mov	r0, r3
 80053cc:	f000 fd50 	bl	8005e70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a2d      	ldr	r2, [pc, #180]	; (800548c <HAL_TIM_PWM_Start+0x174>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d004      	beq.n	80053e4 <HAL_TIM_PWM_Start+0xcc>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a2c      	ldr	r2, [pc, #176]	; (8005490 <HAL_TIM_PWM_Start+0x178>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d101      	bne.n	80053e8 <HAL_TIM_PWM_Start+0xd0>
 80053e4:	2301      	movs	r3, #1
 80053e6:	e000      	b.n	80053ea <HAL_TIM_PWM_Start+0xd2>
 80053e8:	2300      	movs	r3, #0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d007      	beq.n	80053fe <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a22      	ldr	r2, [pc, #136]	; (800548c <HAL_TIM_PWM_Start+0x174>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d022      	beq.n	800544e <HAL_TIM_PWM_Start+0x136>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005410:	d01d      	beq.n	800544e <HAL_TIM_PWM_Start+0x136>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a1f      	ldr	r2, [pc, #124]	; (8005494 <HAL_TIM_PWM_Start+0x17c>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d018      	beq.n	800544e <HAL_TIM_PWM_Start+0x136>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a1d      	ldr	r2, [pc, #116]	; (8005498 <HAL_TIM_PWM_Start+0x180>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d013      	beq.n	800544e <HAL_TIM_PWM_Start+0x136>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a1c      	ldr	r2, [pc, #112]	; (800549c <HAL_TIM_PWM_Start+0x184>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d00e      	beq.n	800544e <HAL_TIM_PWM_Start+0x136>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a16      	ldr	r2, [pc, #88]	; (8005490 <HAL_TIM_PWM_Start+0x178>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d009      	beq.n	800544e <HAL_TIM_PWM_Start+0x136>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a18      	ldr	r2, [pc, #96]	; (80054a0 <HAL_TIM_PWM_Start+0x188>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d004      	beq.n	800544e <HAL_TIM_PWM_Start+0x136>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a16      	ldr	r2, [pc, #88]	; (80054a4 <HAL_TIM_PWM_Start+0x18c>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d111      	bne.n	8005472 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	f003 0307 	and.w	r3, r3, #7
 8005458:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2b06      	cmp	r3, #6
 800545e:	d010      	beq.n	8005482 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f042 0201 	orr.w	r2, r2, #1
 800546e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005470:	e007      	b.n	8005482 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f042 0201 	orr.w	r2, r2, #1
 8005480:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3710      	adds	r7, #16
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	40010000 	.word	0x40010000
 8005490:	40010400 	.word	0x40010400
 8005494:	40000400 	.word	0x40000400
 8005498:	40000800 	.word	0x40000800
 800549c:	40000c00 	.word	0x40000c00
 80054a0:	40014000 	.word	0x40014000
 80054a4:	40001800 	.word	0x40001800

080054a8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2200      	movs	r2, #0
 80054b8:	6839      	ldr	r1, [r7, #0]
 80054ba:	4618      	mov	r0, r3
 80054bc:	f000 fcd8 	bl	8005e70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a2e      	ldr	r2, [pc, #184]	; (8005580 <HAL_TIM_PWM_Stop+0xd8>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d004      	beq.n	80054d4 <HAL_TIM_PWM_Stop+0x2c>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a2d      	ldr	r2, [pc, #180]	; (8005584 <HAL_TIM_PWM_Stop+0xdc>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d101      	bne.n	80054d8 <HAL_TIM_PWM_Stop+0x30>
 80054d4:	2301      	movs	r3, #1
 80054d6:	e000      	b.n	80054da <HAL_TIM_PWM_Stop+0x32>
 80054d8:	2300      	movs	r3, #0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d017      	beq.n	800550e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	6a1a      	ldr	r2, [r3, #32]
 80054e4:	f241 1311 	movw	r3, #4369	; 0x1111
 80054e8:	4013      	ands	r3, r2
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10f      	bne.n	800550e <HAL_TIM_PWM_Stop+0x66>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	6a1a      	ldr	r2, [r3, #32]
 80054f4:	f240 4344 	movw	r3, #1092	; 0x444
 80054f8:	4013      	ands	r3, r2
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d107      	bne.n	800550e <HAL_TIM_PWM_Stop+0x66>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800550c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	6a1a      	ldr	r2, [r3, #32]
 8005514:	f241 1311 	movw	r3, #4369	; 0x1111
 8005518:	4013      	ands	r3, r2
 800551a:	2b00      	cmp	r3, #0
 800551c:	d10f      	bne.n	800553e <HAL_TIM_PWM_Stop+0x96>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	6a1a      	ldr	r2, [r3, #32]
 8005524:	f240 4344 	movw	r3, #1092	; 0x444
 8005528:	4013      	ands	r3, r2
 800552a:	2b00      	cmp	r3, #0
 800552c:	d107      	bne.n	800553e <HAL_TIM_PWM_Stop+0x96>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f022 0201 	bic.w	r2, r2, #1
 800553c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d104      	bne.n	800554e <HAL_TIM_PWM_Stop+0xa6>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800554c:	e013      	b.n	8005576 <HAL_TIM_PWM_Stop+0xce>
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	2b04      	cmp	r3, #4
 8005552:	d104      	bne.n	800555e <HAL_TIM_PWM_Stop+0xb6>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800555c:	e00b      	b.n	8005576 <HAL_TIM_PWM_Stop+0xce>
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	2b08      	cmp	r3, #8
 8005562:	d104      	bne.n	800556e <HAL_TIM_PWM_Stop+0xc6>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800556c:	e003      	b.n	8005576 <HAL_TIM_PWM_Stop+0xce>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3708      	adds	r7, #8
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	40010000 	.word	0x40010000
 8005584:	40010400 	.word	0x40010400

08005588 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b086      	sub	sp, #24
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005594:	2300      	movs	r3, #0
 8005596:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d101      	bne.n	80055a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80055a2:	2302      	movs	r3, #2
 80055a4:	e0ae      	b.n	8005704 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2201      	movs	r2, #1
 80055aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2b0c      	cmp	r3, #12
 80055b2:	f200 809f 	bhi.w	80056f4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80055b6:	a201      	add	r2, pc, #4	; (adr r2, 80055bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80055b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055bc:	080055f1 	.word	0x080055f1
 80055c0:	080056f5 	.word	0x080056f5
 80055c4:	080056f5 	.word	0x080056f5
 80055c8:	080056f5 	.word	0x080056f5
 80055cc:	08005631 	.word	0x08005631
 80055d0:	080056f5 	.word	0x080056f5
 80055d4:	080056f5 	.word	0x080056f5
 80055d8:	080056f5 	.word	0x080056f5
 80055dc:	08005673 	.word	0x08005673
 80055e0:	080056f5 	.word	0x080056f5
 80055e4:	080056f5 	.word	0x080056f5
 80055e8:	080056f5 	.word	0x080056f5
 80055ec:	080056b3 	.word	0x080056b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68b9      	ldr	r1, [r7, #8]
 80055f6:	4618      	mov	r0, r3
 80055f8:	f000 f9f0 	bl	80059dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	699a      	ldr	r2, [r3, #24]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f042 0208 	orr.w	r2, r2, #8
 800560a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	699a      	ldr	r2, [r3, #24]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f022 0204 	bic.w	r2, r2, #4
 800561a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	6999      	ldr	r1, [r3, #24]
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	691a      	ldr	r2, [r3, #16]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	430a      	orrs	r2, r1
 800562c:	619a      	str	r2, [r3, #24]
      break;
 800562e:	e064      	b.n	80056fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68b9      	ldr	r1, [r7, #8]
 8005636:	4618      	mov	r0, r3
 8005638:	f000 fa40 	bl	8005abc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	699a      	ldr	r2, [r3, #24]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800564a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	699a      	ldr	r2, [r3, #24]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800565a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6999      	ldr	r1, [r3, #24]
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	021a      	lsls	r2, r3, #8
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	430a      	orrs	r2, r1
 800566e:	619a      	str	r2, [r3, #24]
      break;
 8005670:	e043      	b.n	80056fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68b9      	ldr	r1, [r7, #8]
 8005678:	4618      	mov	r0, r3
 800567a:	f000 fa95 	bl	8005ba8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	69da      	ldr	r2, [r3, #28]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f042 0208 	orr.w	r2, r2, #8
 800568c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	69da      	ldr	r2, [r3, #28]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f022 0204 	bic.w	r2, r2, #4
 800569c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	69d9      	ldr	r1, [r3, #28]
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	691a      	ldr	r2, [r3, #16]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	430a      	orrs	r2, r1
 80056ae:	61da      	str	r2, [r3, #28]
      break;
 80056b0:	e023      	b.n	80056fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68b9      	ldr	r1, [r7, #8]
 80056b8:	4618      	mov	r0, r3
 80056ba:	f000 fae9 	bl	8005c90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	69da      	ldr	r2, [r3, #28]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	69da      	ldr	r2, [r3, #28]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	69d9      	ldr	r1, [r3, #28]
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	021a      	lsls	r2, r3, #8
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	430a      	orrs	r2, r1
 80056f0:	61da      	str	r2, [r3, #28]
      break;
 80056f2:	e002      	b.n	80056fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	75fb      	strb	r3, [r7, #23]
      break;
 80056f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005702:	7dfb      	ldrb	r3, [r7, #23]
}
 8005704:	4618      	mov	r0, r3
 8005706:	3718      	adds	r7, #24
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005716:	2300      	movs	r3, #0
 8005718:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005720:	2b01      	cmp	r3, #1
 8005722:	d101      	bne.n	8005728 <HAL_TIM_ConfigClockSource+0x1c>
 8005724:	2302      	movs	r3, #2
 8005726:	e0b4      	b.n	8005892 <HAL_TIM_ConfigClockSource+0x186>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2202      	movs	r2, #2
 8005734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005746:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800574e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68ba      	ldr	r2, [r7, #8]
 8005756:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005760:	d03e      	beq.n	80057e0 <HAL_TIM_ConfigClockSource+0xd4>
 8005762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005766:	f200 8087 	bhi.w	8005878 <HAL_TIM_ConfigClockSource+0x16c>
 800576a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800576e:	f000 8086 	beq.w	800587e <HAL_TIM_ConfigClockSource+0x172>
 8005772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005776:	d87f      	bhi.n	8005878 <HAL_TIM_ConfigClockSource+0x16c>
 8005778:	2b70      	cmp	r3, #112	; 0x70
 800577a:	d01a      	beq.n	80057b2 <HAL_TIM_ConfigClockSource+0xa6>
 800577c:	2b70      	cmp	r3, #112	; 0x70
 800577e:	d87b      	bhi.n	8005878 <HAL_TIM_ConfigClockSource+0x16c>
 8005780:	2b60      	cmp	r3, #96	; 0x60
 8005782:	d050      	beq.n	8005826 <HAL_TIM_ConfigClockSource+0x11a>
 8005784:	2b60      	cmp	r3, #96	; 0x60
 8005786:	d877      	bhi.n	8005878 <HAL_TIM_ConfigClockSource+0x16c>
 8005788:	2b50      	cmp	r3, #80	; 0x50
 800578a:	d03c      	beq.n	8005806 <HAL_TIM_ConfigClockSource+0xfa>
 800578c:	2b50      	cmp	r3, #80	; 0x50
 800578e:	d873      	bhi.n	8005878 <HAL_TIM_ConfigClockSource+0x16c>
 8005790:	2b40      	cmp	r3, #64	; 0x40
 8005792:	d058      	beq.n	8005846 <HAL_TIM_ConfigClockSource+0x13a>
 8005794:	2b40      	cmp	r3, #64	; 0x40
 8005796:	d86f      	bhi.n	8005878 <HAL_TIM_ConfigClockSource+0x16c>
 8005798:	2b30      	cmp	r3, #48	; 0x30
 800579a:	d064      	beq.n	8005866 <HAL_TIM_ConfigClockSource+0x15a>
 800579c:	2b30      	cmp	r3, #48	; 0x30
 800579e:	d86b      	bhi.n	8005878 <HAL_TIM_ConfigClockSource+0x16c>
 80057a0:	2b20      	cmp	r3, #32
 80057a2:	d060      	beq.n	8005866 <HAL_TIM_ConfigClockSource+0x15a>
 80057a4:	2b20      	cmp	r3, #32
 80057a6:	d867      	bhi.n	8005878 <HAL_TIM_ConfigClockSource+0x16c>
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d05c      	beq.n	8005866 <HAL_TIM_ConfigClockSource+0x15a>
 80057ac:	2b10      	cmp	r3, #16
 80057ae:	d05a      	beq.n	8005866 <HAL_TIM_ConfigClockSource+0x15a>
 80057b0:	e062      	b.n	8005878 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6818      	ldr	r0, [r3, #0]
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	6899      	ldr	r1, [r3, #8]
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	685a      	ldr	r2, [r3, #4]
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	f000 fb35 	bl	8005e30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80057d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68ba      	ldr	r2, [r7, #8]
 80057dc:	609a      	str	r2, [r3, #8]
      break;
 80057de:	e04f      	b.n	8005880 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6818      	ldr	r0, [r3, #0]
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	6899      	ldr	r1, [r3, #8]
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	685a      	ldr	r2, [r3, #4]
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	f000 fb1e 	bl	8005e30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	689a      	ldr	r2, [r3, #8]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005802:	609a      	str	r2, [r3, #8]
      break;
 8005804:	e03c      	b.n	8005880 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6818      	ldr	r0, [r3, #0]
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	6859      	ldr	r1, [r3, #4]
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	461a      	mov	r2, r3
 8005814:	f000 fa92 	bl	8005d3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2150      	movs	r1, #80	; 0x50
 800581e:	4618      	mov	r0, r3
 8005820:	f000 faeb 	bl	8005dfa <TIM_ITRx_SetConfig>
      break;
 8005824:	e02c      	b.n	8005880 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6818      	ldr	r0, [r3, #0]
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	6859      	ldr	r1, [r3, #4]
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	461a      	mov	r2, r3
 8005834:	f000 fab1 	bl	8005d9a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2160      	movs	r1, #96	; 0x60
 800583e:	4618      	mov	r0, r3
 8005840:	f000 fadb 	bl	8005dfa <TIM_ITRx_SetConfig>
      break;
 8005844:	e01c      	b.n	8005880 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6818      	ldr	r0, [r3, #0]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	6859      	ldr	r1, [r3, #4]
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	461a      	mov	r2, r3
 8005854:	f000 fa72 	bl	8005d3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2140      	movs	r1, #64	; 0x40
 800585e:	4618      	mov	r0, r3
 8005860:	f000 facb 	bl	8005dfa <TIM_ITRx_SetConfig>
      break;
 8005864:	e00c      	b.n	8005880 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4619      	mov	r1, r3
 8005870:	4610      	mov	r0, r2
 8005872:	f000 fac2 	bl	8005dfa <TIM_ITRx_SetConfig>
      break;
 8005876:	e003      	b.n	8005880 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	73fb      	strb	r3, [r7, #15]
      break;
 800587c:	e000      	b.n	8005880 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800587e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005890:	7bfb      	ldrb	r3, [r7, #15]
}
 8005892:	4618      	mov	r0, r3
 8005894:	3710      	adds	r7, #16
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
	...

0800589c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800589c:	b480      	push	{r7}
 800589e:	b085      	sub	sp, #20
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a40      	ldr	r2, [pc, #256]	; (80059b0 <TIM_Base_SetConfig+0x114>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d013      	beq.n	80058dc <TIM_Base_SetConfig+0x40>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ba:	d00f      	beq.n	80058dc <TIM_Base_SetConfig+0x40>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a3d      	ldr	r2, [pc, #244]	; (80059b4 <TIM_Base_SetConfig+0x118>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d00b      	beq.n	80058dc <TIM_Base_SetConfig+0x40>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a3c      	ldr	r2, [pc, #240]	; (80059b8 <TIM_Base_SetConfig+0x11c>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d007      	beq.n	80058dc <TIM_Base_SetConfig+0x40>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a3b      	ldr	r2, [pc, #236]	; (80059bc <TIM_Base_SetConfig+0x120>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d003      	beq.n	80058dc <TIM_Base_SetConfig+0x40>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a3a      	ldr	r2, [pc, #232]	; (80059c0 <TIM_Base_SetConfig+0x124>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d108      	bne.n	80058ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a2f      	ldr	r2, [pc, #188]	; (80059b0 <TIM_Base_SetConfig+0x114>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d02b      	beq.n	800594e <TIM_Base_SetConfig+0xb2>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058fc:	d027      	beq.n	800594e <TIM_Base_SetConfig+0xb2>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a2c      	ldr	r2, [pc, #176]	; (80059b4 <TIM_Base_SetConfig+0x118>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d023      	beq.n	800594e <TIM_Base_SetConfig+0xb2>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a2b      	ldr	r2, [pc, #172]	; (80059b8 <TIM_Base_SetConfig+0x11c>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d01f      	beq.n	800594e <TIM_Base_SetConfig+0xb2>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a2a      	ldr	r2, [pc, #168]	; (80059bc <TIM_Base_SetConfig+0x120>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d01b      	beq.n	800594e <TIM_Base_SetConfig+0xb2>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a29      	ldr	r2, [pc, #164]	; (80059c0 <TIM_Base_SetConfig+0x124>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d017      	beq.n	800594e <TIM_Base_SetConfig+0xb2>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a28      	ldr	r2, [pc, #160]	; (80059c4 <TIM_Base_SetConfig+0x128>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d013      	beq.n	800594e <TIM_Base_SetConfig+0xb2>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a27      	ldr	r2, [pc, #156]	; (80059c8 <TIM_Base_SetConfig+0x12c>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d00f      	beq.n	800594e <TIM_Base_SetConfig+0xb2>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a26      	ldr	r2, [pc, #152]	; (80059cc <TIM_Base_SetConfig+0x130>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d00b      	beq.n	800594e <TIM_Base_SetConfig+0xb2>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a25      	ldr	r2, [pc, #148]	; (80059d0 <TIM_Base_SetConfig+0x134>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d007      	beq.n	800594e <TIM_Base_SetConfig+0xb2>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a24      	ldr	r2, [pc, #144]	; (80059d4 <TIM_Base_SetConfig+0x138>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d003      	beq.n	800594e <TIM_Base_SetConfig+0xb2>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a23      	ldr	r2, [pc, #140]	; (80059d8 <TIM_Base_SetConfig+0x13c>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d108      	bne.n	8005960 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005954:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	4313      	orrs	r3, r2
 800595e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	695b      	ldr	r3, [r3, #20]
 800596a:	4313      	orrs	r3, r2
 800596c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	689a      	ldr	r2, [r3, #8]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a0a      	ldr	r2, [pc, #40]	; (80059b0 <TIM_Base_SetConfig+0x114>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d003      	beq.n	8005994 <TIM_Base_SetConfig+0xf8>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a0c      	ldr	r2, [pc, #48]	; (80059c0 <TIM_Base_SetConfig+0x124>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d103      	bne.n	800599c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	691a      	ldr	r2, [r3, #16]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	615a      	str	r2, [r3, #20]
}
 80059a2:	bf00      	nop
 80059a4:	3714      	adds	r7, #20
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	40010000 	.word	0x40010000
 80059b4:	40000400 	.word	0x40000400
 80059b8:	40000800 	.word	0x40000800
 80059bc:	40000c00 	.word	0x40000c00
 80059c0:	40010400 	.word	0x40010400
 80059c4:	40014000 	.word	0x40014000
 80059c8:	40014400 	.word	0x40014400
 80059cc:	40014800 	.word	0x40014800
 80059d0:	40001800 	.word	0x40001800
 80059d4:	40001c00 	.word	0x40001c00
 80059d8:	40002000 	.word	0x40002000

080059dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059dc:	b480      	push	{r7}
 80059de:	b087      	sub	sp, #28
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a1b      	ldr	r3, [r3, #32]
 80059ea:	f023 0201 	bic.w	r2, r3, #1
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a1b      	ldr	r3, [r3, #32]
 80059f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f023 0303 	bic.w	r3, r3, #3
 8005a12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	f023 0302 	bic.w	r3, r3, #2
 8005a24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	697a      	ldr	r2, [r7, #20]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a20      	ldr	r2, [pc, #128]	; (8005ab4 <TIM_OC1_SetConfig+0xd8>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d003      	beq.n	8005a40 <TIM_OC1_SetConfig+0x64>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a1f      	ldr	r2, [pc, #124]	; (8005ab8 <TIM_OC1_SetConfig+0xdc>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d10c      	bne.n	8005a5a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	f023 0308 	bic.w	r3, r3, #8
 8005a46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	f023 0304 	bic.w	r3, r3, #4
 8005a58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a15      	ldr	r2, [pc, #84]	; (8005ab4 <TIM_OC1_SetConfig+0xd8>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d003      	beq.n	8005a6a <TIM_OC1_SetConfig+0x8e>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a14      	ldr	r2, [pc, #80]	; (8005ab8 <TIM_OC1_SetConfig+0xdc>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d111      	bne.n	8005a8e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	695b      	ldr	r3, [r3, #20]
 8005a7e:	693a      	ldr	r2, [r7, #16]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	699b      	ldr	r3, [r3, #24]
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	693a      	ldr	r2, [r7, #16]
 8005a92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	621a      	str	r2, [r3, #32]
}
 8005aa8:	bf00      	nop
 8005aaa:	371c      	adds	r7, #28
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr
 8005ab4:	40010000 	.word	0x40010000
 8005ab8:	40010400 	.word	0x40010400

08005abc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b087      	sub	sp, #28
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a1b      	ldr	r3, [r3, #32]
 8005aca:	f023 0210 	bic.w	r2, r3, #16
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a1b      	ldr	r3, [r3, #32]
 8005ad6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	699b      	ldr	r3, [r3, #24]
 8005ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005af2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	021b      	lsls	r3, r3, #8
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	f023 0320 	bic.w	r3, r3, #32
 8005b06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	011b      	lsls	r3, r3, #4
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a22      	ldr	r2, [pc, #136]	; (8005ba0 <TIM_OC2_SetConfig+0xe4>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d003      	beq.n	8005b24 <TIM_OC2_SetConfig+0x68>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a21      	ldr	r2, [pc, #132]	; (8005ba4 <TIM_OC2_SetConfig+0xe8>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d10d      	bne.n	8005b40 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	011b      	lsls	r3, r3, #4
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a17      	ldr	r2, [pc, #92]	; (8005ba0 <TIM_OC2_SetConfig+0xe4>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d003      	beq.n	8005b50 <TIM_OC2_SetConfig+0x94>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a16      	ldr	r2, [pc, #88]	; (8005ba4 <TIM_OC2_SetConfig+0xe8>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d113      	bne.n	8005b78 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	695b      	ldr	r3, [r3, #20]
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	693a      	ldr	r2, [r7, #16]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	699b      	ldr	r3, [r3, #24]
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	693a      	ldr	r2, [r7, #16]
 8005b7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	685a      	ldr	r2, [r3, #4]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	697a      	ldr	r2, [r7, #20]
 8005b90:	621a      	str	r2, [r3, #32]
}
 8005b92:	bf00      	nop
 8005b94:	371c      	adds	r7, #28
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	40010000 	.word	0x40010000
 8005ba4:	40010400 	.word	0x40010400

08005ba8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b087      	sub	sp, #28
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a1b      	ldr	r3, [r3, #32]
 8005bb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a1b      	ldr	r3, [r3, #32]
 8005bc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	69db      	ldr	r3, [r3, #28]
 8005bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f023 0303 	bic.w	r3, r3, #3
 8005bde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	021b      	lsls	r3, r3, #8
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a21      	ldr	r2, [pc, #132]	; (8005c88 <TIM_OC3_SetConfig+0xe0>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d003      	beq.n	8005c0e <TIM_OC3_SetConfig+0x66>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a20      	ldr	r2, [pc, #128]	; (8005c8c <TIM_OC3_SetConfig+0xe4>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d10d      	bne.n	8005c2a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	021b      	lsls	r3, r3, #8
 8005c1c:	697a      	ldr	r2, [r7, #20]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a16      	ldr	r2, [pc, #88]	; (8005c88 <TIM_OC3_SetConfig+0xe0>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d003      	beq.n	8005c3a <TIM_OC3_SetConfig+0x92>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a15      	ldr	r2, [pc, #84]	; (8005c8c <TIM_OC3_SetConfig+0xe4>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d113      	bne.n	8005c62 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	011b      	lsls	r3, r3, #4
 8005c50:	693a      	ldr	r2, [r7, #16]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	011b      	lsls	r3, r3, #4
 8005c5c:	693a      	ldr	r2, [r7, #16]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	693a      	ldr	r2, [r7, #16]
 8005c66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	685a      	ldr	r2, [r3, #4]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	697a      	ldr	r2, [r7, #20]
 8005c7a:	621a      	str	r2, [r3, #32]
}
 8005c7c:	bf00      	nop
 8005c7e:	371c      	adds	r7, #28
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr
 8005c88:	40010000 	.word	0x40010000
 8005c8c:	40010400 	.word	0x40010400

08005c90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b087      	sub	sp, #28
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	69db      	ldr	r3, [r3, #28]
 8005cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	021b      	lsls	r3, r3, #8
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	031b      	lsls	r3, r3, #12
 8005ce2:	693a      	ldr	r2, [r7, #16]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a12      	ldr	r2, [pc, #72]	; (8005d34 <TIM_OC4_SetConfig+0xa4>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d003      	beq.n	8005cf8 <TIM_OC4_SetConfig+0x68>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a11      	ldr	r2, [pc, #68]	; (8005d38 <TIM_OC4_SetConfig+0xa8>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d109      	bne.n	8005d0c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cfe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	695b      	ldr	r3, [r3, #20]
 8005d04:	019b      	lsls	r3, r3, #6
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	697a      	ldr	r2, [r7, #20]
 8005d10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	685a      	ldr	r2, [r3, #4]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	621a      	str	r2, [r3, #32]
}
 8005d26:	bf00      	nop
 8005d28:	371c      	adds	r7, #28
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	40010000 	.word	0x40010000
 8005d38:	40010400 	.word	0x40010400

08005d3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b087      	sub	sp, #28
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6a1b      	ldr	r3, [r3, #32]
 8005d4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6a1b      	ldr	r3, [r3, #32]
 8005d52:	f023 0201 	bic.w	r2, r3, #1
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	699b      	ldr	r3, [r3, #24]
 8005d5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	011b      	lsls	r3, r3, #4
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	f023 030a 	bic.w	r3, r3, #10
 8005d78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d7a:	697a      	ldr	r2, [r7, #20]
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	693a      	ldr	r2, [r7, #16]
 8005d86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	621a      	str	r2, [r3, #32]
}
 8005d8e:	bf00      	nop
 8005d90:	371c      	adds	r7, #28
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr

08005d9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	b087      	sub	sp, #28
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	60f8      	str	r0, [r7, #12]
 8005da2:	60b9      	str	r1, [r7, #8]
 8005da4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6a1b      	ldr	r3, [r3, #32]
 8005daa:	f023 0210 	bic.w	r2, r3, #16
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	699b      	ldr	r3, [r3, #24]
 8005db6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6a1b      	ldr	r3, [r3, #32]
 8005dbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005dc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	031b      	lsls	r3, r3, #12
 8005dca:	697a      	ldr	r2, [r7, #20]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005dd6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	011b      	lsls	r3, r3, #4
 8005ddc:	693a      	ldr	r2, [r7, #16]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	697a      	ldr	r2, [r7, #20]
 8005de6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	693a      	ldr	r2, [r7, #16]
 8005dec:	621a      	str	r2, [r3, #32]
}
 8005dee:	bf00      	nop
 8005df0:	371c      	adds	r7, #28
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr

08005dfa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	b085      	sub	sp, #20
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
 8005e02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e12:	683a      	ldr	r2, [r7, #0]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	f043 0307 	orr.w	r3, r3, #7
 8005e1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	609a      	str	r2, [r3, #8]
}
 8005e24:	bf00      	nop
 8005e26:	3714      	adds	r7, #20
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b087      	sub	sp, #28
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	607a      	str	r2, [r7, #4]
 8005e3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	021a      	lsls	r2, r3, #8
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	431a      	orrs	r2, r3
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	697a      	ldr	r2, [r7, #20]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	697a      	ldr	r2, [r7, #20]
 8005e62:	609a      	str	r2, [r3, #8]
}
 8005e64:	bf00      	nop
 8005e66:	371c      	adds	r7, #28
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b087      	sub	sp, #28
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	f003 031f 	and.w	r3, r3, #31
 8005e82:	2201      	movs	r2, #1
 8005e84:	fa02 f303 	lsl.w	r3, r2, r3
 8005e88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6a1a      	ldr	r2, [r3, #32]
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	43db      	mvns	r3, r3
 8005e92:	401a      	ands	r2, r3
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6a1a      	ldr	r2, [r3, #32]
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	f003 031f 	and.w	r3, r3, #31
 8005ea2:	6879      	ldr	r1, [r7, #4]
 8005ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ea8:	431a      	orrs	r2, r3
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	621a      	str	r2, [r3, #32]
}
 8005eae:	bf00      	nop
 8005eb0:	371c      	adds	r7, #28
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr
	...

08005ebc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b085      	sub	sp, #20
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d101      	bne.n	8005ed4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ed0:	2302      	movs	r3, #2
 8005ed2:	e05a      	b.n	8005f8a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2202      	movs	r2, #2
 8005ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005efa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68fa      	ldr	r2, [r7, #12]
 8005f0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a21      	ldr	r2, [pc, #132]	; (8005f98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d022      	beq.n	8005f5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f20:	d01d      	beq.n	8005f5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a1d      	ldr	r2, [pc, #116]	; (8005f9c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d018      	beq.n	8005f5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a1b      	ldr	r2, [pc, #108]	; (8005fa0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d013      	beq.n	8005f5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a1a      	ldr	r2, [pc, #104]	; (8005fa4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d00e      	beq.n	8005f5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a18      	ldr	r2, [pc, #96]	; (8005fa8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d009      	beq.n	8005f5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a17      	ldr	r2, [pc, #92]	; (8005fac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d004      	beq.n	8005f5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a15      	ldr	r2, [pc, #84]	; (8005fb0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d10c      	bne.n	8005f78 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	68ba      	ldr	r2, [r7, #8]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68ba      	ldr	r2, [r7, #8]
 8005f76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3714      	adds	r7, #20
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop
 8005f98:	40010000 	.word	0x40010000
 8005f9c:	40000400 	.word	0x40000400
 8005fa0:	40000800 	.word	0x40000800
 8005fa4:	40000c00 	.word	0x40000c00
 8005fa8:	40010400 	.word	0x40010400
 8005fac:	40014000 	.word	0x40014000
 8005fb0:	40001800 	.word	0x40001800

08005fb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d101      	bne.n	8005fc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e03f      	b.n	8006046 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d106      	bne.n	8005fe0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f7fc fc66 	bl	80028ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2224      	movs	r2, #36	; 0x24
 8005fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	68da      	ldr	r2, [r3, #12]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ff6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 fddf 	bl	8006bbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	691a      	ldr	r2, [r3, #16]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800600c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	695a      	ldr	r2, [r3, #20]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800601c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68da      	ldr	r2, [r3, #12]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800602c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2220      	movs	r2, #32
 8006038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2220      	movs	r2, #32
 8006040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006044:	2300      	movs	r3, #0
}
 8006046:	4618      	mov	r0, r3
 8006048:	3708      	adds	r7, #8
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}

0800604e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800604e:	b580      	push	{r7, lr}
 8006050:	b08a      	sub	sp, #40	; 0x28
 8006052:	af02      	add	r7, sp, #8
 8006054:	60f8      	str	r0, [r7, #12]
 8006056:	60b9      	str	r1, [r7, #8]
 8006058:	603b      	str	r3, [r7, #0]
 800605a:	4613      	mov	r3, r2
 800605c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800605e:	2300      	movs	r3, #0
 8006060:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006068:	b2db      	uxtb	r3, r3
 800606a:	2b20      	cmp	r3, #32
 800606c:	d17c      	bne.n	8006168 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d002      	beq.n	800607a <HAL_UART_Transmit+0x2c>
 8006074:	88fb      	ldrh	r3, [r7, #6]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d101      	bne.n	800607e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e075      	b.n	800616a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006084:	2b01      	cmp	r3, #1
 8006086:	d101      	bne.n	800608c <HAL_UART_Transmit+0x3e>
 8006088:	2302      	movs	r3, #2
 800608a:	e06e      	b.n	800616a <HAL_UART_Transmit+0x11c>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2200      	movs	r2, #0
 8006098:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2221      	movs	r2, #33	; 0x21
 800609e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80060a2:	f7fc fd7f 	bl	8002ba4 <HAL_GetTick>
 80060a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	88fa      	ldrh	r2, [r7, #6]
 80060ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	88fa      	ldrh	r2, [r7, #6]
 80060b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060bc:	d108      	bne.n	80060d0 <HAL_UART_Transmit+0x82>
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d104      	bne.n	80060d0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80060c6:	2300      	movs	r3, #0
 80060c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	61bb      	str	r3, [r7, #24]
 80060ce:	e003      	b.n	80060d8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060d4:	2300      	movs	r3, #0
 80060d6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2200      	movs	r2, #0
 80060dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80060e0:	e02a      	b.n	8006138 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	9300      	str	r3, [sp, #0]
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	2200      	movs	r2, #0
 80060ea:	2180      	movs	r1, #128	; 0x80
 80060ec:	68f8      	ldr	r0, [r7, #12]
 80060ee:	f000 fb1f 	bl	8006730 <UART_WaitOnFlagUntilTimeout>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d001      	beq.n	80060fc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80060f8:	2303      	movs	r3, #3
 80060fa:	e036      	b.n	800616a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d10b      	bne.n	800611a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	881b      	ldrh	r3, [r3, #0]
 8006106:	461a      	mov	r2, r3
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006110:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	3302      	adds	r3, #2
 8006116:	61bb      	str	r3, [r7, #24]
 8006118:	e007      	b.n	800612a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	781a      	ldrb	r2, [r3, #0]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	3301      	adds	r3, #1
 8006128:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800612e:	b29b      	uxth	r3, r3
 8006130:	3b01      	subs	r3, #1
 8006132:	b29a      	uxth	r2, r3
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800613c:	b29b      	uxth	r3, r3
 800613e:	2b00      	cmp	r3, #0
 8006140:	d1cf      	bne.n	80060e2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	9300      	str	r3, [sp, #0]
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	2200      	movs	r2, #0
 800614a:	2140      	movs	r1, #64	; 0x40
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	f000 faef 	bl	8006730 <UART_WaitOnFlagUntilTimeout>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d001      	beq.n	800615c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006158:	2303      	movs	r3, #3
 800615a:	e006      	b.n	800616a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2220      	movs	r2, #32
 8006160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006164:	2300      	movs	r3, #0
 8006166:	e000      	b.n	800616a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006168:	2302      	movs	r3, #2
  }
}
 800616a:	4618      	mov	r0, r3
 800616c:	3720      	adds	r7, #32
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}

08006172 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006172:	b580      	push	{r7, lr}
 8006174:	b084      	sub	sp, #16
 8006176:	af00      	add	r7, sp, #0
 8006178:	60f8      	str	r0, [r7, #12]
 800617a:	60b9      	str	r1, [r7, #8]
 800617c:	4613      	mov	r3, r2
 800617e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006186:	b2db      	uxtb	r3, r3
 8006188:	2b20      	cmp	r3, #32
 800618a:	d11d      	bne.n	80061c8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d002      	beq.n	8006198 <HAL_UART_Receive_IT+0x26>
 8006192:	88fb      	ldrh	r3, [r7, #6]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d101      	bne.n	800619c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e016      	b.n	80061ca <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d101      	bne.n	80061aa <HAL_UART_Receive_IT+0x38>
 80061a6:	2302      	movs	r3, #2
 80061a8:	e00f      	b.n	80061ca <HAL_UART_Receive_IT+0x58>
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2201      	movs	r2, #1
 80061ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2200      	movs	r2, #0
 80061b6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80061b8:	88fb      	ldrh	r3, [r7, #6]
 80061ba:	461a      	mov	r2, r3
 80061bc:	68b9      	ldr	r1, [r7, #8]
 80061be:	68f8      	ldr	r0, [r7, #12]
 80061c0:	f000 fb24 	bl	800680c <UART_Start_Receive_IT>
 80061c4:	4603      	mov	r3, r0
 80061c6:	e000      	b.n	80061ca <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80061c8:	2302      	movs	r3, #2
  }
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3710      	adds	r7, #16
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
	...

080061d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b0ba      	sub	sp, #232	; 0xe8
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80061fa:	2300      	movs	r3, #0
 80061fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006200:	2300      	movs	r3, #0
 8006202:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800620a:	f003 030f 	and.w	r3, r3, #15
 800620e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006212:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006216:	2b00      	cmp	r3, #0
 8006218:	d10f      	bne.n	800623a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800621a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800621e:	f003 0320 	and.w	r3, r3, #32
 8006222:	2b00      	cmp	r3, #0
 8006224:	d009      	beq.n	800623a <HAL_UART_IRQHandler+0x66>
 8006226:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800622a:	f003 0320 	and.w	r3, r3, #32
 800622e:	2b00      	cmp	r3, #0
 8006230:	d003      	beq.n	800623a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 fc07 	bl	8006a46 <UART_Receive_IT>
      return;
 8006238:	e256      	b.n	80066e8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800623a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800623e:	2b00      	cmp	r3, #0
 8006240:	f000 80de 	beq.w	8006400 <HAL_UART_IRQHandler+0x22c>
 8006244:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006248:	f003 0301 	and.w	r3, r3, #1
 800624c:	2b00      	cmp	r3, #0
 800624e:	d106      	bne.n	800625e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006254:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006258:	2b00      	cmp	r3, #0
 800625a:	f000 80d1 	beq.w	8006400 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800625e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006262:	f003 0301 	and.w	r3, r3, #1
 8006266:	2b00      	cmp	r3, #0
 8006268:	d00b      	beq.n	8006282 <HAL_UART_IRQHandler+0xae>
 800626a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800626e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006272:	2b00      	cmp	r3, #0
 8006274:	d005      	beq.n	8006282 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627a:	f043 0201 	orr.w	r2, r3, #1
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006286:	f003 0304 	and.w	r3, r3, #4
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00b      	beq.n	80062a6 <HAL_UART_IRQHandler+0xd2>
 800628e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006292:	f003 0301 	and.w	r3, r3, #1
 8006296:	2b00      	cmp	r3, #0
 8006298:	d005      	beq.n	80062a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629e:	f043 0202 	orr.w	r2, r3, #2
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062aa:	f003 0302 	and.w	r3, r3, #2
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00b      	beq.n	80062ca <HAL_UART_IRQHandler+0xf6>
 80062b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062b6:	f003 0301 	and.w	r3, r3, #1
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d005      	beq.n	80062ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c2:	f043 0204 	orr.w	r2, r3, #4
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80062ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062ce:	f003 0308 	and.w	r3, r3, #8
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d011      	beq.n	80062fa <HAL_UART_IRQHandler+0x126>
 80062d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062da:	f003 0320 	and.w	r3, r3, #32
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d105      	bne.n	80062ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80062e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062e6:	f003 0301 	and.w	r3, r3, #1
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d005      	beq.n	80062fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f2:	f043 0208 	orr.w	r2, r3, #8
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fe:	2b00      	cmp	r3, #0
 8006300:	f000 81ed 	beq.w	80066de <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006308:	f003 0320 	and.w	r3, r3, #32
 800630c:	2b00      	cmp	r3, #0
 800630e:	d008      	beq.n	8006322 <HAL_UART_IRQHandler+0x14e>
 8006310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006314:	f003 0320 	and.w	r3, r3, #32
 8006318:	2b00      	cmp	r3, #0
 800631a:	d002      	beq.n	8006322 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 fb92 	bl	8006a46 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	695b      	ldr	r3, [r3, #20]
 8006328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800632c:	2b40      	cmp	r3, #64	; 0x40
 800632e:	bf0c      	ite	eq
 8006330:	2301      	moveq	r3, #1
 8006332:	2300      	movne	r3, #0
 8006334:	b2db      	uxtb	r3, r3
 8006336:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633e:	f003 0308 	and.w	r3, r3, #8
 8006342:	2b00      	cmp	r3, #0
 8006344:	d103      	bne.n	800634e <HAL_UART_IRQHandler+0x17a>
 8006346:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800634a:	2b00      	cmp	r3, #0
 800634c:	d04f      	beq.n	80063ee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 fa9a 	bl	8006888 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	695b      	ldr	r3, [r3, #20]
 800635a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800635e:	2b40      	cmp	r3, #64	; 0x40
 8006360:	d141      	bne.n	80063e6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	3314      	adds	r3, #20
 8006368:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800636c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006370:	e853 3f00 	ldrex	r3, [r3]
 8006374:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006378:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800637c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006380:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	3314      	adds	r3, #20
 800638a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800638e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006392:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006396:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800639a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800639e:	e841 2300 	strex	r3, r2, [r1]
 80063a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80063a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d1d9      	bne.n	8006362 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d013      	beq.n	80063de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ba:	4a7d      	ldr	r2, [pc, #500]	; (80065b0 <HAL_UART_IRQHandler+0x3dc>)
 80063bc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c2:	4618      	mov	r0, r3
 80063c4:	f7fc fd7b 	bl	8002ebe <HAL_DMA_Abort_IT>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d016      	beq.n	80063fc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80063d8:	4610      	mov	r0, r2
 80063da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063dc:	e00e      	b.n	80063fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 f990 	bl	8006704 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063e4:	e00a      	b.n	80063fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 f98c 	bl	8006704 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063ec:	e006      	b.n	80063fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 f988 	bl	8006704 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80063fa:	e170      	b.n	80066de <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063fc:	bf00      	nop
    return;
 80063fe:	e16e      	b.n	80066de <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006404:	2b01      	cmp	r3, #1
 8006406:	f040 814a 	bne.w	800669e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800640a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800640e:	f003 0310 	and.w	r3, r3, #16
 8006412:	2b00      	cmp	r3, #0
 8006414:	f000 8143 	beq.w	800669e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800641c:	f003 0310 	and.w	r3, r3, #16
 8006420:	2b00      	cmp	r3, #0
 8006422:	f000 813c 	beq.w	800669e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006426:	2300      	movs	r3, #0
 8006428:	60bb      	str	r3, [r7, #8]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	60bb      	str	r3, [r7, #8]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	60bb      	str	r3, [r7, #8]
 800643a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	695b      	ldr	r3, [r3, #20]
 8006442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006446:	2b40      	cmp	r3, #64	; 0x40
 8006448:	f040 80b4 	bne.w	80065b4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006458:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800645c:	2b00      	cmp	r3, #0
 800645e:	f000 8140 	beq.w	80066e2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006466:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800646a:	429a      	cmp	r2, r3
 800646c:	f080 8139 	bcs.w	80066e2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006476:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647c:	69db      	ldr	r3, [r3, #28]
 800647e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006482:	f000 8088 	beq.w	8006596 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	330c      	adds	r3, #12
 800648c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006490:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006494:	e853 3f00 	ldrex	r3, [r3]
 8006498:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800649c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80064a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	330c      	adds	r3, #12
 80064ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80064b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80064b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80064be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80064c2:	e841 2300 	strex	r3, r2, [r1]
 80064c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80064ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1d9      	bne.n	8006486 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	3314      	adds	r3, #20
 80064d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064dc:	e853 3f00 	ldrex	r3, [r3]
 80064e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80064e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064e4:	f023 0301 	bic.w	r3, r3, #1
 80064e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	3314      	adds	r3, #20
 80064f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80064f6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80064fa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80064fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006502:	e841 2300 	strex	r3, r2, [r1]
 8006506:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006508:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800650a:	2b00      	cmp	r3, #0
 800650c:	d1e1      	bne.n	80064d2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	3314      	adds	r3, #20
 8006514:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006516:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006518:	e853 3f00 	ldrex	r3, [r3]
 800651c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800651e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006520:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006524:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	3314      	adds	r3, #20
 800652e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006532:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006534:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006536:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006538:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800653a:	e841 2300 	strex	r3, r2, [r1]
 800653e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006540:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1e3      	bne.n	800650e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2220      	movs	r2, #32
 800654a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	330c      	adds	r3, #12
 800655a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800655c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800655e:	e853 3f00 	ldrex	r3, [r3]
 8006562:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006564:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006566:	f023 0310 	bic.w	r3, r3, #16
 800656a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	330c      	adds	r3, #12
 8006574:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006578:	65ba      	str	r2, [r7, #88]	; 0x58
 800657a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800657c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800657e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006580:	e841 2300 	strex	r3, r2, [r1]
 8006584:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006586:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006588:	2b00      	cmp	r3, #0
 800658a:	d1e3      	bne.n	8006554 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006590:	4618      	mov	r0, r3
 8006592:	f7fc fc24 	bl	8002dde <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800659e:	b29b      	uxth	r3, r3
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	4619      	mov	r1, r3
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 f8b6 	bl	8006718 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80065ac:	e099      	b.n	80066e2 <HAL_UART_IRQHandler+0x50e>
 80065ae:	bf00      	nop
 80065b0:	0800694f 	.word	0x0800694f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065bc:	b29b      	uxth	r3, r3
 80065be:	1ad3      	subs	r3, r2, r3
 80065c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	f000 808b 	beq.w	80066e6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80065d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f000 8086 	beq.w	80066e6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	330c      	adds	r3, #12
 80065e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e4:	e853 3f00 	ldrex	r3, [r3]
 80065e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80065ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	330c      	adds	r3, #12
 80065fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80065fe:	647a      	str	r2, [r7, #68]	; 0x44
 8006600:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006602:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006604:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006606:	e841 2300 	strex	r3, r2, [r1]
 800660a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800660c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1e3      	bne.n	80065da <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	3314      	adds	r3, #20
 8006618:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661c:	e853 3f00 	ldrex	r3, [r3]
 8006620:	623b      	str	r3, [r7, #32]
   return(result);
 8006622:	6a3b      	ldr	r3, [r7, #32]
 8006624:	f023 0301 	bic.w	r3, r3, #1
 8006628:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	3314      	adds	r3, #20
 8006632:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006636:	633a      	str	r2, [r7, #48]	; 0x30
 8006638:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800663c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800663e:	e841 2300 	strex	r3, r2, [r1]
 8006642:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1e3      	bne.n	8006612 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2220      	movs	r2, #32
 800664e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	330c      	adds	r3, #12
 800665e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	e853 3f00 	ldrex	r3, [r3]
 8006666:	60fb      	str	r3, [r7, #12]
   return(result);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f023 0310 	bic.w	r3, r3, #16
 800666e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	330c      	adds	r3, #12
 8006678:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800667c:	61fa      	str	r2, [r7, #28]
 800667e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006680:	69b9      	ldr	r1, [r7, #24]
 8006682:	69fa      	ldr	r2, [r7, #28]
 8006684:	e841 2300 	strex	r3, r2, [r1]
 8006688:	617b      	str	r3, [r7, #20]
   return(result);
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d1e3      	bne.n	8006658 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006690:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006694:	4619      	mov	r1, r3
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 f83e 	bl	8006718 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800669c:	e023      	b.n	80066e6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800669e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d009      	beq.n	80066be <HAL_UART_IRQHandler+0x4ea>
 80066aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d003      	beq.n	80066be <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 f95d 	bl	8006976 <UART_Transmit_IT>
    return;
 80066bc:	e014      	b.n	80066e8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80066be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d00e      	beq.n	80066e8 <HAL_UART_IRQHandler+0x514>
 80066ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d008      	beq.n	80066e8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 f99d 	bl	8006a16 <UART_EndTransmit_IT>
    return;
 80066dc:	e004      	b.n	80066e8 <HAL_UART_IRQHandler+0x514>
    return;
 80066de:	bf00      	nop
 80066e0:	e002      	b.n	80066e8 <HAL_UART_IRQHandler+0x514>
      return;
 80066e2:	bf00      	nop
 80066e4:	e000      	b.n	80066e8 <HAL_UART_IRQHandler+0x514>
      return;
 80066e6:	bf00      	nop
  }
}
 80066e8:	37e8      	adds	r7, #232	; 0xe8
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop

080066f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80066f8:	bf00      	nop
 80066fa:	370c      	adds	r7, #12
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr

08006704 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006704:	b480      	push	{r7}
 8006706:	b083      	sub	sp, #12
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800670c:	bf00      	nop
 800670e:	370c      	adds	r7, #12
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	460b      	mov	r3, r1
 8006722:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006724:	bf00      	nop
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b090      	sub	sp, #64	; 0x40
 8006734:	af00      	add	r7, sp, #0
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	603b      	str	r3, [r7, #0]
 800673c:	4613      	mov	r3, r2
 800673e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006740:	e050      	b.n	80067e4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006742:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006748:	d04c      	beq.n	80067e4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800674a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800674c:	2b00      	cmp	r3, #0
 800674e:	d007      	beq.n	8006760 <UART_WaitOnFlagUntilTimeout+0x30>
 8006750:	f7fc fa28 	bl	8002ba4 <HAL_GetTick>
 8006754:	4602      	mov	r2, r0
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800675c:	429a      	cmp	r2, r3
 800675e:	d241      	bcs.n	80067e4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	330c      	adds	r3, #12
 8006766:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800676a:	e853 3f00 	ldrex	r3, [r3]
 800676e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006772:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006776:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	330c      	adds	r3, #12
 800677e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006780:	637a      	str	r2, [r7, #52]	; 0x34
 8006782:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006784:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006786:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006788:	e841 2300 	strex	r3, r2, [r1]
 800678c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800678e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006790:	2b00      	cmp	r3, #0
 8006792:	d1e5      	bne.n	8006760 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	3314      	adds	r3, #20
 800679a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	e853 3f00 	ldrex	r3, [r3]
 80067a2:	613b      	str	r3, [r7, #16]
   return(result);
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	f023 0301 	bic.w	r3, r3, #1
 80067aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	3314      	adds	r3, #20
 80067b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067b4:	623a      	str	r2, [r7, #32]
 80067b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b8:	69f9      	ldr	r1, [r7, #28]
 80067ba:	6a3a      	ldr	r2, [r7, #32]
 80067bc:	e841 2300 	strex	r3, r2, [r1]
 80067c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d1e5      	bne.n	8006794 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2220      	movs	r2, #32
 80067cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2220      	movs	r2, #32
 80067d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80067e0:	2303      	movs	r3, #3
 80067e2:	e00f      	b.n	8006804 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	4013      	ands	r3, r2
 80067ee:	68ba      	ldr	r2, [r7, #8]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	bf0c      	ite	eq
 80067f4:	2301      	moveq	r3, #1
 80067f6:	2300      	movne	r3, #0
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	461a      	mov	r2, r3
 80067fc:	79fb      	ldrb	r3, [r7, #7]
 80067fe:	429a      	cmp	r2, r3
 8006800:	d09f      	beq.n	8006742 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	3740      	adds	r7, #64	; 0x40
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800680c:	b480      	push	{r7}
 800680e:	b085      	sub	sp, #20
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	4613      	mov	r3, r2
 8006818:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	68ba      	ldr	r2, [r7, #8]
 800681e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	88fa      	ldrh	r2, [r7, #6]
 8006824:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	88fa      	ldrh	r2, [r7, #6]
 800682a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2200      	movs	r2, #0
 8006830:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2222      	movs	r2, #34	; 0x22
 8006836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2200      	movs	r2, #0
 800683e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d007      	beq.n	800685a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	68da      	ldr	r2, [r3, #12]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006858:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	695a      	ldr	r2, [r3, #20]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f042 0201 	orr.w	r2, r2, #1
 8006868:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	68da      	ldr	r2, [r3, #12]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f042 0220 	orr.w	r2, r2, #32
 8006878:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800687a:	2300      	movs	r3, #0
}
 800687c:	4618      	mov	r0, r3
 800687e:	3714      	adds	r7, #20
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006888:	b480      	push	{r7}
 800688a:	b095      	sub	sp, #84	; 0x54
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	330c      	adds	r3, #12
 8006896:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800689a:	e853 3f00 	ldrex	r3, [r3]
 800689e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80068a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	330c      	adds	r3, #12
 80068ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80068b0:	643a      	str	r2, [r7, #64]	; 0x40
 80068b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80068b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80068b8:	e841 2300 	strex	r3, r2, [r1]
 80068bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80068be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d1e5      	bne.n	8006890 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	3314      	adds	r3, #20
 80068ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068cc:	6a3b      	ldr	r3, [r7, #32]
 80068ce:	e853 3f00 	ldrex	r3, [r3]
 80068d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	f023 0301 	bic.w	r3, r3, #1
 80068da:	64bb      	str	r3, [r7, #72]	; 0x48
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	3314      	adds	r3, #20
 80068e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068ec:	e841 2300 	strex	r3, r2, [r1]
 80068f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d1e5      	bne.n	80068c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d119      	bne.n	8006934 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	330c      	adds	r3, #12
 8006906:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	e853 3f00 	ldrex	r3, [r3]
 800690e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	f023 0310 	bic.w	r3, r3, #16
 8006916:	647b      	str	r3, [r7, #68]	; 0x44
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	330c      	adds	r3, #12
 800691e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006920:	61ba      	str	r2, [r7, #24]
 8006922:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006924:	6979      	ldr	r1, [r7, #20]
 8006926:	69ba      	ldr	r2, [r7, #24]
 8006928:	e841 2300 	strex	r3, r2, [r1]
 800692c:	613b      	str	r3, [r7, #16]
   return(result);
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d1e5      	bne.n	8006900 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2220      	movs	r2, #32
 8006938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006942:	bf00      	nop
 8006944:	3754      	adds	r7, #84	; 0x54
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr

0800694e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800694e:	b580      	push	{r7, lr}
 8006950:	b084      	sub	sp, #16
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800695a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2200      	movs	r2, #0
 8006960:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2200      	movs	r2, #0
 8006966:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006968:	68f8      	ldr	r0, [r7, #12]
 800696a:	f7ff fecb 	bl	8006704 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800696e:	bf00      	nop
 8006970:	3710      	adds	r7, #16
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}

08006976 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006976:	b480      	push	{r7}
 8006978:	b085      	sub	sp, #20
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006984:	b2db      	uxtb	r3, r3
 8006986:	2b21      	cmp	r3, #33	; 0x21
 8006988:	d13e      	bne.n	8006a08 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006992:	d114      	bne.n	80069be <UART_Transmit_IT+0x48>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	691b      	ldr	r3, [r3, #16]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d110      	bne.n	80069be <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6a1b      	ldr	r3, [r3, #32]
 80069a0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	881b      	ldrh	r3, [r3, #0]
 80069a6:	461a      	mov	r2, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069b0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6a1b      	ldr	r3, [r3, #32]
 80069b6:	1c9a      	adds	r2, r3, #2
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	621a      	str	r2, [r3, #32]
 80069bc:	e008      	b.n	80069d0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a1b      	ldr	r3, [r3, #32]
 80069c2:	1c59      	adds	r1, r3, #1
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	6211      	str	r1, [r2, #32]
 80069c8:	781a      	ldrb	r2, [r3, #0]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	3b01      	subs	r3, #1
 80069d8:	b29b      	uxth	r3, r3
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	4619      	mov	r1, r3
 80069de:	84d1      	strh	r1, [r2, #38]	; 0x26
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d10f      	bne.n	8006a04 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68da      	ldr	r2, [r3, #12]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069f2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	68da      	ldr	r2, [r3, #12]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a02:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006a04:	2300      	movs	r3, #0
 8006a06:	e000      	b.n	8006a0a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006a08:	2302      	movs	r3, #2
  }
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3714      	adds	r7, #20
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr

08006a16 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b082      	sub	sp, #8
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	68da      	ldr	r2, [r3, #12]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a2c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2220      	movs	r2, #32
 8006a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f7ff fe5a 	bl	80066f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3708      	adds	r7, #8
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}

08006a46 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006a46:	b580      	push	{r7, lr}
 8006a48:	b08c      	sub	sp, #48	; 0x30
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	2b22      	cmp	r3, #34	; 0x22
 8006a58:	f040 80ab 	bne.w	8006bb2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a64:	d117      	bne.n	8006a96 <UART_Receive_IT+0x50>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d113      	bne.n	8006a96 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a76:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a84:	b29a      	uxth	r2, r3
 8006a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a88:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a8e:	1c9a      	adds	r2, r3, #2
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	629a      	str	r2, [r3, #40]	; 0x28
 8006a94:	e026      	b.n	8006ae4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aa8:	d007      	beq.n	8006aba <UART_Receive_IT+0x74>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d10a      	bne.n	8006ac8 <UART_Receive_IT+0x82>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d106      	bne.n	8006ac8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	b2da      	uxtb	r2, r3
 8006ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac4:	701a      	strb	r2, [r3, #0]
 8006ac6:	e008      	b.n	8006ada <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ad4:	b2da      	uxtb	r2, r3
 8006ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ade:	1c5a      	adds	r2, r3, #1
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	3b01      	subs	r3, #1
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	4619      	mov	r1, r3
 8006af2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d15a      	bne.n	8006bae <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	68da      	ldr	r2, [r3, #12]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f022 0220 	bic.w	r2, r2, #32
 8006b06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68da      	ldr	r2, [r3, #12]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	695a      	ldr	r2, [r3, #20]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f022 0201 	bic.w	r2, r2, #1
 8006b26:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2220      	movs	r2, #32
 8006b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d135      	bne.n	8006ba4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	330c      	adds	r3, #12
 8006b44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	e853 3f00 	ldrex	r3, [r3]
 8006b4c:	613b      	str	r3, [r7, #16]
   return(result);
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	f023 0310 	bic.w	r3, r3, #16
 8006b54:	627b      	str	r3, [r7, #36]	; 0x24
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	330c      	adds	r3, #12
 8006b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b5e:	623a      	str	r2, [r7, #32]
 8006b60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b62:	69f9      	ldr	r1, [r7, #28]
 8006b64:	6a3a      	ldr	r2, [r7, #32]
 8006b66:	e841 2300 	strex	r3, r2, [r1]
 8006b6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1e5      	bne.n	8006b3e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 0310 	and.w	r3, r3, #16
 8006b7c:	2b10      	cmp	r3, #16
 8006b7e:	d10a      	bne.n	8006b96 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b80:	2300      	movs	r3, #0
 8006b82:	60fb      	str	r3, [r7, #12]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	60fb      	str	r3, [r7, #12]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	60fb      	str	r3, [r7, #12]
 8006b94:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f7ff fdbb 	bl	8006718 <HAL_UARTEx_RxEventCallback>
 8006ba2:	e002      	b.n	8006baa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f7fb f943 	bl	8001e30 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006baa:	2300      	movs	r3, #0
 8006bac:	e002      	b.n	8006bb4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	e000      	b.n	8006bb4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006bb2:	2302      	movs	r3, #2
  }
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3730      	adds	r7, #48	; 0x30
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bc0:	b0c0      	sub	sp, #256	; 0x100
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	691b      	ldr	r3, [r3, #16]
 8006bd0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bd8:	68d9      	ldr	r1, [r3, #12]
 8006bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	ea40 0301 	orr.w	r3, r0, r1
 8006be4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bea:	689a      	ldr	r2, [r3, #8]
 8006bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	431a      	orrs	r2, r3
 8006bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bf8:	695b      	ldr	r3, [r3, #20]
 8006bfa:	431a      	orrs	r2, r3
 8006bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c00:	69db      	ldr	r3, [r3, #28]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	68db      	ldr	r3, [r3, #12]
 8006c10:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006c14:	f021 010c 	bic.w	r1, r1, #12
 8006c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c22:	430b      	orrs	r3, r1
 8006c24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	695b      	ldr	r3, [r3, #20]
 8006c2e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c36:	6999      	ldr	r1, [r3, #24]
 8006c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	ea40 0301 	orr.w	r3, r0, r1
 8006c42:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	4b8f      	ldr	r3, [pc, #572]	; (8006e88 <UART_SetConfig+0x2cc>)
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d005      	beq.n	8006c5c <UART_SetConfig+0xa0>
 8006c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	4b8d      	ldr	r3, [pc, #564]	; (8006e8c <UART_SetConfig+0x2d0>)
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d104      	bne.n	8006c66 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c5c:	f7fd ffe6 	bl	8004c2c <HAL_RCC_GetPCLK2Freq>
 8006c60:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006c64:	e003      	b.n	8006c6e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c66:	f7fd ffcd 	bl	8004c04 <HAL_RCC_GetPCLK1Freq>
 8006c6a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c72:	69db      	ldr	r3, [r3, #28]
 8006c74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c78:	f040 810c 	bne.w	8006e94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c80:	2200      	movs	r2, #0
 8006c82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006c86:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006c8a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006c8e:	4622      	mov	r2, r4
 8006c90:	462b      	mov	r3, r5
 8006c92:	1891      	adds	r1, r2, r2
 8006c94:	65b9      	str	r1, [r7, #88]	; 0x58
 8006c96:	415b      	adcs	r3, r3
 8006c98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c9a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006c9e:	4621      	mov	r1, r4
 8006ca0:	eb12 0801 	adds.w	r8, r2, r1
 8006ca4:	4629      	mov	r1, r5
 8006ca6:	eb43 0901 	adc.w	r9, r3, r1
 8006caa:	f04f 0200 	mov.w	r2, #0
 8006cae:	f04f 0300 	mov.w	r3, #0
 8006cb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006cb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006cba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006cbe:	4690      	mov	r8, r2
 8006cc0:	4699      	mov	r9, r3
 8006cc2:	4623      	mov	r3, r4
 8006cc4:	eb18 0303 	adds.w	r3, r8, r3
 8006cc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006ccc:	462b      	mov	r3, r5
 8006cce:	eb49 0303 	adc.w	r3, r9, r3
 8006cd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006ce2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006ce6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006cea:	460b      	mov	r3, r1
 8006cec:	18db      	adds	r3, r3, r3
 8006cee:	653b      	str	r3, [r7, #80]	; 0x50
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	eb42 0303 	adc.w	r3, r2, r3
 8006cf6:	657b      	str	r3, [r7, #84]	; 0x54
 8006cf8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006cfc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006d00:	f7f9 ffd2 	bl	8000ca8 <__aeabi_uldivmod>
 8006d04:	4602      	mov	r2, r0
 8006d06:	460b      	mov	r3, r1
 8006d08:	4b61      	ldr	r3, [pc, #388]	; (8006e90 <UART_SetConfig+0x2d4>)
 8006d0a:	fba3 2302 	umull	r2, r3, r3, r2
 8006d0e:	095b      	lsrs	r3, r3, #5
 8006d10:	011c      	lsls	r4, r3, #4
 8006d12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d16:	2200      	movs	r2, #0
 8006d18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d1c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006d20:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006d24:	4642      	mov	r2, r8
 8006d26:	464b      	mov	r3, r9
 8006d28:	1891      	adds	r1, r2, r2
 8006d2a:	64b9      	str	r1, [r7, #72]	; 0x48
 8006d2c:	415b      	adcs	r3, r3
 8006d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006d34:	4641      	mov	r1, r8
 8006d36:	eb12 0a01 	adds.w	sl, r2, r1
 8006d3a:	4649      	mov	r1, r9
 8006d3c:	eb43 0b01 	adc.w	fp, r3, r1
 8006d40:	f04f 0200 	mov.w	r2, #0
 8006d44:	f04f 0300 	mov.w	r3, #0
 8006d48:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006d4c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006d50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d54:	4692      	mov	sl, r2
 8006d56:	469b      	mov	fp, r3
 8006d58:	4643      	mov	r3, r8
 8006d5a:	eb1a 0303 	adds.w	r3, sl, r3
 8006d5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d62:	464b      	mov	r3, r9
 8006d64:	eb4b 0303 	adc.w	r3, fp, r3
 8006d68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d78:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006d7c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006d80:	460b      	mov	r3, r1
 8006d82:	18db      	adds	r3, r3, r3
 8006d84:	643b      	str	r3, [r7, #64]	; 0x40
 8006d86:	4613      	mov	r3, r2
 8006d88:	eb42 0303 	adc.w	r3, r2, r3
 8006d8c:	647b      	str	r3, [r7, #68]	; 0x44
 8006d8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006d92:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006d96:	f7f9 ff87 	bl	8000ca8 <__aeabi_uldivmod>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	4611      	mov	r1, r2
 8006da0:	4b3b      	ldr	r3, [pc, #236]	; (8006e90 <UART_SetConfig+0x2d4>)
 8006da2:	fba3 2301 	umull	r2, r3, r3, r1
 8006da6:	095b      	lsrs	r3, r3, #5
 8006da8:	2264      	movs	r2, #100	; 0x64
 8006daa:	fb02 f303 	mul.w	r3, r2, r3
 8006dae:	1acb      	subs	r3, r1, r3
 8006db0:	00db      	lsls	r3, r3, #3
 8006db2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006db6:	4b36      	ldr	r3, [pc, #216]	; (8006e90 <UART_SetConfig+0x2d4>)
 8006db8:	fba3 2302 	umull	r2, r3, r3, r2
 8006dbc:	095b      	lsrs	r3, r3, #5
 8006dbe:	005b      	lsls	r3, r3, #1
 8006dc0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006dc4:	441c      	add	r4, r3
 8006dc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006dd0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006dd4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006dd8:	4642      	mov	r2, r8
 8006dda:	464b      	mov	r3, r9
 8006ddc:	1891      	adds	r1, r2, r2
 8006dde:	63b9      	str	r1, [r7, #56]	; 0x38
 8006de0:	415b      	adcs	r3, r3
 8006de2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006de4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006de8:	4641      	mov	r1, r8
 8006dea:	1851      	adds	r1, r2, r1
 8006dec:	6339      	str	r1, [r7, #48]	; 0x30
 8006dee:	4649      	mov	r1, r9
 8006df0:	414b      	adcs	r3, r1
 8006df2:	637b      	str	r3, [r7, #52]	; 0x34
 8006df4:	f04f 0200 	mov.w	r2, #0
 8006df8:	f04f 0300 	mov.w	r3, #0
 8006dfc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006e00:	4659      	mov	r1, fp
 8006e02:	00cb      	lsls	r3, r1, #3
 8006e04:	4651      	mov	r1, sl
 8006e06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e0a:	4651      	mov	r1, sl
 8006e0c:	00ca      	lsls	r2, r1, #3
 8006e0e:	4610      	mov	r0, r2
 8006e10:	4619      	mov	r1, r3
 8006e12:	4603      	mov	r3, r0
 8006e14:	4642      	mov	r2, r8
 8006e16:	189b      	adds	r3, r3, r2
 8006e18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e1c:	464b      	mov	r3, r9
 8006e1e:	460a      	mov	r2, r1
 8006e20:	eb42 0303 	adc.w	r3, r2, r3
 8006e24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006e34:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006e38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006e3c:	460b      	mov	r3, r1
 8006e3e:	18db      	adds	r3, r3, r3
 8006e40:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e42:	4613      	mov	r3, r2
 8006e44:	eb42 0303 	adc.w	r3, r2, r3
 8006e48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006e52:	f7f9 ff29 	bl	8000ca8 <__aeabi_uldivmod>
 8006e56:	4602      	mov	r2, r0
 8006e58:	460b      	mov	r3, r1
 8006e5a:	4b0d      	ldr	r3, [pc, #52]	; (8006e90 <UART_SetConfig+0x2d4>)
 8006e5c:	fba3 1302 	umull	r1, r3, r3, r2
 8006e60:	095b      	lsrs	r3, r3, #5
 8006e62:	2164      	movs	r1, #100	; 0x64
 8006e64:	fb01 f303 	mul.w	r3, r1, r3
 8006e68:	1ad3      	subs	r3, r2, r3
 8006e6a:	00db      	lsls	r3, r3, #3
 8006e6c:	3332      	adds	r3, #50	; 0x32
 8006e6e:	4a08      	ldr	r2, [pc, #32]	; (8006e90 <UART_SetConfig+0x2d4>)
 8006e70:	fba2 2303 	umull	r2, r3, r2, r3
 8006e74:	095b      	lsrs	r3, r3, #5
 8006e76:	f003 0207 	and.w	r2, r3, #7
 8006e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4422      	add	r2, r4
 8006e82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006e84:	e105      	b.n	8007092 <UART_SetConfig+0x4d6>
 8006e86:	bf00      	nop
 8006e88:	40011000 	.word	0x40011000
 8006e8c:	40011400 	.word	0x40011400
 8006e90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006e9e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006ea2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006ea6:	4642      	mov	r2, r8
 8006ea8:	464b      	mov	r3, r9
 8006eaa:	1891      	adds	r1, r2, r2
 8006eac:	6239      	str	r1, [r7, #32]
 8006eae:	415b      	adcs	r3, r3
 8006eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8006eb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006eb6:	4641      	mov	r1, r8
 8006eb8:	1854      	adds	r4, r2, r1
 8006eba:	4649      	mov	r1, r9
 8006ebc:	eb43 0501 	adc.w	r5, r3, r1
 8006ec0:	f04f 0200 	mov.w	r2, #0
 8006ec4:	f04f 0300 	mov.w	r3, #0
 8006ec8:	00eb      	lsls	r3, r5, #3
 8006eca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ece:	00e2      	lsls	r2, r4, #3
 8006ed0:	4614      	mov	r4, r2
 8006ed2:	461d      	mov	r5, r3
 8006ed4:	4643      	mov	r3, r8
 8006ed6:	18e3      	adds	r3, r4, r3
 8006ed8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006edc:	464b      	mov	r3, r9
 8006ede:	eb45 0303 	adc.w	r3, r5, r3
 8006ee2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006ef2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006ef6:	f04f 0200 	mov.w	r2, #0
 8006efa:	f04f 0300 	mov.w	r3, #0
 8006efe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006f02:	4629      	mov	r1, r5
 8006f04:	008b      	lsls	r3, r1, #2
 8006f06:	4621      	mov	r1, r4
 8006f08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f0c:	4621      	mov	r1, r4
 8006f0e:	008a      	lsls	r2, r1, #2
 8006f10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006f14:	f7f9 fec8 	bl	8000ca8 <__aeabi_uldivmod>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	460b      	mov	r3, r1
 8006f1c:	4b60      	ldr	r3, [pc, #384]	; (80070a0 <UART_SetConfig+0x4e4>)
 8006f1e:	fba3 2302 	umull	r2, r3, r3, r2
 8006f22:	095b      	lsrs	r3, r3, #5
 8006f24:	011c      	lsls	r4, r3, #4
 8006f26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006f30:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006f34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006f38:	4642      	mov	r2, r8
 8006f3a:	464b      	mov	r3, r9
 8006f3c:	1891      	adds	r1, r2, r2
 8006f3e:	61b9      	str	r1, [r7, #24]
 8006f40:	415b      	adcs	r3, r3
 8006f42:	61fb      	str	r3, [r7, #28]
 8006f44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f48:	4641      	mov	r1, r8
 8006f4a:	1851      	adds	r1, r2, r1
 8006f4c:	6139      	str	r1, [r7, #16]
 8006f4e:	4649      	mov	r1, r9
 8006f50:	414b      	adcs	r3, r1
 8006f52:	617b      	str	r3, [r7, #20]
 8006f54:	f04f 0200 	mov.w	r2, #0
 8006f58:	f04f 0300 	mov.w	r3, #0
 8006f5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f60:	4659      	mov	r1, fp
 8006f62:	00cb      	lsls	r3, r1, #3
 8006f64:	4651      	mov	r1, sl
 8006f66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f6a:	4651      	mov	r1, sl
 8006f6c:	00ca      	lsls	r2, r1, #3
 8006f6e:	4610      	mov	r0, r2
 8006f70:	4619      	mov	r1, r3
 8006f72:	4603      	mov	r3, r0
 8006f74:	4642      	mov	r2, r8
 8006f76:	189b      	adds	r3, r3, r2
 8006f78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006f7c:	464b      	mov	r3, r9
 8006f7e:	460a      	mov	r2, r1
 8006f80:	eb42 0303 	adc.w	r3, r2, r3
 8006f84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	67bb      	str	r3, [r7, #120]	; 0x78
 8006f92:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006f94:	f04f 0200 	mov.w	r2, #0
 8006f98:	f04f 0300 	mov.w	r3, #0
 8006f9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006fa0:	4649      	mov	r1, r9
 8006fa2:	008b      	lsls	r3, r1, #2
 8006fa4:	4641      	mov	r1, r8
 8006fa6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006faa:	4641      	mov	r1, r8
 8006fac:	008a      	lsls	r2, r1, #2
 8006fae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006fb2:	f7f9 fe79 	bl	8000ca8 <__aeabi_uldivmod>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	460b      	mov	r3, r1
 8006fba:	4b39      	ldr	r3, [pc, #228]	; (80070a0 <UART_SetConfig+0x4e4>)
 8006fbc:	fba3 1302 	umull	r1, r3, r3, r2
 8006fc0:	095b      	lsrs	r3, r3, #5
 8006fc2:	2164      	movs	r1, #100	; 0x64
 8006fc4:	fb01 f303 	mul.w	r3, r1, r3
 8006fc8:	1ad3      	subs	r3, r2, r3
 8006fca:	011b      	lsls	r3, r3, #4
 8006fcc:	3332      	adds	r3, #50	; 0x32
 8006fce:	4a34      	ldr	r2, [pc, #208]	; (80070a0 <UART_SetConfig+0x4e4>)
 8006fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8006fd4:	095b      	lsrs	r3, r3, #5
 8006fd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006fda:	441c      	add	r4, r3
 8006fdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	673b      	str	r3, [r7, #112]	; 0x70
 8006fe4:	677a      	str	r2, [r7, #116]	; 0x74
 8006fe6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006fea:	4642      	mov	r2, r8
 8006fec:	464b      	mov	r3, r9
 8006fee:	1891      	adds	r1, r2, r2
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	415b      	adcs	r3, r3
 8006ff4:	60fb      	str	r3, [r7, #12]
 8006ff6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ffa:	4641      	mov	r1, r8
 8006ffc:	1851      	adds	r1, r2, r1
 8006ffe:	6039      	str	r1, [r7, #0]
 8007000:	4649      	mov	r1, r9
 8007002:	414b      	adcs	r3, r1
 8007004:	607b      	str	r3, [r7, #4]
 8007006:	f04f 0200 	mov.w	r2, #0
 800700a:	f04f 0300 	mov.w	r3, #0
 800700e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007012:	4659      	mov	r1, fp
 8007014:	00cb      	lsls	r3, r1, #3
 8007016:	4651      	mov	r1, sl
 8007018:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800701c:	4651      	mov	r1, sl
 800701e:	00ca      	lsls	r2, r1, #3
 8007020:	4610      	mov	r0, r2
 8007022:	4619      	mov	r1, r3
 8007024:	4603      	mov	r3, r0
 8007026:	4642      	mov	r2, r8
 8007028:	189b      	adds	r3, r3, r2
 800702a:	66bb      	str	r3, [r7, #104]	; 0x68
 800702c:	464b      	mov	r3, r9
 800702e:	460a      	mov	r2, r1
 8007030:	eb42 0303 	adc.w	r3, r2, r3
 8007034:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	663b      	str	r3, [r7, #96]	; 0x60
 8007040:	667a      	str	r2, [r7, #100]	; 0x64
 8007042:	f04f 0200 	mov.w	r2, #0
 8007046:	f04f 0300 	mov.w	r3, #0
 800704a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800704e:	4649      	mov	r1, r9
 8007050:	008b      	lsls	r3, r1, #2
 8007052:	4641      	mov	r1, r8
 8007054:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007058:	4641      	mov	r1, r8
 800705a:	008a      	lsls	r2, r1, #2
 800705c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007060:	f7f9 fe22 	bl	8000ca8 <__aeabi_uldivmod>
 8007064:	4602      	mov	r2, r0
 8007066:	460b      	mov	r3, r1
 8007068:	4b0d      	ldr	r3, [pc, #52]	; (80070a0 <UART_SetConfig+0x4e4>)
 800706a:	fba3 1302 	umull	r1, r3, r3, r2
 800706e:	095b      	lsrs	r3, r3, #5
 8007070:	2164      	movs	r1, #100	; 0x64
 8007072:	fb01 f303 	mul.w	r3, r1, r3
 8007076:	1ad3      	subs	r3, r2, r3
 8007078:	011b      	lsls	r3, r3, #4
 800707a:	3332      	adds	r3, #50	; 0x32
 800707c:	4a08      	ldr	r2, [pc, #32]	; (80070a0 <UART_SetConfig+0x4e4>)
 800707e:	fba2 2303 	umull	r2, r3, r2, r3
 8007082:	095b      	lsrs	r3, r3, #5
 8007084:	f003 020f 	and.w	r2, r3, #15
 8007088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4422      	add	r2, r4
 8007090:	609a      	str	r2, [r3, #8]
}
 8007092:	bf00      	nop
 8007094:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007098:	46bd      	mov	sp, r7
 800709a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800709e:	bf00      	nop
 80070a0:	51eb851f 	.word	0x51eb851f

080070a4 <__errno>:
 80070a4:	4b01      	ldr	r3, [pc, #4]	; (80070ac <__errno+0x8>)
 80070a6:	6818      	ldr	r0, [r3, #0]
 80070a8:	4770      	bx	lr
 80070aa:	bf00      	nop
 80070ac:	2000000c 	.word	0x2000000c

080070b0 <__libc_init_array>:
 80070b0:	b570      	push	{r4, r5, r6, lr}
 80070b2:	4d0d      	ldr	r5, [pc, #52]	; (80070e8 <__libc_init_array+0x38>)
 80070b4:	4c0d      	ldr	r4, [pc, #52]	; (80070ec <__libc_init_array+0x3c>)
 80070b6:	1b64      	subs	r4, r4, r5
 80070b8:	10a4      	asrs	r4, r4, #2
 80070ba:	2600      	movs	r6, #0
 80070bc:	42a6      	cmp	r6, r4
 80070be:	d109      	bne.n	80070d4 <__libc_init_array+0x24>
 80070c0:	4d0b      	ldr	r5, [pc, #44]	; (80070f0 <__libc_init_array+0x40>)
 80070c2:	4c0c      	ldr	r4, [pc, #48]	; (80070f4 <__libc_init_array+0x44>)
 80070c4:	f005 fb42 	bl	800c74c <_init>
 80070c8:	1b64      	subs	r4, r4, r5
 80070ca:	10a4      	asrs	r4, r4, #2
 80070cc:	2600      	movs	r6, #0
 80070ce:	42a6      	cmp	r6, r4
 80070d0:	d105      	bne.n	80070de <__libc_init_array+0x2e>
 80070d2:	bd70      	pop	{r4, r5, r6, pc}
 80070d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80070d8:	4798      	blx	r3
 80070da:	3601      	adds	r6, #1
 80070dc:	e7ee      	b.n	80070bc <__libc_init_array+0xc>
 80070de:	f855 3b04 	ldr.w	r3, [r5], #4
 80070e2:	4798      	blx	r3
 80070e4:	3601      	adds	r6, #1
 80070e6:	e7f2      	b.n	80070ce <__libc_init_array+0x1e>
 80070e8:	0800cd98 	.word	0x0800cd98
 80070ec:	0800cd98 	.word	0x0800cd98
 80070f0:	0800cd98 	.word	0x0800cd98
 80070f4:	0800cd9c 	.word	0x0800cd9c

080070f8 <memset>:
 80070f8:	4402      	add	r2, r0
 80070fa:	4603      	mov	r3, r0
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d100      	bne.n	8007102 <memset+0xa>
 8007100:	4770      	bx	lr
 8007102:	f803 1b01 	strb.w	r1, [r3], #1
 8007106:	e7f9      	b.n	80070fc <memset+0x4>

08007108 <__cvt>:
 8007108:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800710c:	ec55 4b10 	vmov	r4, r5, d0
 8007110:	2d00      	cmp	r5, #0
 8007112:	460e      	mov	r6, r1
 8007114:	4619      	mov	r1, r3
 8007116:	462b      	mov	r3, r5
 8007118:	bfbb      	ittet	lt
 800711a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800711e:	461d      	movlt	r5, r3
 8007120:	2300      	movge	r3, #0
 8007122:	232d      	movlt	r3, #45	; 0x2d
 8007124:	700b      	strb	r3, [r1, #0]
 8007126:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007128:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800712c:	4691      	mov	r9, r2
 800712e:	f023 0820 	bic.w	r8, r3, #32
 8007132:	bfbc      	itt	lt
 8007134:	4622      	movlt	r2, r4
 8007136:	4614      	movlt	r4, r2
 8007138:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800713c:	d005      	beq.n	800714a <__cvt+0x42>
 800713e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007142:	d100      	bne.n	8007146 <__cvt+0x3e>
 8007144:	3601      	adds	r6, #1
 8007146:	2102      	movs	r1, #2
 8007148:	e000      	b.n	800714c <__cvt+0x44>
 800714a:	2103      	movs	r1, #3
 800714c:	ab03      	add	r3, sp, #12
 800714e:	9301      	str	r3, [sp, #4]
 8007150:	ab02      	add	r3, sp, #8
 8007152:	9300      	str	r3, [sp, #0]
 8007154:	ec45 4b10 	vmov	d0, r4, r5
 8007158:	4653      	mov	r3, sl
 800715a:	4632      	mov	r2, r6
 800715c:	f001 fe58 	bl	8008e10 <_dtoa_r>
 8007160:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007164:	4607      	mov	r7, r0
 8007166:	d102      	bne.n	800716e <__cvt+0x66>
 8007168:	f019 0f01 	tst.w	r9, #1
 800716c:	d022      	beq.n	80071b4 <__cvt+0xac>
 800716e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007172:	eb07 0906 	add.w	r9, r7, r6
 8007176:	d110      	bne.n	800719a <__cvt+0x92>
 8007178:	783b      	ldrb	r3, [r7, #0]
 800717a:	2b30      	cmp	r3, #48	; 0x30
 800717c:	d10a      	bne.n	8007194 <__cvt+0x8c>
 800717e:	2200      	movs	r2, #0
 8007180:	2300      	movs	r3, #0
 8007182:	4620      	mov	r0, r4
 8007184:	4629      	mov	r1, r5
 8007186:	f7f9 fcaf 	bl	8000ae8 <__aeabi_dcmpeq>
 800718a:	b918      	cbnz	r0, 8007194 <__cvt+0x8c>
 800718c:	f1c6 0601 	rsb	r6, r6, #1
 8007190:	f8ca 6000 	str.w	r6, [sl]
 8007194:	f8da 3000 	ldr.w	r3, [sl]
 8007198:	4499      	add	r9, r3
 800719a:	2200      	movs	r2, #0
 800719c:	2300      	movs	r3, #0
 800719e:	4620      	mov	r0, r4
 80071a0:	4629      	mov	r1, r5
 80071a2:	f7f9 fca1 	bl	8000ae8 <__aeabi_dcmpeq>
 80071a6:	b108      	cbz	r0, 80071ac <__cvt+0xa4>
 80071a8:	f8cd 900c 	str.w	r9, [sp, #12]
 80071ac:	2230      	movs	r2, #48	; 0x30
 80071ae:	9b03      	ldr	r3, [sp, #12]
 80071b0:	454b      	cmp	r3, r9
 80071b2:	d307      	bcc.n	80071c4 <__cvt+0xbc>
 80071b4:	9b03      	ldr	r3, [sp, #12]
 80071b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80071b8:	1bdb      	subs	r3, r3, r7
 80071ba:	4638      	mov	r0, r7
 80071bc:	6013      	str	r3, [r2, #0]
 80071be:	b004      	add	sp, #16
 80071c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071c4:	1c59      	adds	r1, r3, #1
 80071c6:	9103      	str	r1, [sp, #12]
 80071c8:	701a      	strb	r2, [r3, #0]
 80071ca:	e7f0      	b.n	80071ae <__cvt+0xa6>

080071cc <__exponent>:
 80071cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071ce:	4603      	mov	r3, r0
 80071d0:	2900      	cmp	r1, #0
 80071d2:	bfb8      	it	lt
 80071d4:	4249      	neglt	r1, r1
 80071d6:	f803 2b02 	strb.w	r2, [r3], #2
 80071da:	bfb4      	ite	lt
 80071dc:	222d      	movlt	r2, #45	; 0x2d
 80071de:	222b      	movge	r2, #43	; 0x2b
 80071e0:	2909      	cmp	r1, #9
 80071e2:	7042      	strb	r2, [r0, #1]
 80071e4:	dd2a      	ble.n	800723c <__exponent+0x70>
 80071e6:	f10d 0407 	add.w	r4, sp, #7
 80071ea:	46a4      	mov	ip, r4
 80071ec:	270a      	movs	r7, #10
 80071ee:	46a6      	mov	lr, r4
 80071f0:	460a      	mov	r2, r1
 80071f2:	fb91 f6f7 	sdiv	r6, r1, r7
 80071f6:	fb07 1516 	mls	r5, r7, r6, r1
 80071fa:	3530      	adds	r5, #48	; 0x30
 80071fc:	2a63      	cmp	r2, #99	; 0x63
 80071fe:	f104 34ff 	add.w	r4, r4, #4294967295
 8007202:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007206:	4631      	mov	r1, r6
 8007208:	dcf1      	bgt.n	80071ee <__exponent+0x22>
 800720a:	3130      	adds	r1, #48	; 0x30
 800720c:	f1ae 0502 	sub.w	r5, lr, #2
 8007210:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007214:	1c44      	adds	r4, r0, #1
 8007216:	4629      	mov	r1, r5
 8007218:	4561      	cmp	r1, ip
 800721a:	d30a      	bcc.n	8007232 <__exponent+0x66>
 800721c:	f10d 0209 	add.w	r2, sp, #9
 8007220:	eba2 020e 	sub.w	r2, r2, lr
 8007224:	4565      	cmp	r5, ip
 8007226:	bf88      	it	hi
 8007228:	2200      	movhi	r2, #0
 800722a:	4413      	add	r3, r2
 800722c:	1a18      	subs	r0, r3, r0
 800722e:	b003      	add	sp, #12
 8007230:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007232:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007236:	f804 2f01 	strb.w	r2, [r4, #1]!
 800723a:	e7ed      	b.n	8007218 <__exponent+0x4c>
 800723c:	2330      	movs	r3, #48	; 0x30
 800723e:	3130      	adds	r1, #48	; 0x30
 8007240:	7083      	strb	r3, [r0, #2]
 8007242:	70c1      	strb	r1, [r0, #3]
 8007244:	1d03      	adds	r3, r0, #4
 8007246:	e7f1      	b.n	800722c <__exponent+0x60>

08007248 <_printf_float>:
 8007248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800724c:	ed2d 8b02 	vpush	{d8}
 8007250:	b08d      	sub	sp, #52	; 0x34
 8007252:	460c      	mov	r4, r1
 8007254:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007258:	4616      	mov	r6, r2
 800725a:	461f      	mov	r7, r3
 800725c:	4605      	mov	r5, r0
 800725e:	f002 ff35 	bl	800a0cc <_localeconv_r>
 8007262:	f8d0 a000 	ldr.w	sl, [r0]
 8007266:	4650      	mov	r0, sl
 8007268:	f7f8 ffc2 	bl	80001f0 <strlen>
 800726c:	2300      	movs	r3, #0
 800726e:	930a      	str	r3, [sp, #40]	; 0x28
 8007270:	6823      	ldr	r3, [r4, #0]
 8007272:	9305      	str	r3, [sp, #20]
 8007274:	f8d8 3000 	ldr.w	r3, [r8]
 8007278:	f894 b018 	ldrb.w	fp, [r4, #24]
 800727c:	3307      	adds	r3, #7
 800727e:	f023 0307 	bic.w	r3, r3, #7
 8007282:	f103 0208 	add.w	r2, r3, #8
 8007286:	f8c8 2000 	str.w	r2, [r8]
 800728a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007292:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007296:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800729a:	9307      	str	r3, [sp, #28]
 800729c:	f8cd 8018 	str.w	r8, [sp, #24]
 80072a0:	ee08 0a10 	vmov	s16, r0
 80072a4:	4b9f      	ldr	r3, [pc, #636]	; (8007524 <_printf_float+0x2dc>)
 80072a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80072aa:	f04f 32ff 	mov.w	r2, #4294967295
 80072ae:	f7f9 fc4d 	bl	8000b4c <__aeabi_dcmpun>
 80072b2:	bb88      	cbnz	r0, 8007318 <_printf_float+0xd0>
 80072b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80072b8:	4b9a      	ldr	r3, [pc, #616]	; (8007524 <_printf_float+0x2dc>)
 80072ba:	f04f 32ff 	mov.w	r2, #4294967295
 80072be:	f7f9 fc27 	bl	8000b10 <__aeabi_dcmple>
 80072c2:	bb48      	cbnz	r0, 8007318 <_printf_float+0xd0>
 80072c4:	2200      	movs	r2, #0
 80072c6:	2300      	movs	r3, #0
 80072c8:	4640      	mov	r0, r8
 80072ca:	4649      	mov	r1, r9
 80072cc:	f7f9 fc16 	bl	8000afc <__aeabi_dcmplt>
 80072d0:	b110      	cbz	r0, 80072d8 <_printf_float+0x90>
 80072d2:	232d      	movs	r3, #45	; 0x2d
 80072d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072d8:	4b93      	ldr	r3, [pc, #588]	; (8007528 <_printf_float+0x2e0>)
 80072da:	4894      	ldr	r0, [pc, #592]	; (800752c <_printf_float+0x2e4>)
 80072dc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80072e0:	bf94      	ite	ls
 80072e2:	4698      	movls	r8, r3
 80072e4:	4680      	movhi	r8, r0
 80072e6:	2303      	movs	r3, #3
 80072e8:	6123      	str	r3, [r4, #16]
 80072ea:	9b05      	ldr	r3, [sp, #20]
 80072ec:	f023 0204 	bic.w	r2, r3, #4
 80072f0:	6022      	str	r2, [r4, #0]
 80072f2:	f04f 0900 	mov.w	r9, #0
 80072f6:	9700      	str	r7, [sp, #0]
 80072f8:	4633      	mov	r3, r6
 80072fa:	aa0b      	add	r2, sp, #44	; 0x2c
 80072fc:	4621      	mov	r1, r4
 80072fe:	4628      	mov	r0, r5
 8007300:	f000 f9d8 	bl	80076b4 <_printf_common>
 8007304:	3001      	adds	r0, #1
 8007306:	f040 8090 	bne.w	800742a <_printf_float+0x1e2>
 800730a:	f04f 30ff 	mov.w	r0, #4294967295
 800730e:	b00d      	add	sp, #52	; 0x34
 8007310:	ecbd 8b02 	vpop	{d8}
 8007314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007318:	4642      	mov	r2, r8
 800731a:	464b      	mov	r3, r9
 800731c:	4640      	mov	r0, r8
 800731e:	4649      	mov	r1, r9
 8007320:	f7f9 fc14 	bl	8000b4c <__aeabi_dcmpun>
 8007324:	b140      	cbz	r0, 8007338 <_printf_float+0xf0>
 8007326:	464b      	mov	r3, r9
 8007328:	2b00      	cmp	r3, #0
 800732a:	bfbc      	itt	lt
 800732c:	232d      	movlt	r3, #45	; 0x2d
 800732e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007332:	487f      	ldr	r0, [pc, #508]	; (8007530 <_printf_float+0x2e8>)
 8007334:	4b7f      	ldr	r3, [pc, #508]	; (8007534 <_printf_float+0x2ec>)
 8007336:	e7d1      	b.n	80072dc <_printf_float+0x94>
 8007338:	6863      	ldr	r3, [r4, #4]
 800733a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800733e:	9206      	str	r2, [sp, #24]
 8007340:	1c5a      	adds	r2, r3, #1
 8007342:	d13f      	bne.n	80073c4 <_printf_float+0x17c>
 8007344:	2306      	movs	r3, #6
 8007346:	6063      	str	r3, [r4, #4]
 8007348:	9b05      	ldr	r3, [sp, #20]
 800734a:	6861      	ldr	r1, [r4, #4]
 800734c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007350:	2300      	movs	r3, #0
 8007352:	9303      	str	r3, [sp, #12]
 8007354:	ab0a      	add	r3, sp, #40	; 0x28
 8007356:	e9cd b301 	strd	fp, r3, [sp, #4]
 800735a:	ab09      	add	r3, sp, #36	; 0x24
 800735c:	ec49 8b10 	vmov	d0, r8, r9
 8007360:	9300      	str	r3, [sp, #0]
 8007362:	6022      	str	r2, [r4, #0]
 8007364:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007368:	4628      	mov	r0, r5
 800736a:	f7ff fecd 	bl	8007108 <__cvt>
 800736e:	9b06      	ldr	r3, [sp, #24]
 8007370:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007372:	2b47      	cmp	r3, #71	; 0x47
 8007374:	4680      	mov	r8, r0
 8007376:	d108      	bne.n	800738a <_printf_float+0x142>
 8007378:	1cc8      	adds	r0, r1, #3
 800737a:	db02      	blt.n	8007382 <_printf_float+0x13a>
 800737c:	6863      	ldr	r3, [r4, #4]
 800737e:	4299      	cmp	r1, r3
 8007380:	dd41      	ble.n	8007406 <_printf_float+0x1be>
 8007382:	f1ab 0b02 	sub.w	fp, fp, #2
 8007386:	fa5f fb8b 	uxtb.w	fp, fp
 800738a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800738e:	d820      	bhi.n	80073d2 <_printf_float+0x18a>
 8007390:	3901      	subs	r1, #1
 8007392:	465a      	mov	r2, fp
 8007394:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007398:	9109      	str	r1, [sp, #36]	; 0x24
 800739a:	f7ff ff17 	bl	80071cc <__exponent>
 800739e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073a0:	1813      	adds	r3, r2, r0
 80073a2:	2a01      	cmp	r2, #1
 80073a4:	4681      	mov	r9, r0
 80073a6:	6123      	str	r3, [r4, #16]
 80073a8:	dc02      	bgt.n	80073b0 <_printf_float+0x168>
 80073aa:	6822      	ldr	r2, [r4, #0]
 80073ac:	07d2      	lsls	r2, r2, #31
 80073ae:	d501      	bpl.n	80073b4 <_printf_float+0x16c>
 80073b0:	3301      	adds	r3, #1
 80073b2:	6123      	str	r3, [r4, #16]
 80073b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d09c      	beq.n	80072f6 <_printf_float+0xae>
 80073bc:	232d      	movs	r3, #45	; 0x2d
 80073be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073c2:	e798      	b.n	80072f6 <_printf_float+0xae>
 80073c4:	9a06      	ldr	r2, [sp, #24]
 80073c6:	2a47      	cmp	r2, #71	; 0x47
 80073c8:	d1be      	bne.n	8007348 <_printf_float+0x100>
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d1bc      	bne.n	8007348 <_printf_float+0x100>
 80073ce:	2301      	movs	r3, #1
 80073d0:	e7b9      	b.n	8007346 <_printf_float+0xfe>
 80073d2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80073d6:	d118      	bne.n	800740a <_printf_float+0x1c2>
 80073d8:	2900      	cmp	r1, #0
 80073da:	6863      	ldr	r3, [r4, #4]
 80073dc:	dd0b      	ble.n	80073f6 <_printf_float+0x1ae>
 80073de:	6121      	str	r1, [r4, #16]
 80073e0:	b913      	cbnz	r3, 80073e8 <_printf_float+0x1a0>
 80073e2:	6822      	ldr	r2, [r4, #0]
 80073e4:	07d0      	lsls	r0, r2, #31
 80073e6:	d502      	bpl.n	80073ee <_printf_float+0x1a6>
 80073e8:	3301      	adds	r3, #1
 80073ea:	440b      	add	r3, r1
 80073ec:	6123      	str	r3, [r4, #16]
 80073ee:	65a1      	str	r1, [r4, #88]	; 0x58
 80073f0:	f04f 0900 	mov.w	r9, #0
 80073f4:	e7de      	b.n	80073b4 <_printf_float+0x16c>
 80073f6:	b913      	cbnz	r3, 80073fe <_printf_float+0x1b6>
 80073f8:	6822      	ldr	r2, [r4, #0]
 80073fa:	07d2      	lsls	r2, r2, #31
 80073fc:	d501      	bpl.n	8007402 <_printf_float+0x1ba>
 80073fe:	3302      	adds	r3, #2
 8007400:	e7f4      	b.n	80073ec <_printf_float+0x1a4>
 8007402:	2301      	movs	r3, #1
 8007404:	e7f2      	b.n	80073ec <_printf_float+0x1a4>
 8007406:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800740a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800740c:	4299      	cmp	r1, r3
 800740e:	db05      	blt.n	800741c <_printf_float+0x1d4>
 8007410:	6823      	ldr	r3, [r4, #0]
 8007412:	6121      	str	r1, [r4, #16]
 8007414:	07d8      	lsls	r0, r3, #31
 8007416:	d5ea      	bpl.n	80073ee <_printf_float+0x1a6>
 8007418:	1c4b      	adds	r3, r1, #1
 800741a:	e7e7      	b.n	80073ec <_printf_float+0x1a4>
 800741c:	2900      	cmp	r1, #0
 800741e:	bfd4      	ite	le
 8007420:	f1c1 0202 	rsble	r2, r1, #2
 8007424:	2201      	movgt	r2, #1
 8007426:	4413      	add	r3, r2
 8007428:	e7e0      	b.n	80073ec <_printf_float+0x1a4>
 800742a:	6823      	ldr	r3, [r4, #0]
 800742c:	055a      	lsls	r2, r3, #21
 800742e:	d407      	bmi.n	8007440 <_printf_float+0x1f8>
 8007430:	6923      	ldr	r3, [r4, #16]
 8007432:	4642      	mov	r2, r8
 8007434:	4631      	mov	r1, r6
 8007436:	4628      	mov	r0, r5
 8007438:	47b8      	blx	r7
 800743a:	3001      	adds	r0, #1
 800743c:	d12c      	bne.n	8007498 <_printf_float+0x250>
 800743e:	e764      	b.n	800730a <_printf_float+0xc2>
 8007440:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007444:	f240 80e0 	bls.w	8007608 <_printf_float+0x3c0>
 8007448:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800744c:	2200      	movs	r2, #0
 800744e:	2300      	movs	r3, #0
 8007450:	f7f9 fb4a 	bl	8000ae8 <__aeabi_dcmpeq>
 8007454:	2800      	cmp	r0, #0
 8007456:	d034      	beq.n	80074c2 <_printf_float+0x27a>
 8007458:	4a37      	ldr	r2, [pc, #220]	; (8007538 <_printf_float+0x2f0>)
 800745a:	2301      	movs	r3, #1
 800745c:	4631      	mov	r1, r6
 800745e:	4628      	mov	r0, r5
 8007460:	47b8      	blx	r7
 8007462:	3001      	adds	r0, #1
 8007464:	f43f af51 	beq.w	800730a <_printf_float+0xc2>
 8007468:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800746c:	429a      	cmp	r2, r3
 800746e:	db02      	blt.n	8007476 <_printf_float+0x22e>
 8007470:	6823      	ldr	r3, [r4, #0]
 8007472:	07d8      	lsls	r0, r3, #31
 8007474:	d510      	bpl.n	8007498 <_printf_float+0x250>
 8007476:	ee18 3a10 	vmov	r3, s16
 800747a:	4652      	mov	r2, sl
 800747c:	4631      	mov	r1, r6
 800747e:	4628      	mov	r0, r5
 8007480:	47b8      	blx	r7
 8007482:	3001      	adds	r0, #1
 8007484:	f43f af41 	beq.w	800730a <_printf_float+0xc2>
 8007488:	f04f 0800 	mov.w	r8, #0
 800748c:	f104 091a 	add.w	r9, r4, #26
 8007490:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007492:	3b01      	subs	r3, #1
 8007494:	4543      	cmp	r3, r8
 8007496:	dc09      	bgt.n	80074ac <_printf_float+0x264>
 8007498:	6823      	ldr	r3, [r4, #0]
 800749a:	079b      	lsls	r3, r3, #30
 800749c:	f100 8105 	bmi.w	80076aa <_printf_float+0x462>
 80074a0:	68e0      	ldr	r0, [r4, #12]
 80074a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074a4:	4298      	cmp	r0, r3
 80074a6:	bfb8      	it	lt
 80074a8:	4618      	movlt	r0, r3
 80074aa:	e730      	b.n	800730e <_printf_float+0xc6>
 80074ac:	2301      	movs	r3, #1
 80074ae:	464a      	mov	r2, r9
 80074b0:	4631      	mov	r1, r6
 80074b2:	4628      	mov	r0, r5
 80074b4:	47b8      	blx	r7
 80074b6:	3001      	adds	r0, #1
 80074b8:	f43f af27 	beq.w	800730a <_printf_float+0xc2>
 80074bc:	f108 0801 	add.w	r8, r8, #1
 80074c0:	e7e6      	b.n	8007490 <_printf_float+0x248>
 80074c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	dc39      	bgt.n	800753c <_printf_float+0x2f4>
 80074c8:	4a1b      	ldr	r2, [pc, #108]	; (8007538 <_printf_float+0x2f0>)
 80074ca:	2301      	movs	r3, #1
 80074cc:	4631      	mov	r1, r6
 80074ce:	4628      	mov	r0, r5
 80074d0:	47b8      	blx	r7
 80074d2:	3001      	adds	r0, #1
 80074d4:	f43f af19 	beq.w	800730a <_printf_float+0xc2>
 80074d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074dc:	4313      	orrs	r3, r2
 80074de:	d102      	bne.n	80074e6 <_printf_float+0x29e>
 80074e0:	6823      	ldr	r3, [r4, #0]
 80074e2:	07d9      	lsls	r1, r3, #31
 80074e4:	d5d8      	bpl.n	8007498 <_printf_float+0x250>
 80074e6:	ee18 3a10 	vmov	r3, s16
 80074ea:	4652      	mov	r2, sl
 80074ec:	4631      	mov	r1, r6
 80074ee:	4628      	mov	r0, r5
 80074f0:	47b8      	blx	r7
 80074f2:	3001      	adds	r0, #1
 80074f4:	f43f af09 	beq.w	800730a <_printf_float+0xc2>
 80074f8:	f04f 0900 	mov.w	r9, #0
 80074fc:	f104 0a1a 	add.w	sl, r4, #26
 8007500:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007502:	425b      	negs	r3, r3
 8007504:	454b      	cmp	r3, r9
 8007506:	dc01      	bgt.n	800750c <_printf_float+0x2c4>
 8007508:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800750a:	e792      	b.n	8007432 <_printf_float+0x1ea>
 800750c:	2301      	movs	r3, #1
 800750e:	4652      	mov	r2, sl
 8007510:	4631      	mov	r1, r6
 8007512:	4628      	mov	r0, r5
 8007514:	47b8      	blx	r7
 8007516:	3001      	adds	r0, #1
 8007518:	f43f aef7 	beq.w	800730a <_printf_float+0xc2>
 800751c:	f109 0901 	add.w	r9, r9, #1
 8007520:	e7ee      	b.n	8007500 <_printf_float+0x2b8>
 8007522:	bf00      	nop
 8007524:	7fefffff 	.word	0x7fefffff
 8007528:	0800c864 	.word	0x0800c864
 800752c:	0800c868 	.word	0x0800c868
 8007530:	0800c870 	.word	0x0800c870
 8007534:	0800c86c 	.word	0x0800c86c
 8007538:	0800cc69 	.word	0x0800cc69
 800753c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800753e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007540:	429a      	cmp	r2, r3
 8007542:	bfa8      	it	ge
 8007544:	461a      	movge	r2, r3
 8007546:	2a00      	cmp	r2, #0
 8007548:	4691      	mov	r9, r2
 800754a:	dc37      	bgt.n	80075bc <_printf_float+0x374>
 800754c:	f04f 0b00 	mov.w	fp, #0
 8007550:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007554:	f104 021a 	add.w	r2, r4, #26
 8007558:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800755a:	9305      	str	r3, [sp, #20]
 800755c:	eba3 0309 	sub.w	r3, r3, r9
 8007560:	455b      	cmp	r3, fp
 8007562:	dc33      	bgt.n	80075cc <_printf_float+0x384>
 8007564:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007568:	429a      	cmp	r2, r3
 800756a:	db3b      	blt.n	80075e4 <_printf_float+0x39c>
 800756c:	6823      	ldr	r3, [r4, #0]
 800756e:	07da      	lsls	r2, r3, #31
 8007570:	d438      	bmi.n	80075e4 <_printf_float+0x39c>
 8007572:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007574:	9a05      	ldr	r2, [sp, #20]
 8007576:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007578:	1a9a      	subs	r2, r3, r2
 800757a:	eba3 0901 	sub.w	r9, r3, r1
 800757e:	4591      	cmp	r9, r2
 8007580:	bfa8      	it	ge
 8007582:	4691      	movge	r9, r2
 8007584:	f1b9 0f00 	cmp.w	r9, #0
 8007588:	dc35      	bgt.n	80075f6 <_printf_float+0x3ae>
 800758a:	f04f 0800 	mov.w	r8, #0
 800758e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007592:	f104 0a1a 	add.w	sl, r4, #26
 8007596:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800759a:	1a9b      	subs	r3, r3, r2
 800759c:	eba3 0309 	sub.w	r3, r3, r9
 80075a0:	4543      	cmp	r3, r8
 80075a2:	f77f af79 	ble.w	8007498 <_printf_float+0x250>
 80075a6:	2301      	movs	r3, #1
 80075a8:	4652      	mov	r2, sl
 80075aa:	4631      	mov	r1, r6
 80075ac:	4628      	mov	r0, r5
 80075ae:	47b8      	blx	r7
 80075b0:	3001      	adds	r0, #1
 80075b2:	f43f aeaa 	beq.w	800730a <_printf_float+0xc2>
 80075b6:	f108 0801 	add.w	r8, r8, #1
 80075ba:	e7ec      	b.n	8007596 <_printf_float+0x34e>
 80075bc:	4613      	mov	r3, r2
 80075be:	4631      	mov	r1, r6
 80075c0:	4642      	mov	r2, r8
 80075c2:	4628      	mov	r0, r5
 80075c4:	47b8      	blx	r7
 80075c6:	3001      	adds	r0, #1
 80075c8:	d1c0      	bne.n	800754c <_printf_float+0x304>
 80075ca:	e69e      	b.n	800730a <_printf_float+0xc2>
 80075cc:	2301      	movs	r3, #1
 80075ce:	4631      	mov	r1, r6
 80075d0:	4628      	mov	r0, r5
 80075d2:	9205      	str	r2, [sp, #20]
 80075d4:	47b8      	blx	r7
 80075d6:	3001      	adds	r0, #1
 80075d8:	f43f ae97 	beq.w	800730a <_printf_float+0xc2>
 80075dc:	9a05      	ldr	r2, [sp, #20]
 80075de:	f10b 0b01 	add.w	fp, fp, #1
 80075e2:	e7b9      	b.n	8007558 <_printf_float+0x310>
 80075e4:	ee18 3a10 	vmov	r3, s16
 80075e8:	4652      	mov	r2, sl
 80075ea:	4631      	mov	r1, r6
 80075ec:	4628      	mov	r0, r5
 80075ee:	47b8      	blx	r7
 80075f0:	3001      	adds	r0, #1
 80075f2:	d1be      	bne.n	8007572 <_printf_float+0x32a>
 80075f4:	e689      	b.n	800730a <_printf_float+0xc2>
 80075f6:	9a05      	ldr	r2, [sp, #20]
 80075f8:	464b      	mov	r3, r9
 80075fa:	4442      	add	r2, r8
 80075fc:	4631      	mov	r1, r6
 80075fe:	4628      	mov	r0, r5
 8007600:	47b8      	blx	r7
 8007602:	3001      	adds	r0, #1
 8007604:	d1c1      	bne.n	800758a <_printf_float+0x342>
 8007606:	e680      	b.n	800730a <_printf_float+0xc2>
 8007608:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800760a:	2a01      	cmp	r2, #1
 800760c:	dc01      	bgt.n	8007612 <_printf_float+0x3ca>
 800760e:	07db      	lsls	r3, r3, #31
 8007610:	d538      	bpl.n	8007684 <_printf_float+0x43c>
 8007612:	2301      	movs	r3, #1
 8007614:	4642      	mov	r2, r8
 8007616:	4631      	mov	r1, r6
 8007618:	4628      	mov	r0, r5
 800761a:	47b8      	blx	r7
 800761c:	3001      	adds	r0, #1
 800761e:	f43f ae74 	beq.w	800730a <_printf_float+0xc2>
 8007622:	ee18 3a10 	vmov	r3, s16
 8007626:	4652      	mov	r2, sl
 8007628:	4631      	mov	r1, r6
 800762a:	4628      	mov	r0, r5
 800762c:	47b8      	blx	r7
 800762e:	3001      	adds	r0, #1
 8007630:	f43f ae6b 	beq.w	800730a <_printf_float+0xc2>
 8007634:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007638:	2200      	movs	r2, #0
 800763a:	2300      	movs	r3, #0
 800763c:	f7f9 fa54 	bl	8000ae8 <__aeabi_dcmpeq>
 8007640:	b9d8      	cbnz	r0, 800767a <_printf_float+0x432>
 8007642:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007644:	f108 0201 	add.w	r2, r8, #1
 8007648:	3b01      	subs	r3, #1
 800764a:	4631      	mov	r1, r6
 800764c:	4628      	mov	r0, r5
 800764e:	47b8      	blx	r7
 8007650:	3001      	adds	r0, #1
 8007652:	d10e      	bne.n	8007672 <_printf_float+0x42a>
 8007654:	e659      	b.n	800730a <_printf_float+0xc2>
 8007656:	2301      	movs	r3, #1
 8007658:	4652      	mov	r2, sl
 800765a:	4631      	mov	r1, r6
 800765c:	4628      	mov	r0, r5
 800765e:	47b8      	blx	r7
 8007660:	3001      	adds	r0, #1
 8007662:	f43f ae52 	beq.w	800730a <_printf_float+0xc2>
 8007666:	f108 0801 	add.w	r8, r8, #1
 800766a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800766c:	3b01      	subs	r3, #1
 800766e:	4543      	cmp	r3, r8
 8007670:	dcf1      	bgt.n	8007656 <_printf_float+0x40e>
 8007672:	464b      	mov	r3, r9
 8007674:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007678:	e6dc      	b.n	8007434 <_printf_float+0x1ec>
 800767a:	f04f 0800 	mov.w	r8, #0
 800767e:	f104 0a1a 	add.w	sl, r4, #26
 8007682:	e7f2      	b.n	800766a <_printf_float+0x422>
 8007684:	2301      	movs	r3, #1
 8007686:	4642      	mov	r2, r8
 8007688:	e7df      	b.n	800764a <_printf_float+0x402>
 800768a:	2301      	movs	r3, #1
 800768c:	464a      	mov	r2, r9
 800768e:	4631      	mov	r1, r6
 8007690:	4628      	mov	r0, r5
 8007692:	47b8      	blx	r7
 8007694:	3001      	adds	r0, #1
 8007696:	f43f ae38 	beq.w	800730a <_printf_float+0xc2>
 800769a:	f108 0801 	add.w	r8, r8, #1
 800769e:	68e3      	ldr	r3, [r4, #12]
 80076a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80076a2:	1a5b      	subs	r3, r3, r1
 80076a4:	4543      	cmp	r3, r8
 80076a6:	dcf0      	bgt.n	800768a <_printf_float+0x442>
 80076a8:	e6fa      	b.n	80074a0 <_printf_float+0x258>
 80076aa:	f04f 0800 	mov.w	r8, #0
 80076ae:	f104 0919 	add.w	r9, r4, #25
 80076b2:	e7f4      	b.n	800769e <_printf_float+0x456>

080076b4 <_printf_common>:
 80076b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076b8:	4616      	mov	r6, r2
 80076ba:	4699      	mov	r9, r3
 80076bc:	688a      	ldr	r2, [r1, #8]
 80076be:	690b      	ldr	r3, [r1, #16]
 80076c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80076c4:	4293      	cmp	r3, r2
 80076c6:	bfb8      	it	lt
 80076c8:	4613      	movlt	r3, r2
 80076ca:	6033      	str	r3, [r6, #0]
 80076cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80076d0:	4607      	mov	r7, r0
 80076d2:	460c      	mov	r4, r1
 80076d4:	b10a      	cbz	r2, 80076da <_printf_common+0x26>
 80076d6:	3301      	adds	r3, #1
 80076d8:	6033      	str	r3, [r6, #0]
 80076da:	6823      	ldr	r3, [r4, #0]
 80076dc:	0699      	lsls	r1, r3, #26
 80076de:	bf42      	ittt	mi
 80076e0:	6833      	ldrmi	r3, [r6, #0]
 80076e2:	3302      	addmi	r3, #2
 80076e4:	6033      	strmi	r3, [r6, #0]
 80076e6:	6825      	ldr	r5, [r4, #0]
 80076e8:	f015 0506 	ands.w	r5, r5, #6
 80076ec:	d106      	bne.n	80076fc <_printf_common+0x48>
 80076ee:	f104 0a19 	add.w	sl, r4, #25
 80076f2:	68e3      	ldr	r3, [r4, #12]
 80076f4:	6832      	ldr	r2, [r6, #0]
 80076f6:	1a9b      	subs	r3, r3, r2
 80076f8:	42ab      	cmp	r3, r5
 80076fa:	dc26      	bgt.n	800774a <_printf_common+0x96>
 80076fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007700:	1e13      	subs	r3, r2, #0
 8007702:	6822      	ldr	r2, [r4, #0]
 8007704:	bf18      	it	ne
 8007706:	2301      	movne	r3, #1
 8007708:	0692      	lsls	r2, r2, #26
 800770a:	d42b      	bmi.n	8007764 <_printf_common+0xb0>
 800770c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007710:	4649      	mov	r1, r9
 8007712:	4638      	mov	r0, r7
 8007714:	47c0      	blx	r8
 8007716:	3001      	adds	r0, #1
 8007718:	d01e      	beq.n	8007758 <_printf_common+0xa4>
 800771a:	6823      	ldr	r3, [r4, #0]
 800771c:	68e5      	ldr	r5, [r4, #12]
 800771e:	6832      	ldr	r2, [r6, #0]
 8007720:	f003 0306 	and.w	r3, r3, #6
 8007724:	2b04      	cmp	r3, #4
 8007726:	bf08      	it	eq
 8007728:	1aad      	subeq	r5, r5, r2
 800772a:	68a3      	ldr	r3, [r4, #8]
 800772c:	6922      	ldr	r2, [r4, #16]
 800772e:	bf0c      	ite	eq
 8007730:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007734:	2500      	movne	r5, #0
 8007736:	4293      	cmp	r3, r2
 8007738:	bfc4      	itt	gt
 800773a:	1a9b      	subgt	r3, r3, r2
 800773c:	18ed      	addgt	r5, r5, r3
 800773e:	2600      	movs	r6, #0
 8007740:	341a      	adds	r4, #26
 8007742:	42b5      	cmp	r5, r6
 8007744:	d11a      	bne.n	800777c <_printf_common+0xc8>
 8007746:	2000      	movs	r0, #0
 8007748:	e008      	b.n	800775c <_printf_common+0xa8>
 800774a:	2301      	movs	r3, #1
 800774c:	4652      	mov	r2, sl
 800774e:	4649      	mov	r1, r9
 8007750:	4638      	mov	r0, r7
 8007752:	47c0      	blx	r8
 8007754:	3001      	adds	r0, #1
 8007756:	d103      	bne.n	8007760 <_printf_common+0xac>
 8007758:	f04f 30ff 	mov.w	r0, #4294967295
 800775c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007760:	3501      	adds	r5, #1
 8007762:	e7c6      	b.n	80076f2 <_printf_common+0x3e>
 8007764:	18e1      	adds	r1, r4, r3
 8007766:	1c5a      	adds	r2, r3, #1
 8007768:	2030      	movs	r0, #48	; 0x30
 800776a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800776e:	4422      	add	r2, r4
 8007770:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007774:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007778:	3302      	adds	r3, #2
 800777a:	e7c7      	b.n	800770c <_printf_common+0x58>
 800777c:	2301      	movs	r3, #1
 800777e:	4622      	mov	r2, r4
 8007780:	4649      	mov	r1, r9
 8007782:	4638      	mov	r0, r7
 8007784:	47c0      	blx	r8
 8007786:	3001      	adds	r0, #1
 8007788:	d0e6      	beq.n	8007758 <_printf_common+0xa4>
 800778a:	3601      	adds	r6, #1
 800778c:	e7d9      	b.n	8007742 <_printf_common+0x8e>
	...

08007790 <_printf_i>:
 8007790:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007794:	7e0f      	ldrb	r7, [r1, #24]
 8007796:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007798:	2f78      	cmp	r7, #120	; 0x78
 800779a:	4691      	mov	r9, r2
 800779c:	4680      	mov	r8, r0
 800779e:	460c      	mov	r4, r1
 80077a0:	469a      	mov	sl, r3
 80077a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80077a6:	d807      	bhi.n	80077b8 <_printf_i+0x28>
 80077a8:	2f62      	cmp	r7, #98	; 0x62
 80077aa:	d80a      	bhi.n	80077c2 <_printf_i+0x32>
 80077ac:	2f00      	cmp	r7, #0
 80077ae:	f000 80d8 	beq.w	8007962 <_printf_i+0x1d2>
 80077b2:	2f58      	cmp	r7, #88	; 0x58
 80077b4:	f000 80a3 	beq.w	80078fe <_printf_i+0x16e>
 80077b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80077c0:	e03a      	b.n	8007838 <_printf_i+0xa8>
 80077c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80077c6:	2b15      	cmp	r3, #21
 80077c8:	d8f6      	bhi.n	80077b8 <_printf_i+0x28>
 80077ca:	a101      	add	r1, pc, #4	; (adr r1, 80077d0 <_printf_i+0x40>)
 80077cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80077d0:	08007829 	.word	0x08007829
 80077d4:	0800783d 	.word	0x0800783d
 80077d8:	080077b9 	.word	0x080077b9
 80077dc:	080077b9 	.word	0x080077b9
 80077e0:	080077b9 	.word	0x080077b9
 80077e4:	080077b9 	.word	0x080077b9
 80077e8:	0800783d 	.word	0x0800783d
 80077ec:	080077b9 	.word	0x080077b9
 80077f0:	080077b9 	.word	0x080077b9
 80077f4:	080077b9 	.word	0x080077b9
 80077f8:	080077b9 	.word	0x080077b9
 80077fc:	08007949 	.word	0x08007949
 8007800:	0800786d 	.word	0x0800786d
 8007804:	0800792b 	.word	0x0800792b
 8007808:	080077b9 	.word	0x080077b9
 800780c:	080077b9 	.word	0x080077b9
 8007810:	0800796b 	.word	0x0800796b
 8007814:	080077b9 	.word	0x080077b9
 8007818:	0800786d 	.word	0x0800786d
 800781c:	080077b9 	.word	0x080077b9
 8007820:	080077b9 	.word	0x080077b9
 8007824:	08007933 	.word	0x08007933
 8007828:	682b      	ldr	r3, [r5, #0]
 800782a:	1d1a      	adds	r2, r3, #4
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	602a      	str	r2, [r5, #0]
 8007830:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007834:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007838:	2301      	movs	r3, #1
 800783a:	e0a3      	b.n	8007984 <_printf_i+0x1f4>
 800783c:	6820      	ldr	r0, [r4, #0]
 800783e:	6829      	ldr	r1, [r5, #0]
 8007840:	0606      	lsls	r6, r0, #24
 8007842:	f101 0304 	add.w	r3, r1, #4
 8007846:	d50a      	bpl.n	800785e <_printf_i+0xce>
 8007848:	680e      	ldr	r6, [r1, #0]
 800784a:	602b      	str	r3, [r5, #0]
 800784c:	2e00      	cmp	r6, #0
 800784e:	da03      	bge.n	8007858 <_printf_i+0xc8>
 8007850:	232d      	movs	r3, #45	; 0x2d
 8007852:	4276      	negs	r6, r6
 8007854:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007858:	485e      	ldr	r0, [pc, #376]	; (80079d4 <_printf_i+0x244>)
 800785a:	230a      	movs	r3, #10
 800785c:	e019      	b.n	8007892 <_printf_i+0x102>
 800785e:	680e      	ldr	r6, [r1, #0]
 8007860:	602b      	str	r3, [r5, #0]
 8007862:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007866:	bf18      	it	ne
 8007868:	b236      	sxthne	r6, r6
 800786a:	e7ef      	b.n	800784c <_printf_i+0xbc>
 800786c:	682b      	ldr	r3, [r5, #0]
 800786e:	6820      	ldr	r0, [r4, #0]
 8007870:	1d19      	adds	r1, r3, #4
 8007872:	6029      	str	r1, [r5, #0]
 8007874:	0601      	lsls	r1, r0, #24
 8007876:	d501      	bpl.n	800787c <_printf_i+0xec>
 8007878:	681e      	ldr	r6, [r3, #0]
 800787a:	e002      	b.n	8007882 <_printf_i+0xf2>
 800787c:	0646      	lsls	r6, r0, #25
 800787e:	d5fb      	bpl.n	8007878 <_printf_i+0xe8>
 8007880:	881e      	ldrh	r6, [r3, #0]
 8007882:	4854      	ldr	r0, [pc, #336]	; (80079d4 <_printf_i+0x244>)
 8007884:	2f6f      	cmp	r7, #111	; 0x6f
 8007886:	bf0c      	ite	eq
 8007888:	2308      	moveq	r3, #8
 800788a:	230a      	movne	r3, #10
 800788c:	2100      	movs	r1, #0
 800788e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007892:	6865      	ldr	r5, [r4, #4]
 8007894:	60a5      	str	r5, [r4, #8]
 8007896:	2d00      	cmp	r5, #0
 8007898:	bfa2      	ittt	ge
 800789a:	6821      	ldrge	r1, [r4, #0]
 800789c:	f021 0104 	bicge.w	r1, r1, #4
 80078a0:	6021      	strge	r1, [r4, #0]
 80078a2:	b90e      	cbnz	r6, 80078a8 <_printf_i+0x118>
 80078a4:	2d00      	cmp	r5, #0
 80078a6:	d04d      	beq.n	8007944 <_printf_i+0x1b4>
 80078a8:	4615      	mov	r5, r2
 80078aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80078ae:	fb03 6711 	mls	r7, r3, r1, r6
 80078b2:	5dc7      	ldrb	r7, [r0, r7]
 80078b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80078b8:	4637      	mov	r7, r6
 80078ba:	42bb      	cmp	r3, r7
 80078bc:	460e      	mov	r6, r1
 80078be:	d9f4      	bls.n	80078aa <_printf_i+0x11a>
 80078c0:	2b08      	cmp	r3, #8
 80078c2:	d10b      	bne.n	80078dc <_printf_i+0x14c>
 80078c4:	6823      	ldr	r3, [r4, #0]
 80078c6:	07de      	lsls	r6, r3, #31
 80078c8:	d508      	bpl.n	80078dc <_printf_i+0x14c>
 80078ca:	6923      	ldr	r3, [r4, #16]
 80078cc:	6861      	ldr	r1, [r4, #4]
 80078ce:	4299      	cmp	r1, r3
 80078d0:	bfde      	ittt	le
 80078d2:	2330      	movle	r3, #48	; 0x30
 80078d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80078d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80078dc:	1b52      	subs	r2, r2, r5
 80078de:	6122      	str	r2, [r4, #16]
 80078e0:	f8cd a000 	str.w	sl, [sp]
 80078e4:	464b      	mov	r3, r9
 80078e6:	aa03      	add	r2, sp, #12
 80078e8:	4621      	mov	r1, r4
 80078ea:	4640      	mov	r0, r8
 80078ec:	f7ff fee2 	bl	80076b4 <_printf_common>
 80078f0:	3001      	adds	r0, #1
 80078f2:	d14c      	bne.n	800798e <_printf_i+0x1fe>
 80078f4:	f04f 30ff 	mov.w	r0, #4294967295
 80078f8:	b004      	add	sp, #16
 80078fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078fe:	4835      	ldr	r0, [pc, #212]	; (80079d4 <_printf_i+0x244>)
 8007900:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007904:	6829      	ldr	r1, [r5, #0]
 8007906:	6823      	ldr	r3, [r4, #0]
 8007908:	f851 6b04 	ldr.w	r6, [r1], #4
 800790c:	6029      	str	r1, [r5, #0]
 800790e:	061d      	lsls	r5, r3, #24
 8007910:	d514      	bpl.n	800793c <_printf_i+0x1ac>
 8007912:	07df      	lsls	r7, r3, #31
 8007914:	bf44      	itt	mi
 8007916:	f043 0320 	orrmi.w	r3, r3, #32
 800791a:	6023      	strmi	r3, [r4, #0]
 800791c:	b91e      	cbnz	r6, 8007926 <_printf_i+0x196>
 800791e:	6823      	ldr	r3, [r4, #0]
 8007920:	f023 0320 	bic.w	r3, r3, #32
 8007924:	6023      	str	r3, [r4, #0]
 8007926:	2310      	movs	r3, #16
 8007928:	e7b0      	b.n	800788c <_printf_i+0xfc>
 800792a:	6823      	ldr	r3, [r4, #0]
 800792c:	f043 0320 	orr.w	r3, r3, #32
 8007930:	6023      	str	r3, [r4, #0]
 8007932:	2378      	movs	r3, #120	; 0x78
 8007934:	4828      	ldr	r0, [pc, #160]	; (80079d8 <_printf_i+0x248>)
 8007936:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800793a:	e7e3      	b.n	8007904 <_printf_i+0x174>
 800793c:	0659      	lsls	r1, r3, #25
 800793e:	bf48      	it	mi
 8007940:	b2b6      	uxthmi	r6, r6
 8007942:	e7e6      	b.n	8007912 <_printf_i+0x182>
 8007944:	4615      	mov	r5, r2
 8007946:	e7bb      	b.n	80078c0 <_printf_i+0x130>
 8007948:	682b      	ldr	r3, [r5, #0]
 800794a:	6826      	ldr	r6, [r4, #0]
 800794c:	6961      	ldr	r1, [r4, #20]
 800794e:	1d18      	adds	r0, r3, #4
 8007950:	6028      	str	r0, [r5, #0]
 8007952:	0635      	lsls	r5, r6, #24
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	d501      	bpl.n	800795c <_printf_i+0x1cc>
 8007958:	6019      	str	r1, [r3, #0]
 800795a:	e002      	b.n	8007962 <_printf_i+0x1d2>
 800795c:	0670      	lsls	r0, r6, #25
 800795e:	d5fb      	bpl.n	8007958 <_printf_i+0x1c8>
 8007960:	8019      	strh	r1, [r3, #0]
 8007962:	2300      	movs	r3, #0
 8007964:	6123      	str	r3, [r4, #16]
 8007966:	4615      	mov	r5, r2
 8007968:	e7ba      	b.n	80078e0 <_printf_i+0x150>
 800796a:	682b      	ldr	r3, [r5, #0]
 800796c:	1d1a      	adds	r2, r3, #4
 800796e:	602a      	str	r2, [r5, #0]
 8007970:	681d      	ldr	r5, [r3, #0]
 8007972:	6862      	ldr	r2, [r4, #4]
 8007974:	2100      	movs	r1, #0
 8007976:	4628      	mov	r0, r5
 8007978:	f7f8 fc42 	bl	8000200 <memchr>
 800797c:	b108      	cbz	r0, 8007982 <_printf_i+0x1f2>
 800797e:	1b40      	subs	r0, r0, r5
 8007980:	6060      	str	r0, [r4, #4]
 8007982:	6863      	ldr	r3, [r4, #4]
 8007984:	6123      	str	r3, [r4, #16]
 8007986:	2300      	movs	r3, #0
 8007988:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800798c:	e7a8      	b.n	80078e0 <_printf_i+0x150>
 800798e:	6923      	ldr	r3, [r4, #16]
 8007990:	462a      	mov	r2, r5
 8007992:	4649      	mov	r1, r9
 8007994:	4640      	mov	r0, r8
 8007996:	47d0      	blx	sl
 8007998:	3001      	adds	r0, #1
 800799a:	d0ab      	beq.n	80078f4 <_printf_i+0x164>
 800799c:	6823      	ldr	r3, [r4, #0]
 800799e:	079b      	lsls	r3, r3, #30
 80079a0:	d413      	bmi.n	80079ca <_printf_i+0x23a>
 80079a2:	68e0      	ldr	r0, [r4, #12]
 80079a4:	9b03      	ldr	r3, [sp, #12]
 80079a6:	4298      	cmp	r0, r3
 80079a8:	bfb8      	it	lt
 80079aa:	4618      	movlt	r0, r3
 80079ac:	e7a4      	b.n	80078f8 <_printf_i+0x168>
 80079ae:	2301      	movs	r3, #1
 80079b0:	4632      	mov	r2, r6
 80079b2:	4649      	mov	r1, r9
 80079b4:	4640      	mov	r0, r8
 80079b6:	47d0      	blx	sl
 80079b8:	3001      	adds	r0, #1
 80079ba:	d09b      	beq.n	80078f4 <_printf_i+0x164>
 80079bc:	3501      	adds	r5, #1
 80079be:	68e3      	ldr	r3, [r4, #12]
 80079c0:	9903      	ldr	r1, [sp, #12]
 80079c2:	1a5b      	subs	r3, r3, r1
 80079c4:	42ab      	cmp	r3, r5
 80079c6:	dcf2      	bgt.n	80079ae <_printf_i+0x21e>
 80079c8:	e7eb      	b.n	80079a2 <_printf_i+0x212>
 80079ca:	2500      	movs	r5, #0
 80079cc:	f104 0619 	add.w	r6, r4, #25
 80079d0:	e7f5      	b.n	80079be <_printf_i+0x22e>
 80079d2:	bf00      	nop
 80079d4:	0800c874 	.word	0x0800c874
 80079d8:	0800c885 	.word	0x0800c885

080079dc <_scanf_float>:
 80079dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079e0:	b087      	sub	sp, #28
 80079e2:	4617      	mov	r7, r2
 80079e4:	9303      	str	r3, [sp, #12]
 80079e6:	688b      	ldr	r3, [r1, #8]
 80079e8:	1e5a      	subs	r2, r3, #1
 80079ea:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80079ee:	bf83      	ittte	hi
 80079f0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80079f4:	195b      	addhi	r3, r3, r5
 80079f6:	9302      	strhi	r3, [sp, #8]
 80079f8:	2300      	movls	r3, #0
 80079fa:	bf86      	itte	hi
 80079fc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007a00:	608b      	strhi	r3, [r1, #8]
 8007a02:	9302      	strls	r3, [sp, #8]
 8007a04:	680b      	ldr	r3, [r1, #0]
 8007a06:	468b      	mov	fp, r1
 8007a08:	2500      	movs	r5, #0
 8007a0a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007a0e:	f84b 3b1c 	str.w	r3, [fp], #28
 8007a12:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007a16:	4680      	mov	r8, r0
 8007a18:	460c      	mov	r4, r1
 8007a1a:	465e      	mov	r6, fp
 8007a1c:	46aa      	mov	sl, r5
 8007a1e:	46a9      	mov	r9, r5
 8007a20:	9501      	str	r5, [sp, #4]
 8007a22:	68a2      	ldr	r2, [r4, #8]
 8007a24:	b152      	cbz	r2, 8007a3c <_scanf_float+0x60>
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	2b4e      	cmp	r3, #78	; 0x4e
 8007a2c:	d864      	bhi.n	8007af8 <_scanf_float+0x11c>
 8007a2e:	2b40      	cmp	r3, #64	; 0x40
 8007a30:	d83c      	bhi.n	8007aac <_scanf_float+0xd0>
 8007a32:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007a36:	b2c8      	uxtb	r0, r1
 8007a38:	280e      	cmp	r0, #14
 8007a3a:	d93a      	bls.n	8007ab2 <_scanf_float+0xd6>
 8007a3c:	f1b9 0f00 	cmp.w	r9, #0
 8007a40:	d003      	beq.n	8007a4a <_scanf_float+0x6e>
 8007a42:	6823      	ldr	r3, [r4, #0]
 8007a44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a48:	6023      	str	r3, [r4, #0]
 8007a4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a4e:	f1ba 0f01 	cmp.w	sl, #1
 8007a52:	f200 8113 	bhi.w	8007c7c <_scanf_float+0x2a0>
 8007a56:	455e      	cmp	r6, fp
 8007a58:	f200 8105 	bhi.w	8007c66 <_scanf_float+0x28a>
 8007a5c:	2501      	movs	r5, #1
 8007a5e:	4628      	mov	r0, r5
 8007a60:	b007      	add	sp, #28
 8007a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a66:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007a6a:	2a0d      	cmp	r2, #13
 8007a6c:	d8e6      	bhi.n	8007a3c <_scanf_float+0x60>
 8007a6e:	a101      	add	r1, pc, #4	; (adr r1, 8007a74 <_scanf_float+0x98>)
 8007a70:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007a74:	08007bb3 	.word	0x08007bb3
 8007a78:	08007a3d 	.word	0x08007a3d
 8007a7c:	08007a3d 	.word	0x08007a3d
 8007a80:	08007a3d 	.word	0x08007a3d
 8007a84:	08007c13 	.word	0x08007c13
 8007a88:	08007beb 	.word	0x08007beb
 8007a8c:	08007a3d 	.word	0x08007a3d
 8007a90:	08007a3d 	.word	0x08007a3d
 8007a94:	08007bc1 	.word	0x08007bc1
 8007a98:	08007a3d 	.word	0x08007a3d
 8007a9c:	08007a3d 	.word	0x08007a3d
 8007aa0:	08007a3d 	.word	0x08007a3d
 8007aa4:	08007a3d 	.word	0x08007a3d
 8007aa8:	08007b79 	.word	0x08007b79
 8007aac:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007ab0:	e7db      	b.n	8007a6a <_scanf_float+0x8e>
 8007ab2:	290e      	cmp	r1, #14
 8007ab4:	d8c2      	bhi.n	8007a3c <_scanf_float+0x60>
 8007ab6:	a001      	add	r0, pc, #4	; (adr r0, 8007abc <_scanf_float+0xe0>)
 8007ab8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007abc:	08007b6b 	.word	0x08007b6b
 8007ac0:	08007a3d 	.word	0x08007a3d
 8007ac4:	08007b6b 	.word	0x08007b6b
 8007ac8:	08007bff 	.word	0x08007bff
 8007acc:	08007a3d 	.word	0x08007a3d
 8007ad0:	08007b19 	.word	0x08007b19
 8007ad4:	08007b55 	.word	0x08007b55
 8007ad8:	08007b55 	.word	0x08007b55
 8007adc:	08007b55 	.word	0x08007b55
 8007ae0:	08007b55 	.word	0x08007b55
 8007ae4:	08007b55 	.word	0x08007b55
 8007ae8:	08007b55 	.word	0x08007b55
 8007aec:	08007b55 	.word	0x08007b55
 8007af0:	08007b55 	.word	0x08007b55
 8007af4:	08007b55 	.word	0x08007b55
 8007af8:	2b6e      	cmp	r3, #110	; 0x6e
 8007afa:	d809      	bhi.n	8007b10 <_scanf_float+0x134>
 8007afc:	2b60      	cmp	r3, #96	; 0x60
 8007afe:	d8b2      	bhi.n	8007a66 <_scanf_float+0x8a>
 8007b00:	2b54      	cmp	r3, #84	; 0x54
 8007b02:	d077      	beq.n	8007bf4 <_scanf_float+0x218>
 8007b04:	2b59      	cmp	r3, #89	; 0x59
 8007b06:	d199      	bne.n	8007a3c <_scanf_float+0x60>
 8007b08:	2d07      	cmp	r5, #7
 8007b0a:	d197      	bne.n	8007a3c <_scanf_float+0x60>
 8007b0c:	2508      	movs	r5, #8
 8007b0e:	e029      	b.n	8007b64 <_scanf_float+0x188>
 8007b10:	2b74      	cmp	r3, #116	; 0x74
 8007b12:	d06f      	beq.n	8007bf4 <_scanf_float+0x218>
 8007b14:	2b79      	cmp	r3, #121	; 0x79
 8007b16:	e7f6      	b.n	8007b06 <_scanf_float+0x12a>
 8007b18:	6821      	ldr	r1, [r4, #0]
 8007b1a:	05c8      	lsls	r0, r1, #23
 8007b1c:	d51a      	bpl.n	8007b54 <_scanf_float+0x178>
 8007b1e:	9b02      	ldr	r3, [sp, #8]
 8007b20:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007b24:	6021      	str	r1, [r4, #0]
 8007b26:	f109 0901 	add.w	r9, r9, #1
 8007b2a:	b11b      	cbz	r3, 8007b34 <_scanf_float+0x158>
 8007b2c:	3b01      	subs	r3, #1
 8007b2e:	3201      	adds	r2, #1
 8007b30:	9302      	str	r3, [sp, #8]
 8007b32:	60a2      	str	r2, [r4, #8]
 8007b34:	68a3      	ldr	r3, [r4, #8]
 8007b36:	3b01      	subs	r3, #1
 8007b38:	60a3      	str	r3, [r4, #8]
 8007b3a:	6923      	ldr	r3, [r4, #16]
 8007b3c:	3301      	adds	r3, #1
 8007b3e:	6123      	str	r3, [r4, #16]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	3b01      	subs	r3, #1
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	607b      	str	r3, [r7, #4]
 8007b48:	f340 8084 	ble.w	8007c54 <_scanf_float+0x278>
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	3301      	adds	r3, #1
 8007b50:	603b      	str	r3, [r7, #0]
 8007b52:	e766      	b.n	8007a22 <_scanf_float+0x46>
 8007b54:	eb1a 0f05 	cmn.w	sl, r5
 8007b58:	f47f af70 	bne.w	8007a3c <_scanf_float+0x60>
 8007b5c:	6822      	ldr	r2, [r4, #0]
 8007b5e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007b62:	6022      	str	r2, [r4, #0]
 8007b64:	f806 3b01 	strb.w	r3, [r6], #1
 8007b68:	e7e4      	b.n	8007b34 <_scanf_float+0x158>
 8007b6a:	6822      	ldr	r2, [r4, #0]
 8007b6c:	0610      	lsls	r0, r2, #24
 8007b6e:	f57f af65 	bpl.w	8007a3c <_scanf_float+0x60>
 8007b72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b76:	e7f4      	b.n	8007b62 <_scanf_float+0x186>
 8007b78:	f1ba 0f00 	cmp.w	sl, #0
 8007b7c:	d10e      	bne.n	8007b9c <_scanf_float+0x1c0>
 8007b7e:	f1b9 0f00 	cmp.w	r9, #0
 8007b82:	d10e      	bne.n	8007ba2 <_scanf_float+0x1c6>
 8007b84:	6822      	ldr	r2, [r4, #0]
 8007b86:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007b8a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007b8e:	d108      	bne.n	8007ba2 <_scanf_float+0x1c6>
 8007b90:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007b94:	6022      	str	r2, [r4, #0]
 8007b96:	f04f 0a01 	mov.w	sl, #1
 8007b9a:	e7e3      	b.n	8007b64 <_scanf_float+0x188>
 8007b9c:	f1ba 0f02 	cmp.w	sl, #2
 8007ba0:	d055      	beq.n	8007c4e <_scanf_float+0x272>
 8007ba2:	2d01      	cmp	r5, #1
 8007ba4:	d002      	beq.n	8007bac <_scanf_float+0x1d0>
 8007ba6:	2d04      	cmp	r5, #4
 8007ba8:	f47f af48 	bne.w	8007a3c <_scanf_float+0x60>
 8007bac:	3501      	adds	r5, #1
 8007bae:	b2ed      	uxtb	r5, r5
 8007bb0:	e7d8      	b.n	8007b64 <_scanf_float+0x188>
 8007bb2:	f1ba 0f01 	cmp.w	sl, #1
 8007bb6:	f47f af41 	bne.w	8007a3c <_scanf_float+0x60>
 8007bba:	f04f 0a02 	mov.w	sl, #2
 8007bbe:	e7d1      	b.n	8007b64 <_scanf_float+0x188>
 8007bc0:	b97d      	cbnz	r5, 8007be2 <_scanf_float+0x206>
 8007bc2:	f1b9 0f00 	cmp.w	r9, #0
 8007bc6:	f47f af3c 	bne.w	8007a42 <_scanf_float+0x66>
 8007bca:	6822      	ldr	r2, [r4, #0]
 8007bcc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007bd0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007bd4:	f47f af39 	bne.w	8007a4a <_scanf_float+0x6e>
 8007bd8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007bdc:	6022      	str	r2, [r4, #0]
 8007bde:	2501      	movs	r5, #1
 8007be0:	e7c0      	b.n	8007b64 <_scanf_float+0x188>
 8007be2:	2d03      	cmp	r5, #3
 8007be4:	d0e2      	beq.n	8007bac <_scanf_float+0x1d0>
 8007be6:	2d05      	cmp	r5, #5
 8007be8:	e7de      	b.n	8007ba8 <_scanf_float+0x1cc>
 8007bea:	2d02      	cmp	r5, #2
 8007bec:	f47f af26 	bne.w	8007a3c <_scanf_float+0x60>
 8007bf0:	2503      	movs	r5, #3
 8007bf2:	e7b7      	b.n	8007b64 <_scanf_float+0x188>
 8007bf4:	2d06      	cmp	r5, #6
 8007bf6:	f47f af21 	bne.w	8007a3c <_scanf_float+0x60>
 8007bfa:	2507      	movs	r5, #7
 8007bfc:	e7b2      	b.n	8007b64 <_scanf_float+0x188>
 8007bfe:	6822      	ldr	r2, [r4, #0]
 8007c00:	0591      	lsls	r1, r2, #22
 8007c02:	f57f af1b 	bpl.w	8007a3c <_scanf_float+0x60>
 8007c06:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007c0a:	6022      	str	r2, [r4, #0]
 8007c0c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007c10:	e7a8      	b.n	8007b64 <_scanf_float+0x188>
 8007c12:	6822      	ldr	r2, [r4, #0]
 8007c14:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007c18:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007c1c:	d006      	beq.n	8007c2c <_scanf_float+0x250>
 8007c1e:	0550      	lsls	r0, r2, #21
 8007c20:	f57f af0c 	bpl.w	8007a3c <_scanf_float+0x60>
 8007c24:	f1b9 0f00 	cmp.w	r9, #0
 8007c28:	f43f af0f 	beq.w	8007a4a <_scanf_float+0x6e>
 8007c2c:	0591      	lsls	r1, r2, #22
 8007c2e:	bf58      	it	pl
 8007c30:	9901      	ldrpl	r1, [sp, #4]
 8007c32:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007c36:	bf58      	it	pl
 8007c38:	eba9 0101 	subpl.w	r1, r9, r1
 8007c3c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007c40:	bf58      	it	pl
 8007c42:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007c46:	6022      	str	r2, [r4, #0]
 8007c48:	f04f 0900 	mov.w	r9, #0
 8007c4c:	e78a      	b.n	8007b64 <_scanf_float+0x188>
 8007c4e:	f04f 0a03 	mov.w	sl, #3
 8007c52:	e787      	b.n	8007b64 <_scanf_float+0x188>
 8007c54:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007c58:	4639      	mov	r1, r7
 8007c5a:	4640      	mov	r0, r8
 8007c5c:	4798      	blx	r3
 8007c5e:	2800      	cmp	r0, #0
 8007c60:	f43f aedf 	beq.w	8007a22 <_scanf_float+0x46>
 8007c64:	e6ea      	b.n	8007a3c <_scanf_float+0x60>
 8007c66:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007c6a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007c6e:	463a      	mov	r2, r7
 8007c70:	4640      	mov	r0, r8
 8007c72:	4798      	blx	r3
 8007c74:	6923      	ldr	r3, [r4, #16]
 8007c76:	3b01      	subs	r3, #1
 8007c78:	6123      	str	r3, [r4, #16]
 8007c7a:	e6ec      	b.n	8007a56 <_scanf_float+0x7a>
 8007c7c:	1e6b      	subs	r3, r5, #1
 8007c7e:	2b06      	cmp	r3, #6
 8007c80:	d825      	bhi.n	8007cce <_scanf_float+0x2f2>
 8007c82:	2d02      	cmp	r5, #2
 8007c84:	d836      	bhi.n	8007cf4 <_scanf_float+0x318>
 8007c86:	455e      	cmp	r6, fp
 8007c88:	f67f aee8 	bls.w	8007a5c <_scanf_float+0x80>
 8007c8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007c90:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007c94:	463a      	mov	r2, r7
 8007c96:	4640      	mov	r0, r8
 8007c98:	4798      	blx	r3
 8007c9a:	6923      	ldr	r3, [r4, #16]
 8007c9c:	3b01      	subs	r3, #1
 8007c9e:	6123      	str	r3, [r4, #16]
 8007ca0:	e7f1      	b.n	8007c86 <_scanf_float+0x2aa>
 8007ca2:	9802      	ldr	r0, [sp, #8]
 8007ca4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007ca8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007cac:	9002      	str	r0, [sp, #8]
 8007cae:	463a      	mov	r2, r7
 8007cb0:	4640      	mov	r0, r8
 8007cb2:	4798      	blx	r3
 8007cb4:	6923      	ldr	r3, [r4, #16]
 8007cb6:	3b01      	subs	r3, #1
 8007cb8:	6123      	str	r3, [r4, #16]
 8007cba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007cbe:	fa5f fa8a 	uxtb.w	sl, sl
 8007cc2:	f1ba 0f02 	cmp.w	sl, #2
 8007cc6:	d1ec      	bne.n	8007ca2 <_scanf_float+0x2c6>
 8007cc8:	3d03      	subs	r5, #3
 8007cca:	b2ed      	uxtb	r5, r5
 8007ccc:	1b76      	subs	r6, r6, r5
 8007cce:	6823      	ldr	r3, [r4, #0]
 8007cd0:	05da      	lsls	r2, r3, #23
 8007cd2:	d52f      	bpl.n	8007d34 <_scanf_float+0x358>
 8007cd4:	055b      	lsls	r3, r3, #21
 8007cd6:	d510      	bpl.n	8007cfa <_scanf_float+0x31e>
 8007cd8:	455e      	cmp	r6, fp
 8007cda:	f67f aebf 	bls.w	8007a5c <_scanf_float+0x80>
 8007cde:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007ce2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007ce6:	463a      	mov	r2, r7
 8007ce8:	4640      	mov	r0, r8
 8007cea:	4798      	blx	r3
 8007cec:	6923      	ldr	r3, [r4, #16]
 8007cee:	3b01      	subs	r3, #1
 8007cf0:	6123      	str	r3, [r4, #16]
 8007cf2:	e7f1      	b.n	8007cd8 <_scanf_float+0x2fc>
 8007cf4:	46aa      	mov	sl, r5
 8007cf6:	9602      	str	r6, [sp, #8]
 8007cf8:	e7df      	b.n	8007cba <_scanf_float+0x2de>
 8007cfa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007cfe:	6923      	ldr	r3, [r4, #16]
 8007d00:	2965      	cmp	r1, #101	; 0x65
 8007d02:	f103 33ff 	add.w	r3, r3, #4294967295
 8007d06:	f106 35ff 	add.w	r5, r6, #4294967295
 8007d0a:	6123      	str	r3, [r4, #16]
 8007d0c:	d00c      	beq.n	8007d28 <_scanf_float+0x34c>
 8007d0e:	2945      	cmp	r1, #69	; 0x45
 8007d10:	d00a      	beq.n	8007d28 <_scanf_float+0x34c>
 8007d12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007d16:	463a      	mov	r2, r7
 8007d18:	4640      	mov	r0, r8
 8007d1a:	4798      	blx	r3
 8007d1c:	6923      	ldr	r3, [r4, #16]
 8007d1e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007d22:	3b01      	subs	r3, #1
 8007d24:	1eb5      	subs	r5, r6, #2
 8007d26:	6123      	str	r3, [r4, #16]
 8007d28:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007d2c:	463a      	mov	r2, r7
 8007d2e:	4640      	mov	r0, r8
 8007d30:	4798      	blx	r3
 8007d32:	462e      	mov	r6, r5
 8007d34:	6825      	ldr	r5, [r4, #0]
 8007d36:	f015 0510 	ands.w	r5, r5, #16
 8007d3a:	d159      	bne.n	8007df0 <_scanf_float+0x414>
 8007d3c:	7035      	strb	r5, [r6, #0]
 8007d3e:	6823      	ldr	r3, [r4, #0]
 8007d40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007d44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d48:	d11b      	bne.n	8007d82 <_scanf_float+0x3a6>
 8007d4a:	9b01      	ldr	r3, [sp, #4]
 8007d4c:	454b      	cmp	r3, r9
 8007d4e:	eba3 0209 	sub.w	r2, r3, r9
 8007d52:	d123      	bne.n	8007d9c <_scanf_float+0x3c0>
 8007d54:	2200      	movs	r2, #0
 8007d56:	4659      	mov	r1, fp
 8007d58:	4640      	mov	r0, r8
 8007d5a:	f000 ff1f 	bl	8008b9c <_strtod_r>
 8007d5e:	6822      	ldr	r2, [r4, #0]
 8007d60:	9b03      	ldr	r3, [sp, #12]
 8007d62:	f012 0f02 	tst.w	r2, #2
 8007d66:	ec57 6b10 	vmov	r6, r7, d0
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	d021      	beq.n	8007db2 <_scanf_float+0x3d6>
 8007d6e:	9903      	ldr	r1, [sp, #12]
 8007d70:	1d1a      	adds	r2, r3, #4
 8007d72:	600a      	str	r2, [r1, #0]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	e9c3 6700 	strd	r6, r7, [r3]
 8007d7a:	68e3      	ldr	r3, [r4, #12]
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	60e3      	str	r3, [r4, #12]
 8007d80:	e66d      	b.n	8007a5e <_scanf_float+0x82>
 8007d82:	9b04      	ldr	r3, [sp, #16]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d0e5      	beq.n	8007d54 <_scanf_float+0x378>
 8007d88:	9905      	ldr	r1, [sp, #20]
 8007d8a:	230a      	movs	r3, #10
 8007d8c:	462a      	mov	r2, r5
 8007d8e:	3101      	adds	r1, #1
 8007d90:	4640      	mov	r0, r8
 8007d92:	f000 ff8b 	bl	8008cac <_strtol_r>
 8007d96:	9b04      	ldr	r3, [sp, #16]
 8007d98:	9e05      	ldr	r6, [sp, #20]
 8007d9a:	1ac2      	subs	r2, r0, r3
 8007d9c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007da0:	429e      	cmp	r6, r3
 8007da2:	bf28      	it	cs
 8007da4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007da8:	4912      	ldr	r1, [pc, #72]	; (8007df4 <_scanf_float+0x418>)
 8007daa:	4630      	mov	r0, r6
 8007dac:	f000 f82c 	bl	8007e08 <siprintf>
 8007db0:	e7d0      	b.n	8007d54 <_scanf_float+0x378>
 8007db2:	9903      	ldr	r1, [sp, #12]
 8007db4:	f012 0f04 	tst.w	r2, #4
 8007db8:	f103 0204 	add.w	r2, r3, #4
 8007dbc:	600a      	str	r2, [r1, #0]
 8007dbe:	d1d9      	bne.n	8007d74 <_scanf_float+0x398>
 8007dc0:	f8d3 8000 	ldr.w	r8, [r3]
 8007dc4:	ee10 2a10 	vmov	r2, s0
 8007dc8:	ee10 0a10 	vmov	r0, s0
 8007dcc:	463b      	mov	r3, r7
 8007dce:	4639      	mov	r1, r7
 8007dd0:	f7f8 febc 	bl	8000b4c <__aeabi_dcmpun>
 8007dd4:	b128      	cbz	r0, 8007de2 <_scanf_float+0x406>
 8007dd6:	4808      	ldr	r0, [pc, #32]	; (8007df8 <_scanf_float+0x41c>)
 8007dd8:	f000 f810 	bl	8007dfc <nanf>
 8007ddc:	ed88 0a00 	vstr	s0, [r8]
 8007de0:	e7cb      	b.n	8007d7a <_scanf_float+0x39e>
 8007de2:	4630      	mov	r0, r6
 8007de4:	4639      	mov	r1, r7
 8007de6:	f7f8 ff0f 	bl	8000c08 <__aeabi_d2f>
 8007dea:	f8c8 0000 	str.w	r0, [r8]
 8007dee:	e7c4      	b.n	8007d7a <_scanf_float+0x39e>
 8007df0:	2500      	movs	r5, #0
 8007df2:	e634      	b.n	8007a5e <_scanf_float+0x82>
 8007df4:	0800c896 	.word	0x0800c896
 8007df8:	0800ccbb 	.word	0x0800ccbb

08007dfc <nanf>:
 8007dfc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007e04 <nanf+0x8>
 8007e00:	4770      	bx	lr
 8007e02:	bf00      	nop
 8007e04:	7fc00000 	.word	0x7fc00000

08007e08 <siprintf>:
 8007e08:	b40e      	push	{r1, r2, r3}
 8007e0a:	b500      	push	{lr}
 8007e0c:	b09c      	sub	sp, #112	; 0x70
 8007e0e:	ab1d      	add	r3, sp, #116	; 0x74
 8007e10:	9002      	str	r0, [sp, #8]
 8007e12:	9006      	str	r0, [sp, #24]
 8007e14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007e18:	4809      	ldr	r0, [pc, #36]	; (8007e40 <siprintf+0x38>)
 8007e1a:	9107      	str	r1, [sp, #28]
 8007e1c:	9104      	str	r1, [sp, #16]
 8007e1e:	4909      	ldr	r1, [pc, #36]	; (8007e44 <siprintf+0x3c>)
 8007e20:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e24:	9105      	str	r1, [sp, #20]
 8007e26:	6800      	ldr	r0, [r0, #0]
 8007e28:	9301      	str	r3, [sp, #4]
 8007e2a:	a902      	add	r1, sp, #8
 8007e2c:	f002 ffa0 	bl	800ad70 <_svfiprintf_r>
 8007e30:	9b02      	ldr	r3, [sp, #8]
 8007e32:	2200      	movs	r2, #0
 8007e34:	701a      	strb	r2, [r3, #0]
 8007e36:	b01c      	add	sp, #112	; 0x70
 8007e38:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e3c:	b003      	add	sp, #12
 8007e3e:	4770      	bx	lr
 8007e40:	2000000c 	.word	0x2000000c
 8007e44:	ffff0208 	.word	0xffff0208

08007e48 <siscanf>:
 8007e48:	b40e      	push	{r1, r2, r3}
 8007e4a:	b510      	push	{r4, lr}
 8007e4c:	b09f      	sub	sp, #124	; 0x7c
 8007e4e:	ac21      	add	r4, sp, #132	; 0x84
 8007e50:	f44f 7101 	mov.w	r1, #516	; 0x204
 8007e54:	f854 2b04 	ldr.w	r2, [r4], #4
 8007e58:	9201      	str	r2, [sp, #4]
 8007e5a:	f8ad 101c 	strh.w	r1, [sp, #28]
 8007e5e:	9004      	str	r0, [sp, #16]
 8007e60:	9008      	str	r0, [sp, #32]
 8007e62:	f7f8 f9c5 	bl	80001f0 <strlen>
 8007e66:	4b0c      	ldr	r3, [pc, #48]	; (8007e98 <siscanf+0x50>)
 8007e68:	9005      	str	r0, [sp, #20]
 8007e6a:	9009      	str	r0, [sp, #36]	; 0x24
 8007e6c:	930d      	str	r3, [sp, #52]	; 0x34
 8007e6e:	480b      	ldr	r0, [pc, #44]	; (8007e9c <siscanf+0x54>)
 8007e70:	9a01      	ldr	r2, [sp, #4]
 8007e72:	6800      	ldr	r0, [r0, #0]
 8007e74:	9403      	str	r4, [sp, #12]
 8007e76:	2300      	movs	r3, #0
 8007e78:	9311      	str	r3, [sp, #68]	; 0x44
 8007e7a:	9316      	str	r3, [sp, #88]	; 0x58
 8007e7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007e80:	f8ad 301e 	strh.w	r3, [sp, #30]
 8007e84:	a904      	add	r1, sp, #16
 8007e86:	4623      	mov	r3, r4
 8007e88:	f003 f8cc 	bl	800b024 <__ssvfiscanf_r>
 8007e8c:	b01f      	add	sp, #124	; 0x7c
 8007e8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e92:	b003      	add	sp, #12
 8007e94:	4770      	bx	lr
 8007e96:	bf00      	nop
 8007e98:	08007ec3 	.word	0x08007ec3
 8007e9c:	2000000c 	.word	0x2000000c

08007ea0 <__sread>:
 8007ea0:	b510      	push	{r4, lr}
 8007ea2:	460c      	mov	r4, r1
 8007ea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ea8:	f003 fb86 	bl	800b5b8 <_read_r>
 8007eac:	2800      	cmp	r0, #0
 8007eae:	bfab      	itete	ge
 8007eb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007eb2:	89a3      	ldrhlt	r3, [r4, #12]
 8007eb4:	181b      	addge	r3, r3, r0
 8007eb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007eba:	bfac      	ite	ge
 8007ebc:	6563      	strge	r3, [r4, #84]	; 0x54
 8007ebe:	81a3      	strhlt	r3, [r4, #12]
 8007ec0:	bd10      	pop	{r4, pc}

08007ec2 <__seofread>:
 8007ec2:	2000      	movs	r0, #0
 8007ec4:	4770      	bx	lr

08007ec6 <__swrite>:
 8007ec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007eca:	461f      	mov	r7, r3
 8007ecc:	898b      	ldrh	r3, [r1, #12]
 8007ece:	05db      	lsls	r3, r3, #23
 8007ed0:	4605      	mov	r5, r0
 8007ed2:	460c      	mov	r4, r1
 8007ed4:	4616      	mov	r6, r2
 8007ed6:	d505      	bpl.n	8007ee4 <__swrite+0x1e>
 8007ed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007edc:	2302      	movs	r3, #2
 8007ede:	2200      	movs	r2, #0
 8007ee0:	f002 f8f8 	bl	800a0d4 <_lseek_r>
 8007ee4:	89a3      	ldrh	r3, [r4, #12]
 8007ee6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007eea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007eee:	81a3      	strh	r3, [r4, #12]
 8007ef0:	4632      	mov	r2, r6
 8007ef2:	463b      	mov	r3, r7
 8007ef4:	4628      	mov	r0, r5
 8007ef6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007efa:	f000 bed9 	b.w	8008cb0 <_write_r>

08007efe <__sseek>:
 8007efe:	b510      	push	{r4, lr}
 8007f00:	460c      	mov	r4, r1
 8007f02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f06:	f002 f8e5 	bl	800a0d4 <_lseek_r>
 8007f0a:	1c43      	adds	r3, r0, #1
 8007f0c:	89a3      	ldrh	r3, [r4, #12]
 8007f0e:	bf15      	itete	ne
 8007f10:	6560      	strne	r0, [r4, #84]	; 0x54
 8007f12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007f16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f1a:	81a3      	strheq	r3, [r4, #12]
 8007f1c:	bf18      	it	ne
 8007f1e:	81a3      	strhne	r3, [r4, #12]
 8007f20:	bd10      	pop	{r4, pc}

08007f22 <__sclose>:
 8007f22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f26:	f000 bed5 	b.w	8008cd4 <_close_r>

08007f2a <strncmp>:
 8007f2a:	b510      	push	{r4, lr}
 8007f2c:	b17a      	cbz	r2, 8007f4e <strncmp+0x24>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	3901      	subs	r1, #1
 8007f32:	1884      	adds	r4, r0, r2
 8007f34:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007f38:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007f3c:	4290      	cmp	r0, r2
 8007f3e:	d101      	bne.n	8007f44 <strncmp+0x1a>
 8007f40:	42a3      	cmp	r3, r4
 8007f42:	d101      	bne.n	8007f48 <strncmp+0x1e>
 8007f44:	1a80      	subs	r0, r0, r2
 8007f46:	bd10      	pop	{r4, pc}
 8007f48:	2800      	cmp	r0, #0
 8007f4a:	d1f3      	bne.n	8007f34 <strncmp+0xa>
 8007f4c:	e7fa      	b.n	8007f44 <strncmp+0x1a>
 8007f4e:	4610      	mov	r0, r2
 8007f50:	e7f9      	b.n	8007f46 <strncmp+0x1c>

08007f52 <sulp>:
 8007f52:	b570      	push	{r4, r5, r6, lr}
 8007f54:	4604      	mov	r4, r0
 8007f56:	460d      	mov	r5, r1
 8007f58:	ec45 4b10 	vmov	d0, r4, r5
 8007f5c:	4616      	mov	r6, r2
 8007f5e:	f002 fc65 	bl	800a82c <__ulp>
 8007f62:	ec51 0b10 	vmov	r0, r1, d0
 8007f66:	b17e      	cbz	r6, 8007f88 <sulp+0x36>
 8007f68:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007f6c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	dd09      	ble.n	8007f88 <sulp+0x36>
 8007f74:	051b      	lsls	r3, r3, #20
 8007f76:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007f7a:	2400      	movs	r4, #0
 8007f7c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007f80:	4622      	mov	r2, r4
 8007f82:	462b      	mov	r3, r5
 8007f84:	f7f8 fb48 	bl	8000618 <__aeabi_dmul>
 8007f88:	bd70      	pop	{r4, r5, r6, pc}
 8007f8a:	0000      	movs	r0, r0
 8007f8c:	0000      	movs	r0, r0
	...

08007f90 <_strtod_l>:
 8007f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f94:	ed2d 8b02 	vpush	{d8}
 8007f98:	b09d      	sub	sp, #116	; 0x74
 8007f9a:	461f      	mov	r7, r3
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	9318      	str	r3, [sp, #96]	; 0x60
 8007fa0:	4ba2      	ldr	r3, [pc, #648]	; (800822c <_strtod_l+0x29c>)
 8007fa2:	9213      	str	r2, [sp, #76]	; 0x4c
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	9305      	str	r3, [sp, #20]
 8007fa8:	4604      	mov	r4, r0
 8007faa:	4618      	mov	r0, r3
 8007fac:	4688      	mov	r8, r1
 8007fae:	f7f8 f91f 	bl	80001f0 <strlen>
 8007fb2:	f04f 0a00 	mov.w	sl, #0
 8007fb6:	4605      	mov	r5, r0
 8007fb8:	f04f 0b00 	mov.w	fp, #0
 8007fbc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007fc0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007fc2:	781a      	ldrb	r2, [r3, #0]
 8007fc4:	2a2b      	cmp	r2, #43	; 0x2b
 8007fc6:	d04e      	beq.n	8008066 <_strtod_l+0xd6>
 8007fc8:	d83b      	bhi.n	8008042 <_strtod_l+0xb2>
 8007fca:	2a0d      	cmp	r2, #13
 8007fcc:	d834      	bhi.n	8008038 <_strtod_l+0xa8>
 8007fce:	2a08      	cmp	r2, #8
 8007fd0:	d834      	bhi.n	800803c <_strtod_l+0xac>
 8007fd2:	2a00      	cmp	r2, #0
 8007fd4:	d03e      	beq.n	8008054 <_strtod_l+0xc4>
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	930a      	str	r3, [sp, #40]	; 0x28
 8007fda:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007fdc:	7833      	ldrb	r3, [r6, #0]
 8007fde:	2b30      	cmp	r3, #48	; 0x30
 8007fe0:	f040 80b0 	bne.w	8008144 <_strtod_l+0x1b4>
 8007fe4:	7873      	ldrb	r3, [r6, #1]
 8007fe6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007fea:	2b58      	cmp	r3, #88	; 0x58
 8007fec:	d168      	bne.n	80080c0 <_strtod_l+0x130>
 8007fee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ff0:	9301      	str	r3, [sp, #4]
 8007ff2:	ab18      	add	r3, sp, #96	; 0x60
 8007ff4:	9702      	str	r7, [sp, #8]
 8007ff6:	9300      	str	r3, [sp, #0]
 8007ff8:	4a8d      	ldr	r2, [pc, #564]	; (8008230 <_strtod_l+0x2a0>)
 8007ffa:	ab19      	add	r3, sp, #100	; 0x64
 8007ffc:	a917      	add	r1, sp, #92	; 0x5c
 8007ffe:	4620      	mov	r0, r4
 8008000:	f001 fd5c 	bl	8009abc <__gethex>
 8008004:	f010 0707 	ands.w	r7, r0, #7
 8008008:	4605      	mov	r5, r0
 800800a:	d005      	beq.n	8008018 <_strtod_l+0x88>
 800800c:	2f06      	cmp	r7, #6
 800800e:	d12c      	bne.n	800806a <_strtod_l+0xda>
 8008010:	3601      	adds	r6, #1
 8008012:	2300      	movs	r3, #0
 8008014:	9617      	str	r6, [sp, #92]	; 0x5c
 8008016:	930a      	str	r3, [sp, #40]	; 0x28
 8008018:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800801a:	2b00      	cmp	r3, #0
 800801c:	f040 8590 	bne.w	8008b40 <_strtod_l+0xbb0>
 8008020:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008022:	b1eb      	cbz	r3, 8008060 <_strtod_l+0xd0>
 8008024:	4652      	mov	r2, sl
 8008026:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800802a:	ec43 2b10 	vmov	d0, r2, r3
 800802e:	b01d      	add	sp, #116	; 0x74
 8008030:	ecbd 8b02 	vpop	{d8}
 8008034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008038:	2a20      	cmp	r2, #32
 800803a:	d1cc      	bne.n	8007fd6 <_strtod_l+0x46>
 800803c:	3301      	adds	r3, #1
 800803e:	9317      	str	r3, [sp, #92]	; 0x5c
 8008040:	e7be      	b.n	8007fc0 <_strtod_l+0x30>
 8008042:	2a2d      	cmp	r2, #45	; 0x2d
 8008044:	d1c7      	bne.n	8007fd6 <_strtod_l+0x46>
 8008046:	2201      	movs	r2, #1
 8008048:	920a      	str	r2, [sp, #40]	; 0x28
 800804a:	1c5a      	adds	r2, r3, #1
 800804c:	9217      	str	r2, [sp, #92]	; 0x5c
 800804e:	785b      	ldrb	r3, [r3, #1]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d1c2      	bne.n	8007fda <_strtod_l+0x4a>
 8008054:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008056:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800805a:	2b00      	cmp	r3, #0
 800805c:	f040 856e 	bne.w	8008b3c <_strtod_l+0xbac>
 8008060:	4652      	mov	r2, sl
 8008062:	465b      	mov	r3, fp
 8008064:	e7e1      	b.n	800802a <_strtod_l+0x9a>
 8008066:	2200      	movs	r2, #0
 8008068:	e7ee      	b.n	8008048 <_strtod_l+0xb8>
 800806a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800806c:	b13a      	cbz	r2, 800807e <_strtod_l+0xee>
 800806e:	2135      	movs	r1, #53	; 0x35
 8008070:	a81a      	add	r0, sp, #104	; 0x68
 8008072:	f002 fce6 	bl	800aa42 <__copybits>
 8008076:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008078:	4620      	mov	r0, r4
 800807a:	f002 f8a5 	bl	800a1c8 <_Bfree>
 800807e:	3f01      	subs	r7, #1
 8008080:	2f04      	cmp	r7, #4
 8008082:	d806      	bhi.n	8008092 <_strtod_l+0x102>
 8008084:	e8df f007 	tbb	[pc, r7]
 8008088:	1714030a 	.word	0x1714030a
 800808c:	0a          	.byte	0x0a
 800808d:	00          	.byte	0x00
 800808e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8008092:	0728      	lsls	r0, r5, #28
 8008094:	d5c0      	bpl.n	8008018 <_strtod_l+0x88>
 8008096:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800809a:	e7bd      	b.n	8008018 <_strtod_l+0x88>
 800809c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80080a0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80080a2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80080a6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80080aa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80080ae:	e7f0      	b.n	8008092 <_strtod_l+0x102>
 80080b0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8008234 <_strtod_l+0x2a4>
 80080b4:	e7ed      	b.n	8008092 <_strtod_l+0x102>
 80080b6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80080ba:	f04f 3aff 	mov.w	sl, #4294967295
 80080be:	e7e8      	b.n	8008092 <_strtod_l+0x102>
 80080c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80080c2:	1c5a      	adds	r2, r3, #1
 80080c4:	9217      	str	r2, [sp, #92]	; 0x5c
 80080c6:	785b      	ldrb	r3, [r3, #1]
 80080c8:	2b30      	cmp	r3, #48	; 0x30
 80080ca:	d0f9      	beq.n	80080c0 <_strtod_l+0x130>
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d0a3      	beq.n	8008018 <_strtod_l+0x88>
 80080d0:	2301      	movs	r3, #1
 80080d2:	f04f 0900 	mov.w	r9, #0
 80080d6:	9304      	str	r3, [sp, #16]
 80080d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80080da:	9308      	str	r3, [sp, #32]
 80080dc:	f8cd 901c 	str.w	r9, [sp, #28]
 80080e0:	464f      	mov	r7, r9
 80080e2:	220a      	movs	r2, #10
 80080e4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80080e6:	7806      	ldrb	r6, [r0, #0]
 80080e8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80080ec:	b2d9      	uxtb	r1, r3
 80080ee:	2909      	cmp	r1, #9
 80080f0:	d92a      	bls.n	8008148 <_strtod_l+0x1b8>
 80080f2:	9905      	ldr	r1, [sp, #20]
 80080f4:	462a      	mov	r2, r5
 80080f6:	f7ff ff18 	bl	8007f2a <strncmp>
 80080fa:	b398      	cbz	r0, 8008164 <_strtod_l+0x1d4>
 80080fc:	2000      	movs	r0, #0
 80080fe:	4632      	mov	r2, r6
 8008100:	463d      	mov	r5, r7
 8008102:	9005      	str	r0, [sp, #20]
 8008104:	4603      	mov	r3, r0
 8008106:	2a65      	cmp	r2, #101	; 0x65
 8008108:	d001      	beq.n	800810e <_strtod_l+0x17e>
 800810a:	2a45      	cmp	r2, #69	; 0x45
 800810c:	d118      	bne.n	8008140 <_strtod_l+0x1b0>
 800810e:	b91d      	cbnz	r5, 8008118 <_strtod_l+0x188>
 8008110:	9a04      	ldr	r2, [sp, #16]
 8008112:	4302      	orrs	r2, r0
 8008114:	d09e      	beq.n	8008054 <_strtod_l+0xc4>
 8008116:	2500      	movs	r5, #0
 8008118:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800811c:	f108 0201 	add.w	r2, r8, #1
 8008120:	9217      	str	r2, [sp, #92]	; 0x5c
 8008122:	f898 2001 	ldrb.w	r2, [r8, #1]
 8008126:	2a2b      	cmp	r2, #43	; 0x2b
 8008128:	d075      	beq.n	8008216 <_strtod_l+0x286>
 800812a:	2a2d      	cmp	r2, #45	; 0x2d
 800812c:	d07b      	beq.n	8008226 <_strtod_l+0x296>
 800812e:	f04f 0c00 	mov.w	ip, #0
 8008132:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008136:	2909      	cmp	r1, #9
 8008138:	f240 8082 	bls.w	8008240 <_strtod_l+0x2b0>
 800813c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008140:	2600      	movs	r6, #0
 8008142:	e09d      	b.n	8008280 <_strtod_l+0x2f0>
 8008144:	2300      	movs	r3, #0
 8008146:	e7c4      	b.n	80080d2 <_strtod_l+0x142>
 8008148:	2f08      	cmp	r7, #8
 800814a:	bfd8      	it	le
 800814c:	9907      	ldrle	r1, [sp, #28]
 800814e:	f100 0001 	add.w	r0, r0, #1
 8008152:	bfda      	itte	le
 8008154:	fb02 3301 	mlale	r3, r2, r1, r3
 8008158:	9307      	strle	r3, [sp, #28]
 800815a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800815e:	3701      	adds	r7, #1
 8008160:	9017      	str	r0, [sp, #92]	; 0x5c
 8008162:	e7bf      	b.n	80080e4 <_strtod_l+0x154>
 8008164:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008166:	195a      	adds	r2, r3, r5
 8008168:	9217      	str	r2, [sp, #92]	; 0x5c
 800816a:	5d5a      	ldrb	r2, [r3, r5]
 800816c:	2f00      	cmp	r7, #0
 800816e:	d037      	beq.n	80081e0 <_strtod_l+0x250>
 8008170:	9005      	str	r0, [sp, #20]
 8008172:	463d      	mov	r5, r7
 8008174:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008178:	2b09      	cmp	r3, #9
 800817a:	d912      	bls.n	80081a2 <_strtod_l+0x212>
 800817c:	2301      	movs	r3, #1
 800817e:	e7c2      	b.n	8008106 <_strtod_l+0x176>
 8008180:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008182:	1c5a      	adds	r2, r3, #1
 8008184:	9217      	str	r2, [sp, #92]	; 0x5c
 8008186:	785a      	ldrb	r2, [r3, #1]
 8008188:	3001      	adds	r0, #1
 800818a:	2a30      	cmp	r2, #48	; 0x30
 800818c:	d0f8      	beq.n	8008180 <_strtod_l+0x1f0>
 800818e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008192:	2b08      	cmp	r3, #8
 8008194:	f200 84d9 	bhi.w	8008b4a <_strtod_l+0xbba>
 8008198:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800819a:	9005      	str	r0, [sp, #20]
 800819c:	2000      	movs	r0, #0
 800819e:	9308      	str	r3, [sp, #32]
 80081a0:	4605      	mov	r5, r0
 80081a2:	3a30      	subs	r2, #48	; 0x30
 80081a4:	f100 0301 	add.w	r3, r0, #1
 80081a8:	d014      	beq.n	80081d4 <_strtod_l+0x244>
 80081aa:	9905      	ldr	r1, [sp, #20]
 80081ac:	4419      	add	r1, r3
 80081ae:	9105      	str	r1, [sp, #20]
 80081b0:	462b      	mov	r3, r5
 80081b2:	eb00 0e05 	add.w	lr, r0, r5
 80081b6:	210a      	movs	r1, #10
 80081b8:	4573      	cmp	r3, lr
 80081ba:	d113      	bne.n	80081e4 <_strtod_l+0x254>
 80081bc:	182b      	adds	r3, r5, r0
 80081be:	2b08      	cmp	r3, #8
 80081c0:	f105 0501 	add.w	r5, r5, #1
 80081c4:	4405      	add	r5, r0
 80081c6:	dc1c      	bgt.n	8008202 <_strtod_l+0x272>
 80081c8:	9907      	ldr	r1, [sp, #28]
 80081ca:	230a      	movs	r3, #10
 80081cc:	fb03 2301 	mla	r3, r3, r1, r2
 80081d0:	9307      	str	r3, [sp, #28]
 80081d2:	2300      	movs	r3, #0
 80081d4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80081d6:	1c51      	adds	r1, r2, #1
 80081d8:	9117      	str	r1, [sp, #92]	; 0x5c
 80081da:	7852      	ldrb	r2, [r2, #1]
 80081dc:	4618      	mov	r0, r3
 80081de:	e7c9      	b.n	8008174 <_strtod_l+0x1e4>
 80081e0:	4638      	mov	r0, r7
 80081e2:	e7d2      	b.n	800818a <_strtod_l+0x1fa>
 80081e4:	2b08      	cmp	r3, #8
 80081e6:	dc04      	bgt.n	80081f2 <_strtod_l+0x262>
 80081e8:	9e07      	ldr	r6, [sp, #28]
 80081ea:	434e      	muls	r6, r1
 80081ec:	9607      	str	r6, [sp, #28]
 80081ee:	3301      	adds	r3, #1
 80081f0:	e7e2      	b.n	80081b8 <_strtod_l+0x228>
 80081f2:	f103 0c01 	add.w	ip, r3, #1
 80081f6:	f1bc 0f10 	cmp.w	ip, #16
 80081fa:	bfd8      	it	le
 80081fc:	fb01 f909 	mulle.w	r9, r1, r9
 8008200:	e7f5      	b.n	80081ee <_strtod_l+0x25e>
 8008202:	2d10      	cmp	r5, #16
 8008204:	bfdc      	itt	le
 8008206:	230a      	movle	r3, #10
 8008208:	fb03 2909 	mlale	r9, r3, r9, r2
 800820c:	e7e1      	b.n	80081d2 <_strtod_l+0x242>
 800820e:	2300      	movs	r3, #0
 8008210:	9305      	str	r3, [sp, #20]
 8008212:	2301      	movs	r3, #1
 8008214:	e77c      	b.n	8008110 <_strtod_l+0x180>
 8008216:	f04f 0c00 	mov.w	ip, #0
 800821a:	f108 0202 	add.w	r2, r8, #2
 800821e:	9217      	str	r2, [sp, #92]	; 0x5c
 8008220:	f898 2002 	ldrb.w	r2, [r8, #2]
 8008224:	e785      	b.n	8008132 <_strtod_l+0x1a2>
 8008226:	f04f 0c01 	mov.w	ip, #1
 800822a:	e7f6      	b.n	800821a <_strtod_l+0x28a>
 800822c:	0800cae8 	.word	0x0800cae8
 8008230:	0800c89c 	.word	0x0800c89c
 8008234:	7ff00000 	.word	0x7ff00000
 8008238:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800823a:	1c51      	adds	r1, r2, #1
 800823c:	9117      	str	r1, [sp, #92]	; 0x5c
 800823e:	7852      	ldrb	r2, [r2, #1]
 8008240:	2a30      	cmp	r2, #48	; 0x30
 8008242:	d0f9      	beq.n	8008238 <_strtod_l+0x2a8>
 8008244:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008248:	2908      	cmp	r1, #8
 800824a:	f63f af79 	bhi.w	8008140 <_strtod_l+0x1b0>
 800824e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008252:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008254:	9206      	str	r2, [sp, #24]
 8008256:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008258:	1c51      	adds	r1, r2, #1
 800825a:	9117      	str	r1, [sp, #92]	; 0x5c
 800825c:	7852      	ldrb	r2, [r2, #1]
 800825e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8008262:	2e09      	cmp	r6, #9
 8008264:	d937      	bls.n	80082d6 <_strtod_l+0x346>
 8008266:	9e06      	ldr	r6, [sp, #24]
 8008268:	1b89      	subs	r1, r1, r6
 800826a:	2908      	cmp	r1, #8
 800826c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008270:	dc02      	bgt.n	8008278 <_strtod_l+0x2e8>
 8008272:	4576      	cmp	r6, lr
 8008274:	bfa8      	it	ge
 8008276:	4676      	movge	r6, lr
 8008278:	f1bc 0f00 	cmp.w	ip, #0
 800827c:	d000      	beq.n	8008280 <_strtod_l+0x2f0>
 800827e:	4276      	negs	r6, r6
 8008280:	2d00      	cmp	r5, #0
 8008282:	d14d      	bne.n	8008320 <_strtod_l+0x390>
 8008284:	9904      	ldr	r1, [sp, #16]
 8008286:	4301      	orrs	r1, r0
 8008288:	f47f aec6 	bne.w	8008018 <_strtod_l+0x88>
 800828c:	2b00      	cmp	r3, #0
 800828e:	f47f aee1 	bne.w	8008054 <_strtod_l+0xc4>
 8008292:	2a69      	cmp	r2, #105	; 0x69
 8008294:	d027      	beq.n	80082e6 <_strtod_l+0x356>
 8008296:	dc24      	bgt.n	80082e2 <_strtod_l+0x352>
 8008298:	2a49      	cmp	r2, #73	; 0x49
 800829a:	d024      	beq.n	80082e6 <_strtod_l+0x356>
 800829c:	2a4e      	cmp	r2, #78	; 0x4e
 800829e:	f47f aed9 	bne.w	8008054 <_strtod_l+0xc4>
 80082a2:	499f      	ldr	r1, [pc, #636]	; (8008520 <_strtod_l+0x590>)
 80082a4:	a817      	add	r0, sp, #92	; 0x5c
 80082a6:	f001 fe61 	bl	8009f6c <__match>
 80082aa:	2800      	cmp	r0, #0
 80082ac:	f43f aed2 	beq.w	8008054 <_strtod_l+0xc4>
 80082b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	2b28      	cmp	r3, #40	; 0x28
 80082b6:	d12d      	bne.n	8008314 <_strtod_l+0x384>
 80082b8:	499a      	ldr	r1, [pc, #616]	; (8008524 <_strtod_l+0x594>)
 80082ba:	aa1a      	add	r2, sp, #104	; 0x68
 80082bc:	a817      	add	r0, sp, #92	; 0x5c
 80082be:	f001 fe69 	bl	8009f94 <__hexnan>
 80082c2:	2805      	cmp	r0, #5
 80082c4:	d126      	bne.n	8008314 <_strtod_l+0x384>
 80082c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80082c8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80082cc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80082d0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80082d4:	e6a0      	b.n	8008018 <_strtod_l+0x88>
 80082d6:	210a      	movs	r1, #10
 80082d8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80082dc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80082e0:	e7b9      	b.n	8008256 <_strtod_l+0x2c6>
 80082e2:	2a6e      	cmp	r2, #110	; 0x6e
 80082e4:	e7db      	b.n	800829e <_strtod_l+0x30e>
 80082e6:	4990      	ldr	r1, [pc, #576]	; (8008528 <_strtod_l+0x598>)
 80082e8:	a817      	add	r0, sp, #92	; 0x5c
 80082ea:	f001 fe3f 	bl	8009f6c <__match>
 80082ee:	2800      	cmp	r0, #0
 80082f0:	f43f aeb0 	beq.w	8008054 <_strtod_l+0xc4>
 80082f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80082f6:	498d      	ldr	r1, [pc, #564]	; (800852c <_strtod_l+0x59c>)
 80082f8:	3b01      	subs	r3, #1
 80082fa:	a817      	add	r0, sp, #92	; 0x5c
 80082fc:	9317      	str	r3, [sp, #92]	; 0x5c
 80082fe:	f001 fe35 	bl	8009f6c <__match>
 8008302:	b910      	cbnz	r0, 800830a <_strtod_l+0x37a>
 8008304:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008306:	3301      	adds	r3, #1
 8008308:	9317      	str	r3, [sp, #92]	; 0x5c
 800830a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800853c <_strtod_l+0x5ac>
 800830e:	f04f 0a00 	mov.w	sl, #0
 8008312:	e681      	b.n	8008018 <_strtod_l+0x88>
 8008314:	4886      	ldr	r0, [pc, #536]	; (8008530 <_strtod_l+0x5a0>)
 8008316:	f003 f963 	bl	800b5e0 <nan>
 800831a:	ec5b ab10 	vmov	sl, fp, d0
 800831e:	e67b      	b.n	8008018 <_strtod_l+0x88>
 8008320:	9b05      	ldr	r3, [sp, #20]
 8008322:	9807      	ldr	r0, [sp, #28]
 8008324:	1af3      	subs	r3, r6, r3
 8008326:	2f00      	cmp	r7, #0
 8008328:	bf08      	it	eq
 800832a:	462f      	moveq	r7, r5
 800832c:	2d10      	cmp	r5, #16
 800832e:	9306      	str	r3, [sp, #24]
 8008330:	46a8      	mov	r8, r5
 8008332:	bfa8      	it	ge
 8008334:	f04f 0810 	movge.w	r8, #16
 8008338:	f7f8 f8f4 	bl	8000524 <__aeabi_ui2d>
 800833c:	2d09      	cmp	r5, #9
 800833e:	4682      	mov	sl, r0
 8008340:	468b      	mov	fp, r1
 8008342:	dd13      	ble.n	800836c <_strtod_l+0x3dc>
 8008344:	4b7b      	ldr	r3, [pc, #492]	; (8008534 <_strtod_l+0x5a4>)
 8008346:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800834a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800834e:	f7f8 f963 	bl	8000618 <__aeabi_dmul>
 8008352:	4682      	mov	sl, r0
 8008354:	4648      	mov	r0, r9
 8008356:	468b      	mov	fp, r1
 8008358:	f7f8 f8e4 	bl	8000524 <__aeabi_ui2d>
 800835c:	4602      	mov	r2, r0
 800835e:	460b      	mov	r3, r1
 8008360:	4650      	mov	r0, sl
 8008362:	4659      	mov	r1, fp
 8008364:	f7f7 ffa2 	bl	80002ac <__adddf3>
 8008368:	4682      	mov	sl, r0
 800836a:	468b      	mov	fp, r1
 800836c:	2d0f      	cmp	r5, #15
 800836e:	dc38      	bgt.n	80083e2 <_strtod_l+0x452>
 8008370:	9b06      	ldr	r3, [sp, #24]
 8008372:	2b00      	cmp	r3, #0
 8008374:	f43f ae50 	beq.w	8008018 <_strtod_l+0x88>
 8008378:	dd24      	ble.n	80083c4 <_strtod_l+0x434>
 800837a:	2b16      	cmp	r3, #22
 800837c:	dc0b      	bgt.n	8008396 <_strtod_l+0x406>
 800837e:	496d      	ldr	r1, [pc, #436]	; (8008534 <_strtod_l+0x5a4>)
 8008380:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008384:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008388:	4652      	mov	r2, sl
 800838a:	465b      	mov	r3, fp
 800838c:	f7f8 f944 	bl	8000618 <__aeabi_dmul>
 8008390:	4682      	mov	sl, r0
 8008392:	468b      	mov	fp, r1
 8008394:	e640      	b.n	8008018 <_strtod_l+0x88>
 8008396:	9a06      	ldr	r2, [sp, #24]
 8008398:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800839c:	4293      	cmp	r3, r2
 800839e:	db20      	blt.n	80083e2 <_strtod_l+0x452>
 80083a0:	4c64      	ldr	r4, [pc, #400]	; (8008534 <_strtod_l+0x5a4>)
 80083a2:	f1c5 050f 	rsb	r5, r5, #15
 80083a6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80083aa:	4652      	mov	r2, sl
 80083ac:	465b      	mov	r3, fp
 80083ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083b2:	f7f8 f931 	bl	8000618 <__aeabi_dmul>
 80083b6:	9b06      	ldr	r3, [sp, #24]
 80083b8:	1b5d      	subs	r5, r3, r5
 80083ba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80083be:	e9d4 2300 	ldrd	r2, r3, [r4]
 80083c2:	e7e3      	b.n	800838c <_strtod_l+0x3fc>
 80083c4:	9b06      	ldr	r3, [sp, #24]
 80083c6:	3316      	adds	r3, #22
 80083c8:	db0b      	blt.n	80083e2 <_strtod_l+0x452>
 80083ca:	9b05      	ldr	r3, [sp, #20]
 80083cc:	1b9e      	subs	r6, r3, r6
 80083ce:	4b59      	ldr	r3, [pc, #356]	; (8008534 <_strtod_l+0x5a4>)
 80083d0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80083d4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80083d8:	4650      	mov	r0, sl
 80083da:	4659      	mov	r1, fp
 80083dc:	f7f8 fa46 	bl	800086c <__aeabi_ddiv>
 80083e0:	e7d6      	b.n	8008390 <_strtod_l+0x400>
 80083e2:	9b06      	ldr	r3, [sp, #24]
 80083e4:	eba5 0808 	sub.w	r8, r5, r8
 80083e8:	4498      	add	r8, r3
 80083ea:	f1b8 0f00 	cmp.w	r8, #0
 80083ee:	dd74      	ble.n	80084da <_strtod_l+0x54a>
 80083f0:	f018 030f 	ands.w	r3, r8, #15
 80083f4:	d00a      	beq.n	800840c <_strtod_l+0x47c>
 80083f6:	494f      	ldr	r1, [pc, #316]	; (8008534 <_strtod_l+0x5a4>)
 80083f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80083fc:	4652      	mov	r2, sl
 80083fe:	465b      	mov	r3, fp
 8008400:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008404:	f7f8 f908 	bl	8000618 <__aeabi_dmul>
 8008408:	4682      	mov	sl, r0
 800840a:	468b      	mov	fp, r1
 800840c:	f038 080f 	bics.w	r8, r8, #15
 8008410:	d04f      	beq.n	80084b2 <_strtod_l+0x522>
 8008412:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008416:	dd22      	ble.n	800845e <_strtod_l+0x4ce>
 8008418:	2500      	movs	r5, #0
 800841a:	462e      	mov	r6, r5
 800841c:	9507      	str	r5, [sp, #28]
 800841e:	9505      	str	r5, [sp, #20]
 8008420:	2322      	movs	r3, #34	; 0x22
 8008422:	f8df b118 	ldr.w	fp, [pc, #280]	; 800853c <_strtod_l+0x5ac>
 8008426:	6023      	str	r3, [r4, #0]
 8008428:	f04f 0a00 	mov.w	sl, #0
 800842c:	9b07      	ldr	r3, [sp, #28]
 800842e:	2b00      	cmp	r3, #0
 8008430:	f43f adf2 	beq.w	8008018 <_strtod_l+0x88>
 8008434:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008436:	4620      	mov	r0, r4
 8008438:	f001 fec6 	bl	800a1c8 <_Bfree>
 800843c:	9905      	ldr	r1, [sp, #20]
 800843e:	4620      	mov	r0, r4
 8008440:	f001 fec2 	bl	800a1c8 <_Bfree>
 8008444:	4631      	mov	r1, r6
 8008446:	4620      	mov	r0, r4
 8008448:	f001 febe 	bl	800a1c8 <_Bfree>
 800844c:	9907      	ldr	r1, [sp, #28]
 800844e:	4620      	mov	r0, r4
 8008450:	f001 feba 	bl	800a1c8 <_Bfree>
 8008454:	4629      	mov	r1, r5
 8008456:	4620      	mov	r0, r4
 8008458:	f001 feb6 	bl	800a1c8 <_Bfree>
 800845c:	e5dc      	b.n	8008018 <_strtod_l+0x88>
 800845e:	4b36      	ldr	r3, [pc, #216]	; (8008538 <_strtod_l+0x5a8>)
 8008460:	9304      	str	r3, [sp, #16]
 8008462:	2300      	movs	r3, #0
 8008464:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008468:	4650      	mov	r0, sl
 800846a:	4659      	mov	r1, fp
 800846c:	4699      	mov	r9, r3
 800846e:	f1b8 0f01 	cmp.w	r8, #1
 8008472:	dc21      	bgt.n	80084b8 <_strtod_l+0x528>
 8008474:	b10b      	cbz	r3, 800847a <_strtod_l+0x4ea>
 8008476:	4682      	mov	sl, r0
 8008478:	468b      	mov	fp, r1
 800847a:	4b2f      	ldr	r3, [pc, #188]	; (8008538 <_strtod_l+0x5a8>)
 800847c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008480:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008484:	4652      	mov	r2, sl
 8008486:	465b      	mov	r3, fp
 8008488:	e9d9 0100 	ldrd	r0, r1, [r9]
 800848c:	f7f8 f8c4 	bl	8000618 <__aeabi_dmul>
 8008490:	4b2a      	ldr	r3, [pc, #168]	; (800853c <_strtod_l+0x5ac>)
 8008492:	460a      	mov	r2, r1
 8008494:	400b      	ands	r3, r1
 8008496:	492a      	ldr	r1, [pc, #168]	; (8008540 <_strtod_l+0x5b0>)
 8008498:	428b      	cmp	r3, r1
 800849a:	4682      	mov	sl, r0
 800849c:	d8bc      	bhi.n	8008418 <_strtod_l+0x488>
 800849e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80084a2:	428b      	cmp	r3, r1
 80084a4:	bf86      	itte	hi
 80084a6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8008544 <_strtod_l+0x5b4>
 80084aa:	f04f 3aff 	movhi.w	sl, #4294967295
 80084ae:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80084b2:	2300      	movs	r3, #0
 80084b4:	9304      	str	r3, [sp, #16]
 80084b6:	e084      	b.n	80085c2 <_strtod_l+0x632>
 80084b8:	f018 0f01 	tst.w	r8, #1
 80084bc:	d005      	beq.n	80084ca <_strtod_l+0x53a>
 80084be:	9b04      	ldr	r3, [sp, #16]
 80084c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c4:	f7f8 f8a8 	bl	8000618 <__aeabi_dmul>
 80084c8:	2301      	movs	r3, #1
 80084ca:	9a04      	ldr	r2, [sp, #16]
 80084cc:	3208      	adds	r2, #8
 80084ce:	f109 0901 	add.w	r9, r9, #1
 80084d2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80084d6:	9204      	str	r2, [sp, #16]
 80084d8:	e7c9      	b.n	800846e <_strtod_l+0x4de>
 80084da:	d0ea      	beq.n	80084b2 <_strtod_l+0x522>
 80084dc:	f1c8 0800 	rsb	r8, r8, #0
 80084e0:	f018 020f 	ands.w	r2, r8, #15
 80084e4:	d00a      	beq.n	80084fc <_strtod_l+0x56c>
 80084e6:	4b13      	ldr	r3, [pc, #76]	; (8008534 <_strtod_l+0x5a4>)
 80084e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084ec:	4650      	mov	r0, sl
 80084ee:	4659      	mov	r1, fp
 80084f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f4:	f7f8 f9ba 	bl	800086c <__aeabi_ddiv>
 80084f8:	4682      	mov	sl, r0
 80084fa:	468b      	mov	fp, r1
 80084fc:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008500:	d0d7      	beq.n	80084b2 <_strtod_l+0x522>
 8008502:	f1b8 0f1f 	cmp.w	r8, #31
 8008506:	dd1f      	ble.n	8008548 <_strtod_l+0x5b8>
 8008508:	2500      	movs	r5, #0
 800850a:	462e      	mov	r6, r5
 800850c:	9507      	str	r5, [sp, #28]
 800850e:	9505      	str	r5, [sp, #20]
 8008510:	2322      	movs	r3, #34	; 0x22
 8008512:	f04f 0a00 	mov.w	sl, #0
 8008516:	f04f 0b00 	mov.w	fp, #0
 800851a:	6023      	str	r3, [r4, #0]
 800851c:	e786      	b.n	800842c <_strtod_l+0x49c>
 800851e:	bf00      	nop
 8008520:	0800c871 	.word	0x0800c871
 8008524:	0800c8b0 	.word	0x0800c8b0
 8008528:	0800c869 	.word	0x0800c869
 800852c:	0800c9f4 	.word	0x0800c9f4
 8008530:	0800ccbb 	.word	0x0800ccbb
 8008534:	0800cb80 	.word	0x0800cb80
 8008538:	0800cb58 	.word	0x0800cb58
 800853c:	7ff00000 	.word	0x7ff00000
 8008540:	7ca00000 	.word	0x7ca00000
 8008544:	7fefffff 	.word	0x7fefffff
 8008548:	f018 0310 	ands.w	r3, r8, #16
 800854c:	bf18      	it	ne
 800854e:	236a      	movne	r3, #106	; 0x6a
 8008550:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8008900 <_strtod_l+0x970>
 8008554:	9304      	str	r3, [sp, #16]
 8008556:	4650      	mov	r0, sl
 8008558:	4659      	mov	r1, fp
 800855a:	2300      	movs	r3, #0
 800855c:	f018 0f01 	tst.w	r8, #1
 8008560:	d004      	beq.n	800856c <_strtod_l+0x5dc>
 8008562:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008566:	f7f8 f857 	bl	8000618 <__aeabi_dmul>
 800856a:	2301      	movs	r3, #1
 800856c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008570:	f109 0908 	add.w	r9, r9, #8
 8008574:	d1f2      	bne.n	800855c <_strtod_l+0x5cc>
 8008576:	b10b      	cbz	r3, 800857c <_strtod_l+0x5ec>
 8008578:	4682      	mov	sl, r0
 800857a:	468b      	mov	fp, r1
 800857c:	9b04      	ldr	r3, [sp, #16]
 800857e:	b1c3      	cbz	r3, 80085b2 <_strtod_l+0x622>
 8008580:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008584:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008588:	2b00      	cmp	r3, #0
 800858a:	4659      	mov	r1, fp
 800858c:	dd11      	ble.n	80085b2 <_strtod_l+0x622>
 800858e:	2b1f      	cmp	r3, #31
 8008590:	f340 8124 	ble.w	80087dc <_strtod_l+0x84c>
 8008594:	2b34      	cmp	r3, #52	; 0x34
 8008596:	bfde      	ittt	le
 8008598:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800859c:	f04f 33ff 	movle.w	r3, #4294967295
 80085a0:	fa03 f202 	lslle.w	r2, r3, r2
 80085a4:	f04f 0a00 	mov.w	sl, #0
 80085a8:	bfcc      	ite	gt
 80085aa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80085ae:	ea02 0b01 	andle.w	fp, r2, r1
 80085b2:	2200      	movs	r2, #0
 80085b4:	2300      	movs	r3, #0
 80085b6:	4650      	mov	r0, sl
 80085b8:	4659      	mov	r1, fp
 80085ba:	f7f8 fa95 	bl	8000ae8 <__aeabi_dcmpeq>
 80085be:	2800      	cmp	r0, #0
 80085c0:	d1a2      	bne.n	8008508 <_strtod_l+0x578>
 80085c2:	9b07      	ldr	r3, [sp, #28]
 80085c4:	9300      	str	r3, [sp, #0]
 80085c6:	9908      	ldr	r1, [sp, #32]
 80085c8:	462b      	mov	r3, r5
 80085ca:	463a      	mov	r2, r7
 80085cc:	4620      	mov	r0, r4
 80085ce:	f001 fe63 	bl	800a298 <__s2b>
 80085d2:	9007      	str	r0, [sp, #28]
 80085d4:	2800      	cmp	r0, #0
 80085d6:	f43f af1f 	beq.w	8008418 <_strtod_l+0x488>
 80085da:	9b05      	ldr	r3, [sp, #20]
 80085dc:	1b9e      	subs	r6, r3, r6
 80085de:	9b06      	ldr	r3, [sp, #24]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	bfb4      	ite	lt
 80085e4:	4633      	movlt	r3, r6
 80085e6:	2300      	movge	r3, #0
 80085e8:	930c      	str	r3, [sp, #48]	; 0x30
 80085ea:	9b06      	ldr	r3, [sp, #24]
 80085ec:	2500      	movs	r5, #0
 80085ee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80085f2:	9312      	str	r3, [sp, #72]	; 0x48
 80085f4:	462e      	mov	r6, r5
 80085f6:	9b07      	ldr	r3, [sp, #28]
 80085f8:	4620      	mov	r0, r4
 80085fa:	6859      	ldr	r1, [r3, #4]
 80085fc:	f001 fda4 	bl	800a148 <_Balloc>
 8008600:	9005      	str	r0, [sp, #20]
 8008602:	2800      	cmp	r0, #0
 8008604:	f43f af0c 	beq.w	8008420 <_strtod_l+0x490>
 8008608:	9b07      	ldr	r3, [sp, #28]
 800860a:	691a      	ldr	r2, [r3, #16]
 800860c:	3202      	adds	r2, #2
 800860e:	f103 010c 	add.w	r1, r3, #12
 8008612:	0092      	lsls	r2, r2, #2
 8008614:	300c      	adds	r0, #12
 8008616:	f001 fd89 	bl	800a12c <memcpy>
 800861a:	ec4b ab10 	vmov	d0, sl, fp
 800861e:	aa1a      	add	r2, sp, #104	; 0x68
 8008620:	a919      	add	r1, sp, #100	; 0x64
 8008622:	4620      	mov	r0, r4
 8008624:	f002 f97e 	bl	800a924 <__d2b>
 8008628:	ec4b ab18 	vmov	d8, sl, fp
 800862c:	9018      	str	r0, [sp, #96]	; 0x60
 800862e:	2800      	cmp	r0, #0
 8008630:	f43f aef6 	beq.w	8008420 <_strtod_l+0x490>
 8008634:	2101      	movs	r1, #1
 8008636:	4620      	mov	r0, r4
 8008638:	f001 fec8 	bl	800a3cc <__i2b>
 800863c:	4606      	mov	r6, r0
 800863e:	2800      	cmp	r0, #0
 8008640:	f43f aeee 	beq.w	8008420 <_strtod_l+0x490>
 8008644:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008646:	9904      	ldr	r1, [sp, #16]
 8008648:	2b00      	cmp	r3, #0
 800864a:	bfab      	itete	ge
 800864c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800864e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8008650:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008652:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8008656:	bfac      	ite	ge
 8008658:	eb03 0902 	addge.w	r9, r3, r2
 800865c:	1ad7      	sublt	r7, r2, r3
 800865e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008660:	eba3 0801 	sub.w	r8, r3, r1
 8008664:	4490      	add	r8, r2
 8008666:	4ba1      	ldr	r3, [pc, #644]	; (80088ec <_strtod_l+0x95c>)
 8008668:	f108 38ff 	add.w	r8, r8, #4294967295
 800866c:	4598      	cmp	r8, r3
 800866e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008672:	f280 80c7 	bge.w	8008804 <_strtod_l+0x874>
 8008676:	eba3 0308 	sub.w	r3, r3, r8
 800867a:	2b1f      	cmp	r3, #31
 800867c:	eba2 0203 	sub.w	r2, r2, r3
 8008680:	f04f 0101 	mov.w	r1, #1
 8008684:	f300 80b1 	bgt.w	80087ea <_strtod_l+0x85a>
 8008688:	fa01 f303 	lsl.w	r3, r1, r3
 800868c:	930d      	str	r3, [sp, #52]	; 0x34
 800868e:	2300      	movs	r3, #0
 8008690:	9308      	str	r3, [sp, #32]
 8008692:	eb09 0802 	add.w	r8, r9, r2
 8008696:	9b04      	ldr	r3, [sp, #16]
 8008698:	45c1      	cmp	r9, r8
 800869a:	4417      	add	r7, r2
 800869c:	441f      	add	r7, r3
 800869e:	464b      	mov	r3, r9
 80086a0:	bfa8      	it	ge
 80086a2:	4643      	movge	r3, r8
 80086a4:	42bb      	cmp	r3, r7
 80086a6:	bfa8      	it	ge
 80086a8:	463b      	movge	r3, r7
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	bfc2      	ittt	gt
 80086ae:	eba8 0803 	subgt.w	r8, r8, r3
 80086b2:	1aff      	subgt	r7, r7, r3
 80086b4:	eba9 0903 	subgt.w	r9, r9, r3
 80086b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	dd17      	ble.n	80086ee <_strtod_l+0x75e>
 80086be:	4631      	mov	r1, r6
 80086c0:	461a      	mov	r2, r3
 80086c2:	4620      	mov	r0, r4
 80086c4:	f001 ff42 	bl	800a54c <__pow5mult>
 80086c8:	4606      	mov	r6, r0
 80086ca:	2800      	cmp	r0, #0
 80086cc:	f43f aea8 	beq.w	8008420 <_strtod_l+0x490>
 80086d0:	4601      	mov	r1, r0
 80086d2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80086d4:	4620      	mov	r0, r4
 80086d6:	f001 fe8f 	bl	800a3f8 <__multiply>
 80086da:	900b      	str	r0, [sp, #44]	; 0x2c
 80086dc:	2800      	cmp	r0, #0
 80086de:	f43f ae9f 	beq.w	8008420 <_strtod_l+0x490>
 80086e2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80086e4:	4620      	mov	r0, r4
 80086e6:	f001 fd6f 	bl	800a1c8 <_Bfree>
 80086ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086ec:	9318      	str	r3, [sp, #96]	; 0x60
 80086ee:	f1b8 0f00 	cmp.w	r8, #0
 80086f2:	f300 808c 	bgt.w	800880e <_strtod_l+0x87e>
 80086f6:	9b06      	ldr	r3, [sp, #24]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	dd08      	ble.n	800870e <_strtod_l+0x77e>
 80086fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80086fe:	9905      	ldr	r1, [sp, #20]
 8008700:	4620      	mov	r0, r4
 8008702:	f001 ff23 	bl	800a54c <__pow5mult>
 8008706:	9005      	str	r0, [sp, #20]
 8008708:	2800      	cmp	r0, #0
 800870a:	f43f ae89 	beq.w	8008420 <_strtod_l+0x490>
 800870e:	2f00      	cmp	r7, #0
 8008710:	dd08      	ble.n	8008724 <_strtod_l+0x794>
 8008712:	9905      	ldr	r1, [sp, #20]
 8008714:	463a      	mov	r2, r7
 8008716:	4620      	mov	r0, r4
 8008718:	f001 ff72 	bl	800a600 <__lshift>
 800871c:	9005      	str	r0, [sp, #20]
 800871e:	2800      	cmp	r0, #0
 8008720:	f43f ae7e 	beq.w	8008420 <_strtod_l+0x490>
 8008724:	f1b9 0f00 	cmp.w	r9, #0
 8008728:	dd08      	ble.n	800873c <_strtod_l+0x7ac>
 800872a:	4631      	mov	r1, r6
 800872c:	464a      	mov	r2, r9
 800872e:	4620      	mov	r0, r4
 8008730:	f001 ff66 	bl	800a600 <__lshift>
 8008734:	4606      	mov	r6, r0
 8008736:	2800      	cmp	r0, #0
 8008738:	f43f ae72 	beq.w	8008420 <_strtod_l+0x490>
 800873c:	9a05      	ldr	r2, [sp, #20]
 800873e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008740:	4620      	mov	r0, r4
 8008742:	f001 ffe9 	bl	800a718 <__mdiff>
 8008746:	4605      	mov	r5, r0
 8008748:	2800      	cmp	r0, #0
 800874a:	f43f ae69 	beq.w	8008420 <_strtod_l+0x490>
 800874e:	68c3      	ldr	r3, [r0, #12]
 8008750:	930b      	str	r3, [sp, #44]	; 0x2c
 8008752:	2300      	movs	r3, #0
 8008754:	60c3      	str	r3, [r0, #12]
 8008756:	4631      	mov	r1, r6
 8008758:	f001 ffc2 	bl	800a6e0 <__mcmp>
 800875c:	2800      	cmp	r0, #0
 800875e:	da60      	bge.n	8008822 <_strtod_l+0x892>
 8008760:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008762:	ea53 030a 	orrs.w	r3, r3, sl
 8008766:	f040 8082 	bne.w	800886e <_strtod_l+0x8de>
 800876a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800876e:	2b00      	cmp	r3, #0
 8008770:	d17d      	bne.n	800886e <_strtod_l+0x8de>
 8008772:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008776:	0d1b      	lsrs	r3, r3, #20
 8008778:	051b      	lsls	r3, r3, #20
 800877a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800877e:	d976      	bls.n	800886e <_strtod_l+0x8de>
 8008780:	696b      	ldr	r3, [r5, #20]
 8008782:	b913      	cbnz	r3, 800878a <_strtod_l+0x7fa>
 8008784:	692b      	ldr	r3, [r5, #16]
 8008786:	2b01      	cmp	r3, #1
 8008788:	dd71      	ble.n	800886e <_strtod_l+0x8de>
 800878a:	4629      	mov	r1, r5
 800878c:	2201      	movs	r2, #1
 800878e:	4620      	mov	r0, r4
 8008790:	f001 ff36 	bl	800a600 <__lshift>
 8008794:	4631      	mov	r1, r6
 8008796:	4605      	mov	r5, r0
 8008798:	f001 ffa2 	bl	800a6e0 <__mcmp>
 800879c:	2800      	cmp	r0, #0
 800879e:	dd66      	ble.n	800886e <_strtod_l+0x8de>
 80087a0:	9904      	ldr	r1, [sp, #16]
 80087a2:	4a53      	ldr	r2, [pc, #332]	; (80088f0 <_strtod_l+0x960>)
 80087a4:	465b      	mov	r3, fp
 80087a6:	2900      	cmp	r1, #0
 80087a8:	f000 8081 	beq.w	80088ae <_strtod_l+0x91e>
 80087ac:	ea02 010b 	and.w	r1, r2, fp
 80087b0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80087b4:	dc7b      	bgt.n	80088ae <_strtod_l+0x91e>
 80087b6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80087ba:	f77f aea9 	ble.w	8008510 <_strtod_l+0x580>
 80087be:	4b4d      	ldr	r3, [pc, #308]	; (80088f4 <_strtod_l+0x964>)
 80087c0:	4650      	mov	r0, sl
 80087c2:	4659      	mov	r1, fp
 80087c4:	2200      	movs	r2, #0
 80087c6:	f7f7 ff27 	bl	8000618 <__aeabi_dmul>
 80087ca:	460b      	mov	r3, r1
 80087cc:	4303      	orrs	r3, r0
 80087ce:	bf08      	it	eq
 80087d0:	2322      	moveq	r3, #34	; 0x22
 80087d2:	4682      	mov	sl, r0
 80087d4:	468b      	mov	fp, r1
 80087d6:	bf08      	it	eq
 80087d8:	6023      	streq	r3, [r4, #0]
 80087da:	e62b      	b.n	8008434 <_strtod_l+0x4a4>
 80087dc:	f04f 32ff 	mov.w	r2, #4294967295
 80087e0:	fa02 f303 	lsl.w	r3, r2, r3
 80087e4:	ea03 0a0a 	and.w	sl, r3, sl
 80087e8:	e6e3      	b.n	80085b2 <_strtod_l+0x622>
 80087ea:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80087ee:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80087f2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80087f6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80087fa:	fa01 f308 	lsl.w	r3, r1, r8
 80087fe:	9308      	str	r3, [sp, #32]
 8008800:	910d      	str	r1, [sp, #52]	; 0x34
 8008802:	e746      	b.n	8008692 <_strtod_l+0x702>
 8008804:	2300      	movs	r3, #0
 8008806:	9308      	str	r3, [sp, #32]
 8008808:	2301      	movs	r3, #1
 800880a:	930d      	str	r3, [sp, #52]	; 0x34
 800880c:	e741      	b.n	8008692 <_strtod_l+0x702>
 800880e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008810:	4642      	mov	r2, r8
 8008812:	4620      	mov	r0, r4
 8008814:	f001 fef4 	bl	800a600 <__lshift>
 8008818:	9018      	str	r0, [sp, #96]	; 0x60
 800881a:	2800      	cmp	r0, #0
 800881c:	f47f af6b 	bne.w	80086f6 <_strtod_l+0x766>
 8008820:	e5fe      	b.n	8008420 <_strtod_l+0x490>
 8008822:	465f      	mov	r7, fp
 8008824:	d16e      	bne.n	8008904 <_strtod_l+0x974>
 8008826:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008828:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800882c:	b342      	cbz	r2, 8008880 <_strtod_l+0x8f0>
 800882e:	4a32      	ldr	r2, [pc, #200]	; (80088f8 <_strtod_l+0x968>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d128      	bne.n	8008886 <_strtod_l+0x8f6>
 8008834:	9b04      	ldr	r3, [sp, #16]
 8008836:	4651      	mov	r1, sl
 8008838:	b1eb      	cbz	r3, 8008876 <_strtod_l+0x8e6>
 800883a:	4b2d      	ldr	r3, [pc, #180]	; (80088f0 <_strtod_l+0x960>)
 800883c:	403b      	ands	r3, r7
 800883e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008842:	f04f 32ff 	mov.w	r2, #4294967295
 8008846:	d819      	bhi.n	800887c <_strtod_l+0x8ec>
 8008848:	0d1b      	lsrs	r3, r3, #20
 800884a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800884e:	fa02 f303 	lsl.w	r3, r2, r3
 8008852:	4299      	cmp	r1, r3
 8008854:	d117      	bne.n	8008886 <_strtod_l+0x8f6>
 8008856:	4b29      	ldr	r3, [pc, #164]	; (80088fc <_strtod_l+0x96c>)
 8008858:	429f      	cmp	r7, r3
 800885a:	d102      	bne.n	8008862 <_strtod_l+0x8d2>
 800885c:	3101      	adds	r1, #1
 800885e:	f43f addf 	beq.w	8008420 <_strtod_l+0x490>
 8008862:	4b23      	ldr	r3, [pc, #140]	; (80088f0 <_strtod_l+0x960>)
 8008864:	403b      	ands	r3, r7
 8008866:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800886a:	f04f 0a00 	mov.w	sl, #0
 800886e:	9b04      	ldr	r3, [sp, #16]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d1a4      	bne.n	80087be <_strtod_l+0x82e>
 8008874:	e5de      	b.n	8008434 <_strtod_l+0x4a4>
 8008876:	f04f 33ff 	mov.w	r3, #4294967295
 800887a:	e7ea      	b.n	8008852 <_strtod_l+0x8c2>
 800887c:	4613      	mov	r3, r2
 800887e:	e7e8      	b.n	8008852 <_strtod_l+0x8c2>
 8008880:	ea53 030a 	orrs.w	r3, r3, sl
 8008884:	d08c      	beq.n	80087a0 <_strtod_l+0x810>
 8008886:	9b08      	ldr	r3, [sp, #32]
 8008888:	b1db      	cbz	r3, 80088c2 <_strtod_l+0x932>
 800888a:	423b      	tst	r3, r7
 800888c:	d0ef      	beq.n	800886e <_strtod_l+0x8de>
 800888e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008890:	9a04      	ldr	r2, [sp, #16]
 8008892:	4650      	mov	r0, sl
 8008894:	4659      	mov	r1, fp
 8008896:	b1c3      	cbz	r3, 80088ca <_strtod_l+0x93a>
 8008898:	f7ff fb5b 	bl	8007f52 <sulp>
 800889c:	4602      	mov	r2, r0
 800889e:	460b      	mov	r3, r1
 80088a0:	ec51 0b18 	vmov	r0, r1, d8
 80088a4:	f7f7 fd02 	bl	80002ac <__adddf3>
 80088a8:	4682      	mov	sl, r0
 80088aa:	468b      	mov	fp, r1
 80088ac:	e7df      	b.n	800886e <_strtod_l+0x8de>
 80088ae:	4013      	ands	r3, r2
 80088b0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80088b4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80088b8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80088bc:	f04f 3aff 	mov.w	sl, #4294967295
 80088c0:	e7d5      	b.n	800886e <_strtod_l+0x8de>
 80088c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088c4:	ea13 0f0a 	tst.w	r3, sl
 80088c8:	e7e0      	b.n	800888c <_strtod_l+0x8fc>
 80088ca:	f7ff fb42 	bl	8007f52 <sulp>
 80088ce:	4602      	mov	r2, r0
 80088d0:	460b      	mov	r3, r1
 80088d2:	ec51 0b18 	vmov	r0, r1, d8
 80088d6:	f7f7 fce7 	bl	80002a8 <__aeabi_dsub>
 80088da:	2200      	movs	r2, #0
 80088dc:	2300      	movs	r3, #0
 80088de:	4682      	mov	sl, r0
 80088e0:	468b      	mov	fp, r1
 80088e2:	f7f8 f901 	bl	8000ae8 <__aeabi_dcmpeq>
 80088e6:	2800      	cmp	r0, #0
 80088e8:	d0c1      	beq.n	800886e <_strtod_l+0x8de>
 80088ea:	e611      	b.n	8008510 <_strtod_l+0x580>
 80088ec:	fffffc02 	.word	0xfffffc02
 80088f0:	7ff00000 	.word	0x7ff00000
 80088f4:	39500000 	.word	0x39500000
 80088f8:	000fffff 	.word	0x000fffff
 80088fc:	7fefffff 	.word	0x7fefffff
 8008900:	0800c8c8 	.word	0x0800c8c8
 8008904:	4631      	mov	r1, r6
 8008906:	4628      	mov	r0, r5
 8008908:	f002 f868 	bl	800a9dc <__ratio>
 800890c:	ec59 8b10 	vmov	r8, r9, d0
 8008910:	ee10 0a10 	vmov	r0, s0
 8008914:	2200      	movs	r2, #0
 8008916:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800891a:	4649      	mov	r1, r9
 800891c:	f7f8 f8f8 	bl	8000b10 <__aeabi_dcmple>
 8008920:	2800      	cmp	r0, #0
 8008922:	d07a      	beq.n	8008a1a <_strtod_l+0xa8a>
 8008924:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008926:	2b00      	cmp	r3, #0
 8008928:	d04a      	beq.n	80089c0 <_strtod_l+0xa30>
 800892a:	4b95      	ldr	r3, [pc, #596]	; (8008b80 <_strtod_l+0xbf0>)
 800892c:	2200      	movs	r2, #0
 800892e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008932:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008b80 <_strtod_l+0xbf0>
 8008936:	f04f 0800 	mov.w	r8, #0
 800893a:	4b92      	ldr	r3, [pc, #584]	; (8008b84 <_strtod_l+0xbf4>)
 800893c:	403b      	ands	r3, r7
 800893e:	930d      	str	r3, [sp, #52]	; 0x34
 8008940:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008942:	4b91      	ldr	r3, [pc, #580]	; (8008b88 <_strtod_l+0xbf8>)
 8008944:	429a      	cmp	r2, r3
 8008946:	f040 80b0 	bne.w	8008aaa <_strtod_l+0xb1a>
 800894a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800894e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008952:	ec4b ab10 	vmov	d0, sl, fp
 8008956:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800895a:	f001 ff67 	bl	800a82c <__ulp>
 800895e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008962:	ec53 2b10 	vmov	r2, r3, d0
 8008966:	f7f7 fe57 	bl	8000618 <__aeabi_dmul>
 800896a:	4652      	mov	r2, sl
 800896c:	465b      	mov	r3, fp
 800896e:	f7f7 fc9d 	bl	80002ac <__adddf3>
 8008972:	460b      	mov	r3, r1
 8008974:	4983      	ldr	r1, [pc, #524]	; (8008b84 <_strtod_l+0xbf4>)
 8008976:	4a85      	ldr	r2, [pc, #532]	; (8008b8c <_strtod_l+0xbfc>)
 8008978:	4019      	ands	r1, r3
 800897a:	4291      	cmp	r1, r2
 800897c:	4682      	mov	sl, r0
 800897e:	d960      	bls.n	8008a42 <_strtod_l+0xab2>
 8008980:	ee18 3a90 	vmov	r3, s17
 8008984:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008988:	4293      	cmp	r3, r2
 800898a:	d104      	bne.n	8008996 <_strtod_l+0xa06>
 800898c:	ee18 3a10 	vmov	r3, s16
 8008990:	3301      	adds	r3, #1
 8008992:	f43f ad45 	beq.w	8008420 <_strtod_l+0x490>
 8008996:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008b98 <_strtod_l+0xc08>
 800899a:	f04f 3aff 	mov.w	sl, #4294967295
 800899e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80089a0:	4620      	mov	r0, r4
 80089a2:	f001 fc11 	bl	800a1c8 <_Bfree>
 80089a6:	9905      	ldr	r1, [sp, #20]
 80089a8:	4620      	mov	r0, r4
 80089aa:	f001 fc0d 	bl	800a1c8 <_Bfree>
 80089ae:	4631      	mov	r1, r6
 80089b0:	4620      	mov	r0, r4
 80089b2:	f001 fc09 	bl	800a1c8 <_Bfree>
 80089b6:	4629      	mov	r1, r5
 80089b8:	4620      	mov	r0, r4
 80089ba:	f001 fc05 	bl	800a1c8 <_Bfree>
 80089be:	e61a      	b.n	80085f6 <_strtod_l+0x666>
 80089c0:	f1ba 0f00 	cmp.w	sl, #0
 80089c4:	d11b      	bne.n	80089fe <_strtod_l+0xa6e>
 80089c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80089ca:	b9f3      	cbnz	r3, 8008a0a <_strtod_l+0xa7a>
 80089cc:	4b6c      	ldr	r3, [pc, #432]	; (8008b80 <_strtod_l+0xbf0>)
 80089ce:	2200      	movs	r2, #0
 80089d0:	4640      	mov	r0, r8
 80089d2:	4649      	mov	r1, r9
 80089d4:	f7f8 f892 	bl	8000afc <__aeabi_dcmplt>
 80089d8:	b9d0      	cbnz	r0, 8008a10 <_strtod_l+0xa80>
 80089da:	4640      	mov	r0, r8
 80089dc:	4649      	mov	r1, r9
 80089de:	4b6c      	ldr	r3, [pc, #432]	; (8008b90 <_strtod_l+0xc00>)
 80089e0:	2200      	movs	r2, #0
 80089e2:	f7f7 fe19 	bl	8000618 <__aeabi_dmul>
 80089e6:	4680      	mov	r8, r0
 80089e8:	4689      	mov	r9, r1
 80089ea:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80089ee:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80089f2:	9315      	str	r3, [sp, #84]	; 0x54
 80089f4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80089f8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80089fc:	e79d      	b.n	800893a <_strtod_l+0x9aa>
 80089fe:	f1ba 0f01 	cmp.w	sl, #1
 8008a02:	d102      	bne.n	8008a0a <_strtod_l+0xa7a>
 8008a04:	2f00      	cmp	r7, #0
 8008a06:	f43f ad83 	beq.w	8008510 <_strtod_l+0x580>
 8008a0a:	4b62      	ldr	r3, [pc, #392]	; (8008b94 <_strtod_l+0xc04>)
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	e78e      	b.n	800892e <_strtod_l+0x99e>
 8008a10:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008b90 <_strtod_l+0xc00>
 8008a14:	f04f 0800 	mov.w	r8, #0
 8008a18:	e7e7      	b.n	80089ea <_strtod_l+0xa5a>
 8008a1a:	4b5d      	ldr	r3, [pc, #372]	; (8008b90 <_strtod_l+0xc00>)
 8008a1c:	4640      	mov	r0, r8
 8008a1e:	4649      	mov	r1, r9
 8008a20:	2200      	movs	r2, #0
 8008a22:	f7f7 fdf9 	bl	8000618 <__aeabi_dmul>
 8008a26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a28:	4680      	mov	r8, r0
 8008a2a:	4689      	mov	r9, r1
 8008a2c:	b933      	cbnz	r3, 8008a3c <_strtod_l+0xaac>
 8008a2e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a32:	900e      	str	r0, [sp, #56]	; 0x38
 8008a34:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a36:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008a3a:	e7dd      	b.n	80089f8 <_strtod_l+0xa68>
 8008a3c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8008a40:	e7f9      	b.n	8008a36 <_strtod_l+0xaa6>
 8008a42:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008a46:	9b04      	ldr	r3, [sp, #16]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d1a8      	bne.n	800899e <_strtod_l+0xa0e>
 8008a4c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008a50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a52:	0d1b      	lsrs	r3, r3, #20
 8008a54:	051b      	lsls	r3, r3, #20
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d1a1      	bne.n	800899e <_strtod_l+0xa0e>
 8008a5a:	4640      	mov	r0, r8
 8008a5c:	4649      	mov	r1, r9
 8008a5e:	f7f8 f93b 	bl	8000cd8 <__aeabi_d2lz>
 8008a62:	f7f7 fdab 	bl	80005bc <__aeabi_l2d>
 8008a66:	4602      	mov	r2, r0
 8008a68:	460b      	mov	r3, r1
 8008a6a:	4640      	mov	r0, r8
 8008a6c:	4649      	mov	r1, r9
 8008a6e:	f7f7 fc1b 	bl	80002a8 <__aeabi_dsub>
 8008a72:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008a74:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a78:	ea43 030a 	orr.w	r3, r3, sl
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	4680      	mov	r8, r0
 8008a80:	4689      	mov	r9, r1
 8008a82:	d055      	beq.n	8008b30 <_strtod_l+0xba0>
 8008a84:	a336      	add	r3, pc, #216	; (adr r3, 8008b60 <_strtod_l+0xbd0>)
 8008a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a8a:	f7f8 f837 	bl	8000afc <__aeabi_dcmplt>
 8008a8e:	2800      	cmp	r0, #0
 8008a90:	f47f acd0 	bne.w	8008434 <_strtod_l+0x4a4>
 8008a94:	a334      	add	r3, pc, #208	; (adr r3, 8008b68 <_strtod_l+0xbd8>)
 8008a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a9a:	4640      	mov	r0, r8
 8008a9c:	4649      	mov	r1, r9
 8008a9e:	f7f8 f84b 	bl	8000b38 <__aeabi_dcmpgt>
 8008aa2:	2800      	cmp	r0, #0
 8008aa4:	f43f af7b 	beq.w	800899e <_strtod_l+0xa0e>
 8008aa8:	e4c4      	b.n	8008434 <_strtod_l+0x4a4>
 8008aaa:	9b04      	ldr	r3, [sp, #16]
 8008aac:	b333      	cbz	r3, 8008afc <_strtod_l+0xb6c>
 8008aae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ab0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008ab4:	d822      	bhi.n	8008afc <_strtod_l+0xb6c>
 8008ab6:	a32e      	add	r3, pc, #184	; (adr r3, 8008b70 <_strtod_l+0xbe0>)
 8008ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008abc:	4640      	mov	r0, r8
 8008abe:	4649      	mov	r1, r9
 8008ac0:	f7f8 f826 	bl	8000b10 <__aeabi_dcmple>
 8008ac4:	b1a0      	cbz	r0, 8008af0 <_strtod_l+0xb60>
 8008ac6:	4649      	mov	r1, r9
 8008ac8:	4640      	mov	r0, r8
 8008aca:	f7f8 f87d 	bl	8000bc8 <__aeabi_d2uiz>
 8008ace:	2801      	cmp	r0, #1
 8008ad0:	bf38      	it	cc
 8008ad2:	2001      	movcc	r0, #1
 8008ad4:	f7f7 fd26 	bl	8000524 <__aeabi_ui2d>
 8008ad8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ada:	4680      	mov	r8, r0
 8008adc:	4689      	mov	r9, r1
 8008ade:	bb23      	cbnz	r3, 8008b2a <_strtod_l+0xb9a>
 8008ae0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008ae4:	9010      	str	r0, [sp, #64]	; 0x40
 8008ae6:	9311      	str	r3, [sp, #68]	; 0x44
 8008ae8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008aec:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008af0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008af2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008af4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008af8:	1a9b      	subs	r3, r3, r2
 8008afa:	9309      	str	r3, [sp, #36]	; 0x24
 8008afc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008b00:	eeb0 0a48 	vmov.f32	s0, s16
 8008b04:	eef0 0a68 	vmov.f32	s1, s17
 8008b08:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008b0c:	f001 fe8e 	bl	800a82c <__ulp>
 8008b10:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008b14:	ec53 2b10 	vmov	r2, r3, d0
 8008b18:	f7f7 fd7e 	bl	8000618 <__aeabi_dmul>
 8008b1c:	ec53 2b18 	vmov	r2, r3, d8
 8008b20:	f7f7 fbc4 	bl	80002ac <__adddf3>
 8008b24:	4682      	mov	sl, r0
 8008b26:	468b      	mov	fp, r1
 8008b28:	e78d      	b.n	8008a46 <_strtod_l+0xab6>
 8008b2a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8008b2e:	e7db      	b.n	8008ae8 <_strtod_l+0xb58>
 8008b30:	a311      	add	r3, pc, #68	; (adr r3, 8008b78 <_strtod_l+0xbe8>)
 8008b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b36:	f7f7 ffe1 	bl	8000afc <__aeabi_dcmplt>
 8008b3a:	e7b2      	b.n	8008aa2 <_strtod_l+0xb12>
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	930a      	str	r3, [sp, #40]	; 0x28
 8008b40:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008b42:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008b44:	6013      	str	r3, [r2, #0]
 8008b46:	f7ff ba6b 	b.w	8008020 <_strtod_l+0x90>
 8008b4a:	2a65      	cmp	r2, #101	; 0x65
 8008b4c:	f43f ab5f 	beq.w	800820e <_strtod_l+0x27e>
 8008b50:	2a45      	cmp	r2, #69	; 0x45
 8008b52:	f43f ab5c 	beq.w	800820e <_strtod_l+0x27e>
 8008b56:	2301      	movs	r3, #1
 8008b58:	f7ff bb94 	b.w	8008284 <_strtod_l+0x2f4>
 8008b5c:	f3af 8000 	nop.w
 8008b60:	94a03595 	.word	0x94a03595
 8008b64:	3fdfffff 	.word	0x3fdfffff
 8008b68:	35afe535 	.word	0x35afe535
 8008b6c:	3fe00000 	.word	0x3fe00000
 8008b70:	ffc00000 	.word	0xffc00000
 8008b74:	41dfffff 	.word	0x41dfffff
 8008b78:	94a03595 	.word	0x94a03595
 8008b7c:	3fcfffff 	.word	0x3fcfffff
 8008b80:	3ff00000 	.word	0x3ff00000
 8008b84:	7ff00000 	.word	0x7ff00000
 8008b88:	7fe00000 	.word	0x7fe00000
 8008b8c:	7c9fffff 	.word	0x7c9fffff
 8008b90:	3fe00000 	.word	0x3fe00000
 8008b94:	bff00000 	.word	0xbff00000
 8008b98:	7fefffff 	.word	0x7fefffff

08008b9c <_strtod_r>:
 8008b9c:	4b01      	ldr	r3, [pc, #4]	; (8008ba4 <_strtod_r+0x8>)
 8008b9e:	f7ff b9f7 	b.w	8007f90 <_strtod_l>
 8008ba2:	bf00      	nop
 8008ba4:	20000074 	.word	0x20000074

08008ba8 <_strtol_l.constprop.0>:
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bae:	d001      	beq.n	8008bb4 <_strtol_l.constprop.0+0xc>
 8008bb0:	2b24      	cmp	r3, #36	; 0x24
 8008bb2:	d906      	bls.n	8008bc2 <_strtol_l.constprop.0+0x1a>
 8008bb4:	f7fe fa76 	bl	80070a4 <__errno>
 8008bb8:	2316      	movs	r3, #22
 8008bba:	6003      	str	r3, [r0, #0]
 8008bbc:	2000      	movs	r0, #0
 8008bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bc2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008ca8 <_strtol_l.constprop.0+0x100>
 8008bc6:	460d      	mov	r5, r1
 8008bc8:	462e      	mov	r6, r5
 8008bca:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008bce:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008bd2:	f017 0708 	ands.w	r7, r7, #8
 8008bd6:	d1f7      	bne.n	8008bc8 <_strtol_l.constprop.0+0x20>
 8008bd8:	2c2d      	cmp	r4, #45	; 0x2d
 8008bda:	d132      	bne.n	8008c42 <_strtol_l.constprop.0+0x9a>
 8008bdc:	782c      	ldrb	r4, [r5, #0]
 8008bde:	2701      	movs	r7, #1
 8008be0:	1cb5      	adds	r5, r6, #2
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d05b      	beq.n	8008c9e <_strtol_l.constprop.0+0xf6>
 8008be6:	2b10      	cmp	r3, #16
 8008be8:	d109      	bne.n	8008bfe <_strtol_l.constprop.0+0x56>
 8008bea:	2c30      	cmp	r4, #48	; 0x30
 8008bec:	d107      	bne.n	8008bfe <_strtol_l.constprop.0+0x56>
 8008bee:	782c      	ldrb	r4, [r5, #0]
 8008bf0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008bf4:	2c58      	cmp	r4, #88	; 0x58
 8008bf6:	d14d      	bne.n	8008c94 <_strtol_l.constprop.0+0xec>
 8008bf8:	786c      	ldrb	r4, [r5, #1]
 8008bfa:	2310      	movs	r3, #16
 8008bfc:	3502      	adds	r5, #2
 8008bfe:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008c02:	f108 38ff 	add.w	r8, r8, #4294967295
 8008c06:	f04f 0c00 	mov.w	ip, #0
 8008c0a:	fbb8 f9f3 	udiv	r9, r8, r3
 8008c0e:	4666      	mov	r6, ip
 8008c10:	fb03 8a19 	mls	sl, r3, r9, r8
 8008c14:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008c18:	f1be 0f09 	cmp.w	lr, #9
 8008c1c:	d816      	bhi.n	8008c4c <_strtol_l.constprop.0+0xa4>
 8008c1e:	4674      	mov	r4, lr
 8008c20:	42a3      	cmp	r3, r4
 8008c22:	dd24      	ble.n	8008c6e <_strtol_l.constprop.0+0xc6>
 8008c24:	f1bc 0f00 	cmp.w	ip, #0
 8008c28:	db1e      	blt.n	8008c68 <_strtol_l.constprop.0+0xc0>
 8008c2a:	45b1      	cmp	r9, r6
 8008c2c:	d31c      	bcc.n	8008c68 <_strtol_l.constprop.0+0xc0>
 8008c2e:	d101      	bne.n	8008c34 <_strtol_l.constprop.0+0x8c>
 8008c30:	45a2      	cmp	sl, r4
 8008c32:	db19      	blt.n	8008c68 <_strtol_l.constprop.0+0xc0>
 8008c34:	fb06 4603 	mla	r6, r6, r3, r4
 8008c38:	f04f 0c01 	mov.w	ip, #1
 8008c3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c40:	e7e8      	b.n	8008c14 <_strtol_l.constprop.0+0x6c>
 8008c42:	2c2b      	cmp	r4, #43	; 0x2b
 8008c44:	bf04      	itt	eq
 8008c46:	782c      	ldrbeq	r4, [r5, #0]
 8008c48:	1cb5      	addeq	r5, r6, #2
 8008c4a:	e7ca      	b.n	8008be2 <_strtol_l.constprop.0+0x3a>
 8008c4c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008c50:	f1be 0f19 	cmp.w	lr, #25
 8008c54:	d801      	bhi.n	8008c5a <_strtol_l.constprop.0+0xb2>
 8008c56:	3c37      	subs	r4, #55	; 0x37
 8008c58:	e7e2      	b.n	8008c20 <_strtol_l.constprop.0+0x78>
 8008c5a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008c5e:	f1be 0f19 	cmp.w	lr, #25
 8008c62:	d804      	bhi.n	8008c6e <_strtol_l.constprop.0+0xc6>
 8008c64:	3c57      	subs	r4, #87	; 0x57
 8008c66:	e7db      	b.n	8008c20 <_strtol_l.constprop.0+0x78>
 8008c68:	f04f 3cff 	mov.w	ip, #4294967295
 8008c6c:	e7e6      	b.n	8008c3c <_strtol_l.constprop.0+0x94>
 8008c6e:	f1bc 0f00 	cmp.w	ip, #0
 8008c72:	da05      	bge.n	8008c80 <_strtol_l.constprop.0+0xd8>
 8008c74:	2322      	movs	r3, #34	; 0x22
 8008c76:	6003      	str	r3, [r0, #0]
 8008c78:	4646      	mov	r6, r8
 8008c7a:	b942      	cbnz	r2, 8008c8e <_strtol_l.constprop.0+0xe6>
 8008c7c:	4630      	mov	r0, r6
 8008c7e:	e79e      	b.n	8008bbe <_strtol_l.constprop.0+0x16>
 8008c80:	b107      	cbz	r7, 8008c84 <_strtol_l.constprop.0+0xdc>
 8008c82:	4276      	negs	r6, r6
 8008c84:	2a00      	cmp	r2, #0
 8008c86:	d0f9      	beq.n	8008c7c <_strtol_l.constprop.0+0xd4>
 8008c88:	f1bc 0f00 	cmp.w	ip, #0
 8008c8c:	d000      	beq.n	8008c90 <_strtol_l.constprop.0+0xe8>
 8008c8e:	1e69      	subs	r1, r5, #1
 8008c90:	6011      	str	r1, [r2, #0]
 8008c92:	e7f3      	b.n	8008c7c <_strtol_l.constprop.0+0xd4>
 8008c94:	2430      	movs	r4, #48	; 0x30
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d1b1      	bne.n	8008bfe <_strtol_l.constprop.0+0x56>
 8008c9a:	2308      	movs	r3, #8
 8008c9c:	e7af      	b.n	8008bfe <_strtol_l.constprop.0+0x56>
 8008c9e:	2c30      	cmp	r4, #48	; 0x30
 8008ca0:	d0a5      	beq.n	8008bee <_strtol_l.constprop.0+0x46>
 8008ca2:	230a      	movs	r3, #10
 8008ca4:	e7ab      	b.n	8008bfe <_strtol_l.constprop.0+0x56>
 8008ca6:	bf00      	nop
 8008ca8:	0800c8f1 	.word	0x0800c8f1

08008cac <_strtol_r>:
 8008cac:	f7ff bf7c 	b.w	8008ba8 <_strtol_l.constprop.0>

08008cb0 <_write_r>:
 8008cb0:	b538      	push	{r3, r4, r5, lr}
 8008cb2:	4d07      	ldr	r5, [pc, #28]	; (8008cd0 <_write_r+0x20>)
 8008cb4:	4604      	mov	r4, r0
 8008cb6:	4608      	mov	r0, r1
 8008cb8:	4611      	mov	r1, r2
 8008cba:	2200      	movs	r2, #0
 8008cbc:	602a      	str	r2, [r5, #0]
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	f7f9 fbcf 	bl	8002462 <_write>
 8008cc4:	1c43      	adds	r3, r0, #1
 8008cc6:	d102      	bne.n	8008cce <_write_r+0x1e>
 8008cc8:	682b      	ldr	r3, [r5, #0]
 8008cca:	b103      	cbz	r3, 8008cce <_write_r+0x1e>
 8008ccc:	6023      	str	r3, [r4, #0]
 8008cce:	bd38      	pop	{r3, r4, r5, pc}
 8008cd0:	200004d4 	.word	0x200004d4

08008cd4 <_close_r>:
 8008cd4:	b538      	push	{r3, r4, r5, lr}
 8008cd6:	4d06      	ldr	r5, [pc, #24]	; (8008cf0 <_close_r+0x1c>)
 8008cd8:	2300      	movs	r3, #0
 8008cda:	4604      	mov	r4, r0
 8008cdc:	4608      	mov	r0, r1
 8008cde:	602b      	str	r3, [r5, #0]
 8008ce0:	f7f9 fbdb 	bl	800249a <_close>
 8008ce4:	1c43      	adds	r3, r0, #1
 8008ce6:	d102      	bne.n	8008cee <_close_r+0x1a>
 8008ce8:	682b      	ldr	r3, [r5, #0]
 8008cea:	b103      	cbz	r3, 8008cee <_close_r+0x1a>
 8008cec:	6023      	str	r3, [r4, #0]
 8008cee:	bd38      	pop	{r3, r4, r5, pc}
 8008cf0:	200004d4 	.word	0x200004d4

08008cf4 <quorem>:
 8008cf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cf8:	6903      	ldr	r3, [r0, #16]
 8008cfa:	690c      	ldr	r4, [r1, #16]
 8008cfc:	42a3      	cmp	r3, r4
 8008cfe:	4607      	mov	r7, r0
 8008d00:	f2c0 8081 	blt.w	8008e06 <quorem+0x112>
 8008d04:	3c01      	subs	r4, #1
 8008d06:	f101 0814 	add.w	r8, r1, #20
 8008d0a:	f100 0514 	add.w	r5, r0, #20
 8008d0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d12:	9301      	str	r3, [sp, #4]
 8008d14:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008d18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d1c:	3301      	adds	r3, #1
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008d24:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008d28:	fbb2 f6f3 	udiv	r6, r2, r3
 8008d2c:	d331      	bcc.n	8008d92 <quorem+0x9e>
 8008d2e:	f04f 0e00 	mov.w	lr, #0
 8008d32:	4640      	mov	r0, r8
 8008d34:	46ac      	mov	ip, r5
 8008d36:	46f2      	mov	sl, lr
 8008d38:	f850 2b04 	ldr.w	r2, [r0], #4
 8008d3c:	b293      	uxth	r3, r2
 8008d3e:	fb06 e303 	mla	r3, r6, r3, lr
 8008d42:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008d46:	b29b      	uxth	r3, r3
 8008d48:	ebaa 0303 	sub.w	r3, sl, r3
 8008d4c:	f8dc a000 	ldr.w	sl, [ip]
 8008d50:	0c12      	lsrs	r2, r2, #16
 8008d52:	fa13 f38a 	uxtah	r3, r3, sl
 8008d56:	fb06 e202 	mla	r2, r6, r2, lr
 8008d5a:	9300      	str	r3, [sp, #0]
 8008d5c:	9b00      	ldr	r3, [sp, #0]
 8008d5e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008d62:	b292      	uxth	r2, r2
 8008d64:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008d68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008d6c:	f8bd 3000 	ldrh.w	r3, [sp]
 8008d70:	4581      	cmp	r9, r0
 8008d72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d76:	f84c 3b04 	str.w	r3, [ip], #4
 8008d7a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008d7e:	d2db      	bcs.n	8008d38 <quorem+0x44>
 8008d80:	f855 300b 	ldr.w	r3, [r5, fp]
 8008d84:	b92b      	cbnz	r3, 8008d92 <quorem+0x9e>
 8008d86:	9b01      	ldr	r3, [sp, #4]
 8008d88:	3b04      	subs	r3, #4
 8008d8a:	429d      	cmp	r5, r3
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	d32e      	bcc.n	8008dee <quorem+0xfa>
 8008d90:	613c      	str	r4, [r7, #16]
 8008d92:	4638      	mov	r0, r7
 8008d94:	f001 fca4 	bl	800a6e0 <__mcmp>
 8008d98:	2800      	cmp	r0, #0
 8008d9a:	db24      	blt.n	8008de6 <quorem+0xf2>
 8008d9c:	3601      	adds	r6, #1
 8008d9e:	4628      	mov	r0, r5
 8008da0:	f04f 0c00 	mov.w	ip, #0
 8008da4:	f858 2b04 	ldr.w	r2, [r8], #4
 8008da8:	f8d0 e000 	ldr.w	lr, [r0]
 8008dac:	b293      	uxth	r3, r2
 8008dae:	ebac 0303 	sub.w	r3, ip, r3
 8008db2:	0c12      	lsrs	r2, r2, #16
 8008db4:	fa13 f38e 	uxtah	r3, r3, lr
 8008db8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008dbc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008dc0:	b29b      	uxth	r3, r3
 8008dc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008dc6:	45c1      	cmp	r9, r8
 8008dc8:	f840 3b04 	str.w	r3, [r0], #4
 8008dcc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008dd0:	d2e8      	bcs.n	8008da4 <quorem+0xb0>
 8008dd2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008dd6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008dda:	b922      	cbnz	r2, 8008de6 <quorem+0xf2>
 8008ddc:	3b04      	subs	r3, #4
 8008dde:	429d      	cmp	r5, r3
 8008de0:	461a      	mov	r2, r3
 8008de2:	d30a      	bcc.n	8008dfa <quorem+0x106>
 8008de4:	613c      	str	r4, [r7, #16]
 8008de6:	4630      	mov	r0, r6
 8008de8:	b003      	add	sp, #12
 8008dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dee:	6812      	ldr	r2, [r2, #0]
 8008df0:	3b04      	subs	r3, #4
 8008df2:	2a00      	cmp	r2, #0
 8008df4:	d1cc      	bne.n	8008d90 <quorem+0x9c>
 8008df6:	3c01      	subs	r4, #1
 8008df8:	e7c7      	b.n	8008d8a <quorem+0x96>
 8008dfa:	6812      	ldr	r2, [r2, #0]
 8008dfc:	3b04      	subs	r3, #4
 8008dfe:	2a00      	cmp	r2, #0
 8008e00:	d1f0      	bne.n	8008de4 <quorem+0xf0>
 8008e02:	3c01      	subs	r4, #1
 8008e04:	e7eb      	b.n	8008dde <quorem+0xea>
 8008e06:	2000      	movs	r0, #0
 8008e08:	e7ee      	b.n	8008de8 <quorem+0xf4>
 8008e0a:	0000      	movs	r0, r0
 8008e0c:	0000      	movs	r0, r0
	...

08008e10 <_dtoa_r>:
 8008e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e14:	ed2d 8b04 	vpush	{d8-d9}
 8008e18:	ec57 6b10 	vmov	r6, r7, d0
 8008e1c:	b093      	sub	sp, #76	; 0x4c
 8008e1e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008e20:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008e24:	9106      	str	r1, [sp, #24]
 8008e26:	ee10 aa10 	vmov	sl, s0
 8008e2a:	4604      	mov	r4, r0
 8008e2c:	9209      	str	r2, [sp, #36]	; 0x24
 8008e2e:	930c      	str	r3, [sp, #48]	; 0x30
 8008e30:	46bb      	mov	fp, r7
 8008e32:	b975      	cbnz	r5, 8008e52 <_dtoa_r+0x42>
 8008e34:	2010      	movs	r0, #16
 8008e36:	f001 f95f 	bl	800a0f8 <malloc>
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	6260      	str	r0, [r4, #36]	; 0x24
 8008e3e:	b920      	cbnz	r0, 8008e4a <_dtoa_r+0x3a>
 8008e40:	4ba7      	ldr	r3, [pc, #668]	; (80090e0 <_dtoa_r+0x2d0>)
 8008e42:	21ea      	movs	r1, #234	; 0xea
 8008e44:	48a7      	ldr	r0, [pc, #668]	; (80090e4 <_dtoa_r+0x2d4>)
 8008e46:	f002 fcd7 	bl	800b7f8 <__assert_func>
 8008e4a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008e4e:	6005      	str	r5, [r0, #0]
 8008e50:	60c5      	str	r5, [r0, #12]
 8008e52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e54:	6819      	ldr	r1, [r3, #0]
 8008e56:	b151      	cbz	r1, 8008e6e <_dtoa_r+0x5e>
 8008e58:	685a      	ldr	r2, [r3, #4]
 8008e5a:	604a      	str	r2, [r1, #4]
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	4093      	lsls	r3, r2
 8008e60:	608b      	str	r3, [r1, #8]
 8008e62:	4620      	mov	r0, r4
 8008e64:	f001 f9b0 	bl	800a1c8 <_Bfree>
 8008e68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	601a      	str	r2, [r3, #0]
 8008e6e:	1e3b      	subs	r3, r7, #0
 8008e70:	bfaa      	itet	ge
 8008e72:	2300      	movge	r3, #0
 8008e74:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008e78:	f8c8 3000 	strge.w	r3, [r8]
 8008e7c:	4b9a      	ldr	r3, [pc, #616]	; (80090e8 <_dtoa_r+0x2d8>)
 8008e7e:	bfbc      	itt	lt
 8008e80:	2201      	movlt	r2, #1
 8008e82:	f8c8 2000 	strlt.w	r2, [r8]
 8008e86:	ea33 030b 	bics.w	r3, r3, fp
 8008e8a:	d11b      	bne.n	8008ec4 <_dtoa_r+0xb4>
 8008e8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e8e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008e92:	6013      	str	r3, [r2, #0]
 8008e94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008e98:	4333      	orrs	r3, r6
 8008e9a:	f000 8592 	beq.w	80099c2 <_dtoa_r+0xbb2>
 8008e9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ea0:	b963      	cbnz	r3, 8008ebc <_dtoa_r+0xac>
 8008ea2:	4b92      	ldr	r3, [pc, #584]	; (80090ec <_dtoa_r+0x2dc>)
 8008ea4:	e022      	b.n	8008eec <_dtoa_r+0xdc>
 8008ea6:	4b92      	ldr	r3, [pc, #584]	; (80090f0 <_dtoa_r+0x2e0>)
 8008ea8:	9301      	str	r3, [sp, #4]
 8008eaa:	3308      	adds	r3, #8
 8008eac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008eae:	6013      	str	r3, [r2, #0]
 8008eb0:	9801      	ldr	r0, [sp, #4]
 8008eb2:	b013      	add	sp, #76	; 0x4c
 8008eb4:	ecbd 8b04 	vpop	{d8-d9}
 8008eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ebc:	4b8b      	ldr	r3, [pc, #556]	; (80090ec <_dtoa_r+0x2dc>)
 8008ebe:	9301      	str	r3, [sp, #4]
 8008ec0:	3303      	adds	r3, #3
 8008ec2:	e7f3      	b.n	8008eac <_dtoa_r+0x9c>
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	4650      	mov	r0, sl
 8008eca:	4659      	mov	r1, fp
 8008ecc:	f7f7 fe0c 	bl	8000ae8 <__aeabi_dcmpeq>
 8008ed0:	ec4b ab19 	vmov	d9, sl, fp
 8008ed4:	4680      	mov	r8, r0
 8008ed6:	b158      	cbz	r0, 8008ef0 <_dtoa_r+0xe0>
 8008ed8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008eda:	2301      	movs	r3, #1
 8008edc:	6013      	str	r3, [r2, #0]
 8008ede:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	f000 856b 	beq.w	80099bc <_dtoa_r+0xbac>
 8008ee6:	4883      	ldr	r0, [pc, #524]	; (80090f4 <_dtoa_r+0x2e4>)
 8008ee8:	6018      	str	r0, [r3, #0]
 8008eea:	1e43      	subs	r3, r0, #1
 8008eec:	9301      	str	r3, [sp, #4]
 8008eee:	e7df      	b.n	8008eb0 <_dtoa_r+0xa0>
 8008ef0:	ec4b ab10 	vmov	d0, sl, fp
 8008ef4:	aa10      	add	r2, sp, #64	; 0x40
 8008ef6:	a911      	add	r1, sp, #68	; 0x44
 8008ef8:	4620      	mov	r0, r4
 8008efa:	f001 fd13 	bl	800a924 <__d2b>
 8008efe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008f02:	ee08 0a10 	vmov	s16, r0
 8008f06:	2d00      	cmp	r5, #0
 8008f08:	f000 8084 	beq.w	8009014 <_dtoa_r+0x204>
 8008f0c:	ee19 3a90 	vmov	r3, s19
 8008f10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f14:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008f18:	4656      	mov	r6, sl
 8008f1a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008f1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008f22:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008f26:	4b74      	ldr	r3, [pc, #464]	; (80090f8 <_dtoa_r+0x2e8>)
 8008f28:	2200      	movs	r2, #0
 8008f2a:	4630      	mov	r0, r6
 8008f2c:	4639      	mov	r1, r7
 8008f2e:	f7f7 f9bb 	bl	80002a8 <__aeabi_dsub>
 8008f32:	a365      	add	r3, pc, #404	; (adr r3, 80090c8 <_dtoa_r+0x2b8>)
 8008f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f38:	f7f7 fb6e 	bl	8000618 <__aeabi_dmul>
 8008f3c:	a364      	add	r3, pc, #400	; (adr r3, 80090d0 <_dtoa_r+0x2c0>)
 8008f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f42:	f7f7 f9b3 	bl	80002ac <__adddf3>
 8008f46:	4606      	mov	r6, r0
 8008f48:	4628      	mov	r0, r5
 8008f4a:	460f      	mov	r7, r1
 8008f4c:	f7f7 fafa 	bl	8000544 <__aeabi_i2d>
 8008f50:	a361      	add	r3, pc, #388	; (adr r3, 80090d8 <_dtoa_r+0x2c8>)
 8008f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f56:	f7f7 fb5f 	bl	8000618 <__aeabi_dmul>
 8008f5a:	4602      	mov	r2, r0
 8008f5c:	460b      	mov	r3, r1
 8008f5e:	4630      	mov	r0, r6
 8008f60:	4639      	mov	r1, r7
 8008f62:	f7f7 f9a3 	bl	80002ac <__adddf3>
 8008f66:	4606      	mov	r6, r0
 8008f68:	460f      	mov	r7, r1
 8008f6a:	f7f7 fe05 	bl	8000b78 <__aeabi_d2iz>
 8008f6e:	2200      	movs	r2, #0
 8008f70:	9000      	str	r0, [sp, #0]
 8008f72:	2300      	movs	r3, #0
 8008f74:	4630      	mov	r0, r6
 8008f76:	4639      	mov	r1, r7
 8008f78:	f7f7 fdc0 	bl	8000afc <__aeabi_dcmplt>
 8008f7c:	b150      	cbz	r0, 8008f94 <_dtoa_r+0x184>
 8008f7e:	9800      	ldr	r0, [sp, #0]
 8008f80:	f7f7 fae0 	bl	8000544 <__aeabi_i2d>
 8008f84:	4632      	mov	r2, r6
 8008f86:	463b      	mov	r3, r7
 8008f88:	f7f7 fdae 	bl	8000ae8 <__aeabi_dcmpeq>
 8008f8c:	b910      	cbnz	r0, 8008f94 <_dtoa_r+0x184>
 8008f8e:	9b00      	ldr	r3, [sp, #0]
 8008f90:	3b01      	subs	r3, #1
 8008f92:	9300      	str	r3, [sp, #0]
 8008f94:	9b00      	ldr	r3, [sp, #0]
 8008f96:	2b16      	cmp	r3, #22
 8008f98:	d85a      	bhi.n	8009050 <_dtoa_r+0x240>
 8008f9a:	9a00      	ldr	r2, [sp, #0]
 8008f9c:	4b57      	ldr	r3, [pc, #348]	; (80090fc <_dtoa_r+0x2ec>)
 8008f9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa6:	ec51 0b19 	vmov	r0, r1, d9
 8008faa:	f7f7 fda7 	bl	8000afc <__aeabi_dcmplt>
 8008fae:	2800      	cmp	r0, #0
 8008fb0:	d050      	beq.n	8009054 <_dtoa_r+0x244>
 8008fb2:	9b00      	ldr	r3, [sp, #0]
 8008fb4:	3b01      	subs	r3, #1
 8008fb6:	9300      	str	r3, [sp, #0]
 8008fb8:	2300      	movs	r3, #0
 8008fba:	930b      	str	r3, [sp, #44]	; 0x2c
 8008fbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008fbe:	1b5d      	subs	r5, r3, r5
 8008fc0:	1e6b      	subs	r3, r5, #1
 8008fc2:	9305      	str	r3, [sp, #20]
 8008fc4:	bf45      	ittet	mi
 8008fc6:	f1c5 0301 	rsbmi	r3, r5, #1
 8008fca:	9304      	strmi	r3, [sp, #16]
 8008fcc:	2300      	movpl	r3, #0
 8008fce:	2300      	movmi	r3, #0
 8008fd0:	bf4c      	ite	mi
 8008fd2:	9305      	strmi	r3, [sp, #20]
 8008fd4:	9304      	strpl	r3, [sp, #16]
 8008fd6:	9b00      	ldr	r3, [sp, #0]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	db3d      	blt.n	8009058 <_dtoa_r+0x248>
 8008fdc:	9b05      	ldr	r3, [sp, #20]
 8008fde:	9a00      	ldr	r2, [sp, #0]
 8008fe0:	920a      	str	r2, [sp, #40]	; 0x28
 8008fe2:	4413      	add	r3, r2
 8008fe4:	9305      	str	r3, [sp, #20]
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	9307      	str	r3, [sp, #28]
 8008fea:	9b06      	ldr	r3, [sp, #24]
 8008fec:	2b09      	cmp	r3, #9
 8008fee:	f200 8089 	bhi.w	8009104 <_dtoa_r+0x2f4>
 8008ff2:	2b05      	cmp	r3, #5
 8008ff4:	bfc4      	itt	gt
 8008ff6:	3b04      	subgt	r3, #4
 8008ff8:	9306      	strgt	r3, [sp, #24]
 8008ffa:	9b06      	ldr	r3, [sp, #24]
 8008ffc:	f1a3 0302 	sub.w	r3, r3, #2
 8009000:	bfcc      	ite	gt
 8009002:	2500      	movgt	r5, #0
 8009004:	2501      	movle	r5, #1
 8009006:	2b03      	cmp	r3, #3
 8009008:	f200 8087 	bhi.w	800911a <_dtoa_r+0x30a>
 800900c:	e8df f003 	tbb	[pc, r3]
 8009010:	59383a2d 	.word	0x59383a2d
 8009014:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009018:	441d      	add	r5, r3
 800901a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800901e:	2b20      	cmp	r3, #32
 8009020:	bfc1      	itttt	gt
 8009022:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009026:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800902a:	fa0b f303 	lslgt.w	r3, fp, r3
 800902e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009032:	bfda      	itte	le
 8009034:	f1c3 0320 	rsble	r3, r3, #32
 8009038:	fa06 f003 	lslle.w	r0, r6, r3
 800903c:	4318      	orrgt	r0, r3
 800903e:	f7f7 fa71 	bl	8000524 <__aeabi_ui2d>
 8009042:	2301      	movs	r3, #1
 8009044:	4606      	mov	r6, r0
 8009046:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800904a:	3d01      	subs	r5, #1
 800904c:	930e      	str	r3, [sp, #56]	; 0x38
 800904e:	e76a      	b.n	8008f26 <_dtoa_r+0x116>
 8009050:	2301      	movs	r3, #1
 8009052:	e7b2      	b.n	8008fba <_dtoa_r+0x1aa>
 8009054:	900b      	str	r0, [sp, #44]	; 0x2c
 8009056:	e7b1      	b.n	8008fbc <_dtoa_r+0x1ac>
 8009058:	9b04      	ldr	r3, [sp, #16]
 800905a:	9a00      	ldr	r2, [sp, #0]
 800905c:	1a9b      	subs	r3, r3, r2
 800905e:	9304      	str	r3, [sp, #16]
 8009060:	4253      	negs	r3, r2
 8009062:	9307      	str	r3, [sp, #28]
 8009064:	2300      	movs	r3, #0
 8009066:	930a      	str	r3, [sp, #40]	; 0x28
 8009068:	e7bf      	b.n	8008fea <_dtoa_r+0x1da>
 800906a:	2300      	movs	r3, #0
 800906c:	9308      	str	r3, [sp, #32]
 800906e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009070:	2b00      	cmp	r3, #0
 8009072:	dc55      	bgt.n	8009120 <_dtoa_r+0x310>
 8009074:	2301      	movs	r3, #1
 8009076:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800907a:	461a      	mov	r2, r3
 800907c:	9209      	str	r2, [sp, #36]	; 0x24
 800907e:	e00c      	b.n	800909a <_dtoa_r+0x28a>
 8009080:	2301      	movs	r3, #1
 8009082:	e7f3      	b.n	800906c <_dtoa_r+0x25c>
 8009084:	2300      	movs	r3, #0
 8009086:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009088:	9308      	str	r3, [sp, #32]
 800908a:	9b00      	ldr	r3, [sp, #0]
 800908c:	4413      	add	r3, r2
 800908e:	9302      	str	r3, [sp, #8]
 8009090:	3301      	adds	r3, #1
 8009092:	2b01      	cmp	r3, #1
 8009094:	9303      	str	r3, [sp, #12]
 8009096:	bfb8      	it	lt
 8009098:	2301      	movlt	r3, #1
 800909a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800909c:	2200      	movs	r2, #0
 800909e:	6042      	str	r2, [r0, #4]
 80090a0:	2204      	movs	r2, #4
 80090a2:	f102 0614 	add.w	r6, r2, #20
 80090a6:	429e      	cmp	r6, r3
 80090a8:	6841      	ldr	r1, [r0, #4]
 80090aa:	d93d      	bls.n	8009128 <_dtoa_r+0x318>
 80090ac:	4620      	mov	r0, r4
 80090ae:	f001 f84b 	bl	800a148 <_Balloc>
 80090b2:	9001      	str	r0, [sp, #4]
 80090b4:	2800      	cmp	r0, #0
 80090b6:	d13b      	bne.n	8009130 <_dtoa_r+0x320>
 80090b8:	4b11      	ldr	r3, [pc, #68]	; (8009100 <_dtoa_r+0x2f0>)
 80090ba:	4602      	mov	r2, r0
 80090bc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80090c0:	e6c0      	b.n	8008e44 <_dtoa_r+0x34>
 80090c2:	2301      	movs	r3, #1
 80090c4:	e7df      	b.n	8009086 <_dtoa_r+0x276>
 80090c6:	bf00      	nop
 80090c8:	636f4361 	.word	0x636f4361
 80090cc:	3fd287a7 	.word	0x3fd287a7
 80090d0:	8b60c8b3 	.word	0x8b60c8b3
 80090d4:	3fc68a28 	.word	0x3fc68a28
 80090d8:	509f79fb 	.word	0x509f79fb
 80090dc:	3fd34413 	.word	0x3fd34413
 80090e0:	0800c9fe 	.word	0x0800c9fe
 80090e4:	0800ca15 	.word	0x0800ca15
 80090e8:	7ff00000 	.word	0x7ff00000
 80090ec:	0800c9fa 	.word	0x0800c9fa
 80090f0:	0800c9f1 	.word	0x0800c9f1
 80090f4:	0800cc6a 	.word	0x0800cc6a
 80090f8:	3ff80000 	.word	0x3ff80000
 80090fc:	0800cb80 	.word	0x0800cb80
 8009100:	0800ca70 	.word	0x0800ca70
 8009104:	2501      	movs	r5, #1
 8009106:	2300      	movs	r3, #0
 8009108:	9306      	str	r3, [sp, #24]
 800910a:	9508      	str	r5, [sp, #32]
 800910c:	f04f 33ff 	mov.w	r3, #4294967295
 8009110:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009114:	2200      	movs	r2, #0
 8009116:	2312      	movs	r3, #18
 8009118:	e7b0      	b.n	800907c <_dtoa_r+0x26c>
 800911a:	2301      	movs	r3, #1
 800911c:	9308      	str	r3, [sp, #32]
 800911e:	e7f5      	b.n	800910c <_dtoa_r+0x2fc>
 8009120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009122:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009126:	e7b8      	b.n	800909a <_dtoa_r+0x28a>
 8009128:	3101      	adds	r1, #1
 800912a:	6041      	str	r1, [r0, #4]
 800912c:	0052      	lsls	r2, r2, #1
 800912e:	e7b8      	b.n	80090a2 <_dtoa_r+0x292>
 8009130:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009132:	9a01      	ldr	r2, [sp, #4]
 8009134:	601a      	str	r2, [r3, #0]
 8009136:	9b03      	ldr	r3, [sp, #12]
 8009138:	2b0e      	cmp	r3, #14
 800913a:	f200 809d 	bhi.w	8009278 <_dtoa_r+0x468>
 800913e:	2d00      	cmp	r5, #0
 8009140:	f000 809a 	beq.w	8009278 <_dtoa_r+0x468>
 8009144:	9b00      	ldr	r3, [sp, #0]
 8009146:	2b00      	cmp	r3, #0
 8009148:	dd32      	ble.n	80091b0 <_dtoa_r+0x3a0>
 800914a:	4ab7      	ldr	r2, [pc, #732]	; (8009428 <_dtoa_r+0x618>)
 800914c:	f003 030f 	and.w	r3, r3, #15
 8009150:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009154:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009158:	9b00      	ldr	r3, [sp, #0]
 800915a:	05d8      	lsls	r0, r3, #23
 800915c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009160:	d516      	bpl.n	8009190 <_dtoa_r+0x380>
 8009162:	4bb2      	ldr	r3, [pc, #712]	; (800942c <_dtoa_r+0x61c>)
 8009164:	ec51 0b19 	vmov	r0, r1, d9
 8009168:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800916c:	f7f7 fb7e 	bl	800086c <__aeabi_ddiv>
 8009170:	f007 070f 	and.w	r7, r7, #15
 8009174:	4682      	mov	sl, r0
 8009176:	468b      	mov	fp, r1
 8009178:	2503      	movs	r5, #3
 800917a:	4eac      	ldr	r6, [pc, #688]	; (800942c <_dtoa_r+0x61c>)
 800917c:	b957      	cbnz	r7, 8009194 <_dtoa_r+0x384>
 800917e:	4642      	mov	r2, r8
 8009180:	464b      	mov	r3, r9
 8009182:	4650      	mov	r0, sl
 8009184:	4659      	mov	r1, fp
 8009186:	f7f7 fb71 	bl	800086c <__aeabi_ddiv>
 800918a:	4682      	mov	sl, r0
 800918c:	468b      	mov	fp, r1
 800918e:	e028      	b.n	80091e2 <_dtoa_r+0x3d2>
 8009190:	2502      	movs	r5, #2
 8009192:	e7f2      	b.n	800917a <_dtoa_r+0x36a>
 8009194:	07f9      	lsls	r1, r7, #31
 8009196:	d508      	bpl.n	80091aa <_dtoa_r+0x39a>
 8009198:	4640      	mov	r0, r8
 800919a:	4649      	mov	r1, r9
 800919c:	e9d6 2300 	ldrd	r2, r3, [r6]
 80091a0:	f7f7 fa3a 	bl	8000618 <__aeabi_dmul>
 80091a4:	3501      	adds	r5, #1
 80091a6:	4680      	mov	r8, r0
 80091a8:	4689      	mov	r9, r1
 80091aa:	107f      	asrs	r7, r7, #1
 80091ac:	3608      	adds	r6, #8
 80091ae:	e7e5      	b.n	800917c <_dtoa_r+0x36c>
 80091b0:	f000 809b 	beq.w	80092ea <_dtoa_r+0x4da>
 80091b4:	9b00      	ldr	r3, [sp, #0]
 80091b6:	4f9d      	ldr	r7, [pc, #628]	; (800942c <_dtoa_r+0x61c>)
 80091b8:	425e      	negs	r6, r3
 80091ba:	4b9b      	ldr	r3, [pc, #620]	; (8009428 <_dtoa_r+0x618>)
 80091bc:	f006 020f 	and.w	r2, r6, #15
 80091c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80091c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c8:	ec51 0b19 	vmov	r0, r1, d9
 80091cc:	f7f7 fa24 	bl	8000618 <__aeabi_dmul>
 80091d0:	1136      	asrs	r6, r6, #4
 80091d2:	4682      	mov	sl, r0
 80091d4:	468b      	mov	fp, r1
 80091d6:	2300      	movs	r3, #0
 80091d8:	2502      	movs	r5, #2
 80091da:	2e00      	cmp	r6, #0
 80091dc:	d17a      	bne.n	80092d4 <_dtoa_r+0x4c4>
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d1d3      	bne.n	800918a <_dtoa_r+0x37a>
 80091e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	f000 8082 	beq.w	80092ee <_dtoa_r+0x4de>
 80091ea:	4b91      	ldr	r3, [pc, #580]	; (8009430 <_dtoa_r+0x620>)
 80091ec:	2200      	movs	r2, #0
 80091ee:	4650      	mov	r0, sl
 80091f0:	4659      	mov	r1, fp
 80091f2:	f7f7 fc83 	bl	8000afc <__aeabi_dcmplt>
 80091f6:	2800      	cmp	r0, #0
 80091f8:	d079      	beq.n	80092ee <_dtoa_r+0x4de>
 80091fa:	9b03      	ldr	r3, [sp, #12]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d076      	beq.n	80092ee <_dtoa_r+0x4de>
 8009200:	9b02      	ldr	r3, [sp, #8]
 8009202:	2b00      	cmp	r3, #0
 8009204:	dd36      	ble.n	8009274 <_dtoa_r+0x464>
 8009206:	9b00      	ldr	r3, [sp, #0]
 8009208:	4650      	mov	r0, sl
 800920a:	4659      	mov	r1, fp
 800920c:	1e5f      	subs	r7, r3, #1
 800920e:	2200      	movs	r2, #0
 8009210:	4b88      	ldr	r3, [pc, #544]	; (8009434 <_dtoa_r+0x624>)
 8009212:	f7f7 fa01 	bl	8000618 <__aeabi_dmul>
 8009216:	9e02      	ldr	r6, [sp, #8]
 8009218:	4682      	mov	sl, r0
 800921a:	468b      	mov	fp, r1
 800921c:	3501      	adds	r5, #1
 800921e:	4628      	mov	r0, r5
 8009220:	f7f7 f990 	bl	8000544 <__aeabi_i2d>
 8009224:	4652      	mov	r2, sl
 8009226:	465b      	mov	r3, fp
 8009228:	f7f7 f9f6 	bl	8000618 <__aeabi_dmul>
 800922c:	4b82      	ldr	r3, [pc, #520]	; (8009438 <_dtoa_r+0x628>)
 800922e:	2200      	movs	r2, #0
 8009230:	f7f7 f83c 	bl	80002ac <__adddf3>
 8009234:	46d0      	mov	r8, sl
 8009236:	46d9      	mov	r9, fp
 8009238:	4682      	mov	sl, r0
 800923a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800923e:	2e00      	cmp	r6, #0
 8009240:	d158      	bne.n	80092f4 <_dtoa_r+0x4e4>
 8009242:	4b7e      	ldr	r3, [pc, #504]	; (800943c <_dtoa_r+0x62c>)
 8009244:	2200      	movs	r2, #0
 8009246:	4640      	mov	r0, r8
 8009248:	4649      	mov	r1, r9
 800924a:	f7f7 f82d 	bl	80002a8 <__aeabi_dsub>
 800924e:	4652      	mov	r2, sl
 8009250:	465b      	mov	r3, fp
 8009252:	4680      	mov	r8, r0
 8009254:	4689      	mov	r9, r1
 8009256:	f7f7 fc6f 	bl	8000b38 <__aeabi_dcmpgt>
 800925a:	2800      	cmp	r0, #0
 800925c:	f040 8295 	bne.w	800978a <_dtoa_r+0x97a>
 8009260:	4652      	mov	r2, sl
 8009262:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009266:	4640      	mov	r0, r8
 8009268:	4649      	mov	r1, r9
 800926a:	f7f7 fc47 	bl	8000afc <__aeabi_dcmplt>
 800926e:	2800      	cmp	r0, #0
 8009270:	f040 8289 	bne.w	8009786 <_dtoa_r+0x976>
 8009274:	ec5b ab19 	vmov	sl, fp, d9
 8009278:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800927a:	2b00      	cmp	r3, #0
 800927c:	f2c0 8148 	blt.w	8009510 <_dtoa_r+0x700>
 8009280:	9a00      	ldr	r2, [sp, #0]
 8009282:	2a0e      	cmp	r2, #14
 8009284:	f300 8144 	bgt.w	8009510 <_dtoa_r+0x700>
 8009288:	4b67      	ldr	r3, [pc, #412]	; (8009428 <_dtoa_r+0x618>)
 800928a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800928e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009292:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009294:	2b00      	cmp	r3, #0
 8009296:	f280 80d5 	bge.w	8009444 <_dtoa_r+0x634>
 800929a:	9b03      	ldr	r3, [sp, #12]
 800929c:	2b00      	cmp	r3, #0
 800929e:	f300 80d1 	bgt.w	8009444 <_dtoa_r+0x634>
 80092a2:	f040 826f 	bne.w	8009784 <_dtoa_r+0x974>
 80092a6:	4b65      	ldr	r3, [pc, #404]	; (800943c <_dtoa_r+0x62c>)
 80092a8:	2200      	movs	r2, #0
 80092aa:	4640      	mov	r0, r8
 80092ac:	4649      	mov	r1, r9
 80092ae:	f7f7 f9b3 	bl	8000618 <__aeabi_dmul>
 80092b2:	4652      	mov	r2, sl
 80092b4:	465b      	mov	r3, fp
 80092b6:	f7f7 fc35 	bl	8000b24 <__aeabi_dcmpge>
 80092ba:	9e03      	ldr	r6, [sp, #12]
 80092bc:	4637      	mov	r7, r6
 80092be:	2800      	cmp	r0, #0
 80092c0:	f040 8245 	bne.w	800974e <_dtoa_r+0x93e>
 80092c4:	9d01      	ldr	r5, [sp, #4]
 80092c6:	2331      	movs	r3, #49	; 0x31
 80092c8:	f805 3b01 	strb.w	r3, [r5], #1
 80092cc:	9b00      	ldr	r3, [sp, #0]
 80092ce:	3301      	adds	r3, #1
 80092d0:	9300      	str	r3, [sp, #0]
 80092d2:	e240      	b.n	8009756 <_dtoa_r+0x946>
 80092d4:	07f2      	lsls	r2, r6, #31
 80092d6:	d505      	bpl.n	80092e4 <_dtoa_r+0x4d4>
 80092d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092dc:	f7f7 f99c 	bl	8000618 <__aeabi_dmul>
 80092e0:	3501      	adds	r5, #1
 80092e2:	2301      	movs	r3, #1
 80092e4:	1076      	asrs	r6, r6, #1
 80092e6:	3708      	adds	r7, #8
 80092e8:	e777      	b.n	80091da <_dtoa_r+0x3ca>
 80092ea:	2502      	movs	r5, #2
 80092ec:	e779      	b.n	80091e2 <_dtoa_r+0x3d2>
 80092ee:	9f00      	ldr	r7, [sp, #0]
 80092f0:	9e03      	ldr	r6, [sp, #12]
 80092f2:	e794      	b.n	800921e <_dtoa_r+0x40e>
 80092f4:	9901      	ldr	r1, [sp, #4]
 80092f6:	4b4c      	ldr	r3, [pc, #304]	; (8009428 <_dtoa_r+0x618>)
 80092f8:	4431      	add	r1, r6
 80092fa:	910d      	str	r1, [sp, #52]	; 0x34
 80092fc:	9908      	ldr	r1, [sp, #32]
 80092fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009302:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009306:	2900      	cmp	r1, #0
 8009308:	d043      	beq.n	8009392 <_dtoa_r+0x582>
 800930a:	494d      	ldr	r1, [pc, #308]	; (8009440 <_dtoa_r+0x630>)
 800930c:	2000      	movs	r0, #0
 800930e:	f7f7 faad 	bl	800086c <__aeabi_ddiv>
 8009312:	4652      	mov	r2, sl
 8009314:	465b      	mov	r3, fp
 8009316:	f7f6 ffc7 	bl	80002a8 <__aeabi_dsub>
 800931a:	9d01      	ldr	r5, [sp, #4]
 800931c:	4682      	mov	sl, r0
 800931e:	468b      	mov	fp, r1
 8009320:	4649      	mov	r1, r9
 8009322:	4640      	mov	r0, r8
 8009324:	f7f7 fc28 	bl	8000b78 <__aeabi_d2iz>
 8009328:	4606      	mov	r6, r0
 800932a:	f7f7 f90b 	bl	8000544 <__aeabi_i2d>
 800932e:	4602      	mov	r2, r0
 8009330:	460b      	mov	r3, r1
 8009332:	4640      	mov	r0, r8
 8009334:	4649      	mov	r1, r9
 8009336:	f7f6 ffb7 	bl	80002a8 <__aeabi_dsub>
 800933a:	3630      	adds	r6, #48	; 0x30
 800933c:	f805 6b01 	strb.w	r6, [r5], #1
 8009340:	4652      	mov	r2, sl
 8009342:	465b      	mov	r3, fp
 8009344:	4680      	mov	r8, r0
 8009346:	4689      	mov	r9, r1
 8009348:	f7f7 fbd8 	bl	8000afc <__aeabi_dcmplt>
 800934c:	2800      	cmp	r0, #0
 800934e:	d163      	bne.n	8009418 <_dtoa_r+0x608>
 8009350:	4642      	mov	r2, r8
 8009352:	464b      	mov	r3, r9
 8009354:	4936      	ldr	r1, [pc, #216]	; (8009430 <_dtoa_r+0x620>)
 8009356:	2000      	movs	r0, #0
 8009358:	f7f6 ffa6 	bl	80002a8 <__aeabi_dsub>
 800935c:	4652      	mov	r2, sl
 800935e:	465b      	mov	r3, fp
 8009360:	f7f7 fbcc 	bl	8000afc <__aeabi_dcmplt>
 8009364:	2800      	cmp	r0, #0
 8009366:	f040 80b5 	bne.w	80094d4 <_dtoa_r+0x6c4>
 800936a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800936c:	429d      	cmp	r5, r3
 800936e:	d081      	beq.n	8009274 <_dtoa_r+0x464>
 8009370:	4b30      	ldr	r3, [pc, #192]	; (8009434 <_dtoa_r+0x624>)
 8009372:	2200      	movs	r2, #0
 8009374:	4650      	mov	r0, sl
 8009376:	4659      	mov	r1, fp
 8009378:	f7f7 f94e 	bl	8000618 <__aeabi_dmul>
 800937c:	4b2d      	ldr	r3, [pc, #180]	; (8009434 <_dtoa_r+0x624>)
 800937e:	4682      	mov	sl, r0
 8009380:	468b      	mov	fp, r1
 8009382:	4640      	mov	r0, r8
 8009384:	4649      	mov	r1, r9
 8009386:	2200      	movs	r2, #0
 8009388:	f7f7 f946 	bl	8000618 <__aeabi_dmul>
 800938c:	4680      	mov	r8, r0
 800938e:	4689      	mov	r9, r1
 8009390:	e7c6      	b.n	8009320 <_dtoa_r+0x510>
 8009392:	4650      	mov	r0, sl
 8009394:	4659      	mov	r1, fp
 8009396:	f7f7 f93f 	bl	8000618 <__aeabi_dmul>
 800939a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800939c:	9d01      	ldr	r5, [sp, #4]
 800939e:	930f      	str	r3, [sp, #60]	; 0x3c
 80093a0:	4682      	mov	sl, r0
 80093a2:	468b      	mov	fp, r1
 80093a4:	4649      	mov	r1, r9
 80093a6:	4640      	mov	r0, r8
 80093a8:	f7f7 fbe6 	bl	8000b78 <__aeabi_d2iz>
 80093ac:	4606      	mov	r6, r0
 80093ae:	f7f7 f8c9 	bl	8000544 <__aeabi_i2d>
 80093b2:	3630      	adds	r6, #48	; 0x30
 80093b4:	4602      	mov	r2, r0
 80093b6:	460b      	mov	r3, r1
 80093b8:	4640      	mov	r0, r8
 80093ba:	4649      	mov	r1, r9
 80093bc:	f7f6 ff74 	bl	80002a8 <__aeabi_dsub>
 80093c0:	f805 6b01 	strb.w	r6, [r5], #1
 80093c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093c6:	429d      	cmp	r5, r3
 80093c8:	4680      	mov	r8, r0
 80093ca:	4689      	mov	r9, r1
 80093cc:	f04f 0200 	mov.w	r2, #0
 80093d0:	d124      	bne.n	800941c <_dtoa_r+0x60c>
 80093d2:	4b1b      	ldr	r3, [pc, #108]	; (8009440 <_dtoa_r+0x630>)
 80093d4:	4650      	mov	r0, sl
 80093d6:	4659      	mov	r1, fp
 80093d8:	f7f6 ff68 	bl	80002ac <__adddf3>
 80093dc:	4602      	mov	r2, r0
 80093de:	460b      	mov	r3, r1
 80093e0:	4640      	mov	r0, r8
 80093e2:	4649      	mov	r1, r9
 80093e4:	f7f7 fba8 	bl	8000b38 <__aeabi_dcmpgt>
 80093e8:	2800      	cmp	r0, #0
 80093ea:	d173      	bne.n	80094d4 <_dtoa_r+0x6c4>
 80093ec:	4652      	mov	r2, sl
 80093ee:	465b      	mov	r3, fp
 80093f0:	4913      	ldr	r1, [pc, #76]	; (8009440 <_dtoa_r+0x630>)
 80093f2:	2000      	movs	r0, #0
 80093f4:	f7f6 ff58 	bl	80002a8 <__aeabi_dsub>
 80093f8:	4602      	mov	r2, r0
 80093fa:	460b      	mov	r3, r1
 80093fc:	4640      	mov	r0, r8
 80093fe:	4649      	mov	r1, r9
 8009400:	f7f7 fb7c 	bl	8000afc <__aeabi_dcmplt>
 8009404:	2800      	cmp	r0, #0
 8009406:	f43f af35 	beq.w	8009274 <_dtoa_r+0x464>
 800940a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800940c:	1e6b      	subs	r3, r5, #1
 800940e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009410:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009414:	2b30      	cmp	r3, #48	; 0x30
 8009416:	d0f8      	beq.n	800940a <_dtoa_r+0x5fa>
 8009418:	9700      	str	r7, [sp, #0]
 800941a:	e049      	b.n	80094b0 <_dtoa_r+0x6a0>
 800941c:	4b05      	ldr	r3, [pc, #20]	; (8009434 <_dtoa_r+0x624>)
 800941e:	f7f7 f8fb 	bl	8000618 <__aeabi_dmul>
 8009422:	4680      	mov	r8, r0
 8009424:	4689      	mov	r9, r1
 8009426:	e7bd      	b.n	80093a4 <_dtoa_r+0x594>
 8009428:	0800cb80 	.word	0x0800cb80
 800942c:	0800cb58 	.word	0x0800cb58
 8009430:	3ff00000 	.word	0x3ff00000
 8009434:	40240000 	.word	0x40240000
 8009438:	401c0000 	.word	0x401c0000
 800943c:	40140000 	.word	0x40140000
 8009440:	3fe00000 	.word	0x3fe00000
 8009444:	9d01      	ldr	r5, [sp, #4]
 8009446:	4656      	mov	r6, sl
 8009448:	465f      	mov	r7, fp
 800944a:	4642      	mov	r2, r8
 800944c:	464b      	mov	r3, r9
 800944e:	4630      	mov	r0, r6
 8009450:	4639      	mov	r1, r7
 8009452:	f7f7 fa0b 	bl	800086c <__aeabi_ddiv>
 8009456:	f7f7 fb8f 	bl	8000b78 <__aeabi_d2iz>
 800945a:	4682      	mov	sl, r0
 800945c:	f7f7 f872 	bl	8000544 <__aeabi_i2d>
 8009460:	4642      	mov	r2, r8
 8009462:	464b      	mov	r3, r9
 8009464:	f7f7 f8d8 	bl	8000618 <__aeabi_dmul>
 8009468:	4602      	mov	r2, r0
 800946a:	460b      	mov	r3, r1
 800946c:	4630      	mov	r0, r6
 800946e:	4639      	mov	r1, r7
 8009470:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009474:	f7f6 ff18 	bl	80002a8 <__aeabi_dsub>
 8009478:	f805 6b01 	strb.w	r6, [r5], #1
 800947c:	9e01      	ldr	r6, [sp, #4]
 800947e:	9f03      	ldr	r7, [sp, #12]
 8009480:	1bae      	subs	r6, r5, r6
 8009482:	42b7      	cmp	r7, r6
 8009484:	4602      	mov	r2, r0
 8009486:	460b      	mov	r3, r1
 8009488:	d135      	bne.n	80094f6 <_dtoa_r+0x6e6>
 800948a:	f7f6 ff0f 	bl	80002ac <__adddf3>
 800948e:	4642      	mov	r2, r8
 8009490:	464b      	mov	r3, r9
 8009492:	4606      	mov	r6, r0
 8009494:	460f      	mov	r7, r1
 8009496:	f7f7 fb4f 	bl	8000b38 <__aeabi_dcmpgt>
 800949a:	b9d0      	cbnz	r0, 80094d2 <_dtoa_r+0x6c2>
 800949c:	4642      	mov	r2, r8
 800949e:	464b      	mov	r3, r9
 80094a0:	4630      	mov	r0, r6
 80094a2:	4639      	mov	r1, r7
 80094a4:	f7f7 fb20 	bl	8000ae8 <__aeabi_dcmpeq>
 80094a8:	b110      	cbz	r0, 80094b0 <_dtoa_r+0x6a0>
 80094aa:	f01a 0f01 	tst.w	sl, #1
 80094ae:	d110      	bne.n	80094d2 <_dtoa_r+0x6c2>
 80094b0:	4620      	mov	r0, r4
 80094b2:	ee18 1a10 	vmov	r1, s16
 80094b6:	f000 fe87 	bl	800a1c8 <_Bfree>
 80094ba:	2300      	movs	r3, #0
 80094bc:	9800      	ldr	r0, [sp, #0]
 80094be:	702b      	strb	r3, [r5, #0]
 80094c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094c2:	3001      	adds	r0, #1
 80094c4:	6018      	str	r0, [r3, #0]
 80094c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	f43f acf1 	beq.w	8008eb0 <_dtoa_r+0xa0>
 80094ce:	601d      	str	r5, [r3, #0]
 80094d0:	e4ee      	b.n	8008eb0 <_dtoa_r+0xa0>
 80094d2:	9f00      	ldr	r7, [sp, #0]
 80094d4:	462b      	mov	r3, r5
 80094d6:	461d      	mov	r5, r3
 80094d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80094dc:	2a39      	cmp	r2, #57	; 0x39
 80094de:	d106      	bne.n	80094ee <_dtoa_r+0x6de>
 80094e0:	9a01      	ldr	r2, [sp, #4]
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d1f7      	bne.n	80094d6 <_dtoa_r+0x6c6>
 80094e6:	9901      	ldr	r1, [sp, #4]
 80094e8:	2230      	movs	r2, #48	; 0x30
 80094ea:	3701      	adds	r7, #1
 80094ec:	700a      	strb	r2, [r1, #0]
 80094ee:	781a      	ldrb	r2, [r3, #0]
 80094f0:	3201      	adds	r2, #1
 80094f2:	701a      	strb	r2, [r3, #0]
 80094f4:	e790      	b.n	8009418 <_dtoa_r+0x608>
 80094f6:	4ba6      	ldr	r3, [pc, #664]	; (8009790 <_dtoa_r+0x980>)
 80094f8:	2200      	movs	r2, #0
 80094fa:	f7f7 f88d 	bl	8000618 <__aeabi_dmul>
 80094fe:	2200      	movs	r2, #0
 8009500:	2300      	movs	r3, #0
 8009502:	4606      	mov	r6, r0
 8009504:	460f      	mov	r7, r1
 8009506:	f7f7 faef 	bl	8000ae8 <__aeabi_dcmpeq>
 800950a:	2800      	cmp	r0, #0
 800950c:	d09d      	beq.n	800944a <_dtoa_r+0x63a>
 800950e:	e7cf      	b.n	80094b0 <_dtoa_r+0x6a0>
 8009510:	9a08      	ldr	r2, [sp, #32]
 8009512:	2a00      	cmp	r2, #0
 8009514:	f000 80d7 	beq.w	80096c6 <_dtoa_r+0x8b6>
 8009518:	9a06      	ldr	r2, [sp, #24]
 800951a:	2a01      	cmp	r2, #1
 800951c:	f300 80ba 	bgt.w	8009694 <_dtoa_r+0x884>
 8009520:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009522:	2a00      	cmp	r2, #0
 8009524:	f000 80b2 	beq.w	800968c <_dtoa_r+0x87c>
 8009528:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800952c:	9e07      	ldr	r6, [sp, #28]
 800952e:	9d04      	ldr	r5, [sp, #16]
 8009530:	9a04      	ldr	r2, [sp, #16]
 8009532:	441a      	add	r2, r3
 8009534:	9204      	str	r2, [sp, #16]
 8009536:	9a05      	ldr	r2, [sp, #20]
 8009538:	2101      	movs	r1, #1
 800953a:	441a      	add	r2, r3
 800953c:	4620      	mov	r0, r4
 800953e:	9205      	str	r2, [sp, #20]
 8009540:	f000 ff44 	bl	800a3cc <__i2b>
 8009544:	4607      	mov	r7, r0
 8009546:	2d00      	cmp	r5, #0
 8009548:	dd0c      	ble.n	8009564 <_dtoa_r+0x754>
 800954a:	9b05      	ldr	r3, [sp, #20]
 800954c:	2b00      	cmp	r3, #0
 800954e:	dd09      	ble.n	8009564 <_dtoa_r+0x754>
 8009550:	42ab      	cmp	r3, r5
 8009552:	9a04      	ldr	r2, [sp, #16]
 8009554:	bfa8      	it	ge
 8009556:	462b      	movge	r3, r5
 8009558:	1ad2      	subs	r2, r2, r3
 800955a:	9204      	str	r2, [sp, #16]
 800955c:	9a05      	ldr	r2, [sp, #20]
 800955e:	1aed      	subs	r5, r5, r3
 8009560:	1ad3      	subs	r3, r2, r3
 8009562:	9305      	str	r3, [sp, #20]
 8009564:	9b07      	ldr	r3, [sp, #28]
 8009566:	b31b      	cbz	r3, 80095b0 <_dtoa_r+0x7a0>
 8009568:	9b08      	ldr	r3, [sp, #32]
 800956a:	2b00      	cmp	r3, #0
 800956c:	f000 80af 	beq.w	80096ce <_dtoa_r+0x8be>
 8009570:	2e00      	cmp	r6, #0
 8009572:	dd13      	ble.n	800959c <_dtoa_r+0x78c>
 8009574:	4639      	mov	r1, r7
 8009576:	4632      	mov	r2, r6
 8009578:	4620      	mov	r0, r4
 800957a:	f000 ffe7 	bl	800a54c <__pow5mult>
 800957e:	ee18 2a10 	vmov	r2, s16
 8009582:	4601      	mov	r1, r0
 8009584:	4607      	mov	r7, r0
 8009586:	4620      	mov	r0, r4
 8009588:	f000 ff36 	bl	800a3f8 <__multiply>
 800958c:	ee18 1a10 	vmov	r1, s16
 8009590:	4680      	mov	r8, r0
 8009592:	4620      	mov	r0, r4
 8009594:	f000 fe18 	bl	800a1c8 <_Bfree>
 8009598:	ee08 8a10 	vmov	s16, r8
 800959c:	9b07      	ldr	r3, [sp, #28]
 800959e:	1b9a      	subs	r2, r3, r6
 80095a0:	d006      	beq.n	80095b0 <_dtoa_r+0x7a0>
 80095a2:	ee18 1a10 	vmov	r1, s16
 80095a6:	4620      	mov	r0, r4
 80095a8:	f000 ffd0 	bl	800a54c <__pow5mult>
 80095ac:	ee08 0a10 	vmov	s16, r0
 80095b0:	2101      	movs	r1, #1
 80095b2:	4620      	mov	r0, r4
 80095b4:	f000 ff0a 	bl	800a3cc <__i2b>
 80095b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	4606      	mov	r6, r0
 80095be:	f340 8088 	ble.w	80096d2 <_dtoa_r+0x8c2>
 80095c2:	461a      	mov	r2, r3
 80095c4:	4601      	mov	r1, r0
 80095c6:	4620      	mov	r0, r4
 80095c8:	f000 ffc0 	bl	800a54c <__pow5mult>
 80095cc:	9b06      	ldr	r3, [sp, #24]
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	4606      	mov	r6, r0
 80095d2:	f340 8081 	ble.w	80096d8 <_dtoa_r+0x8c8>
 80095d6:	f04f 0800 	mov.w	r8, #0
 80095da:	6933      	ldr	r3, [r6, #16]
 80095dc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80095e0:	6918      	ldr	r0, [r3, #16]
 80095e2:	f000 fea3 	bl	800a32c <__hi0bits>
 80095e6:	f1c0 0020 	rsb	r0, r0, #32
 80095ea:	9b05      	ldr	r3, [sp, #20]
 80095ec:	4418      	add	r0, r3
 80095ee:	f010 001f 	ands.w	r0, r0, #31
 80095f2:	f000 8092 	beq.w	800971a <_dtoa_r+0x90a>
 80095f6:	f1c0 0320 	rsb	r3, r0, #32
 80095fa:	2b04      	cmp	r3, #4
 80095fc:	f340 808a 	ble.w	8009714 <_dtoa_r+0x904>
 8009600:	f1c0 001c 	rsb	r0, r0, #28
 8009604:	9b04      	ldr	r3, [sp, #16]
 8009606:	4403      	add	r3, r0
 8009608:	9304      	str	r3, [sp, #16]
 800960a:	9b05      	ldr	r3, [sp, #20]
 800960c:	4403      	add	r3, r0
 800960e:	4405      	add	r5, r0
 8009610:	9305      	str	r3, [sp, #20]
 8009612:	9b04      	ldr	r3, [sp, #16]
 8009614:	2b00      	cmp	r3, #0
 8009616:	dd07      	ble.n	8009628 <_dtoa_r+0x818>
 8009618:	ee18 1a10 	vmov	r1, s16
 800961c:	461a      	mov	r2, r3
 800961e:	4620      	mov	r0, r4
 8009620:	f000 ffee 	bl	800a600 <__lshift>
 8009624:	ee08 0a10 	vmov	s16, r0
 8009628:	9b05      	ldr	r3, [sp, #20]
 800962a:	2b00      	cmp	r3, #0
 800962c:	dd05      	ble.n	800963a <_dtoa_r+0x82a>
 800962e:	4631      	mov	r1, r6
 8009630:	461a      	mov	r2, r3
 8009632:	4620      	mov	r0, r4
 8009634:	f000 ffe4 	bl	800a600 <__lshift>
 8009638:	4606      	mov	r6, r0
 800963a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800963c:	2b00      	cmp	r3, #0
 800963e:	d06e      	beq.n	800971e <_dtoa_r+0x90e>
 8009640:	ee18 0a10 	vmov	r0, s16
 8009644:	4631      	mov	r1, r6
 8009646:	f001 f84b 	bl	800a6e0 <__mcmp>
 800964a:	2800      	cmp	r0, #0
 800964c:	da67      	bge.n	800971e <_dtoa_r+0x90e>
 800964e:	9b00      	ldr	r3, [sp, #0]
 8009650:	3b01      	subs	r3, #1
 8009652:	ee18 1a10 	vmov	r1, s16
 8009656:	9300      	str	r3, [sp, #0]
 8009658:	220a      	movs	r2, #10
 800965a:	2300      	movs	r3, #0
 800965c:	4620      	mov	r0, r4
 800965e:	f000 fdd5 	bl	800a20c <__multadd>
 8009662:	9b08      	ldr	r3, [sp, #32]
 8009664:	ee08 0a10 	vmov	s16, r0
 8009668:	2b00      	cmp	r3, #0
 800966a:	f000 81b1 	beq.w	80099d0 <_dtoa_r+0xbc0>
 800966e:	2300      	movs	r3, #0
 8009670:	4639      	mov	r1, r7
 8009672:	220a      	movs	r2, #10
 8009674:	4620      	mov	r0, r4
 8009676:	f000 fdc9 	bl	800a20c <__multadd>
 800967a:	9b02      	ldr	r3, [sp, #8]
 800967c:	2b00      	cmp	r3, #0
 800967e:	4607      	mov	r7, r0
 8009680:	f300 808e 	bgt.w	80097a0 <_dtoa_r+0x990>
 8009684:	9b06      	ldr	r3, [sp, #24]
 8009686:	2b02      	cmp	r3, #2
 8009688:	dc51      	bgt.n	800972e <_dtoa_r+0x91e>
 800968a:	e089      	b.n	80097a0 <_dtoa_r+0x990>
 800968c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800968e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009692:	e74b      	b.n	800952c <_dtoa_r+0x71c>
 8009694:	9b03      	ldr	r3, [sp, #12]
 8009696:	1e5e      	subs	r6, r3, #1
 8009698:	9b07      	ldr	r3, [sp, #28]
 800969a:	42b3      	cmp	r3, r6
 800969c:	bfbf      	itttt	lt
 800969e:	9b07      	ldrlt	r3, [sp, #28]
 80096a0:	9607      	strlt	r6, [sp, #28]
 80096a2:	1af2      	sublt	r2, r6, r3
 80096a4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80096a6:	bfb6      	itet	lt
 80096a8:	189b      	addlt	r3, r3, r2
 80096aa:	1b9e      	subge	r6, r3, r6
 80096ac:	930a      	strlt	r3, [sp, #40]	; 0x28
 80096ae:	9b03      	ldr	r3, [sp, #12]
 80096b0:	bfb8      	it	lt
 80096b2:	2600      	movlt	r6, #0
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	bfb7      	itett	lt
 80096b8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80096bc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80096c0:	1a9d      	sublt	r5, r3, r2
 80096c2:	2300      	movlt	r3, #0
 80096c4:	e734      	b.n	8009530 <_dtoa_r+0x720>
 80096c6:	9e07      	ldr	r6, [sp, #28]
 80096c8:	9d04      	ldr	r5, [sp, #16]
 80096ca:	9f08      	ldr	r7, [sp, #32]
 80096cc:	e73b      	b.n	8009546 <_dtoa_r+0x736>
 80096ce:	9a07      	ldr	r2, [sp, #28]
 80096d0:	e767      	b.n	80095a2 <_dtoa_r+0x792>
 80096d2:	9b06      	ldr	r3, [sp, #24]
 80096d4:	2b01      	cmp	r3, #1
 80096d6:	dc18      	bgt.n	800970a <_dtoa_r+0x8fa>
 80096d8:	f1ba 0f00 	cmp.w	sl, #0
 80096dc:	d115      	bne.n	800970a <_dtoa_r+0x8fa>
 80096de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80096e2:	b993      	cbnz	r3, 800970a <_dtoa_r+0x8fa>
 80096e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80096e8:	0d1b      	lsrs	r3, r3, #20
 80096ea:	051b      	lsls	r3, r3, #20
 80096ec:	b183      	cbz	r3, 8009710 <_dtoa_r+0x900>
 80096ee:	9b04      	ldr	r3, [sp, #16]
 80096f0:	3301      	adds	r3, #1
 80096f2:	9304      	str	r3, [sp, #16]
 80096f4:	9b05      	ldr	r3, [sp, #20]
 80096f6:	3301      	adds	r3, #1
 80096f8:	9305      	str	r3, [sp, #20]
 80096fa:	f04f 0801 	mov.w	r8, #1
 80096fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009700:	2b00      	cmp	r3, #0
 8009702:	f47f af6a 	bne.w	80095da <_dtoa_r+0x7ca>
 8009706:	2001      	movs	r0, #1
 8009708:	e76f      	b.n	80095ea <_dtoa_r+0x7da>
 800970a:	f04f 0800 	mov.w	r8, #0
 800970e:	e7f6      	b.n	80096fe <_dtoa_r+0x8ee>
 8009710:	4698      	mov	r8, r3
 8009712:	e7f4      	b.n	80096fe <_dtoa_r+0x8ee>
 8009714:	f43f af7d 	beq.w	8009612 <_dtoa_r+0x802>
 8009718:	4618      	mov	r0, r3
 800971a:	301c      	adds	r0, #28
 800971c:	e772      	b.n	8009604 <_dtoa_r+0x7f4>
 800971e:	9b03      	ldr	r3, [sp, #12]
 8009720:	2b00      	cmp	r3, #0
 8009722:	dc37      	bgt.n	8009794 <_dtoa_r+0x984>
 8009724:	9b06      	ldr	r3, [sp, #24]
 8009726:	2b02      	cmp	r3, #2
 8009728:	dd34      	ble.n	8009794 <_dtoa_r+0x984>
 800972a:	9b03      	ldr	r3, [sp, #12]
 800972c:	9302      	str	r3, [sp, #8]
 800972e:	9b02      	ldr	r3, [sp, #8]
 8009730:	b96b      	cbnz	r3, 800974e <_dtoa_r+0x93e>
 8009732:	4631      	mov	r1, r6
 8009734:	2205      	movs	r2, #5
 8009736:	4620      	mov	r0, r4
 8009738:	f000 fd68 	bl	800a20c <__multadd>
 800973c:	4601      	mov	r1, r0
 800973e:	4606      	mov	r6, r0
 8009740:	ee18 0a10 	vmov	r0, s16
 8009744:	f000 ffcc 	bl	800a6e0 <__mcmp>
 8009748:	2800      	cmp	r0, #0
 800974a:	f73f adbb 	bgt.w	80092c4 <_dtoa_r+0x4b4>
 800974e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009750:	9d01      	ldr	r5, [sp, #4]
 8009752:	43db      	mvns	r3, r3
 8009754:	9300      	str	r3, [sp, #0]
 8009756:	f04f 0800 	mov.w	r8, #0
 800975a:	4631      	mov	r1, r6
 800975c:	4620      	mov	r0, r4
 800975e:	f000 fd33 	bl	800a1c8 <_Bfree>
 8009762:	2f00      	cmp	r7, #0
 8009764:	f43f aea4 	beq.w	80094b0 <_dtoa_r+0x6a0>
 8009768:	f1b8 0f00 	cmp.w	r8, #0
 800976c:	d005      	beq.n	800977a <_dtoa_r+0x96a>
 800976e:	45b8      	cmp	r8, r7
 8009770:	d003      	beq.n	800977a <_dtoa_r+0x96a>
 8009772:	4641      	mov	r1, r8
 8009774:	4620      	mov	r0, r4
 8009776:	f000 fd27 	bl	800a1c8 <_Bfree>
 800977a:	4639      	mov	r1, r7
 800977c:	4620      	mov	r0, r4
 800977e:	f000 fd23 	bl	800a1c8 <_Bfree>
 8009782:	e695      	b.n	80094b0 <_dtoa_r+0x6a0>
 8009784:	2600      	movs	r6, #0
 8009786:	4637      	mov	r7, r6
 8009788:	e7e1      	b.n	800974e <_dtoa_r+0x93e>
 800978a:	9700      	str	r7, [sp, #0]
 800978c:	4637      	mov	r7, r6
 800978e:	e599      	b.n	80092c4 <_dtoa_r+0x4b4>
 8009790:	40240000 	.word	0x40240000
 8009794:	9b08      	ldr	r3, [sp, #32]
 8009796:	2b00      	cmp	r3, #0
 8009798:	f000 80ca 	beq.w	8009930 <_dtoa_r+0xb20>
 800979c:	9b03      	ldr	r3, [sp, #12]
 800979e:	9302      	str	r3, [sp, #8]
 80097a0:	2d00      	cmp	r5, #0
 80097a2:	dd05      	ble.n	80097b0 <_dtoa_r+0x9a0>
 80097a4:	4639      	mov	r1, r7
 80097a6:	462a      	mov	r2, r5
 80097a8:	4620      	mov	r0, r4
 80097aa:	f000 ff29 	bl	800a600 <__lshift>
 80097ae:	4607      	mov	r7, r0
 80097b0:	f1b8 0f00 	cmp.w	r8, #0
 80097b4:	d05b      	beq.n	800986e <_dtoa_r+0xa5e>
 80097b6:	6879      	ldr	r1, [r7, #4]
 80097b8:	4620      	mov	r0, r4
 80097ba:	f000 fcc5 	bl	800a148 <_Balloc>
 80097be:	4605      	mov	r5, r0
 80097c0:	b928      	cbnz	r0, 80097ce <_dtoa_r+0x9be>
 80097c2:	4b87      	ldr	r3, [pc, #540]	; (80099e0 <_dtoa_r+0xbd0>)
 80097c4:	4602      	mov	r2, r0
 80097c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80097ca:	f7ff bb3b 	b.w	8008e44 <_dtoa_r+0x34>
 80097ce:	693a      	ldr	r2, [r7, #16]
 80097d0:	3202      	adds	r2, #2
 80097d2:	0092      	lsls	r2, r2, #2
 80097d4:	f107 010c 	add.w	r1, r7, #12
 80097d8:	300c      	adds	r0, #12
 80097da:	f000 fca7 	bl	800a12c <memcpy>
 80097de:	2201      	movs	r2, #1
 80097e0:	4629      	mov	r1, r5
 80097e2:	4620      	mov	r0, r4
 80097e4:	f000 ff0c 	bl	800a600 <__lshift>
 80097e8:	9b01      	ldr	r3, [sp, #4]
 80097ea:	f103 0901 	add.w	r9, r3, #1
 80097ee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80097f2:	4413      	add	r3, r2
 80097f4:	9305      	str	r3, [sp, #20]
 80097f6:	f00a 0301 	and.w	r3, sl, #1
 80097fa:	46b8      	mov	r8, r7
 80097fc:	9304      	str	r3, [sp, #16]
 80097fe:	4607      	mov	r7, r0
 8009800:	4631      	mov	r1, r6
 8009802:	ee18 0a10 	vmov	r0, s16
 8009806:	f7ff fa75 	bl	8008cf4 <quorem>
 800980a:	4641      	mov	r1, r8
 800980c:	9002      	str	r0, [sp, #8]
 800980e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009812:	ee18 0a10 	vmov	r0, s16
 8009816:	f000 ff63 	bl	800a6e0 <__mcmp>
 800981a:	463a      	mov	r2, r7
 800981c:	9003      	str	r0, [sp, #12]
 800981e:	4631      	mov	r1, r6
 8009820:	4620      	mov	r0, r4
 8009822:	f000 ff79 	bl	800a718 <__mdiff>
 8009826:	68c2      	ldr	r2, [r0, #12]
 8009828:	f109 3bff 	add.w	fp, r9, #4294967295
 800982c:	4605      	mov	r5, r0
 800982e:	bb02      	cbnz	r2, 8009872 <_dtoa_r+0xa62>
 8009830:	4601      	mov	r1, r0
 8009832:	ee18 0a10 	vmov	r0, s16
 8009836:	f000 ff53 	bl	800a6e0 <__mcmp>
 800983a:	4602      	mov	r2, r0
 800983c:	4629      	mov	r1, r5
 800983e:	4620      	mov	r0, r4
 8009840:	9207      	str	r2, [sp, #28]
 8009842:	f000 fcc1 	bl	800a1c8 <_Bfree>
 8009846:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800984a:	ea43 0102 	orr.w	r1, r3, r2
 800984e:	9b04      	ldr	r3, [sp, #16]
 8009850:	430b      	orrs	r3, r1
 8009852:	464d      	mov	r5, r9
 8009854:	d10f      	bne.n	8009876 <_dtoa_r+0xa66>
 8009856:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800985a:	d02a      	beq.n	80098b2 <_dtoa_r+0xaa2>
 800985c:	9b03      	ldr	r3, [sp, #12]
 800985e:	2b00      	cmp	r3, #0
 8009860:	dd02      	ble.n	8009868 <_dtoa_r+0xa58>
 8009862:	9b02      	ldr	r3, [sp, #8]
 8009864:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009868:	f88b a000 	strb.w	sl, [fp]
 800986c:	e775      	b.n	800975a <_dtoa_r+0x94a>
 800986e:	4638      	mov	r0, r7
 8009870:	e7ba      	b.n	80097e8 <_dtoa_r+0x9d8>
 8009872:	2201      	movs	r2, #1
 8009874:	e7e2      	b.n	800983c <_dtoa_r+0xa2c>
 8009876:	9b03      	ldr	r3, [sp, #12]
 8009878:	2b00      	cmp	r3, #0
 800987a:	db04      	blt.n	8009886 <_dtoa_r+0xa76>
 800987c:	9906      	ldr	r1, [sp, #24]
 800987e:	430b      	orrs	r3, r1
 8009880:	9904      	ldr	r1, [sp, #16]
 8009882:	430b      	orrs	r3, r1
 8009884:	d122      	bne.n	80098cc <_dtoa_r+0xabc>
 8009886:	2a00      	cmp	r2, #0
 8009888:	ddee      	ble.n	8009868 <_dtoa_r+0xa58>
 800988a:	ee18 1a10 	vmov	r1, s16
 800988e:	2201      	movs	r2, #1
 8009890:	4620      	mov	r0, r4
 8009892:	f000 feb5 	bl	800a600 <__lshift>
 8009896:	4631      	mov	r1, r6
 8009898:	ee08 0a10 	vmov	s16, r0
 800989c:	f000 ff20 	bl	800a6e0 <__mcmp>
 80098a0:	2800      	cmp	r0, #0
 80098a2:	dc03      	bgt.n	80098ac <_dtoa_r+0xa9c>
 80098a4:	d1e0      	bne.n	8009868 <_dtoa_r+0xa58>
 80098a6:	f01a 0f01 	tst.w	sl, #1
 80098aa:	d0dd      	beq.n	8009868 <_dtoa_r+0xa58>
 80098ac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80098b0:	d1d7      	bne.n	8009862 <_dtoa_r+0xa52>
 80098b2:	2339      	movs	r3, #57	; 0x39
 80098b4:	f88b 3000 	strb.w	r3, [fp]
 80098b8:	462b      	mov	r3, r5
 80098ba:	461d      	mov	r5, r3
 80098bc:	3b01      	subs	r3, #1
 80098be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80098c2:	2a39      	cmp	r2, #57	; 0x39
 80098c4:	d071      	beq.n	80099aa <_dtoa_r+0xb9a>
 80098c6:	3201      	adds	r2, #1
 80098c8:	701a      	strb	r2, [r3, #0]
 80098ca:	e746      	b.n	800975a <_dtoa_r+0x94a>
 80098cc:	2a00      	cmp	r2, #0
 80098ce:	dd07      	ble.n	80098e0 <_dtoa_r+0xad0>
 80098d0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80098d4:	d0ed      	beq.n	80098b2 <_dtoa_r+0xaa2>
 80098d6:	f10a 0301 	add.w	r3, sl, #1
 80098da:	f88b 3000 	strb.w	r3, [fp]
 80098de:	e73c      	b.n	800975a <_dtoa_r+0x94a>
 80098e0:	9b05      	ldr	r3, [sp, #20]
 80098e2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80098e6:	4599      	cmp	r9, r3
 80098e8:	d047      	beq.n	800997a <_dtoa_r+0xb6a>
 80098ea:	ee18 1a10 	vmov	r1, s16
 80098ee:	2300      	movs	r3, #0
 80098f0:	220a      	movs	r2, #10
 80098f2:	4620      	mov	r0, r4
 80098f4:	f000 fc8a 	bl	800a20c <__multadd>
 80098f8:	45b8      	cmp	r8, r7
 80098fa:	ee08 0a10 	vmov	s16, r0
 80098fe:	f04f 0300 	mov.w	r3, #0
 8009902:	f04f 020a 	mov.w	r2, #10
 8009906:	4641      	mov	r1, r8
 8009908:	4620      	mov	r0, r4
 800990a:	d106      	bne.n	800991a <_dtoa_r+0xb0a>
 800990c:	f000 fc7e 	bl	800a20c <__multadd>
 8009910:	4680      	mov	r8, r0
 8009912:	4607      	mov	r7, r0
 8009914:	f109 0901 	add.w	r9, r9, #1
 8009918:	e772      	b.n	8009800 <_dtoa_r+0x9f0>
 800991a:	f000 fc77 	bl	800a20c <__multadd>
 800991e:	4639      	mov	r1, r7
 8009920:	4680      	mov	r8, r0
 8009922:	2300      	movs	r3, #0
 8009924:	220a      	movs	r2, #10
 8009926:	4620      	mov	r0, r4
 8009928:	f000 fc70 	bl	800a20c <__multadd>
 800992c:	4607      	mov	r7, r0
 800992e:	e7f1      	b.n	8009914 <_dtoa_r+0xb04>
 8009930:	9b03      	ldr	r3, [sp, #12]
 8009932:	9302      	str	r3, [sp, #8]
 8009934:	9d01      	ldr	r5, [sp, #4]
 8009936:	ee18 0a10 	vmov	r0, s16
 800993a:	4631      	mov	r1, r6
 800993c:	f7ff f9da 	bl	8008cf4 <quorem>
 8009940:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009944:	9b01      	ldr	r3, [sp, #4]
 8009946:	f805 ab01 	strb.w	sl, [r5], #1
 800994a:	1aea      	subs	r2, r5, r3
 800994c:	9b02      	ldr	r3, [sp, #8]
 800994e:	4293      	cmp	r3, r2
 8009950:	dd09      	ble.n	8009966 <_dtoa_r+0xb56>
 8009952:	ee18 1a10 	vmov	r1, s16
 8009956:	2300      	movs	r3, #0
 8009958:	220a      	movs	r2, #10
 800995a:	4620      	mov	r0, r4
 800995c:	f000 fc56 	bl	800a20c <__multadd>
 8009960:	ee08 0a10 	vmov	s16, r0
 8009964:	e7e7      	b.n	8009936 <_dtoa_r+0xb26>
 8009966:	9b02      	ldr	r3, [sp, #8]
 8009968:	2b00      	cmp	r3, #0
 800996a:	bfc8      	it	gt
 800996c:	461d      	movgt	r5, r3
 800996e:	9b01      	ldr	r3, [sp, #4]
 8009970:	bfd8      	it	le
 8009972:	2501      	movle	r5, #1
 8009974:	441d      	add	r5, r3
 8009976:	f04f 0800 	mov.w	r8, #0
 800997a:	ee18 1a10 	vmov	r1, s16
 800997e:	2201      	movs	r2, #1
 8009980:	4620      	mov	r0, r4
 8009982:	f000 fe3d 	bl	800a600 <__lshift>
 8009986:	4631      	mov	r1, r6
 8009988:	ee08 0a10 	vmov	s16, r0
 800998c:	f000 fea8 	bl	800a6e0 <__mcmp>
 8009990:	2800      	cmp	r0, #0
 8009992:	dc91      	bgt.n	80098b8 <_dtoa_r+0xaa8>
 8009994:	d102      	bne.n	800999c <_dtoa_r+0xb8c>
 8009996:	f01a 0f01 	tst.w	sl, #1
 800999a:	d18d      	bne.n	80098b8 <_dtoa_r+0xaa8>
 800999c:	462b      	mov	r3, r5
 800999e:	461d      	mov	r5, r3
 80099a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80099a4:	2a30      	cmp	r2, #48	; 0x30
 80099a6:	d0fa      	beq.n	800999e <_dtoa_r+0xb8e>
 80099a8:	e6d7      	b.n	800975a <_dtoa_r+0x94a>
 80099aa:	9a01      	ldr	r2, [sp, #4]
 80099ac:	429a      	cmp	r2, r3
 80099ae:	d184      	bne.n	80098ba <_dtoa_r+0xaaa>
 80099b0:	9b00      	ldr	r3, [sp, #0]
 80099b2:	3301      	adds	r3, #1
 80099b4:	9300      	str	r3, [sp, #0]
 80099b6:	2331      	movs	r3, #49	; 0x31
 80099b8:	7013      	strb	r3, [r2, #0]
 80099ba:	e6ce      	b.n	800975a <_dtoa_r+0x94a>
 80099bc:	4b09      	ldr	r3, [pc, #36]	; (80099e4 <_dtoa_r+0xbd4>)
 80099be:	f7ff ba95 	b.w	8008eec <_dtoa_r+0xdc>
 80099c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	f47f aa6e 	bne.w	8008ea6 <_dtoa_r+0x96>
 80099ca:	4b07      	ldr	r3, [pc, #28]	; (80099e8 <_dtoa_r+0xbd8>)
 80099cc:	f7ff ba8e 	b.w	8008eec <_dtoa_r+0xdc>
 80099d0:	9b02      	ldr	r3, [sp, #8]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	dcae      	bgt.n	8009934 <_dtoa_r+0xb24>
 80099d6:	9b06      	ldr	r3, [sp, #24]
 80099d8:	2b02      	cmp	r3, #2
 80099da:	f73f aea8 	bgt.w	800972e <_dtoa_r+0x91e>
 80099de:	e7a9      	b.n	8009934 <_dtoa_r+0xb24>
 80099e0:	0800ca70 	.word	0x0800ca70
 80099e4:	0800cc69 	.word	0x0800cc69
 80099e8:	0800c9f1 	.word	0x0800c9f1

080099ec <rshift>:
 80099ec:	6903      	ldr	r3, [r0, #16]
 80099ee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80099f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80099f6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80099fa:	f100 0414 	add.w	r4, r0, #20
 80099fe:	dd45      	ble.n	8009a8c <rshift+0xa0>
 8009a00:	f011 011f 	ands.w	r1, r1, #31
 8009a04:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009a08:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009a0c:	d10c      	bne.n	8009a28 <rshift+0x3c>
 8009a0e:	f100 0710 	add.w	r7, r0, #16
 8009a12:	4629      	mov	r1, r5
 8009a14:	42b1      	cmp	r1, r6
 8009a16:	d334      	bcc.n	8009a82 <rshift+0x96>
 8009a18:	1a9b      	subs	r3, r3, r2
 8009a1a:	009b      	lsls	r3, r3, #2
 8009a1c:	1eea      	subs	r2, r5, #3
 8009a1e:	4296      	cmp	r6, r2
 8009a20:	bf38      	it	cc
 8009a22:	2300      	movcc	r3, #0
 8009a24:	4423      	add	r3, r4
 8009a26:	e015      	b.n	8009a54 <rshift+0x68>
 8009a28:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009a2c:	f1c1 0820 	rsb	r8, r1, #32
 8009a30:	40cf      	lsrs	r7, r1
 8009a32:	f105 0e04 	add.w	lr, r5, #4
 8009a36:	46a1      	mov	r9, r4
 8009a38:	4576      	cmp	r6, lr
 8009a3a:	46f4      	mov	ip, lr
 8009a3c:	d815      	bhi.n	8009a6a <rshift+0x7e>
 8009a3e:	1a9a      	subs	r2, r3, r2
 8009a40:	0092      	lsls	r2, r2, #2
 8009a42:	3a04      	subs	r2, #4
 8009a44:	3501      	adds	r5, #1
 8009a46:	42ae      	cmp	r6, r5
 8009a48:	bf38      	it	cc
 8009a4a:	2200      	movcc	r2, #0
 8009a4c:	18a3      	adds	r3, r4, r2
 8009a4e:	50a7      	str	r7, [r4, r2]
 8009a50:	b107      	cbz	r7, 8009a54 <rshift+0x68>
 8009a52:	3304      	adds	r3, #4
 8009a54:	1b1a      	subs	r2, r3, r4
 8009a56:	42a3      	cmp	r3, r4
 8009a58:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009a5c:	bf08      	it	eq
 8009a5e:	2300      	moveq	r3, #0
 8009a60:	6102      	str	r2, [r0, #16]
 8009a62:	bf08      	it	eq
 8009a64:	6143      	streq	r3, [r0, #20]
 8009a66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a6a:	f8dc c000 	ldr.w	ip, [ip]
 8009a6e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009a72:	ea4c 0707 	orr.w	r7, ip, r7
 8009a76:	f849 7b04 	str.w	r7, [r9], #4
 8009a7a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009a7e:	40cf      	lsrs	r7, r1
 8009a80:	e7da      	b.n	8009a38 <rshift+0x4c>
 8009a82:	f851 cb04 	ldr.w	ip, [r1], #4
 8009a86:	f847 cf04 	str.w	ip, [r7, #4]!
 8009a8a:	e7c3      	b.n	8009a14 <rshift+0x28>
 8009a8c:	4623      	mov	r3, r4
 8009a8e:	e7e1      	b.n	8009a54 <rshift+0x68>

08009a90 <__hexdig_fun>:
 8009a90:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009a94:	2b09      	cmp	r3, #9
 8009a96:	d802      	bhi.n	8009a9e <__hexdig_fun+0xe>
 8009a98:	3820      	subs	r0, #32
 8009a9a:	b2c0      	uxtb	r0, r0
 8009a9c:	4770      	bx	lr
 8009a9e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009aa2:	2b05      	cmp	r3, #5
 8009aa4:	d801      	bhi.n	8009aaa <__hexdig_fun+0x1a>
 8009aa6:	3847      	subs	r0, #71	; 0x47
 8009aa8:	e7f7      	b.n	8009a9a <__hexdig_fun+0xa>
 8009aaa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009aae:	2b05      	cmp	r3, #5
 8009ab0:	d801      	bhi.n	8009ab6 <__hexdig_fun+0x26>
 8009ab2:	3827      	subs	r0, #39	; 0x27
 8009ab4:	e7f1      	b.n	8009a9a <__hexdig_fun+0xa>
 8009ab6:	2000      	movs	r0, #0
 8009ab8:	4770      	bx	lr
	...

08009abc <__gethex>:
 8009abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ac0:	ed2d 8b02 	vpush	{d8}
 8009ac4:	b089      	sub	sp, #36	; 0x24
 8009ac6:	ee08 0a10 	vmov	s16, r0
 8009aca:	9304      	str	r3, [sp, #16]
 8009acc:	4bb4      	ldr	r3, [pc, #720]	; (8009da0 <__gethex+0x2e4>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	9301      	str	r3, [sp, #4]
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	468b      	mov	fp, r1
 8009ad6:	4690      	mov	r8, r2
 8009ad8:	f7f6 fb8a 	bl	80001f0 <strlen>
 8009adc:	9b01      	ldr	r3, [sp, #4]
 8009ade:	f8db 2000 	ldr.w	r2, [fp]
 8009ae2:	4403      	add	r3, r0
 8009ae4:	4682      	mov	sl, r0
 8009ae6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009aea:	9305      	str	r3, [sp, #20]
 8009aec:	1c93      	adds	r3, r2, #2
 8009aee:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009af2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009af6:	32fe      	adds	r2, #254	; 0xfe
 8009af8:	18d1      	adds	r1, r2, r3
 8009afa:	461f      	mov	r7, r3
 8009afc:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009b00:	9100      	str	r1, [sp, #0]
 8009b02:	2830      	cmp	r0, #48	; 0x30
 8009b04:	d0f8      	beq.n	8009af8 <__gethex+0x3c>
 8009b06:	f7ff ffc3 	bl	8009a90 <__hexdig_fun>
 8009b0a:	4604      	mov	r4, r0
 8009b0c:	2800      	cmp	r0, #0
 8009b0e:	d13a      	bne.n	8009b86 <__gethex+0xca>
 8009b10:	9901      	ldr	r1, [sp, #4]
 8009b12:	4652      	mov	r2, sl
 8009b14:	4638      	mov	r0, r7
 8009b16:	f7fe fa08 	bl	8007f2a <strncmp>
 8009b1a:	4605      	mov	r5, r0
 8009b1c:	2800      	cmp	r0, #0
 8009b1e:	d168      	bne.n	8009bf2 <__gethex+0x136>
 8009b20:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009b24:	eb07 060a 	add.w	r6, r7, sl
 8009b28:	f7ff ffb2 	bl	8009a90 <__hexdig_fun>
 8009b2c:	2800      	cmp	r0, #0
 8009b2e:	d062      	beq.n	8009bf6 <__gethex+0x13a>
 8009b30:	4633      	mov	r3, r6
 8009b32:	7818      	ldrb	r0, [r3, #0]
 8009b34:	2830      	cmp	r0, #48	; 0x30
 8009b36:	461f      	mov	r7, r3
 8009b38:	f103 0301 	add.w	r3, r3, #1
 8009b3c:	d0f9      	beq.n	8009b32 <__gethex+0x76>
 8009b3e:	f7ff ffa7 	bl	8009a90 <__hexdig_fun>
 8009b42:	2301      	movs	r3, #1
 8009b44:	fab0 f480 	clz	r4, r0
 8009b48:	0964      	lsrs	r4, r4, #5
 8009b4a:	4635      	mov	r5, r6
 8009b4c:	9300      	str	r3, [sp, #0]
 8009b4e:	463a      	mov	r2, r7
 8009b50:	4616      	mov	r6, r2
 8009b52:	3201      	adds	r2, #1
 8009b54:	7830      	ldrb	r0, [r6, #0]
 8009b56:	f7ff ff9b 	bl	8009a90 <__hexdig_fun>
 8009b5a:	2800      	cmp	r0, #0
 8009b5c:	d1f8      	bne.n	8009b50 <__gethex+0x94>
 8009b5e:	9901      	ldr	r1, [sp, #4]
 8009b60:	4652      	mov	r2, sl
 8009b62:	4630      	mov	r0, r6
 8009b64:	f7fe f9e1 	bl	8007f2a <strncmp>
 8009b68:	b980      	cbnz	r0, 8009b8c <__gethex+0xd0>
 8009b6a:	b94d      	cbnz	r5, 8009b80 <__gethex+0xc4>
 8009b6c:	eb06 050a 	add.w	r5, r6, sl
 8009b70:	462a      	mov	r2, r5
 8009b72:	4616      	mov	r6, r2
 8009b74:	3201      	adds	r2, #1
 8009b76:	7830      	ldrb	r0, [r6, #0]
 8009b78:	f7ff ff8a 	bl	8009a90 <__hexdig_fun>
 8009b7c:	2800      	cmp	r0, #0
 8009b7e:	d1f8      	bne.n	8009b72 <__gethex+0xb6>
 8009b80:	1bad      	subs	r5, r5, r6
 8009b82:	00ad      	lsls	r5, r5, #2
 8009b84:	e004      	b.n	8009b90 <__gethex+0xd4>
 8009b86:	2400      	movs	r4, #0
 8009b88:	4625      	mov	r5, r4
 8009b8a:	e7e0      	b.n	8009b4e <__gethex+0x92>
 8009b8c:	2d00      	cmp	r5, #0
 8009b8e:	d1f7      	bne.n	8009b80 <__gethex+0xc4>
 8009b90:	7833      	ldrb	r3, [r6, #0]
 8009b92:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009b96:	2b50      	cmp	r3, #80	; 0x50
 8009b98:	d13b      	bne.n	8009c12 <__gethex+0x156>
 8009b9a:	7873      	ldrb	r3, [r6, #1]
 8009b9c:	2b2b      	cmp	r3, #43	; 0x2b
 8009b9e:	d02c      	beq.n	8009bfa <__gethex+0x13e>
 8009ba0:	2b2d      	cmp	r3, #45	; 0x2d
 8009ba2:	d02e      	beq.n	8009c02 <__gethex+0x146>
 8009ba4:	1c71      	adds	r1, r6, #1
 8009ba6:	f04f 0900 	mov.w	r9, #0
 8009baa:	7808      	ldrb	r0, [r1, #0]
 8009bac:	f7ff ff70 	bl	8009a90 <__hexdig_fun>
 8009bb0:	1e43      	subs	r3, r0, #1
 8009bb2:	b2db      	uxtb	r3, r3
 8009bb4:	2b18      	cmp	r3, #24
 8009bb6:	d82c      	bhi.n	8009c12 <__gethex+0x156>
 8009bb8:	f1a0 0210 	sub.w	r2, r0, #16
 8009bbc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009bc0:	f7ff ff66 	bl	8009a90 <__hexdig_fun>
 8009bc4:	1e43      	subs	r3, r0, #1
 8009bc6:	b2db      	uxtb	r3, r3
 8009bc8:	2b18      	cmp	r3, #24
 8009bca:	d91d      	bls.n	8009c08 <__gethex+0x14c>
 8009bcc:	f1b9 0f00 	cmp.w	r9, #0
 8009bd0:	d000      	beq.n	8009bd4 <__gethex+0x118>
 8009bd2:	4252      	negs	r2, r2
 8009bd4:	4415      	add	r5, r2
 8009bd6:	f8cb 1000 	str.w	r1, [fp]
 8009bda:	b1e4      	cbz	r4, 8009c16 <__gethex+0x15a>
 8009bdc:	9b00      	ldr	r3, [sp, #0]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	bf14      	ite	ne
 8009be2:	2700      	movne	r7, #0
 8009be4:	2706      	moveq	r7, #6
 8009be6:	4638      	mov	r0, r7
 8009be8:	b009      	add	sp, #36	; 0x24
 8009bea:	ecbd 8b02 	vpop	{d8}
 8009bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bf2:	463e      	mov	r6, r7
 8009bf4:	4625      	mov	r5, r4
 8009bf6:	2401      	movs	r4, #1
 8009bf8:	e7ca      	b.n	8009b90 <__gethex+0xd4>
 8009bfa:	f04f 0900 	mov.w	r9, #0
 8009bfe:	1cb1      	adds	r1, r6, #2
 8009c00:	e7d3      	b.n	8009baa <__gethex+0xee>
 8009c02:	f04f 0901 	mov.w	r9, #1
 8009c06:	e7fa      	b.n	8009bfe <__gethex+0x142>
 8009c08:	230a      	movs	r3, #10
 8009c0a:	fb03 0202 	mla	r2, r3, r2, r0
 8009c0e:	3a10      	subs	r2, #16
 8009c10:	e7d4      	b.n	8009bbc <__gethex+0x100>
 8009c12:	4631      	mov	r1, r6
 8009c14:	e7df      	b.n	8009bd6 <__gethex+0x11a>
 8009c16:	1bf3      	subs	r3, r6, r7
 8009c18:	3b01      	subs	r3, #1
 8009c1a:	4621      	mov	r1, r4
 8009c1c:	2b07      	cmp	r3, #7
 8009c1e:	dc0b      	bgt.n	8009c38 <__gethex+0x17c>
 8009c20:	ee18 0a10 	vmov	r0, s16
 8009c24:	f000 fa90 	bl	800a148 <_Balloc>
 8009c28:	4604      	mov	r4, r0
 8009c2a:	b940      	cbnz	r0, 8009c3e <__gethex+0x182>
 8009c2c:	4b5d      	ldr	r3, [pc, #372]	; (8009da4 <__gethex+0x2e8>)
 8009c2e:	4602      	mov	r2, r0
 8009c30:	21de      	movs	r1, #222	; 0xde
 8009c32:	485d      	ldr	r0, [pc, #372]	; (8009da8 <__gethex+0x2ec>)
 8009c34:	f001 fde0 	bl	800b7f8 <__assert_func>
 8009c38:	3101      	adds	r1, #1
 8009c3a:	105b      	asrs	r3, r3, #1
 8009c3c:	e7ee      	b.n	8009c1c <__gethex+0x160>
 8009c3e:	f100 0914 	add.w	r9, r0, #20
 8009c42:	f04f 0b00 	mov.w	fp, #0
 8009c46:	f1ca 0301 	rsb	r3, sl, #1
 8009c4a:	f8cd 9008 	str.w	r9, [sp, #8]
 8009c4e:	f8cd b000 	str.w	fp, [sp]
 8009c52:	9306      	str	r3, [sp, #24]
 8009c54:	42b7      	cmp	r7, r6
 8009c56:	d340      	bcc.n	8009cda <__gethex+0x21e>
 8009c58:	9802      	ldr	r0, [sp, #8]
 8009c5a:	9b00      	ldr	r3, [sp, #0]
 8009c5c:	f840 3b04 	str.w	r3, [r0], #4
 8009c60:	eba0 0009 	sub.w	r0, r0, r9
 8009c64:	1080      	asrs	r0, r0, #2
 8009c66:	0146      	lsls	r6, r0, #5
 8009c68:	6120      	str	r0, [r4, #16]
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f000 fb5e 	bl	800a32c <__hi0bits>
 8009c70:	1a30      	subs	r0, r6, r0
 8009c72:	f8d8 6000 	ldr.w	r6, [r8]
 8009c76:	42b0      	cmp	r0, r6
 8009c78:	dd63      	ble.n	8009d42 <__gethex+0x286>
 8009c7a:	1b87      	subs	r7, r0, r6
 8009c7c:	4639      	mov	r1, r7
 8009c7e:	4620      	mov	r0, r4
 8009c80:	f000 ff02 	bl	800aa88 <__any_on>
 8009c84:	4682      	mov	sl, r0
 8009c86:	b1a8      	cbz	r0, 8009cb4 <__gethex+0x1f8>
 8009c88:	1e7b      	subs	r3, r7, #1
 8009c8a:	1159      	asrs	r1, r3, #5
 8009c8c:	f003 021f 	and.w	r2, r3, #31
 8009c90:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009c94:	f04f 0a01 	mov.w	sl, #1
 8009c98:	fa0a f202 	lsl.w	r2, sl, r2
 8009c9c:	420a      	tst	r2, r1
 8009c9e:	d009      	beq.n	8009cb4 <__gethex+0x1f8>
 8009ca0:	4553      	cmp	r3, sl
 8009ca2:	dd05      	ble.n	8009cb0 <__gethex+0x1f4>
 8009ca4:	1eb9      	subs	r1, r7, #2
 8009ca6:	4620      	mov	r0, r4
 8009ca8:	f000 feee 	bl	800aa88 <__any_on>
 8009cac:	2800      	cmp	r0, #0
 8009cae:	d145      	bne.n	8009d3c <__gethex+0x280>
 8009cb0:	f04f 0a02 	mov.w	sl, #2
 8009cb4:	4639      	mov	r1, r7
 8009cb6:	4620      	mov	r0, r4
 8009cb8:	f7ff fe98 	bl	80099ec <rshift>
 8009cbc:	443d      	add	r5, r7
 8009cbe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009cc2:	42ab      	cmp	r3, r5
 8009cc4:	da4c      	bge.n	8009d60 <__gethex+0x2a4>
 8009cc6:	ee18 0a10 	vmov	r0, s16
 8009cca:	4621      	mov	r1, r4
 8009ccc:	f000 fa7c 	bl	800a1c8 <_Bfree>
 8009cd0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	6013      	str	r3, [r2, #0]
 8009cd6:	27a3      	movs	r7, #163	; 0xa3
 8009cd8:	e785      	b.n	8009be6 <__gethex+0x12a>
 8009cda:	1e73      	subs	r3, r6, #1
 8009cdc:	9a05      	ldr	r2, [sp, #20]
 8009cde:	9303      	str	r3, [sp, #12]
 8009ce0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d019      	beq.n	8009d1c <__gethex+0x260>
 8009ce8:	f1bb 0f20 	cmp.w	fp, #32
 8009cec:	d107      	bne.n	8009cfe <__gethex+0x242>
 8009cee:	9b02      	ldr	r3, [sp, #8]
 8009cf0:	9a00      	ldr	r2, [sp, #0]
 8009cf2:	f843 2b04 	str.w	r2, [r3], #4
 8009cf6:	9302      	str	r3, [sp, #8]
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	9300      	str	r3, [sp, #0]
 8009cfc:	469b      	mov	fp, r3
 8009cfe:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009d02:	f7ff fec5 	bl	8009a90 <__hexdig_fun>
 8009d06:	9b00      	ldr	r3, [sp, #0]
 8009d08:	f000 000f 	and.w	r0, r0, #15
 8009d0c:	fa00 f00b 	lsl.w	r0, r0, fp
 8009d10:	4303      	orrs	r3, r0
 8009d12:	9300      	str	r3, [sp, #0]
 8009d14:	f10b 0b04 	add.w	fp, fp, #4
 8009d18:	9b03      	ldr	r3, [sp, #12]
 8009d1a:	e00d      	b.n	8009d38 <__gethex+0x27c>
 8009d1c:	9b03      	ldr	r3, [sp, #12]
 8009d1e:	9a06      	ldr	r2, [sp, #24]
 8009d20:	4413      	add	r3, r2
 8009d22:	42bb      	cmp	r3, r7
 8009d24:	d3e0      	bcc.n	8009ce8 <__gethex+0x22c>
 8009d26:	4618      	mov	r0, r3
 8009d28:	9901      	ldr	r1, [sp, #4]
 8009d2a:	9307      	str	r3, [sp, #28]
 8009d2c:	4652      	mov	r2, sl
 8009d2e:	f7fe f8fc 	bl	8007f2a <strncmp>
 8009d32:	9b07      	ldr	r3, [sp, #28]
 8009d34:	2800      	cmp	r0, #0
 8009d36:	d1d7      	bne.n	8009ce8 <__gethex+0x22c>
 8009d38:	461e      	mov	r6, r3
 8009d3a:	e78b      	b.n	8009c54 <__gethex+0x198>
 8009d3c:	f04f 0a03 	mov.w	sl, #3
 8009d40:	e7b8      	b.n	8009cb4 <__gethex+0x1f8>
 8009d42:	da0a      	bge.n	8009d5a <__gethex+0x29e>
 8009d44:	1a37      	subs	r7, r6, r0
 8009d46:	4621      	mov	r1, r4
 8009d48:	ee18 0a10 	vmov	r0, s16
 8009d4c:	463a      	mov	r2, r7
 8009d4e:	f000 fc57 	bl	800a600 <__lshift>
 8009d52:	1bed      	subs	r5, r5, r7
 8009d54:	4604      	mov	r4, r0
 8009d56:	f100 0914 	add.w	r9, r0, #20
 8009d5a:	f04f 0a00 	mov.w	sl, #0
 8009d5e:	e7ae      	b.n	8009cbe <__gethex+0x202>
 8009d60:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009d64:	42a8      	cmp	r0, r5
 8009d66:	dd72      	ble.n	8009e4e <__gethex+0x392>
 8009d68:	1b45      	subs	r5, r0, r5
 8009d6a:	42ae      	cmp	r6, r5
 8009d6c:	dc36      	bgt.n	8009ddc <__gethex+0x320>
 8009d6e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009d72:	2b02      	cmp	r3, #2
 8009d74:	d02a      	beq.n	8009dcc <__gethex+0x310>
 8009d76:	2b03      	cmp	r3, #3
 8009d78:	d02c      	beq.n	8009dd4 <__gethex+0x318>
 8009d7a:	2b01      	cmp	r3, #1
 8009d7c:	d11c      	bne.n	8009db8 <__gethex+0x2fc>
 8009d7e:	42ae      	cmp	r6, r5
 8009d80:	d11a      	bne.n	8009db8 <__gethex+0x2fc>
 8009d82:	2e01      	cmp	r6, #1
 8009d84:	d112      	bne.n	8009dac <__gethex+0x2f0>
 8009d86:	9a04      	ldr	r2, [sp, #16]
 8009d88:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009d8c:	6013      	str	r3, [r2, #0]
 8009d8e:	2301      	movs	r3, #1
 8009d90:	6123      	str	r3, [r4, #16]
 8009d92:	f8c9 3000 	str.w	r3, [r9]
 8009d96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009d98:	2762      	movs	r7, #98	; 0x62
 8009d9a:	601c      	str	r4, [r3, #0]
 8009d9c:	e723      	b.n	8009be6 <__gethex+0x12a>
 8009d9e:	bf00      	nop
 8009da0:	0800cae8 	.word	0x0800cae8
 8009da4:	0800ca70 	.word	0x0800ca70
 8009da8:	0800ca81 	.word	0x0800ca81
 8009dac:	1e71      	subs	r1, r6, #1
 8009dae:	4620      	mov	r0, r4
 8009db0:	f000 fe6a 	bl	800aa88 <__any_on>
 8009db4:	2800      	cmp	r0, #0
 8009db6:	d1e6      	bne.n	8009d86 <__gethex+0x2ca>
 8009db8:	ee18 0a10 	vmov	r0, s16
 8009dbc:	4621      	mov	r1, r4
 8009dbe:	f000 fa03 	bl	800a1c8 <_Bfree>
 8009dc2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	6013      	str	r3, [r2, #0]
 8009dc8:	2750      	movs	r7, #80	; 0x50
 8009dca:	e70c      	b.n	8009be6 <__gethex+0x12a>
 8009dcc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d1f2      	bne.n	8009db8 <__gethex+0x2fc>
 8009dd2:	e7d8      	b.n	8009d86 <__gethex+0x2ca>
 8009dd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d1d5      	bne.n	8009d86 <__gethex+0x2ca>
 8009dda:	e7ed      	b.n	8009db8 <__gethex+0x2fc>
 8009ddc:	1e6f      	subs	r7, r5, #1
 8009dde:	f1ba 0f00 	cmp.w	sl, #0
 8009de2:	d131      	bne.n	8009e48 <__gethex+0x38c>
 8009de4:	b127      	cbz	r7, 8009df0 <__gethex+0x334>
 8009de6:	4639      	mov	r1, r7
 8009de8:	4620      	mov	r0, r4
 8009dea:	f000 fe4d 	bl	800aa88 <__any_on>
 8009dee:	4682      	mov	sl, r0
 8009df0:	117b      	asrs	r3, r7, #5
 8009df2:	2101      	movs	r1, #1
 8009df4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009df8:	f007 071f 	and.w	r7, r7, #31
 8009dfc:	fa01 f707 	lsl.w	r7, r1, r7
 8009e00:	421f      	tst	r7, r3
 8009e02:	4629      	mov	r1, r5
 8009e04:	4620      	mov	r0, r4
 8009e06:	bf18      	it	ne
 8009e08:	f04a 0a02 	orrne.w	sl, sl, #2
 8009e0c:	1b76      	subs	r6, r6, r5
 8009e0e:	f7ff fded 	bl	80099ec <rshift>
 8009e12:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009e16:	2702      	movs	r7, #2
 8009e18:	f1ba 0f00 	cmp.w	sl, #0
 8009e1c:	d048      	beq.n	8009eb0 <__gethex+0x3f4>
 8009e1e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009e22:	2b02      	cmp	r3, #2
 8009e24:	d015      	beq.n	8009e52 <__gethex+0x396>
 8009e26:	2b03      	cmp	r3, #3
 8009e28:	d017      	beq.n	8009e5a <__gethex+0x39e>
 8009e2a:	2b01      	cmp	r3, #1
 8009e2c:	d109      	bne.n	8009e42 <__gethex+0x386>
 8009e2e:	f01a 0f02 	tst.w	sl, #2
 8009e32:	d006      	beq.n	8009e42 <__gethex+0x386>
 8009e34:	f8d9 0000 	ldr.w	r0, [r9]
 8009e38:	ea4a 0a00 	orr.w	sl, sl, r0
 8009e3c:	f01a 0f01 	tst.w	sl, #1
 8009e40:	d10e      	bne.n	8009e60 <__gethex+0x3a4>
 8009e42:	f047 0710 	orr.w	r7, r7, #16
 8009e46:	e033      	b.n	8009eb0 <__gethex+0x3f4>
 8009e48:	f04f 0a01 	mov.w	sl, #1
 8009e4c:	e7d0      	b.n	8009df0 <__gethex+0x334>
 8009e4e:	2701      	movs	r7, #1
 8009e50:	e7e2      	b.n	8009e18 <__gethex+0x35c>
 8009e52:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e54:	f1c3 0301 	rsb	r3, r3, #1
 8009e58:	9315      	str	r3, [sp, #84]	; 0x54
 8009e5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d0f0      	beq.n	8009e42 <__gethex+0x386>
 8009e60:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009e64:	f104 0314 	add.w	r3, r4, #20
 8009e68:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009e6c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009e70:	f04f 0c00 	mov.w	ip, #0
 8009e74:	4618      	mov	r0, r3
 8009e76:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e7a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009e7e:	d01c      	beq.n	8009eba <__gethex+0x3fe>
 8009e80:	3201      	adds	r2, #1
 8009e82:	6002      	str	r2, [r0, #0]
 8009e84:	2f02      	cmp	r7, #2
 8009e86:	f104 0314 	add.w	r3, r4, #20
 8009e8a:	d13f      	bne.n	8009f0c <__gethex+0x450>
 8009e8c:	f8d8 2000 	ldr.w	r2, [r8]
 8009e90:	3a01      	subs	r2, #1
 8009e92:	42b2      	cmp	r2, r6
 8009e94:	d10a      	bne.n	8009eac <__gethex+0x3f0>
 8009e96:	1171      	asrs	r1, r6, #5
 8009e98:	2201      	movs	r2, #1
 8009e9a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009e9e:	f006 061f 	and.w	r6, r6, #31
 8009ea2:	fa02 f606 	lsl.w	r6, r2, r6
 8009ea6:	421e      	tst	r6, r3
 8009ea8:	bf18      	it	ne
 8009eaa:	4617      	movne	r7, r2
 8009eac:	f047 0720 	orr.w	r7, r7, #32
 8009eb0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009eb2:	601c      	str	r4, [r3, #0]
 8009eb4:	9b04      	ldr	r3, [sp, #16]
 8009eb6:	601d      	str	r5, [r3, #0]
 8009eb8:	e695      	b.n	8009be6 <__gethex+0x12a>
 8009eba:	4299      	cmp	r1, r3
 8009ebc:	f843 cc04 	str.w	ip, [r3, #-4]
 8009ec0:	d8d8      	bhi.n	8009e74 <__gethex+0x3b8>
 8009ec2:	68a3      	ldr	r3, [r4, #8]
 8009ec4:	459b      	cmp	fp, r3
 8009ec6:	db19      	blt.n	8009efc <__gethex+0x440>
 8009ec8:	6861      	ldr	r1, [r4, #4]
 8009eca:	ee18 0a10 	vmov	r0, s16
 8009ece:	3101      	adds	r1, #1
 8009ed0:	f000 f93a 	bl	800a148 <_Balloc>
 8009ed4:	4681      	mov	r9, r0
 8009ed6:	b918      	cbnz	r0, 8009ee0 <__gethex+0x424>
 8009ed8:	4b1a      	ldr	r3, [pc, #104]	; (8009f44 <__gethex+0x488>)
 8009eda:	4602      	mov	r2, r0
 8009edc:	2184      	movs	r1, #132	; 0x84
 8009ede:	e6a8      	b.n	8009c32 <__gethex+0x176>
 8009ee0:	6922      	ldr	r2, [r4, #16]
 8009ee2:	3202      	adds	r2, #2
 8009ee4:	f104 010c 	add.w	r1, r4, #12
 8009ee8:	0092      	lsls	r2, r2, #2
 8009eea:	300c      	adds	r0, #12
 8009eec:	f000 f91e 	bl	800a12c <memcpy>
 8009ef0:	4621      	mov	r1, r4
 8009ef2:	ee18 0a10 	vmov	r0, s16
 8009ef6:	f000 f967 	bl	800a1c8 <_Bfree>
 8009efa:	464c      	mov	r4, r9
 8009efc:	6923      	ldr	r3, [r4, #16]
 8009efe:	1c5a      	adds	r2, r3, #1
 8009f00:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009f04:	6122      	str	r2, [r4, #16]
 8009f06:	2201      	movs	r2, #1
 8009f08:	615a      	str	r2, [r3, #20]
 8009f0a:	e7bb      	b.n	8009e84 <__gethex+0x3c8>
 8009f0c:	6922      	ldr	r2, [r4, #16]
 8009f0e:	455a      	cmp	r2, fp
 8009f10:	dd0b      	ble.n	8009f2a <__gethex+0x46e>
 8009f12:	2101      	movs	r1, #1
 8009f14:	4620      	mov	r0, r4
 8009f16:	f7ff fd69 	bl	80099ec <rshift>
 8009f1a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009f1e:	3501      	adds	r5, #1
 8009f20:	42ab      	cmp	r3, r5
 8009f22:	f6ff aed0 	blt.w	8009cc6 <__gethex+0x20a>
 8009f26:	2701      	movs	r7, #1
 8009f28:	e7c0      	b.n	8009eac <__gethex+0x3f0>
 8009f2a:	f016 061f 	ands.w	r6, r6, #31
 8009f2e:	d0fa      	beq.n	8009f26 <__gethex+0x46a>
 8009f30:	4453      	add	r3, sl
 8009f32:	f1c6 0620 	rsb	r6, r6, #32
 8009f36:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009f3a:	f000 f9f7 	bl	800a32c <__hi0bits>
 8009f3e:	42b0      	cmp	r0, r6
 8009f40:	dbe7      	blt.n	8009f12 <__gethex+0x456>
 8009f42:	e7f0      	b.n	8009f26 <__gethex+0x46a>
 8009f44:	0800ca70 	.word	0x0800ca70

08009f48 <L_shift>:
 8009f48:	f1c2 0208 	rsb	r2, r2, #8
 8009f4c:	0092      	lsls	r2, r2, #2
 8009f4e:	b570      	push	{r4, r5, r6, lr}
 8009f50:	f1c2 0620 	rsb	r6, r2, #32
 8009f54:	6843      	ldr	r3, [r0, #4]
 8009f56:	6804      	ldr	r4, [r0, #0]
 8009f58:	fa03 f506 	lsl.w	r5, r3, r6
 8009f5c:	432c      	orrs	r4, r5
 8009f5e:	40d3      	lsrs	r3, r2
 8009f60:	6004      	str	r4, [r0, #0]
 8009f62:	f840 3f04 	str.w	r3, [r0, #4]!
 8009f66:	4288      	cmp	r0, r1
 8009f68:	d3f4      	bcc.n	8009f54 <L_shift+0xc>
 8009f6a:	bd70      	pop	{r4, r5, r6, pc}

08009f6c <__match>:
 8009f6c:	b530      	push	{r4, r5, lr}
 8009f6e:	6803      	ldr	r3, [r0, #0]
 8009f70:	3301      	adds	r3, #1
 8009f72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f76:	b914      	cbnz	r4, 8009f7e <__match+0x12>
 8009f78:	6003      	str	r3, [r0, #0]
 8009f7a:	2001      	movs	r0, #1
 8009f7c:	bd30      	pop	{r4, r5, pc}
 8009f7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f82:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009f86:	2d19      	cmp	r5, #25
 8009f88:	bf98      	it	ls
 8009f8a:	3220      	addls	r2, #32
 8009f8c:	42a2      	cmp	r2, r4
 8009f8e:	d0f0      	beq.n	8009f72 <__match+0x6>
 8009f90:	2000      	movs	r0, #0
 8009f92:	e7f3      	b.n	8009f7c <__match+0x10>

08009f94 <__hexnan>:
 8009f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f98:	680b      	ldr	r3, [r1, #0]
 8009f9a:	115e      	asrs	r6, r3, #5
 8009f9c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009fa0:	f013 031f 	ands.w	r3, r3, #31
 8009fa4:	b087      	sub	sp, #28
 8009fa6:	bf18      	it	ne
 8009fa8:	3604      	addne	r6, #4
 8009faa:	2500      	movs	r5, #0
 8009fac:	1f37      	subs	r7, r6, #4
 8009fae:	4690      	mov	r8, r2
 8009fb0:	6802      	ldr	r2, [r0, #0]
 8009fb2:	9301      	str	r3, [sp, #4]
 8009fb4:	4682      	mov	sl, r0
 8009fb6:	f846 5c04 	str.w	r5, [r6, #-4]
 8009fba:	46b9      	mov	r9, r7
 8009fbc:	463c      	mov	r4, r7
 8009fbe:	9502      	str	r5, [sp, #8]
 8009fc0:	46ab      	mov	fp, r5
 8009fc2:	7851      	ldrb	r1, [r2, #1]
 8009fc4:	1c53      	adds	r3, r2, #1
 8009fc6:	9303      	str	r3, [sp, #12]
 8009fc8:	b341      	cbz	r1, 800a01c <__hexnan+0x88>
 8009fca:	4608      	mov	r0, r1
 8009fcc:	9205      	str	r2, [sp, #20]
 8009fce:	9104      	str	r1, [sp, #16]
 8009fd0:	f7ff fd5e 	bl	8009a90 <__hexdig_fun>
 8009fd4:	2800      	cmp	r0, #0
 8009fd6:	d14f      	bne.n	800a078 <__hexnan+0xe4>
 8009fd8:	9904      	ldr	r1, [sp, #16]
 8009fda:	9a05      	ldr	r2, [sp, #20]
 8009fdc:	2920      	cmp	r1, #32
 8009fde:	d818      	bhi.n	800a012 <__hexnan+0x7e>
 8009fe0:	9b02      	ldr	r3, [sp, #8]
 8009fe2:	459b      	cmp	fp, r3
 8009fe4:	dd13      	ble.n	800a00e <__hexnan+0x7a>
 8009fe6:	454c      	cmp	r4, r9
 8009fe8:	d206      	bcs.n	8009ff8 <__hexnan+0x64>
 8009fea:	2d07      	cmp	r5, #7
 8009fec:	dc04      	bgt.n	8009ff8 <__hexnan+0x64>
 8009fee:	462a      	mov	r2, r5
 8009ff0:	4649      	mov	r1, r9
 8009ff2:	4620      	mov	r0, r4
 8009ff4:	f7ff ffa8 	bl	8009f48 <L_shift>
 8009ff8:	4544      	cmp	r4, r8
 8009ffa:	d950      	bls.n	800a09e <__hexnan+0x10a>
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	f1a4 0904 	sub.w	r9, r4, #4
 800a002:	f844 3c04 	str.w	r3, [r4, #-4]
 800a006:	f8cd b008 	str.w	fp, [sp, #8]
 800a00a:	464c      	mov	r4, r9
 800a00c:	461d      	mov	r5, r3
 800a00e:	9a03      	ldr	r2, [sp, #12]
 800a010:	e7d7      	b.n	8009fc2 <__hexnan+0x2e>
 800a012:	2929      	cmp	r1, #41	; 0x29
 800a014:	d156      	bne.n	800a0c4 <__hexnan+0x130>
 800a016:	3202      	adds	r2, #2
 800a018:	f8ca 2000 	str.w	r2, [sl]
 800a01c:	f1bb 0f00 	cmp.w	fp, #0
 800a020:	d050      	beq.n	800a0c4 <__hexnan+0x130>
 800a022:	454c      	cmp	r4, r9
 800a024:	d206      	bcs.n	800a034 <__hexnan+0xa0>
 800a026:	2d07      	cmp	r5, #7
 800a028:	dc04      	bgt.n	800a034 <__hexnan+0xa0>
 800a02a:	462a      	mov	r2, r5
 800a02c:	4649      	mov	r1, r9
 800a02e:	4620      	mov	r0, r4
 800a030:	f7ff ff8a 	bl	8009f48 <L_shift>
 800a034:	4544      	cmp	r4, r8
 800a036:	d934      	bls.n	800a0a2 <__hexnan+0x10e>
 800a038:	f1a8 0204 	sub.w	r2, r8, #4
 800a03c:	4623      	mov	r3, r4
 800a03e:	f853 1b04 	ldr.w	r1, [r3], #4
 800a042:	f842 1f04 	str.w	r1, [r2, #4]!
 800a046:	429f      	cmp	r7, r3
 800a048:	d2f9      	bcs.n	800a03e <__hexnan+0xaa>
 800a04a:	1b3b      	subs	r3, r7, r4
 800a04c:	f023 0303 	bic.w	r3, r3, #3
 800a050:	3304      	adds	r3, #4
 800a052:	3401      	adds	r4, #1
 800a054:	3e03      	subs	r6, #3
 800a056:	42b4      	cmp	r4, r6
 800a058:	bf88      	it	hi
 800a05a:	2304      	movhi	r3, #4
 800a05c:	4443      	add	r3, r8
 800a05e:	2200      	movs	r2, #0
 800a060:	f843 2b04 	str.w	r2, [r3], #4
 800a064:	429f      	cmp	r7, r3
 800a066:	d2fb      	bcs.n	800a060 <__hexnan+0xcc>
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	b91b      	cbnz	r3, 800a074 <__hexnan+0xe0>
 800a06c:	4547      	cmp	r7, r8
 800a06e:	d127      	bne.n	800a0c0 <__hexnan+0x12c>
 800a070:	2301      	movs	r3, #1
 800a072:	603b      	str	r3, [r7, #0]
 800a074:	2005      	movs	r0, #5
 800a076:	e026      	b.n	800a0c6 <__hexnan+0x132>
 800a078:	3501      	adds	r5, #1
 800a07a:	2d08      	cmp	r5, #8
 800a07c:	f10b 0b01 	add.w	fp, fp, #1
 800a080:	dd06      	ble.n	800a090 <__hexnan+0xfc>
 800a082:	4544      	cmp	r4, r8
 800a084:	d9c3      	bls.n	800a00e <__hexnan+0x7a>
 800a086:	2300      	movs	r3, #0
 800a088:	f844 3c04 	str.w	r3, [r4, #-4]
 800a08c:	2501      	movs	r5, #1
 800a08e:	3c04      	subs	r4, #4
 800a090:	6822      	ldr	r2, [r4, #0]
 800a092:	f000 000f 	and.w	r0, r0, #15
 800a096:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a09a:	6022      	str	r2, [r4, #0]
 800a09c:	e7b7      	b.n	800a00e <__hexnan+0x7a>
 800a09e:	2508      	movs	r5, #8
 800a0a0:	e7b5      	b.n	800a00e <__hexnan+0x7a>
 800a0a2:	9b01      	ldr	r3, [sp, #4]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d0df      	beq.n	800a068 <__hexnan+0xd4>
 800a0a8:	f04f 32ff 	mov.w	r2, #4294967295
 800a0ac:	f1c3 0320 	rsb	r3, r3, #32
 800a0b0:	fa22 f303 	lsr.w	r3, r2, r3
 800a0b4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a0b8:	401a      	ands	r2, r3
 800a0ba:	f846 2c04 	str.w	r2, [r6, #-4]
 800a0be:	e7d3      	b.n	800a068 <__hexnan+0xd4>
 800a0c0:	3f04      	subs	r7, #4
 800a0c2:	e7d1      	b.n	800a068 <__hexnan+0xd4>
 800a0c4:	2004      	movs	r0, #4
 800a0c6:	b007      	add	sp, #28
 800a0c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a0cc <_localeconv_r>:
 800a0cc:	4800      	ldr	r0, [pc, #0]	; (800a0d0 <_localeconv_r+0x4>)
 800a0ce:	4770      	bx	lr
 800a0d0:	20000164 	.word	0x20000164

0800a0d4 <_lseek_r>:
 800a0d4:	b538      	push	{r3, r4, r5, lr}
 800a0d6:	4d07      	ldr	r5, [pc, #28]	; (800a0f4 <_lseek_r+0x20>)
 800a0d8:	4604      	mov	r4, r0
 800a0da:	4608      	mov	r0, r1
 800a0dc:	4611      	mov	r1, r2
 800a0de:	2200      	movs	r2, #0
 800a0e0:	602a      	str	r2, [r5, #0]
 800a0e2:	461a      	mov	r2, r3
 800a0e4:	f7f8 fa00 	bl	80024e8 <_lseek>
 800a0e8:	1c43      	adds	r3, r0, #1
 800a0ea:	d102      	bne.n	800a0f2 <_lseek_r+0x1e>
 800a0ec:	682b      	ldr	r3, [r5, #0]
 800a0ee:	b103      	cbz	r3, 800a0f2 <_lseek_r+0x1e>
 800a0f0:	6023      	str	r3, [r4, #0]
 800a0f2:	bd38      	pop	{r3, r4, r5, pc}
 800a0f4:	200004d4 	.word	0x200004d4

0800a0f8 <malloc>:
 800a0f8:	4b02      	ldr	r3, [pc, #8]	; (800a104 <malloc+0xc>)
 800a0fa:	4601      	mov	r1, r0
 800a0fc:	6818      	ldr	r0, [r3, #0]
 800a0fe:	f000 bd67 	b.w	800abd0 <_malloc_r>
 800a102:	bf00      	nop
 800a104:	2000000c 	.word	0x2000000c

0800a108 <__ascii_mbtowc>:
 800a108:	b082      	sub	sp, #8
 800a10a:	b901      	cbnz	r1, 800a10e <__ascii_mbtowc+0x6>
 800a10c:	a901      	add	r1, sp, #4
 800a10e:	b142      	cbz	r2, 800a122 <__ascii_mbtowc+0x1a>
 800a110:	b14b      	cbz	r3, 800a126 <__ascii_mbtowc+0x1e>
 800a112:	7813      	ldrb	r3, [r2, #0]
 800a114:	600b      	str	r3, [r1, #0]
 800a116:	7812      	ldrb	r2, [r2, #0]
 800a118:	1e10      	subs	r0, r2, #0
 800a11a:	bf18      	it	ne
 800a11c:	2001      	movne	r0, #1
 800a11e:	b002      	add	sp, #8
 800a120:	4770      	bx	lr
 800a122:	4610      	mov	r0, r2
 800a124:	e7fb      	b.n	800a11e <__ascii_mbtowc+0x16>
 800a126:	f06f 0001 	mvn.w	r0, #1
 800a12a:	e7f8      	b.n	800a11e <__ascii_mbtowc+0x16>

0800a12c <memcpy>:
 800a12c:	440a      	add	r2, r1
 800a12e:	4291      	cmp	r1, r2
 800a130:	f100 33ff 	add.w	r3, r0, #4294967295
 800a134:	d100      	bne.n	800a138 <memcpy+0xc>
 800a136:	4770      	bx	lr
 800a138:	b510      	push	{r4, lr}
 800a13a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a13e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a142:	4291      	cmp	r1, r2
 800a144:	d1f9      	bne.n	800a13a <memcpy+0xe>
 800a146:	bd10      	pop	{r4, pc}

0800a148 <_Balloc>:
 800a148:	b570      	push	{r4, r5, r6, lr}
 800a14a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a14c:	4604      	mov	r4, r0
 800a14e:	460d      	mov	r5, r1
 800a150:	b976      	cbnz	r6, 800a170 <_Balloc+0x28>
 800a152:	2010      	movs	r0, #16
 800a154:	f7ff ffd0 	bl	800a0f8 <malloc>
 800a158:	4602      	mov	r2, r0
 800a15a:	6260      	str	r0, [r4, #36]	; 0x24
 800a15c:	b920      	cbnz	r0, 800a168 <_Balloc+0x20>
 800a15e:	4b18      	ldr	r3, [pc, #96]	; (800a1c0 <_Balloc+0x78>)
 800a160:	4818      	ldr	r0, [pc, #96]	; (800a1c4 <_Balloc+0x7c>)
 800a162:	2166      	movs	r1, #102	; 0x66
 800a164:	f001 fb48 	bl	800b7f8 <__assert_func>
 800a168:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a16c:	6006      	str	r6, [r0, #0]
 800a16e:	60c6      	str	r6, [r0, #12]
 800a170:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a172:	68f3      	ldr	r3, [r6, #12]
 800a174:	b183      	cbz	r3, 800a198 <_Balloc+0x50>
 800a176:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a178:	68db      	ldr	r3, [r3, #12]
 800a17a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a17e:	b9b8      	cbnz	r0, 800a1b0 <_Balloc+0x68>
 800a180:	2101      	movs	r1, #1
 800a182:	fa01 f605 	lsl.w	r6, r1, r5
 800a186:	1d72      	adds	r2, r6, #5
 800a188:	0092      	lsls	r2, r2, #2
 800a18a:	4620      	mov	r0, r4
 800a18c:	f000 fc9d 	bl	800aaca <_calloc_r>
 800a190:	b160      	cbz	r0, 800a1ac <_Balloc+0x64>
 800a192:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a196:	e00e      	b.n	800a1b6 <_Balloc+0x6e>
 800a198:	2221      	movs	r2, #33	; 0x21
 800a19a:	2104      	movs	r1, #4
 800a19c:	4620      	mov	r0, r4
 800a19e:	f000 fc94 	bl	800aaca <_calloc_r>
 800a1a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1a4:	60f0      	str	r0, [r6, #12]
 800a1a6:	68db      	ldr	r3, [r3, #12]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d1e4      	bne.n	800a176 <_Balloc+0x2e>
 800a1ac:	2000      	movs	r0, #0
 800a1ae:	bd70      	pop	{r4, r5, r6, pc}
 800a1b0:	6802      	ldr	r2, [r0, #0]
 800a1b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a1bc:	e7f7      	b.n	800a1ae <_Balloc+0x66>
 800a1be:	bf00      	nop
 800a1c0:	0800c9fe 	.word	0x0800c9fe
 800a1c4:	0800cafc 	.word	0x0800cafc

0800a1c8 <_Bfree>:
 800a1c8:	b570      	push	{r4, r5, r6, lr}
 800a1ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a1cc:	4605      	mov	r5, r0
 800a1ce:	460c      	mov	r4, r1
 800a1d0:	b976      	cbnz	r6, 800a1f0 <_Bfree+0x28>
 800a1d2:	2010      	movs	r0, #16
 800a1d4:	f7ff ff90 	bl	800a0f8 <malloc>
 800a1d8:	4602      	mov	r2, r0
 800a1da:	6268      	str	r0, [r5, #36]	; 0x24
 800a1dc:	b920      	cbnz	r0, 800a1e8 <_Bfree+0x20>
 800a1de:	4b09      	ldr	r3, [pc, #36]	; (800a204 <_Bfree+0x3c>)
 800a1e0:	4809      	ldr	r0, [pc, #36]	; (800a208 <_Bfree+0x40>)
 800a1e2:	218a      	movs	r1, #138	; 0x8a
 800a1e4:	f001 fb08 	bl	800b7f8 <__assert_func>
 800a1e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a1ec:	6006      	str	r6, [r0, #0]
 800a1ee:	60c6      	str	r6, [r0, #12]
 800a1f0:	b13c      	cbz	r4, 800a202 <_Bfree+0x3a>
 800a1f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a1f4:	6862      	ldr	r2, [r4, #4]
 800a1f6:	68db      	ldr	r3, [r3, #12]
 800a1f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a1fc:	6021      	str	r1, [r4, #0]
 800a1fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a202:	bd70      	pop	{r4, r5, r6, pc}
 800a204:	0800c9fe 	.word	0x0800c9fe
 800a208:	0800cafc 	.word	0x0800cafc

0800a20c <__multadd>:
 800a20c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a210:	690d      	ldr	r5, [r1, #16]
 800a212:	4607      	mov	r7, r0
 800a214:	460c      	mov	r4, r1
 800a216:	461e      	mov	r6, r3
 800a218:	f101 0c14 	add.w	ip, r1, #20
 800a21c:	2000      	movs	r0, #0
 800a21e:	f8dc 3000 	ldr.w	r3, [ip]
 800a222:	b299      	uxth	r1, r3
 800a224:	fb02 6101 	mla	r1, r2, r1, r6
 800a228:	0c1e      	lsrs	r6, r3, #16
 800a22a:	0c0b      	lsrs	r3, r1, #16
 800a22c:	fb02 3306 	mla	r3, r2, r6, r3
 800a230:	b289      	uxth	r1, r1
 800a232:	3001      	adds	r0, #1
 800a234:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a238:	4285      	cmp	r5, r0
 800a23a:	f84c 1b04 	str.w	r1, [ip], #4
 800a23e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a242:	dcec      	bgt.n	800a21e <__multadd+0x12>
 800a244:	b30e      	cbz	r6, 800a28a <__multadd+0x7e>
 800a246:	68a3      	ldr	r3, [r4, #8]
 800a248:	42ab      	cmp	r3, r5
 800a24a:	dc19      	bgt.n	800a280 <__multadd+0x74>
 800a24c:	6861      	ldr	r1, [r4, #4]
 800a24e:	4638      	mov	r0, r7
 800a250:	3101      	adds	r1, #1
 800a252:	f7ff ff79 	bl	800a148 <_Balloc>
 800a256:	4680      	mov	r8, r0
 800a258:	b928      	cbnz	r0, 800a266 <__multadd+0x5a>
 800a25a:	4602      	mov	r2, r0
 800a25c:	4b0c      	ldr	r3, [pc, #48]	; (800a290 <__multadd+0x84>)
 800a25e:	480d      	ldr	r0, [pc, #52]	; (800a294 <__multadd+0x88>)
 800a260:	21b5      	movs	r1, #181	; 0xb5
 800a262:	f001 fac9 	bl	800b7f8 <__assert_func>
 800a266:	6922      	ldr	r2, [r4, #16]
 800a268:	3202      	adds	r2, #2
 800a26a:	f104 010c 	add.w	r1, r4, #12
 800a26e:	0092      	lsls	r2, r2, #2
 800a270:	300c      	adds	r0, #12
 800a272:	f7ff ff5b 	bl	800a12c <memcpy>
 800a276:	4621      	mov	r1, r4
 800a278:	4638      	mov	r0, r7
 800a27a:	f7ff ffa5 	bl	800a1c8 <_Bfree>
 800a27e:	4644      	mov	r4, r8
 800a280:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a284:	3501      	adds	r5, #1
 800a286:	615e      	str	r6, [r3, #20]
 800a288:	6125      	str	r5, [r4, #16]
 800a28a:	4620      	mov	r0, r4
 800a28c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a290:	0800ca70 	.word	0x0800ca70
 800a294:	0800cafc 	.word	0x0800cafc

0800a298 <__s2b>:
 800a298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a29c:	460c      	mov	r4, r1
 800a29e:	4615      	mov	r5, r2
 800a2a0:	461f      	mov	r7, r3
 800a2a2:	2209      	movs	r2, #9
 800a2a4:	3308      	adds	r3, #8
 800a2a6:	4606      	mov	r6, r0
 800a2a8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a2ac:	2100      	movs	r1, #0
 800a2ae:	2201      	movs	r2, #1
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	db09      	blt.n	800a2c8 <__s2b+0x30>
 800a2b4:	4630      	mov	r0, r6
 800a2b6:	f7ff ff47 	bl	800a148 <_Balloc>
 800a2ba:	b940      	cbnz	r0, 800a2ce <__s2b+0x36>
 800a2bc:	4602      	mov	r2, r0
 800a2be:	4b19      	ldr	r3, [pc, #100]	; (800a324 <__s2b+0x8c>)
 800a2c0:	4819      	ldr	r0, [pc, #100]	; (800a328 <__s2b+0x90>)
 800a2c2:	21ce      	movs	r1, #206	; 0xce
 800a2c4:	f001 fa98 	bl	800b7f8 <__assert_func>
 800a2c8:	0052      	lsls	r2, r2, #1
 800a2ca:	3101      	adds	r1, #1
 800a2cc:	e7f0      	b.n	800a2b0 <__s2b+0x18>
 800a2ce:	9b08      	ldr	r3, [sp, #32]
 800a2d0:	6143      	str	r3, [r0, #20]
 800a2d2:	2d09      	cmp	r5, #9
 800a2d4:	f04f 0301 	mov.w	r3, #1
 800a2d8:	6103      	str	r3, [r0, #16]
 800a2da:	dd16      	ble.n	800a30a <__s2b+0x72>
 800a2dc:	f104 0909 	add.w	r9, r4, #9
 800a2e0:	46c8      	mov	r8, r9
 800a2e2:	442c      	add	r4, r5
 800a2e4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a2e8:	4601      	mov	r1, r0
 800a2ea:	3b30      	subs	r3, #48	; 0x30
 800a2ec:	220a      	movs	r2, #10
 800a2ee:	4630      	mov	r0, r6
 800a2f0:	f7ff ff8c 	bl	800a20c <__multadd>
 800a2f4:	45a0      	cmp	r8, r4
 800a2f6:	d1f5      	bne.n	800a2e4 <__s2b+0x4c>
 800a2f8:	f1a5 0408 	sub.w	r4, r5, #8
 800a2fc:	444c      	add	r4, r9
 800a2fe:	1b2d      	subs	r5, r5, r4
 800a300:	1963      	adds	r3, r4, r5
 800a302:	42bb      	cmp	r3, r7
 800a304:	db04      	blt.n	800a310 <__s2b+0x78>
 800a306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a30a:	340a      	adds	r4, #10
 800a30c:	2509      	movs	r5, #9
 800a30e:	e7f6      	b.n	800a2fe <__s2b+0x66>
 800a310:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a314:	4601      	mov	r1, r0
 800a316:	3b30      	subs	r3, #48	; 0x30
 800a318:	220a      	movs	r2, #10
 800a31a:	4630      	mov	r0, r6
 800a31c:	f7ff ff76 	bl	800a20c <__multadd>
 800a320:	e7ee      	b.n	800a300 <__s2b+0x68>
 800a322:	bf00      	nop
 800a324:	0800ca70 	.word	0x0800ca70
 800a328:	0800cafc 	.word	0x0800cafc

0800a32c <__hi0bits>:
 800a32c:	0c03      	lsrs	r3, r0, #16
 800a32e:	041b      	lsls	r3, r3, #16
 800a330:	b9d3      	cbnz	r3, 800a368 <__hi0bits+0x3c>
 800a332:	0400      	lsls	r0, r0, #16
 800a334:	2310      	movs	r3, #16
 800a336:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a33a:	bf04      	itt	eq
 800a33c:	0200      	lsleq	r0, r0, #8
 800a33e:	3308      	addeq	r3, #8
 800a340:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a344:	bf04      	itt	eq
 800a346:	0100      	lsleq	r0, r0, #4
 800a348:	3304      	addeq	r3, #4
 800a34a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a34e:	bf04      	itt	eq
 800a350:	0080      	lsleq	r0, r0, #2
 800a352:	3302      	addeq	r3, #2
 800a354:	2800      	cmp	r0, #0
 800a356:	db05      	blt.n	800a364 <__hi0bits+0x38>
 800a358:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a35c:	f103 0301 	add.w	r3, r3, #1
 800a360:	bf08      	it	eq
 800a362:	2320      	moveq	r3, #32
 800a364:	4618      	mov	r0, r3
 800a366:	4770      	bx	lr
 800a368:	2300      	movs	r3, #0
 800a36a:	e7e4      	b.n	800a336 <__hi0bits+0xa>

0800a36c <__lo0bits>:
 800a36c:	6803      	ldr	r3, [r0, #0]
 800a36e:	f013 0207 	ands.w	r2, r3, #7
 800a372:	4601      	mov	r1, r0
 800a374:	d00b      	beq.n	800a38e <__lo0bits+0x22>
 800a376:	07da      	lsls	r2, r3, #31
 800a378:	d423      	bmi.n	800a3c2 <__lo0bits+0x56>
 800a37a:	0798      	lsls	r0, r3, #30
 800a37c:	bf49      	itett	mi
 800a37e:	085b      	lsrmi	r3, r3, #1
 800a380:	089b      	lsrpl	r3, r3, #2
 800a382:	2001      	movmi	r0, #1
 800a384:	600b      	strmi	r3, [r1, #0]
 800a386:	bf5c      	itt	pl
 800a388:	600b      	strpl	r3, [r1, #0]
 800a38a:	2002      	movpl	r0, #2
 800a38c:	4770      	bx	lr
 800a38e:	b298      	uxth	r0, r3
 800a390:	b9a8      	cbnz	r0, 800a3be <__lo0bits+0x52>
 800a392:	0c1b      	lsrs	r3, r3, #16
 800a394:	2010      	movs	r0, #16
 800a396:	b2da      	uxtb	r2, r3
 800a398:	b90a      	cbnz	r2, 800a39e <__lo0bits+0x32>
 800a39a:	3008      	adds	r0, #8
 800a39c:	0a1b      	lsrs	r3, r3, #8
 800a39e:	071a      	lsls	r2, r3, #28
 800a3a0:	bf04      	itt	eq
 800a3a2:	091b      	lsreq	r3, r3, #4
 800a3a4:	3004      	addeq	r0, #4
 800a3a6:	079a      	lsls	r2, r3, #30
 800a3a8:	bf04      	itt	eq
 800a3aa:	089b      	lsreq	r3, r3, #2
 800a3ac:	3002      	addeq	r0, #2
 800a3ae:	07da      	lsls	r2, r3, #31
 800a3b0:	d403      	bmi.n	800a3ba <__lo0bits+0x4e>
 800a3b2:	085b      	lsrs	r3, r3, #1
 800a3b4:	f100 0001 	add.w	r0, r0, #1
 800a3b8:	d005      	beq.n	800a3c6 <__lo0bits+0x5a>
 800a3ba:	600b      	str	r3, [r1, #0]
 800a3bc:	4770      	bx	lr
 800a3be:	4610      	mov	r0, r2
 800a3c0:	e7e9      	b.n	800a396 <__lo0bits+0x2a>
 800a3c2:	2000      	movs	r0, #0
 800a3c4:	4770      	bx	lr
 800a3c6:	2020      	movs	r0, #32
 800a3c8:	4770      	bx	lr
	...

0800a3cc <__i2b>:
 800a3cc:	b510      	push	{r4, lr}
 800a3ce:	460c      	mov	r4, r1
 800a3d0:	2101      	movs	r1, #1
 800a3d2:	f7ff feb9 	bl	800a148 <_Balloc>
 800a3d6:	4602      	mov	r2, r0
 800a3d8:	b928      	cbnz	r0, 800a3e6 <__i2b+0x1a>
 800a3da:	4b05      	ldr	r3, [pc, #20]	; (800a3f0 <__i2b+0x24>)
 800a3dc:	4805      	ldr	r0, [pc, #20]	; (800a3f4 <__i2b+0x28>)
 800a3de:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a3e2:	f001 fa09 	bl	800b7f8 <__assert_func>
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	6144      	str	r4, [r0, #20]
 800a3ea:	6103      	str	r3, [r0, #16]
 800a3ec:	bd10      	pop	{r4, pc}
 800a3ee:	bf00      	nop
 800a3f0:	0800ca70 	.word	0x0800ca70
 800a3f4:	0800cafc 	.word	0x0800cafc

0800a3f8 <__multiply>:
 800a3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3fc:	4691      	mov	r9, r2
 800a3fe:	690a      	ldr	r2, [r1, #16]
 800a400:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a404:	429a      	cmp	r2, r3
 800a406:	bfb8      	it	lt
 800a408:	460b      	movlt	r3, r1
 800a40a:	460c      	mov	r4, r1
 800a40c:	bfbc      	itt	lt
 800a40e:	464c      	movlt	r4, r9
 800a410:	4699      	movlt	r9, r3
 800a412:	6927      	ldr	r7, [r4, #16]
 800a414:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a418:	68a3      	ldr	r3, [r4, #8]
 800a41a:	6861      	ldr	r1, [r4, #4]
 800a41c:	eb07 060a 	add.w	r6, r7, sl
 800a420:	42b3      	cmp	r3, r6
 800a422:	b085      	sub	sp, #20
 800a424:	bfb8      	it	lt
 800a426:	3101      	addlt	r1, #1
 800a428:	f7ff fe8e 	bl	800a148 <_Balloc>
 800a42c:	b930      	cbnz	r0, 800a43c <__multiply+0x44>
 800a42e:	4602      	mov	r2, r0
 800a430:	4b44      	ldr	r3, [pc, #272]	; (800a544 <__multiply+0x14c>)
 800a432:	4845      	ldr	r0, [pc, #276]	; (800a548 <__multiply+0x150>)
 800a434:	f240 115d 	movw	r1, #349	; 0x15d
 800a438:	f001 f9de 	bl	800b7f8 <__assert_func>
 800a43c:	f100 0514 	add.w	r5, r0, #20
 800a440:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a444:	462b      	mov	r3, r5
 800a446:	2200      	movs	r2, #0
 800a448:	4543      	cmp	r3, r8
 800a44a:	d321      	bcc.n	800a490 <__multiply+0x98>
 800a44c:	f104 0314 	add.w	r3, r4, #20
 800a450:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a454:	f109 0314 	add.w	r3, r9, #20
 800a458:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a45c:	9202      	str	r2, [sp, #8]
 800a45e:	1b3a      	subs	r2, r7, r4
 800a460:	3a15      	subs	r2, #21
 800a462:	f022 0203 	bic.w	r2, r2, #3
 800a466:	3204      	adds	r2, #4
 800a468:	f104 0115 	add.w	r1, r4, #21
 800a46c:	428f      	cmp	r7, r1
 800a46e:	bf38      	it	cc
 800a470:	2204      	movcc	r2, #4
 800a472:	9201      	str	r2, [sp, #4]
 800a474:	9a02      	ldr	r2, [sp, #8]
 800a476:	9303      	str	r3, [sp, #12]
 800a478:	429a      	cmp	r2, r3
 800a47a:	d80c      	bhi.n	800a496 <__multiply+0x9e>
 800a47c:	2e00      	cmp	r6, #0
 800a47e:	dd03      	ble.n	800a488 <__multiply+0x90>
 800a480:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a484:	2b00      	cmp	r3, #0
 800a486:	d05a      	beq.n	800a53e <__multiply+0x146>
 800a488:	6106      	str	r6, [r0, #16]
 800a48a:	b005      	add	sp, #20
 800a48c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a490:	f843 2b04 	str.w	r2, [r3], #4
 800a494:	e7d8      	b.n	800a448 <__multiply+0x50>
 800a496:	f8b3 a000 	ldrh.w	sl, [r3]
 800a49a:	f1ba 0f00 	cmp.w	sl, #0
 800a49e:	d024      	beq.n	800a4ea <__multiply+0xf2>
 800a4a0:	f104 0e14 	add.w	lr, r4, #20
 800a4a4:	46a9      	mov	r9, r5
 800a4a6:	f04f 0c00 	mov.w	ip, #0
 800a4aa:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a4ae:	f8d9 1000 	ldr.w	r1, [r9]
 800a4b2:	fa1f fb82 	uxth.w	fp, r2
 800a4b6:	b289      	uxth	r1, r1
 800a4b8:	fb0a 110b 	mla	r1, sl, fp, r1
 800a4bc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a4c0:	f8d9 2000 	ldr.w	r2, [r9]
 800a4c4:	4461      	add	r1, ip
 800a4c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a4ca:	fb0a c20b 	mla	r2, sl, fp, ip
 800a4ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a4d2:	b289      	uxth	r1, r1
 800a4d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a4d8:	4577      	cmp	r7, lr
 800a4da:	f849 1b04 	str.w	r1, [r9], #4
 800a4de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a4e2:	d8e2      	bhi.n	800a4aa <__multiply+0xb2>
 800a4e4:	9a01      	ldr	r2, [sp, #4]
 800a4e6:	f845 c002 	str.w	ip, [r5, r2]
 800a4ea:	9a03      	ldr	r2, [sp, #12]
 800a4ec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a4f0:	3304      	adds	r3, #4
 800a4f2:	f1b9 0f00 	cmp.w	r9, #0
 800a4f6:	d020      	beq.n	800a53a <__multiply+0x142>
 800a4f8:	6829      	ldr	r1, [r5, #0]
 800a4fa:	f104 0c14 	add.w	ip, r4, #20
 800a4fe:	46ae      	mov	lr, r5
 800a500:	f04f 0a00 	mov.w	sl, #0
 800a504:	f8bc b000 	ldrh.w	fp, [ip]
 800a508:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a50c:	fb09 220b 	mla	r2, r9, fp, r2
 800a510:	4492      	add	sl, r2
 800a512:	b289      	uxth	r1, r1
 800a514:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a518:	f84e 1b04 	str.w	r1, [lr], #4
 800a51c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a520:	f8be 1000 	ldrh.w	r1, [lr]
 800a524:	0c12      	lsrs	r2, r2, #16
 800a526:	fb09 1102 	mla	r1, r9, r2, r1
 800a52a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a52e:	4567      	cmp	r7, ip
 800a530:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a534:	d8e6      	bhi.n	800a504 <__multiply+0x10c>
 800a536:	9a01      	ldr	r2, [sp, #4]
 800a538:	50a9      	str	r1, [r5, r2]
 800a53a:	3504      	adds	r5, #4
 800a53c:	e79a      	b.n	800a474 <__multiply+0x7c>
 800a53e:	3e01      	subs	r6, #1
 800a540:	e79c      	b.n	800a47c <__multiply+0x84>
 800a542:	bf00      	nop
 800a544:	0800ca70 	.word	0x0800ca70
 800a548:	0800cafc 	.word	0x0800cafc

0800a54c <__pow5mult>:
 800a54c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a550:	4615      	mov	r5, r2
 800a552:	f012 0203 	ands.w	r2, r2, #3
 800a556:	4606      	mov	r6, r0
 800a558:	460f      	mov	r7, r1
 800a55a:	d007      	beq.n	800a56c <__pow5mult+0x20>
 800a55c:	4c25      	ldr	r4, [pc, #148]	; (800a5f4 <__pow5mult+0xa8>)
 800a55e:	3a01      	subs	r2, #1
 800a560:	2300      	movs	r3, #0
 800a562:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a566:	f7ff fe51 	bl	800a20c <__multadd>
 800a56a:	4607      	mov	r7, r0
 800a56c:	10ad      	asrs	r5, r5, #2
 800a56e:	d03d      	beq.n	800a5ec <__pow5mult+0xa0>
 800a570:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a572:	b97c      	cbnz	r4, 800a594 <__pow5mult+0x48>
 800a574:	2010      	movs	r0, #16
 800a576:	f7ff fdbf 	bl	800a0f8 <malloc>
 800a57a:	4602      	mov	r2, r0
 800a57c:	6270      	str	r0, [r6, #36]	; 0x24
 800a57e:	b928      	cbnz	r0, 800a58c <__pow5mult+0x40>
 800a580:	4b1d      	ldr	r3, [pc, #116]	; (800a5f8 <__pow5mult+0xac>)
 800a582:	481e      	ldr	r0, [pc, #120]	; (800a5fc <__pow5mult+0xb0>)
 800a584:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a588:	f001 f936 	bl	800b7f8 <__assert_func>
 800a58c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a590:	6004      	str	r4, [r0, #0]
 800a592:	60c4      	str	r4, [r0, #12]
 800a594:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a598:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a59c:	b94c      	cbnz	r4, 800a5b2 <__pow5mult+0x66>
 800a59e:	f240 2171 	movw	r1, #625	; 0x271
 800a5a2:	4630      	mov	r0, r6
 800a5a4:	f7ff ff12 	bl	800a3cc <__i2b>
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	f8c8 0008 	str.w	r0, [r8, #8]
 800a5ae:	4604      	mov	r4, r0
 800a5b0:	6003      	str	r3, [r0, #0]
 800a5b2:	f04f 0900 	mov.w	r9, #0
 800a5b6:	07eb      	lsls	r3, r5, #31
 800a5b8:	d50a      	bpl.n	800a5d0 <__pow5mult+0x84>
 800a5ba:	4639      	mov	r1, r7
 800a5bc:	4622      	mov	r2, r4
 800a5be:	4630      	mov	r0, r6
 800a5c0:	f7ff ff1a 	bl	800a3f8 <__multiply>
 800a5c4:	4639      	mov	r1, r7
 800a5c6:	4680      	mov	r8, r0
 800a5c8:	4630      	mov	r0, r6
 800a5ca:	f7ff fdfd 	bl	800a1c8 <_Bfree>
 800a5ce:	4647      	mov	r7, r8
 800a5d0:	106d      	asrs	r5, r5, #1
 800a5d2:	d00b      	beq.n	800a5ec <__pow5mult+0xa0>
 800a5d4:	6820      	ldr	r0, [r4, #0]
 800a5d6:	b938      	cbnz	r0, 800a5e8 <__pow5mult+0x9c>
 800a5d8:	4622      	mov	r2, r4
 800a5da:	4621      	mov	r1, r4
 800a5dc:	4630      	mov	r0, r6
 800a5de:	f7ff ff0b 	bl	800a3f8 <__multiply>
 800a5e2:	6020      	str	r0, [r4, #0]
 800a5e4:	f8c0 9000 	str.w	r9, [r0]
 800a5e8:	4604      	mov	r4, r0
 800a5ea:	e7e4      	b.n	800a5b6 <__pow5mult+0x6a>
 800a5ec:	4638      	mov	r0, r7
 800a5ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5f2:	bf00      	nop
 800a5f4:	0800cc48 	.word	0x0800cc48
 800a5f8:	0800c9fe 	.word	0x0800c9fe
 800a5fc:	0800cafc 	.word	0x0800cafc

0800a600 <__lshift>:
 800a600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a604:	460c      	mov	r4, r1
 800a606:	6849      	ldr	r1, [r1, #4]
 800a608:	6923      	ldr	r3, [r4, #16]
 800a60a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a60e:	68a3      	ldr	r3, [r4, #8]
 800a610:	4607      	mov	r7, r0
 800a612:	4691      	mov	r9, r2
 800a614:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a618:	f108 0601 	add.w	r6, r8, #1
 800a61c:	42b3      	cmp	r3, r6
 800a61e:	db0b      	blt.n	800a638 <__lshift+0x38>
 800a620:	4638      	mov	r0, r7
 800a622:	f7ff fd91 	bl	800a148 <_Balloc>
 800a626:	4605      	mov	r5, r0
 800a628:	b948      	cbnz	r0, 800a63e <__lshift+0x3e>
 800a62a:	4602      	mov	r2, r0
 800a62c:	4b2a      	ldr	r3, [pc, #168]	; (800a6d8 <__lshift+0xd8>)
 800a62e:	482b      	ldr	r0, [pc, #172]	; (800a6dc <__lshift+0xdc>)
 800a630:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a634:	f001 f8e0 	bl	800b7f8 <__assert_func>
 800a638:	3101      	adds	r1, #1
 800a63a:	005b      	lsls	r3, r3, #1
 800a63c:	e7ee      	b.n	800a61c <__lshift+0x1c>
 800a63e:	2300      	movs	r3, #0
 800a640:	f100 0114 	add.w	r1, r0, #20
 800a644:	f100 0210 	add.w	r2, r0, #16
 800a648:	4618      	mov	r0, r3
 800a64a:	4553      	cmp	r3, sl
 800a64c:	db37      	blt.n	800a6be <__lshift+0xbe>
 800a64e:	6920      	ldr	r0, [r4, #16]
 800a650:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a654:	f104 0314 	add.w	r3, r4, #20
 800a658:	f019 091f 	ands.w	r9, r9, #31
 800a65c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a660:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a664:	d02f      	beq.n	800a6c6 <__lshift+0xc6>
 800a666:	f1c9 0e20 	rsb	lr, r9, #32
 800a66a:	468a      	mov	sl, r1
 800a66c:	f04f 0c00 	mov.w	ip, #0
 800a670:	681a      	ldr	r2, [r3, #0]
 800a672:	fa02 f209 	lsl.w	r2, r2, r9
 800a676:	ea42 020c 	orr.w	r2, r2, ip
 800a67a:	f84a 2b04 	str.w	r2, [sl], #4
 800a67e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a682:	4298      	cmp	r0, r3
 800a684:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a688:	d8f2      	bhi.n	800a670 <__lshift+0x70>
 800a68a:	1b03      	subs	r3, r0, r4
 800a68c:	3b15      	subs	r3, #21
 800a68e:	f023 0303 	bic.w	r3, r3, #3
 800a692:	3304      	adds	r3, #4
 800a694:	f104 0215 	add.w	r2, r4, #21
 800a698:	4290      	cmp	r0, r2
 800a69a:	bf38      	it	cc
 800a69c:	2304      	movcc	r3, #4
 800a69e:	f841 c003 	str.w	ip, [r1, r3]
 800a6a2:	f1bc 0f00 	cmp.w	ip, #0
 800a6a6:	d001      	beq.n	800a6ac <__lshift+0xac>
 800a6a8:	f108 0602 	add.w	r6, r8, #2
 800a6ac:	3e01      	subs	r6, #1
 800a6ae:	4638      	mov	r0, r7
 800a6b0:	612e      	str	r6, [r5, #16]
 800a6b2:	4621      	mov	r1, r4
 800a6b4:	f7ff fd88 	bl	800a1c8 <_Bfree>
 800a6b8:	4628      	mov	r0, r5
 800a6ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6be:	f842 0f04 	str.w	r0, [r2, #4]!
 800a6c2:	3301      	adds	r3, #1
 800a6c4:	e7c1      	b.n	800a64a <__lshift+0x4a>
 800a6c6:	3904      	subs	r1, #4
 800a6c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6cc:	f841 2f04 	str.w	r2, [r1, #4]!
 800a6d0:	4298      	cmp	r0, r3
 800a6d2:	d8f9      	bhi.n	800a6c8 <__lshift+0xc8>
 800a6d4:	e7ea      	b.n	800a6ac <__lshift+0xac>
 800a6d6:	bf00      	nop
 800a6d8:	0800ca70 	.word	0x0800ca70
 800a6dc:	0800cafc 	.word	0x0800cafc

0800a6e0 <__mcmp>:
 800a6e0:	b530      	push	{r4, r5, lr}
 800a6e2:	6902      	ldr	r2, [r0, #16]
 800a6e4:	690c      	ldr	r4, [r1, #16]
 800a6e6:	1b12      	subs	r2, r2, r4
 800a6e8:	d10e      	bne.n	800a708 <__mcmp+0x28>
 800a6ea:	f100 0314 	add.w	r3, r0, #20
 800a6ee:	3114      	adds	r1, #20
 800a6f0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a6f4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a6f8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a6fc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a700:	42a5      	cmp	r5, r4
 800a702:	d003      	beq.n	800a70c <__mcmp+0x2c>
 800a704:	d305      	bcc.n	800a712 <__mcmp+0x32>
 800a706:	2201      	movs	r2, #1
 800a708:	4610      	mov	r0, r2
 800a70a:	bd30      	pop	{r4, r5, pc}
 800a70c:	4283      	cmp	r3, r0
 800a70e:	d3f3      	bcc.n	800a6f8 <__mcmp+0x18>
 800a710:	e7fa      	b.n	800a708 <__mcmp+0x28>
 800a712:	f04f 32ff 	mov.w	r2, #4294967295
 800a716:	e7f7      	b.n	800a708 <__mcmp+0x28>

0800a718 <__mdiff>:
 800a718:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a71c:	460c      	mov	r4, r1
 800a71e:	4606      	mov	r6, r0
 800a720:	4611      	mov	r1, r2
 800a722:	4620      	mov	r0, r4
 800a724:	4690      	mov	r8, r2
 800a726:	f7ff ffdb 	bl	800a6e0 <__mcmp>
 800a72a:	1e05      	subs	r5, r0, #0
 800a72c:	d110      	bne.n	800a750 <__mdiff+0x38>
 800a72e:	4629      	mov	r1, r5
 800a730:	4630      	mov	r0, r6
 800a732:	f7ff fd09 	bl	800a148 <_Balloc>
 800a736:	b930      	cbnz	r0, 800a746 <__mdiff+0x2e>
 800a738:	4b3a      	ldr	r3, [pc, #232]	; (800a824 <__mdiff+0x10c>)
 800a73a:	4602      	mov	r2, r0
 800a73c:	f240 2132 	movw	r1, #562	; 0x232
 800a740:	4839      	ldr	r0, [pc, #228]	; (800a828 <__mdiff+0x110>)
 800a742:	f001 f859 	bl	800b7f8 <__assert_func>
 800a746:	2301      	movs	r3, #1
 800a748:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a74c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a750:	bfa4      	itt	ge
 800a752:	4643      	movge	r3, r8
 800a754:	46a0      	movge	r8, r4
 800a756:	4630      	mov	r0, r6
 800a758:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a75c:	bfa6      	itte	ge
 800a75e:	461c      	movge	r4, r3
 800a760:	2500      	movge	r5, #0
 800a762:	2501      	movlt	r5, #1
 800a764:	f7ff fcf0 	bl	800a148 <_Balloc>
 800a768:	b920      	cbnz	r0, 800a774 <__mdiff+0x5c>
 800a76a:	4b2e      	ldr	r3, [pc, #184]	; (800a824 <__mdiff+0x10c>)
 800a76c:	4602      	mov	r2, r0
 800a76e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a772:	e7e5      	b.n	800a740 <__mdiff+0x28>
 800a774:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a778:	6926      	ldr	r6, [r4, #16]
 800a77a:	60c5      	str	r5, [r0, #12]
 800a77c:	f104 0914 	add.w	r9, r4, #20
 800a780:	f108 0514 	add.w	r5, r8, #20
 800a784:	f100 0e14 	add.w	lr, r0, #20
 800a788:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a78c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a790:	f108 0210 	add.w	r2, r8, #16
 800a794:	46f2      	mov	sl, lr
 800a796:	2100      	movs	r1, #0
 800a798:	f859 3b04 	ldr.w	r3, [r9], #4
 800a79c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a7a0:	fa1f f883 	uxth.w	r8, r3
 800a7a4:	fa11 f18b 	uxtah	r1, r1, fp
 800a7a8:	0c1b      	lsrs	r3, r3, #16
 800a7aa:	eba1 0808 	sub.w	r8, r1, r8
 800a7ae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a7b2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a7b6:	fa1f f888 	uxth.w	r8, r8
 800a7ba:	1419      	asrs	r1, r3, #16
 800a7bc:	454e      	cmp	r6, r9
 800a7be:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a7c2:	f84a 3b04 	str.w	r3, [sl], #4
 800a7c6:	d8e7      	bhi.n	800a798 <__mdiff+0x80>
 800a7c8:	1b33      	subs	r3, r6, r4
 800a7ca:	3b15      	subs	r3, #21
 800a7cc:	f023 0303 	bic.w	r3, r3, #3
 800a7d0:	3304      	adds	r3, #4
 800a7d2:	3415      	adds	r4, #21
 800a7d4:	42a6      	cmp	r6, r4
 800a7d6:	bf38      	it	cc
 800a7d8:	2304      	movcc	r3, #4
 800a7da:	441d      	add	r5, r3
 800a7dc:	4473      	add	r3, lr
 800a7de:	469e      	mov	lr, r3
 800a7e0:	462e      	mov	r6, r5
 800a7e2:	4566      	cmp	r6, ip
 800a7e4:	d30e      	bcc.n	800a804 <__mdiff+0xec>
 800a7e6:	f10c 0203 	add.w	r2, ip, #3
 800a7ea:	1b52      	subs	r2, r2, r5
 800a7ec:	f022 0203 	bic.w	r2, r2, #3
 800a7f0:	3d03      	subs	r5, #3
 800a7f2:	45ac      	cmp	ip, r5
 800a7f4:	bf38      	it	cc
 800a7f6:	2200      	movcc	r2, #0
 800a7f8:	441a      	add	r2, r3
 800a7fa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a7fe:	b17b      	cbz	r3, 800a820 <__mdiff+0x108>
 800a800:	6107      	str	r7, [r0, #16]
 800a802:	e7a3      	b.n	800a74c <__mdiff+0x34>
 800a804:	f856 8b04 	ldr.w	r8, [r6], #4
 800a808:	fa11 f288 	uxtah	r2, r1, r8
 800a80c:	1414      	asrs	r4, r2, #16
 800a80e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a812:	b292      	uxth	r2, r2
 800a814:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a818:	f84e 2b04 	str.w	r2, [lr], #4
 800a81c:	1421      	asrs	r1, r4, #16
 800a81e:	e7e0      	b.n	800a7e2 <__mdiff+0xca>
 800a820:	3f01      	subs	r7, #1
 800a822:	e7ea      	b.n	800a7fa <__mdiff+0xe2>
 800a824:	0800ca70 	.word	0x0800ca70
 800a828:	0800cafc 	.word	0x0800cafc

0800a82c <__ulp>:
 800a82c:	b082      	sub	sp, #8
 800a82e:	ed8d 0b00 	vstr	d0, [sp]
 800a832:	9b01      	ldr	r3, [sp, #4]
 800a834:	4912      	ldr	r1, [pc, #72]	; (800a880 <__ulp+0x54>)
 800a836:	4019      	ands	r1, r3
 800a838:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a83c:	2900      	cmp	r1, #0
 800a83e:	dd05      	ble.n	800a84c <__ulp+0x20>
 800a840:	2200      	movs	r2, #0
 800a842:	460b      	mov	r3, r1
 800a844:	ec43 2b10 	vmov	d0, r2, r3
 800a848:	b002      	add	sp, #8
 800a84a:	4770      	bx	lr
 800a84c:	4249      	negs	r1, r1
 800a84e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a852:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a856:	f04f 0200 	mov.w	r2, #0
 800a85a:	f04f 0300 	mov.w	r3, #0
 800a85e:	da04      	bge.n	800a86a <__ulp+0x3e>
 800a860:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a864:	fa41 f300 	asr.w	r3, r1, r0
 800a868:	e7ec      	b.n	800a844 <__ulp+0x18>
 800a86a:	f1a0 0114 	sub.w	r1, r0, #20
 800a86e:	291e      	cmp	r1, #30
 800a870:	bfda      	itte	le
 800a872:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a876:	fa20 f101 	lsrle.w	r1, r0, r1
 800a87a:	2101      	movgt	r1, #1
 800a87c:	460a      	mov	r2, r1
 800a87e:	e7e1      	b.n	800a844 <__ulp+0x18>
 800a880:	7ff00000 	.word	0x7ff00000

0800a884 <__b2d>:
 800a884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a886:	6905      	ldr	r5, [r0, #16]
 800a888:	f100 0714 	add.w	r7, r0, #20
 800a88c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a890:	1f2e      	subs	r6, r5, #4
 800a892:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a896:	4620      	mov	r0, r4
 800a898:	f7ff fd48 	bl	800a32c <__hi0bits>
 800a89c:	f1c0 0320 	rsb	r3, r0, #32
 800a8a0:	280a      	cmp	r0, #10
 800a8a2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a920 <__b2d+0x9c>
 800a8a6:	600b      	str	r3, [r1, #0]
 800a8a8:	dc14      	bgt.n	800a8d4 <__b2d+0x50>
 800a8aa:	f1c0 0e0b 	rsb	lr, r0, #11
 800a8ae:	fa24 f10e 	lsr.w	r1, r4, lr
 800a8b2:	42b7      	cmp	r7, r6
 800a8b4:	ea41 030c 	orr.w	r3, r1, ip
 800a8b8:	bf34      	ite	cc
 800a8ba:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a8be:	2100      	movcs	r1, #0
 800a8c0:	3015      	adds	r0, #21
 800a8c2:	fa04 f000 	lsl.w	r0, r4, r0
 800a8c6:	fa21 f10e 	lsr.w	r1, r1, lr
 800a8ca:	ea40 0201 	orr.w	r2, r0, r1
 800a8ce:	ec43 2b10 	vmov	d0, r2, r3
 800a8d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8d4:	42b7      	cmp	r7, r6
 800a8d6:	bf3a      	itte	cc
 800a8d8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a8dc:	f1a5 0608 	subcc.w	r6, r5, #8
 800a8e0:	2100      	movcs	r1, #0
 800a8e2:	380b      	subs	r0, #11
 800a8e4:	d017      	beq.n	800a916 <__b2d+0x92>
 800a8e6:	f1c0 0c20 	rsb	ip, r0, #32
 800a8ea:	fa04 f500 	lsl.w	r5, r4, r0
 800a8ee:	42be      	cmp	r6, r7
 800a8f0:	fa21 f40c 	lsr.w	r4, r1, ip
 800a8f4:	ea45 0504 	orr.w	r5, r5, r4
 800a8f8:	bf8c      	ite	hi
 800a8fa:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a8fe:	2400      	movls	r4, #0
 800a900:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a904:	fa01 f000 	lsl.w	r0, r1, r0
 800a908:	fa24 f40c 	lsr.w	r4, r4, ip
 800a90c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a910:	ea40 0204 	orr.w	r2, r0, r4
 800a914:	e7db      	b.n	800a8ce <__b2d+0x4a>
 800a916:	ea44 030c 	orr.w	r3, r4, ip
 800a91a:	460a      	mov	r2, r1
 800a91c:	e7d7      	b.n	800a8ce <__b2d+0x4a>
 800a91e:	bf00      	nop
 800a920:	3ff00000 	.word	0x3ff00000

0800a924 <__d2b>:
 800a924:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a928:	4689      	mov	r9, r1
 800a92a:	2101      	movs	r1, #1
 800a92c:	ec57 6b10 	vmov	r6, r7, d0
 800a930:	4690      	mov	r8, r2
 800a932:	f7ff fc09 	bl	800a148 <_Balloc>
 800a936:	4604      	mov	r4, r0
 800a938:	b930      	cbnz	r0, 800a948 <__d2b+0x24>
 800a93a:	4602      	mov	r2, r0
 800a93c:	4b25      	ldr	r3, [pc, #148]	; (800a9d4 <__d2b+0xb0>)
 800a93e:	4826      	ldr	r0, [pc, #152]	; (800a9d8 <__d2b+0xb4>)
 800a940:	f240 310a 	movw	r1, #778	; 0x30a
 800a944:	f000 ff58 	bl	800b7f8 <__assert_func>
 800a948:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a94c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a950:	bb35      	cbnz	r5, 800a9a0 <__d2b+0x7c>
 800a952:	2e00      	cmp	r6, #0
 800a954:	9301      	str	r3, [sp, #4]
 800a956:	d028      	beq.n	800a9aa <__d2b+0x86>
 800a958:	4668      	mov	r0, sp
 800a95a:	9600      	str	r6, [sp, #0]
 800a95c:	f7ff fd06 	bl	800a36c <__lo0bits>
 800a960:	9900      	ldr	r1, [sp, #0]
 800a962:	b300      	cbz	r0, 800a9a6 <__d2b+0x82>
 800a964:	9a01      	ldr	r2, [sp, #4]
 800a966:	f1c0 0320 	rsb	r3, r0, #32
 800a96a:	fa02 f303 	lsl.w	r3, r2, r3
 800a96e:	430b      	orrs	r3, r1
 800a970:	40c2      	lsrs	r2, r0
 800a972:	6163      	str	r3, [r4, #20]
 800a974:	9201      	str	r2, [sp, #4]
 800a976:	9b01      	ldr	r3, [sp, #4]
 800a978:	61a3      	str	r3, [r4, #24]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	bf14      	ite	ne
 800a97e:	2202      	movne	r2, #2
 800a980:	2201      	moveq	r2, #1
 800a982:	6122      	str	r2, [r4, #16]
 800a984:	b1d5      	cbz	r5, 800a9bc <__d2b+0x98>
 800a986:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a98a:	4405      	add	r5, r0
 800a98c:	f8c9 5000 	str.w	r5, [r9]
 800a990:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a994:	f8c8 0000 	str.w	r0, [r8]
 800a998:	4620      	mov	r0, r4
 800a99a:	b003      	add	sp, #12
 800a99c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a9a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a9a4:	e7d5      	b.n	800a952 <__d2b+0x2e>
 800a9a6:	6161      	str	r1, [r4, #20]
 800a9a8:	e7e5      	b.n	800a976 <__d2b+0x52>
 800a9aa:	a801      	add	r0, sp, #4
 800a9ac:	f7ff fcde 	bl	800a36c <__lo0bits>
 800a9b0:	9b01      	ldr	r3, [sp, #4]
 800a9b2:	6163      	str	r3, [r4, #20]
 800a9b4:	2201      	movs	r2, #1
 800a9b6:	6122      	str	r2, [r4, #16]
 800a9b8:	3020      	adds	r0, #32
 800a9ba:	e7e3      	b.n	800a984 <__d2b+0x60>
 800a9bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a9c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a9c4:	f8c9 0000 	str.w	r0, [r9]
 800a9c8:	6918      	ldr	r0, [r3, #16]
 800a9ca:	f7ff fcaf 	bl	800a32c <__hi0bits>
 800a9ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a9d2:	e7df      	b.n	800a994 <__d2b+0x70>
 800a9d4:	0800ca70 	.word	0x0800ca70
 800a9d8:	0800cafc 	.word	0x0800cafc

0800a9dc <__ratio>:
 800a9dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9e0:	4688      	mov	r8, r1
 800a9e2:	4669      	mov	r1, sp
 800a9e4:	4681      	mov	r9, r0
 800a9e6:	f7ff ff4d 	bl	800a884 <__b2d>
 800a9ea:	a901      	add	r1, sp, #4
 800a9ec:	4640      	mov	r0, r8
 800a9ee:	ec55 4b10 	vmov	r4, r5, d0
 800a9f2:	f7ff ff47 	bl	800a884 <__b2d>
 800a9f6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a9fa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a9fe:	eba3 0c02 	sub.w	ip, r3, r2
 800aa02:	e9dd 3200 	ldrd	r3, r2, [sp]
 800aa06:	1a9b      	subs	r3, r3, r2
 800aa08:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800aa0c:	ec51 0b10 	vmov	r0, r1, d0
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	bfd6      	itet	le
 800aa14:	460a      	movle	r2, r1
 800aa16:	462a      	movgt	r2, r5
 800aa18:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800aa1c:	468b      	mov	fp, r1
 800aa1e:	462f      	mov	r7, r5
 800aa20:	bfd4      	ite	le
 800aa22:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800aa26:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800aa2a:	4620      	mov	r0, r4
 800aa2c:	ee10 2a10 	vmov	r2, s0
 800aa30:	465b      	mov	r3, fp
 800aa32:	4639      	mov	r1, r7
 800aa34:	f7f5 ff1a 	bl	800086c <__aeabi_ddiv>
 800aa38:	ec41 0b10 	vmov	d0, r0, r1
 800aa3c:	b003      	add	sp, #12
 800aa3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aa42 <__copybits>:
 800aa42:	3901      	subs	r1, #1
 800aa44:	b570      	push	{r4, r5, r6, lr}
 800aa46:	1149      	asrs	r1, r1, #5
 800aa48:	6914      	ldr	r4, [r2, #16]
 800aa4a:	3101      	adds	r1, #1
 800aa4c:	f102 0314 	add.w	r3, r2, #20
 800aa50:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800aa54:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800aa58:	1f05      	subs	r5, r0, #4
 800aa5a:	42a3      	cmp	r3, r4
 800aa5c:	d30c      	bcc.n	800aa78 <__copybits+0x36>
 800aa5e:	1aa3      	subs	r3, r4, r2
 800aa60:	3b11      	subs	r3, #17
 800aa62:	f023 0303 	bic.w	r3, r3, #3
 800aa66:	3211      	adds	r2, #17
 800aa68:	42a2      	cmp	r2, r4
 800aa6a:	bf88      	it	hi
 800aa6c:	2300      	movhi	r3, #0
 800aa6e:	4418      	add	r0, r3
 800aa70:	2300      	movs	r3, #0
 800aa72:	4288      	cmp	r0, r1
 800aa74:	d305      	bcc.n	800aa82 <__copybits+0x40>
 800aa76:	bd70      	pop	{r4, r5, r6, pc}
 800aa78:	f853 6b04 	ldr.w	r6, [r3], #4
 800aa7c:	f845 6f04 	str.w	r6, [r5, #4]!
 800aa80:	e7eb      	b.n	800aa5a <__copybits+0x18>
 800aa82:	f840 3b04 	str.w	r3, [r0], #4
 800aa86:	e7f4      	b.n	800aa72 <__copybits+0x30>

0800aa88 <__any_on>:
 800aa88:	f100 0214 	add.w	r2, r0, #20
 800aa8c:	6900      	ldr	r0, [r0, #16]
 800aa8e:	114b      	asrs	r3, r1, #5
 800aa90:	4298      	cmp	r0, r3
 800aa92:	b510      	push	{r4, lr}
 800aa94:	db11      	blt.n	800aaba <__any_on+0x32>
 800aa96:	dd0a      	ble.n	800aaae <__any_on+0x26>
 800aa98:	f011 011f 	ands.w	r1, r1, #31
 800aa9c:	d007      	beq.n	800aaae <__any_on+0x26>
 800aa9e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800aaa2:	fa24 f001 	lsr.w	r0, r4, r1
 800aaa6:	fa00 f101 	lsl.w	r1, r0, r1
 800aaaa:	428c      	cmp	r4, r1
 800aaac:	d10b      	bne.n	800aac6 <__any_on+0x3e>
 800aaae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800aab2:	4293      	cmp	r3, r2
 800aab4:	d803      	bhi.n	800aabe <__any_on+0x36>
 800aab6:	2000      	movs	r0, #0
 800aab8:	bd10      	pop	{r4, pc}
 800aaba:	4603      	mov	r3, r0
 800aabc:	e7f7      	b.n	800aaae <__any_on+0x26>
 800aabe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aac2:	2900      	cmp	r1, #0
 800aac4:	d0f5      	beq.n	800aab2 <__any_on+0x2a>
 800aac6:	2001      	movs	r0, #1
 800aac8:	e7f6      	b.n	800aab8 <__any_on+0x30>

0800aaca <_calloc_r>:
 800aaca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aacc:	fba1 2402 	umull	r2, r4, r1, r2
 800aad0:	b94c      	cbnz	r4, 800aae6 <_calloc_r+0x1c>
 800aad2:	4611      	mov	r1, r2
 800aad4:	9201      	str	r2, [sp, #4]
 800aad6:	f000 f87b 	bl	800abd0 <_malloc_r>
 800aada:	9a01      	ldr	r2, [sp, #4]
 800aadc:	4605      	mov	r5, r0
 800aade:	b930      	cbnz	r0, 800aaee <_calloc_r+0x24>
 800aae0:	4628      	mov	r0, r5
 800aae2:	b003      	add	sp, #12
 800aae4:	bd30      	pop	{r4, r5, pc}
 800aae6:	220c      	movs	r2, #12
 800aae8:	6002      	str	r2, [r0, #0]
 800aaea:	2500      	movs	r5, #0
 800aaec:	e7f8      	b.n	800aae0 <_calloc_r+0x16>
 800aaee:	4621      	mov	r1, r4
 800aaf0:	f7fc fb02 	bl	80070f8 <memset>
 800aaf4:	e7f4      	b.n	800aae0 <_calloc_r+0x16>
	...

0800aaf8 <_free_r>:
 800aaf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aafa:	2900      	cmp	r1, #0
 800aafc:	d044      	beq.n	800ab88 <_free_r+0x90>
 800aafe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab02:	9001      	str	r0, [sp, #4]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	f1a1 0404 	sub.w	r4, r1, #4
 800ab0a:	bfb8      	it	lt
 800ab0c:	18e4      	addlt	r4, r4, r3
 800ab0e:	f001 f877 	bl	800bc00 <__malloc_lock>
 800ab12:	4a1e      	ldr	r2, [pc, #120]	; (800ab8c <_free_r+0x94>)
 800ab14:	9801      	ldr	r0, [sp, #4]
 800ab16:	6813      	ldr	r3, [r2, #0]
 800ab18:	b933      	cbnz	r3, 800ab28 <_free_r+0x30>
 800ab1a:	6063      	str	r3, [r4, #4]
 800ab1c:	6014      	str	r4, [r2, #0]
 800ab1e:	b003      	add	sp, #12
 800ab20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ab24:	f001 b872 	b.w	800bc0c <__malloc_unlock>
 800ab28:	42a3      	cmp	r3, r4
 800ab2a:	d908      	bls.n	800ab3e <_free_r+0x46>
 800ab2c:	6825      	ldr	r5, [r4, #0]
 800ab2e:	1961      	adds	r1, r4, r5
 800ab30:	428b      	cmp	r3, r1
 800ab32:	bf01      	itttt	eq
 800ab34:	6819      	ldreq	r1, [r3, #0]
 800ab36:	685b      	ldreq	r3, [r3, #4]
 800ab38:	1949      	addeq	r1, r1, r5
 800ab3a:	6021      	streq	r1, [r4, #0]
 800ab3c:	e7ed      	b.n	800ab1a <_free_r+0x22>
 800ab3e:	461a      	mov	r2, r3
 800ab40:	685b      	ldr	r3, [r3, #4]
 800ab42:	b10b      	cbz	r3, 800ab48 <_free_r+0x50>
 800ab44:	42a3      	cmp	r3, r4
 800ab46:	d9fa      	bls.n	800ab3e <_free_r+0x46>
 800ab48:	6811      	ldr	r1, [r2, #0]
 800ab4a:	1855      	adds	r5, r2, r1
 800ab4c:	42a5      	cmp	r5, r4
 800ab4e:	d10b      	bne.n	800ab68 <_free_r+0x70>
 800ab50:	6824      	ldr	r4, [r4, #0]
 800ab52:	4421      	add	r1, r4
 800ab54:	1854      	adds	r4, r2, r1
 800ab56:	42a3      	cmp	r3, r4
 800ab58:	6011      	str	r1, [r2, #0]
 800ab5a:	d1e0      	bne.n	800ab1e <_free_r+0x26>
 800ab5c:	681c      	ldr	r4, [r3, #0]
 800ab5e:	685b      	ldr	r3, [r3, #4]
 800ab60:	6053      	str	r3, [r2, #4]
 800ab62:	4421      	add	r1, r4
 800ab64:	6011      	str	r1, [r2, #0]
 800ab66:	e7da      	b.n	800ab1e <_free_r+0x26>
 800ab68:	d902      	bls.n	800ab70 <_free_r+0x78>
 800ab6a:	230c      	movs	r3, #12
 800ab6c:	6003      	str	r3, [r0, #0]
 800ab6e:	e7d6      	b.n	800ab1e <_free_r+0x26>
 800ab70:	6825      	ldr	r5, [r4, #0]
 800ab72:	1961      	adds	r1, r4, r5
 800ab74:	428b      	cmp	r3, r1
 800ab76:	bf04      	itt	eq
 800ab78:	6819      	ldreq	r1, [r3, #0]
 800ab7a:	685b      	ldreq	r3, [r3, #4]
 800ab7c:	6063      	str	r3, [r4, #4]
 800ab7e:	bf04      	itt	eq
 800ab80:	1949      	addeq	r1, r1, r5
 800ab82:	6021      	streq	r1, [r4, #0]
 800ab84:	6054      	str	r4, [r2, #4]
 800ab86:	e7ca      	b.n	800ab1e <_free_r+0x26>
 800ab88:	b003      	add	sp, #12
 800ab8a:	bd30      	pop	{r4, r5, pc}
 800ab8c:	200004cc 	.word	0x200004cc

0800ab90 <sbrk_aligned>:
 800ab90:	b570      	push	{r4, r5, r6, lr}
 800ab92:	4e0e      	ldr	r6, [pc, #56]	; (800abcc <sbrk_aligned+0x3c>)
 800ab94:	460c      	mov	r4, r1
 800ab96:	6831      	ldr	r1, [r6, #0]
 800ab98:	4605      	mov	r5, r0
 800ab9a:	b911      	cbnz	r1, 800aba2 <sbrk_aligned+0x12>
 800ab9c:	f000 fd28 	bl	800b5f0 <_sbrk_r>
 800aba0:	6030      	str	r0, [r6, #0]
 800aba2:	4621      	mov	r1, r4
 800aba4:	4628      	mov	r0, r5
 800aba6:	f000 fd23 	bl	800b5f0 <_sbrk_r>
 800abaa:	1c43      	adds	r3, r0, #1
 800abac:	d00a      	beq.n	800abc4 <sbrk_aligned+0x34>
 800abae:	1cc4      	adds	r4, r0, #3
 800abb0:	f024 0403 	bic.w	r4, r4, #3
 800abb4:	42a0      	cmp	r0, r4
 800abb6:	d007      	beq.n	800abc8 <sbrk_aligned+0x38>
 800abb8:	1a21      	subs	r1, r4, r0
 800abba:	4628      	mov	r0, r5
 800abbc:	f000 fd18 	bl	800b5f0 <_sbrk_r>
 800abc0:	3001      	adds	r0, #1
 800abc2:	d101      	bne.n	800abc8 <sbrk_aligned+0x38>
 800abc4:	f04f 34ff 	mov.w	r4, #4294967295
 800abc8:	4620      	mov	r0, r4
 800abca:	bd70      	pop	{r4, r5, r6, pc}
 800abcc:	200004d0 	.word	0x200004d0

0800abd0 <_malloc_r>:
 800abd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abd4:	1ccd      	adds	r5, r1, #3
 800abd6:	f025 0503 	bic.w	r5, r5, #3
 800abda:	3508      	adds	r5, #8
 800abdc:	2d0c      	cmp	r5, #12
 800abde:	bf38      	it	cc
 800abe0:	250c      	movcc	r5, #12
 800abe2:	2d00      	cmp	r5, #0
 800abe4:	4607      	mov	r7, r0
 800abe6:	db01      	blt.n	800abec <_malloc_r+0x1c>
 800abe8:	42a9      	cmp	r1, r5
 800abea:	d905      	bls.n	800abf8 <_malloc_r+0x28>
 800abec:	230c      	movs	r3, #12
 800abee:	603b      	str	r3, [r7, #0]
 800abf0:	2600      	movs	r6, #0
 800abf2:	4630      	mov	r0, r6
 800abf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abf8:	4e2e      	ldr	r6, [pc, #184]	; (800acb4 <_malloc_r+0xe4>)
 800abfa:	f001 f801 	bl	800bc00 <__malloc_lock>
 800abfe:	6833      	ldr	r3, [r6, #0]
 800ac00:	461c      	mov	r4, r3
 800ac02:	bb34      	cbnz	r4, 800ac52 <_malloc_r+0x82>
 800ac04:	4629      	mov	r1, r5
 800ac06:	4638      	mov	r0, r7
 800ac08:	f7ff ffc2 	bl	800ab90 <sbrk_aligned>
 800ac0c:	1c43      	adds	r3, r0, #1
 800ac0e:	4604      	mov	r4, r0
 800ac10:	d14d      	bne.n	800acae <_malloc_r+0xde>
 800ac12:	6834      	ldr	r4, [r6, #0]
 800ac14:	4626      	mov	r6, r4
 800ac16:	2e00      	cmp	r6, #0
 800ac18:	d140      	bne.n	800ac9c <_malloc_r+0xcc>
 800ac1a:	6823      	ldr	r3, [r4, #0]
 800ac1c:	4631      	mov	r1, r6
 800ac1e:	4638      	mov	r0, r7
 800ac20:	eb04 0803 	add.w	r8, r4, r3
 800ac24:	f000 fce4 	bl	800b5f0 <_sbrk_r>
 800ac28:	4580      	cmp	r8, r0
 800ac2a:	d13a      	bne.n	800aca2 <_malloc_r+0xd2>
 800ac2c:	6821      	ldr	r1, [r4, #0]
 800ac2e:	3503      	adds	r5, #3
 800ac30:	1a6d      	subs	r5, r5, r1
 800ac32:	f025 0503 	bic.w	r5, r5, #3
 800ac36:	3508      	adds	r5, #8
 800ac38:	2d0c      	cmp	r5, #12
 800ac3a:	bf38      	it	cc
 800ac3c:	250c      	movcc	r5, #12
 800ac3e:	4629      	mov	r1, r5
 800ac40:	4638      	mov	r0, r7
 800ac42:	f7ff ffa5 	bl	800ab90 <sbrk_aligned>
 800ac46:	3001      	adds	r0, #1
 800ac48:	d02b      	beq.n	800aca2 <_malloc_r+0xd2>
 800ac4a:	6823      	ldr	r3, [r4, #0]
 800ac4c:	442b      	add	r3, r5
 800ac4e:	6023      	str	r3, [r4, #0]
 800ac50:	e00e      	b.n	800ac70 <_malloc_r+0xa0>
 800ac52:	6822      	ldr	r2, [r4, #0]
 800ac54:	1b52      	subs	r2, r2, r5
 800ac56:	d41e      	bmi.n	800ac96 <_malloc_r+0xc6>
 800ac58:	2a0b      	cmp	r2, #11
 800ac5a:	d916      	bls.n	800ac8a <_malloc_r+0xba>
 800ac5c:	1961      	adds	r1, r4, r5
 800ac5e:	42a3      	cmp	r3, r4
 800ac60:	6025      	str	r5, [r4, #0]
 800ac62:	bf18      	it	ne
 800ac64:	6059      	strne	r1, [r3, #4]
 800ac66:	6863      	ldr	r3, [r4, #4]
 800ac68:	bf08      	it	eq
 800ac6a:	6031      	streq	r1, [r6, #0]
 800ac6c:	5162      	str	r2, [r4, r5]
 800ac6e:	604b      	str	r3, [r1, #4]
 800ac70:	4638      	mov	r0, r7
 800ac72:	f104 060b 	add.w	r6, r4, #11
 800ac76:	f000 ffc9 	bl	800bc0c <__malloc_unlock>
 800ac7a:	f026 0607 	bic.w	r6, r6, #7
 800ac7e:	1d23      	adds	r3, r4, #4
 800ac80:	1af2      	subs	r2, r6, r3
 800ac82:	d0b6      	beq.n	800abf2 <_malloc_r+0x22>
 800ac84:	1b9b      	subs	r3, r3, r6
 800ac86:	50a3      	str	r3, [r4, r2]
 800ac88:	e7b3      	b.n	800abf2 <_malloc_r+0x22>
 800ac8a:	6862      	ldr	r2, [r4, #4]
 800ac8c:	42a3      	cmp	r3, r4
 800ac8e:	bf0c      	ite	eq
 800ac90:	6032      	streq	r2, [r6, #0]
 800ac92:	605a      	strne	r2, [r3, #4]
 800ac94:	e7ec      	b.n	800ac70 <_malloc_r+0xa0>
 800ac96:	4623      	mov	r3, r4
 800ac98:	6864      	ldr	r4, [r4, #4]
 800ac9a:	e7b2      	b.n	800ac02 <_malloc_r+0x32>
 800ac9c:	4634      	mov	r4, r6
 800ac9e:	6876      	ldr	r6, [r6, #4]
 800aca0:	e7b9      	b.n	800ac16 <_malloc_r+0x46>
 800aca2:	230c      	movs	r3, #12
 800aca4:	603b      	str	r3, [r7, #0]
 800aca6:	4638      	mov	r0, r7
 800aca8:	f000 ffb0 	bl	800bc0c <__malloc_unlock>
 800acac:	e7a1      	b.n	800abf2 <_malloc_r+0x22>
 800acae:	6025      	str	r5, [r4, #0]
 800acb0:	e7de      	b.n	800ac70 <_malloc_r+0xa0>
 800acb2:	bf00      	nop
 800acb4:	200004cc 	.word	0x200004cc

0800acb8 <__ssputs_r>:
 800acb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acbc:	688e      	ldr	r6, [r1, #8]
 800acbe:	429e      	cmp	r6, r3
 800acc0:	4682      	mov	sl, r0
 800acc2:	460c      	mov	r4, r1
 800acc4:	4690      	mov	r8, r2
 800acc6:	461f      	mov	r7, r3
 800acc8:	d838      	bhi.n	800ad3c <__ssputs_r+0x84>
 800acca:	898a      	ldrh	r2, [r1, #12]
 800accc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800acd0:	d032      	beq.n	800ad38 <__ssputs_r+0x80>
 800acd2:	6825      	ldr	r5, [r4, #0]
 800acd4:	6909      	ldr	r1, [r1, #16]
 800acd6:	eba5 0901 	sub.w	r9, r5, r1
 800acda:	6965      	ldr	r5, [r4, #20]
 800acdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ace0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ace4:	3301      	adds	r3, #1
 800ace6:	444b      	add	r3, r9
 800ace8:	106d      	asrs	r5, r5, #1
 800acea:	429d      	cmp	r5, r3
 800acec:	bf38      	it	cc
 800acee:	461d      	movcc	r5, r3
 800acf0:	0553      	lsls	r3, r2, #21
 800acf2:	d531      	bpl.n	800ad58 <__ssputs_r+0xa0>
 800acf4:	4629      	mov	r1, r5
 800acf6:	f7ff ff6b 	bl	800abd0 <_malloc_r>
 800acfa:	4606      	mov	r6, r0
 800acfc:	b950      	cbnz	r0, 800ad14 <__ssputs_r+0x5c>
 800acfe:	230c      	movs	r3, #12
 800ad00:	f8ca 3000 	str.w	r3, [sl]
 800ad04:	89a3      	ldrh	r3, [r4, #12]
 800ad06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad0a:	81a3      	strh	r3, [r4, #12]
 800ad0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad14:	6921      	ldr	r1, [r4, #16]
 800ad16:	464a      	mov	r2, r9
 800ad18:	f7ff fa08 	bl	800a12c <memcpy>
 800ad1c:	89a3      	ldrh	r3, [r4, #12]
 800ad1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ad22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad26:	81a3      	strh	r3, [r4, #12]
 800ad28:	6126      	str	r6, [r4, #16]
 800ad2a:	6165      	str	r5, [r4, #20]
 800ad2c:	444e      	add	r6, r9
 800ad2e:	eba5 0509 	sub.w	r5, r5, r9
 800ad32:	6026      	str	r6, [r4, #0]
 800ad34:	60a5      	str	r5, [r4, #8]
 800ad36:	463e      	mov	r6, r7
 800ad38:	42be      	cmp	r6, r7
 800ad3a:	d900      	bls.n	800ad3e <__ssputs_r+0x86>
 800ad3c:	463e      	mov	r6, r7
 800ad3e:	6820      	ldr	r0, [r4, #0]
 800ad40:	4632      	mov	r2, r6
 800ad42:	4641      	mov	r1, r8
 800ad44:	f000 ff42 	bl	800bbcc <memmove>
 800ad48:	68a3      	ldr	r3, [r4, #8]
 800ad4a:	1b9b      	subs	r3, r3, r6
 800ad4c:	60a3      	str	r3, [r4, #8]
 800ad4e:	6823      	ldr	r3, [r4, #0]
 800ad50:	4433      	add	r3, r6
 800ad52:	6023      	str	r3, [r4, #0]
 800ad54:	2000      	movs	r0, #0
 800ad56:	e7db      	b.n	800ad10 <__ssputs_r+0x58>
 800ad58:	462a      	mov	r2, r5
 800ad5a:	f000 ff5d 	bl	800bc18 <_realloc_r>
 800ad5e:	4606      	mov	r6, r0
 800ad60:	2800      	cmp	r0, #0
 800ad62:	d1e1      	bne.n	800ad28 <__ssputs_r+0x70>
 800ad64:	6921      	ldr	r1, [r4, #16]
 800ad66:	4650      	mov	r0, sl
 800ad68:	f7ff fec6 	bl	800aaf8 <_free_r>
 800ad6c:	e7c7      	b.n	800acfe <__ssputs_r+0x46>
	...

0800ad70 <_svfiprintf_r>:
 800ad70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad74:	4698      	mov	r8, r3
 800ad76:	898b      	ldrh	r3, [r1, #12]
 800ad78:	061b      	lsls	r3, r3, #24
 800ad7a:	b09d      	sub	sp, #116	; 0x74
 800ad7c:	4607      	mov	r7, r0
 800ad7e:	460d      	mov	r5, r1
 800ad80:	4614      	mov	r4, r2
 800ad82:	d50e      	bpl.n	800ada2 <_svfiprintf_r+0x32>
 800ad84:	690b      	ldr	r3, [r1, #16]
 800ad86:	b963      	cbnz	r3, 800ada2 <_svfiprintf_r+0x32>
 800ad88:	2140      	movs	r1, #64	; 0x40
 800ad8a:	f7ff ff21 	bl	800abd0 <_malloc_r>
 800ad8e:	6028      	str	r0, [r5, #0]
 800ad90:	6128      	str	r0, [r5, #16]
 800ad92:	b920      	cbnz	r0, 800ad9e <_svfiprintf_r+0x2e>
 800ad94:	230c      	movs	r3, #12
 800ad96:	603b      	str	r3, [r7, #0]
 800ad98:	f04f 30ff 	mov.w	r0, #4294967295
 800ad9c:	e0d1      	b.n	800af42 <_svfiprintf_r+0x1d2>
 800ad9e:	2340      	movs	r3, #64	; 0x40
 800ada0:	616b      	str	r3, [r5, #20]
 800ada2:	2300      	movs	r3, #0
 800ada4:	9309      	str	r3, [sp, #36]	; 0x24
 800ada6:	2320      	movs	r3, #32
 800ada8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800adac:	f8cd 800c 	str.w	r8, [sp, #12]
 800adb0:	2330      	movs	r3, #48	; 0x30
 800adb2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800af5c <_svfiprintf_r+0x1ec>
 800adb6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800adba:	f04f 0901 	mov.w	r9, #1
 800adbe:	4623      	mov	r3, r4
 800adc0:	469a      	mov	sl, r3
 800adc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800adc6:	b10a      	cbz	r2, 800adcc <_svfiprintf_r+0x5c>
 800adc8:	2a25      	cmp	r2, #37	; 0x25
 800adca:	d1f9      	bne.n	800adc0 <_svfiprintf_r+0x50>
 800adcc:	ebba 0b04 	subs.w	fp, sl, r4
 800add0:	d00b      	beq.n	800adea <_svfiprintf_r+0x7a>
 800add2:	465b      	mov	r3, fp
 800add4:	4622      	mov	r2, r4
 800add6:	4629      	mov	r1, r5
 800add8:	4638      	mov	r0, r7
 800adda:	f7ff ff6d 	bl	800acb8 <__ssputs_r>
 800adde:	3001      	adds	r0, #1
 800ade0:	f000 80aa 	beq.w	800af38 <_svfiprintf_r+0x1c8>
 800ade4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ade6:	445a      	add	r2, fp
 800ade8:	9209      	str	r2, [sp, #36]	; 0x24
 800adea:	f89a 3000 	ldrb.w	r3, [sl]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	f000 80a2 	beq.w	800af38 <_svfiprintf_r+0x1c8>
 800adf4:	2300      	movs	r3, #0
 800adf6:	f04f 32ff 	mov.w	r2, #4294967295
 800adfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800adfe:	f10a 0a01 	add.w	sl, sl, #1
 800ae02:	9304      	str	r3, [sp, #16]
 800ae04:	9307      	str	r3, [sp, #28]
 800ae06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae0a:	931a      	str	r3, [sp, #104]	; 0x68
 800ae0c:	4654      	mov	r4, sl
 800ae0e:	2205      	movs	r2, #5
 800ae10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae14:	4851      	ldr	r0, [pc, #324]	; (800af5c <_svfiprintf_r+0x1ec>)
 800ae16:	f7f5 f9f3 	bl	8000200 <memchr>
 800ae1a:	9a04      	ldr	r2, [sp, #16]
 800ae1c:	b9d8      	cbnz	r0, 800ae56 <_svfiprintf_r+0xe6>
 800ae1e:	06d0      	lsls	r0, r2, #27
 800ae20:	bf44      	itt	mi
 800ae22:	2320      	movmi	r3, #32
 800ae24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae28:	0711      	lsls	r1, r2, #28
 800ae2a:	bf44      	itt	mi
 800ae2c:	232b      	movmi	r3, #43	; 0x2b
 800ae2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae32:	f89a 3000 	ldrb.w	r3, [sl]
 800ae36:	2b2a      	cmp	r3, #42	; 0x2a
 800ae38:	d015      	beq.n	800ae66 <_svfiprintf_r+0xf6>
 800ae3a:	9a07      	ldr	r2, [sp, #28]
 800ae3c:	4654      	mov	r4, sl
 800ae3e:	2000      	movs	r0, #0
 800ae40:	f04f 0c0a 	mov.w	ip, #10
 800ae44:	4621      	mov	r1, r4
 800ae46:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae4a:	3b30      	subs	r3, #48	; 0x30
 800ae4c:	2b09      	cmp	r3, #9
 800ae4e:	d94e      	bls.n	800aeee <_svfiprintf_r+0x17e>
 800ae50:	b1b0      	cbz	r0, 800ae80 <_svfiprintf_r+0x110>
 800ae52:	9207      	str	r2, [sp, #28]
 800ae54:	e014      	b.n	800ae80 <_svfiprintf_r+0x110>
 800ae56:	eba0 0308 	sub.w	r3, r0, r8
 800ae5a:	fa09 f303 	lsl.w	r3, r9, r3
 800ae5e:	4313      	orrs	r3, r2
 800ae60:	9304      	str	r3, [sp, #16]
 800ae62:	46a2      	mov	sl, r4
 800ae64:	e7d2      	b.n	800ae0c <_svfiprintf_r+0x9c>
 800ae66:	9b03      	ldr	r3, [sp, #12]
 800ae68:	1d19      	adds	r1, r3, #4
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	9103      	str	r1, [sp, #12]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	bfbb      	ittet	lt
 800ae72:	425b      	neglt	r3, r3
 800ae74:	f042 0202 	orrlt.w	r2, r2, #2
 800ae78:	9307      	strge	r3, [sp, #28]
 800ae7a:	9307      	strlt	r3, [sp, #28]
 800ae7c:	bfb8      	it	lt
 800ae7e:	9204      	strlt	r2, [sp, #16]
 800ae80:	7823      	ldrb	r3, [r4, #0]
 800ae82:	2b2e      	cmp	r3, #46	; 0x2e
 800ae84:	d10c      	bne.n	800aea0 <_svfiprintf_r+0x130>
 800ae86:	7863      	ldrb	r3, [r4, #1]
 800ae88:	2b2a      	cmp	r3, #42	; 0x2a
 800ae8a:	d135      	bne.n	800aef8 <_svfiprintf_r+0x188>
 800ae8c:	9b03      	ldr	r3, [sp, #12]
 800ae8e:	1d1a      	adds	r2, r3, #4
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	9203      	str	r2, [sp, #12]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	bfb8      	it	lt
 800ae98:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae9c:	3402      	adds	r4, #2
 800ae9e:	9305      	str	r3, [sp, #20]
 800aea0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800af6c <_svfiprintf_r+0x1fc>
 800aea4:	7821      	ldrb	r1, [r4, #0]
 800aea6:	2203      	movs	r2, #3
 800aea8:	4650      	mov	r0, sl
 800aeaa:	f7f5 f9a9 	bl	8000200 <memchr>
 800aeae:	b140      	cbz	r0, 800aec2 <_svfiprintf_r+0x152>
 800aeb0:	2340      	movs	r3, #64	; 0x40
 800aeb2:	eba0 000a 	sub.w	r0, r0, sl
 800aeb6:	fa03 f000 	lsl.w	r0, r3, r0
 800aeba:	9b04      	ldr	r3, [sp, #16]
 800aebc:	4303      	orrs	r3, r0
 800aebe:	3401      	adds	r4, #1
 800aec0:	9304      	str	r3, [sp, #16]
 800aec2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aec6:	4826      	ldr	r0, [pc, #152]	; (800af60 <_svfiprintf_r+0x1f0>)
 800aec8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aecc:	2206      	movs	r2, #6
 800aece:	f7f5 f997 	bl	8000200 <memchr>
 800aed2:	2800      	cmp	r0, #0
 800aed4:	d038      	beq.n	800af48 <_svfiprintf_r+0x1d8>
 800aed6:	4b23      	ldr	r3, [pc, #140]	; (800af64 <_svfiprintf_r+0x1f4>)
 800aed8:	bb1b      	cbnz	r3, 800af22 <_svfiprintf_r+0x1b2>
 800aeda:	9b03      	ldr	r3, [sp, #12]
 800aedc:	3307      	adds	r3, #7
 800aede:	f023 0307 	bic.w	r3, r3, #7
 800aee2:	3308      	adds	r3, #8
 800aee4:	9303      	str	r3, [sp, #12]
 800aee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aee8:	4433      	add	r3, r6
 800aeea:	9309      	str	r3, [sp, #36]	; 0x24
 800aeec:	e767      	b.n	800adbe <_svfiprintf_r+0x4e>
 800aeee:	fb0c 3202 	mla	r2, ip, r2, r3
 800aef2:	460c      	mov	r4, r1
 800aef4:	2001      	movs	r0, #1
 800aef6:	e7a5      	b.n	800ae44 <_svfiprintf_r+0xd4>
 800aef8:	2300      	movs	r3, #0
 800aefa:	3401      	adds	r4, #1
 800aefc:	9305      	str	r3, [sp, #20]
 800aefe:	4619      	mov	r1, r3
 800af00:	f04f 0c0a 	mov.w	ip, #10
 800af04:	4620      	mov	r0, r4
 800af06:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af0a:	3a30      	subs	r2, #48	; 0x30
 800af0c:	2a09      	cmp	r2, #9
 800af0e:	d903      	bls.n	800af18 <_svfiprintf_r+0x1a8>
 800af10:	2b00      	cmp	r3, #0
 800af12:	d0c5      	beq.n	800aea0 <_svfiprintf_r+0x130>
 800af14:	9105      	str	r1, [sp, #20]
 800af16:	e7c3      	b.n	800aea0 <_svfiprintf_r+0x130>
 800af18:	fb0c 2101 	mla	r1, ip, r1, r2
 800af1c:	4604      	mov	r4, r0
 800af1e:	2301      	movs	r3, #1
 800af20:	e7f0      	b.n	800af04 <_svfiprintf_r+0x194>
 800af22:	ab03      	add	r3, sp, #12
 800af24:	9300      	str	r3, [sp, #0]
 800af26:	462a      	mov	r2, r5
 800af28:	4b0f      	ldr	r3, [pc, #60]	; (800af68 <_svfiprintf_r+0x1f8>)
 800af2a:	a904      	add	r1, sp, #16
 800af2c:	4638      	mov	r0, r7
 800af2e:	f7fc f98b 	bl	8007248 <_printf_float>
 800af32:	1c42      	adds	r2, r0, #1
 800af34:	4606      	mov	r6, r0
 800af36:	d1d6      	bne.n	800aee6 <_svfiprintf_r+0x176>
 800af38:	89ab      	ldrh	r3, [r5, #12]
 800af3a:	065b      	lsls	r3, r3, #25
 800af3c:	f53f af2c 	bmi.w	800ad98 <_svfiprintf_r+0x28>
 800af40:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af42:	b01d      	add	sp, #116	; 0x74
 800af44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af48:	ab03      	add	r3, sp, #12
 800af4a:	9300      	str	r3, [sp, #0]
 800af4c:	462a      	mov	r2, r5
 800af4e:	4b06      	ldr	r3, [pc, #24]	; (800af68 <_svfiprintf_r+0x1f8>)
 800af50:	a904      	add	r1, sp, #16
 800af52:	4638      	mov	r0, r7
 800af54:	f7fc fc1c 	bl	8007790 <_printf_i>
 800af58:	e7eb      	b.n	800af32 <_svfiprintf_r+0x1c2>
 800af5a:	bf00      	nop
 800af5c:	0800cc54 	.word	0x0800cc54
 800af60:	0800cc5e 	.word	0x0800cc5e
 800af64:	08007249 	.word	0x08007249
 800af68:	0800acb9 	.word	0x0800acb9
 800af6c:	0800cc5a 	.word	0x0800cc5a

0800af70 <_sungetc_r>:
 800af70:	b538      	push	{r3, r4, r5, lr}
 800af72:	1c4b      	adds	r3, r1, #1
 800af74:	4614      	mov	r4, r2
 800af76:	d103      	bne.n	800af80 <_sungetc_r+0x10>
 800af78:	f04f 35ff 	mov.w	r5, #4294967295
 800af7c:	4628      	mov	r0, r5
 800af7e:	bd38      	pop	{r3, r4, r5, pc}
 800af80:	8993      	ldrh	r3, [r2, #12]
 800af82:	f023 0320 	bic.w	r3, r3, #32
 800af86:	8193      	strh	r3, [r2, #12]
 800af88:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800af8a:	6852      	ldr	r2, [r2, #4]
 800af8c:	b2cd      	uxtb	r5, r1
 800af8e:	b18b      	cbz	r3, 800afb4 <_sungetc_r+0x44>
 800af90:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800af92:	4293      	cmp	r3, r2
 800af94:	dd08      	ble.n	800afa8 <_sungetc_r+0x38>
 800af96:	6823      	ldr	r3, [r4, #0]
 800af98:	1e5a      	subs	r2, r3, #1
 800af9a:	6022      	str	r2, [r4, #0]
 800af9c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800afa0:	6863      	ldr	r3, [r4, #4]
 800afa2:	3301      	adds	r3, #1
 800afa4:	6063      	str	r3, [r4, #4]
 800afa6:	e7e9      	b.n	800af7c <_sungetc_r+0xc>
 800afa8:	4621      	mov	r1, r4
 800afaa:	f000 fbdd 	bl	800b768 <__submore>
 800afae:	2800      	cmp	r0, #0
 800afb0:	d0f1      	beq.n	800af96 <_sungetc_r+0x26>
 800afb2:	e7e1      	b.n	800af78 <_sungetc_r+0x8>
 800afb4:	6921      	ldr	r1, [r4, #16]
 800afb6:	6823      	ldr	r3, [r4, #0]
 800afb8:	b151      	cbz	r1, 800afd0 <_sungetc_r+0x60>
 800afba:	4299      	cmp	r1, r3
 800afbc:	d208      	bcs.n	800afd0 <_sungetc_r+0x60>
 800afbe:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800afc2:	42a9      	cmp	r1, r5
 800afc4:	d104      	bne.n	800afd0 <_sungetc_r+0x60>
 800afc6:	3b01      	subs	r3, #1
 800afc8:	3201      	adds	r2, #1
 800afca:	6023      	str	r3, [r4, #0]
 800afcc:	6062      	str	r2, [r4, #4]
 800afce:	e7d5      	b.n	800af7c <_sungetc_r+0xc>
 800afd0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800afd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800afd8:	6363      	str	r3, [r4, #52]	; 0x34
 800afda:	2303      	movs	r3, #3
 800afdc:	63a3      	str	r3, [r4, #56]	; 0x38
 800afde:	4623      	mov	r3, r4
 800afe0:	f803 5f46 	strb.w	r5, [r3, #70]!
 800afe4:	6023      	str	r3, [r4, #0]
 800afe6:	2301      	movs	r3, #1
 800afe8:	e7dc      	b.n	800afa4 <_sungetc_r+0x34>

0800afea <__ssrefill_r>:
 800afea:	b510      	push	{r4, lr}
 800afec:	460c      	mov	r4, r1
 800afee:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800aff0:	b169      	cbz	r1, 800b00e <__ssrefill_r+0x24>
 800aff2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aff6:	4299      	cmp	r1, r3
 800aff8:	d001      	beq.n	800affe <__ssrefill_r+0x14>
 800affa:	f7ff fd7d 	bl	800aaf8 <_free_r>
 800affe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b000:	6063      	str	r3, [r4, #4]
 800b002:	2000      	movs	r0, #0
 800b004:	6360      	str	r0, [r4, #52]	; 0x34
 800b006:	b113      	cbz	r3, 800b00e <__ssrefill_r+0x24>
 800b008:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b00a:	6023      	str	r3, [r4, #0]
 800b00c:	bd10      	pop	{r4, pc}
 800b00e:	6923      	ldr	r3, [r4, #16]
 800b010:	6023      	str	r3, [r4, #0]
 800b012:	2300      	movs	r3, #0
 800b014:	6063      	str	r3, [r4, #4]
 800b016:	89a3      	ldrh	r3, [r4, #12]
 800b018:	f043 0320 	orr.w	r3, r3, #32
 800b01c:	81a3      	strh	r3, [r4, #12]
 800b01e:	f04f 30ff 	mov.w	r0, #4294967295
 800b022:	e7f3      	b.n	800b00c <__ssrefill_r+0x22>

0800b024 <__ssvfiscanf_r>:
 800b024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b028:	460c      	mov	r4, r1
 800b02a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800b02e:	2100      	movs	r1, #0
 800b030:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800b034:	49a6      	ldr	r1, [pc, #664]	; (800b2d0 <__ssvfiscanf_r+0x2ac>)
 800b036:	91a0      	str	r1, [sp, #640]	; 0x280
 800b038:	f10d 0804 	add.w	r8, sp, #4
 800b03c:	49a5      	ldr	r1, [pc, #660]	; (800b2d4 <__ssvfiscanf_r+0x2b0>)
 800b03e:	4fa6      	ldr	r7, [pc, #664]	; (800b2d8 <__ssvfiscanf_r+0x2b4>)
 800b040:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800b2dc <__ssvfiscanf_r+0x2b8>
 800b044:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800b048:	4606      	mov	r6, r0
 800b04a:	91a1      	str	r1, [sp, #644]	; 0x284
 800b04c:	9300      	str	r3, [sp, #0]
 800b04e:	7813      	ldrb	r3, [r2, #0]
 800b050:	2b00      	cmp	r3, #0
 800b052:	f000 815a 	beq.w	800b30a <__ssvfiscanf_r+0x2e6>
 800b056:	5dd9      	ldrb	r1, [r3, r7]
 800b058:	f011 0108 	ands.w	r1, r1, #8
 800b05c:	f102 0501 	add.w	r5, r2, #1
 800b060:	d019      	beq.n	800b096 <__ssvfiscanf_r+0x72>
 800b062:	6863      	ldr	r3, [r4, #4]
 800b064:	2b00      	cmp	r3, #0
 800b066:	dd0f      	ble.n	800b088 <__ssvfiscanf_r+0x64>
 800b068:	6823      	ldr	r3, [r4, #0]
 800b06a:	781a      	ldrb	r2, [r3, #0]
 800b06c:	5cba      	ldrb	r2, [r7, r2]
 800b06e:	0712      	lsls	r2, r2, #28
 800b070:	d401      	bmi.n	800b076 <__ssvfiscanf_r+0x52>
 800b072:	462a      	mov	r2, r5
 800b074:	e7eb      	b.n	800b04e <__ssvfiscanf_r+0x2a>
 800b076:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b078:	3201      	adds	r2, #1
 800b07a:	9245      	str	r2, [sp, #276]	; 0x114
 800b07c:	6862      	ldr	r2, [r4, #4]
 800b07e:	3301      	adds	r3, #1
 800b080:	3a01      	subs	r2, #1
 800b082:	6062      	str	r2, [r4, #4]
 800b084:	6023      	str	r3, [r4, #0]
 800b086:	e7ec      	b.n	800b062 <__ssvfiscanf_r+0x3e>
 800b088:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b08a:	4621      	mov	r1, r4
 800b08c:	4630      	mov	r0, r6
 800b08e:	4798      	blx	r3
 800b090:	2800      	cmp	r0, #0
 800b092:	d0e9      	beq.n	800b068 <__ssvfiscanf_r+0x44>
 800b094:	e7ed      	b.n	800b072 <__ssvfiscanf_r+0x4e>
 800b096:	2b25      	cmp	r3, #37	; 0x25
 800b098:	d012      	beq.n	800b0c0 <__ssvfiscanf_r+0x9c>
 800b09a:	469a      	mov	sl, r3
 800b09c:	6863      	ldr	r3, [r4, #4]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	f340 8091 	ble.w	800b1c6 <__ssvfiscanf_r+0x1a2>
 800b0a4:	6822      	ldr	r2, [r4, #0]
 800b0a6:	7813      	ldrb	r3, [r2, #0]
 800b0a8:	4553      	cmp	r3, sl
 800b0aa:	f040 812e 	bne.w	800b30a <__ssvfiscanf_r+0x2e6>
 800b0ae:	6863      	ldr	r3, [r4, #4]
 800b0b0:	3b01      	subs	r3, #1
 800b0b2:	6063      	str	r3, [r4, #4]
 800b0b4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800b0b6:	3201      	adds	r2, #1
 800b0b8:	3301      	adds	r3, #1
 800b0ba:	6022      	str	r2, [r4, #0]
 800b0bc:	9345      	str	r3, [sp, #276]	; 0x114
 800b0be:	e7d8      	b.n	800b072 <__ssvfiscanf_r+0x4e>
 800b0c0:	9141      	str	r1, [sp, #260]	; 0x104
 800b0c2:	9143      	str	r1, [sp, #268]	; 0x10c
 800b0c4:	7853      	ldrb	r3, [r2, #1]
 800b0c6:	2b2a      	cmp	r3, #42	; 0x2a
 800b0c8:	bf02      	ittt	eq
 800b0ca:	2310      	moveq	r3, #16
 800b0cc:	1c95      	addeq	r5, r2, #2
 800b0ce:	9341      	streq	r3, [sp, #260]	; 0x104
 800b0d0:	220a      	movs	r2, #10
 800b0d2:	46aa      	mov	sl, r5
 800b0d4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800b0d8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800b0dc:	2b09      	cmp	r3, #9
 800b0de:	d91d      	bls.n	800b11c <__ssvfiscanf_r+0xf8>
 800b0e0:	487e      	ldr	r0, [pc, #504]	; (800b2dc <__ssvfiscanf_r+0x2b8>)
 800b0e2:	2203      	movs	r2, #3
 800b0e4:	f7f5 f88c 	bl	8000200 <memchr>
 800b0e8:	b140      	cbz	r0, 800b0fc <__ssvfiscanf_r+0xd8>
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	eba0 0009 	sub.w	r0, r0, r9
 800b0f0:	fa03 f000 	lsl.w	r0, r3, r0
 800b0f4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b0f6:	4318      	orrs	r0, r3
 800b0f8:	9041      	str	r0, [sp, #260]	; 0x104
 800b0fa:	4655      	mov	r5, sl
 800b0fc:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b100:	2b78      	cmp	r3, #120	; 0x78
 800b102:	d806      	bhi.n	800b112 <__ssvfiscanf_r+0xee>
 800b104:	2b57      	cmp	r3, #87	; 0x57
 800b106:	d810      	bhi.n	800b12a <__ssvfiscanf_r+0x106>
 800b108:	2b25      	cmp	r3, #37	; 0x25
 800b10a:	d0c6      	beq.n	800b09a <__ssvfiscanf_r+0x76>
 800b10c:	d856      	bhi.n	800b1bc <__ssvfiscanf_r+0x198>
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d064      	beq.n	800b1dc <__ssvfiscanf_r+0x1b8>
 800b112:	2303      	movs	r3, #3
 800b114:	9347      	str	r3, [sp, #284]	; 0x11c
 800b116:	230a      	movs	r3, #10
 800b118:	9342      	str	r3, [sp, #264]	; 0x108
 800b11a:	e071      	b.n	800b200 <__ssvfiscanf_r+0x1dc>
 800b11c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b11e:	fb02 1103 	mla	r1, r2, r3, r1
 800b122:	3930      	subs	r1, #48	; 0x30
 800b124:	9143      	str	r1, [sp, #268]	; 0x10c
 800b126:	4655      	mov	r5, sl
 800b128:	e7d3      	b.n	800b0d2 <__ssvfiscanf_r+0xae>
 800b12a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800b12e:	2a20      	cmp	r2, #32
 800b130:	d8ef      	bhi.n	800b112 <__ssvfiscanf_r+0xee>
 800b132:	a101      	add	r1, pc, #4	; (adr r1, 800b138 <__ssvfiscanf_r+0x114>)
 800b134:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b138:	0800b1eb 	.word	0x0800b1eb
 800b13c:	0800b113 	.word	0x0800b113
 800b140:	0800b113 	.word	0x0800b113
 800b144:	0800b249 	.word	0x0800b249
 800b148:	0800b113 	.word	0x0800b113
 800b14c:	0800b113 	.word	0x0800b113
 800b150:	0800b113 	.word	0x0800b113
 800b154:	0800b113 	.word	0x0800b113
 800b158:	0800b113 	.word	0x0800b113
 800b15c:	0800b113 	.word	0x0800b113
 800b160:	0800b113 	.word	0x0800b113
 800b164:	0800b25f 	.word	0x0800b25f
 800b168:	0800b235 	.word	0x0800b235
 800b16c:	0800b1c3 	.word	0x0800b1c3
 800b170:	0800b1c3 	.word	0x0800b1c3
 800b174:	0800b1c3 	.word	0x0800b1c3
 800b178:	0800b113 	.word	0x0800b113
 800b17c:	0800b239 	.word	0x0800b239
 800b180:	0800b113 	.word	0x0800b113
 800b184:	0800b113 	.word	0x0800b113
 800b188:	0800b113 	.word	0x0800b113
 800b18c:	0800b113 	.word	0x0800b113
 800b190:	0800b26f 	.word	0x0800b26f
 800b194:	0800b241 	.word	0x0800b241
 800b198:	0800b1e3 	.word	0x0800b1e3
 800b19c:	0800b113 	.word	0x0800b113
 800b1a0:	0800b113 	.word	0x0800b113
 800b1a4:	0800b26b 	.word	0x0800b26b
 800b1a8:	0800b113 	.word	0x0800b113
 800b1ac:	0800b235 	.word	0x0800b235
 800b1b0:	0800b113 	.word	0x0800b113
 800b1b4:	0800b113 	.word	0x0800b113
 800b1b8:	0800b1eb 	.word	0x0800b1eb
 800b1bc:	3b45      	subs	r3, #69	; 0x45
 800b1be:	2b02      	cmp	r3, #2
 800b1c0:	d8a7      	bhi.n	800b112 <__ssvfiscanf_r+0xee>
 800b1c2:	2305      	movs	r3, #5
 800b1c4:	e01b      	b.n	800b1fe <__ssvfiscanf_r+0x1da>
 800b1c6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b1c8:	4621      	mov	r1, r4
 800b1ca:	4630      	mov	r0, r6
 800b1cc:	4798      	blx	r3
 800b1ce:	2800      	cmp	r0, #0
 800b1d0:	f43f af68 	beq.w	800b0a4 <__ssvfiscanf_r+0x80>
 800b1d4:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b1d6:	2800      	cmp	r0, #0
 800b1d8:	f040 808d 	bne.w	800b2f6 <__ssvfiscanf_r+0x2d2>
 800b1dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b1e0:	e08f      	b.n	800b302 <__ssvfiscanf_r+0x2de>
 800b1e2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b1e4:	f042 0220 	orr.w	r2, r2, #32
 800b1e8:	9241      	str	r2, [sp, #260]	; 0x104
 800b1ea:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b1ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b1f0:	9241      	str	r2, [sp, #260]	; 0x104
 800b1f2:	2210      	movs	r2, #16
 800b1f4:	2b6f      	cmp	r3, #111	; 0x6f
 800b1f6:	9242      	str	r2, [sp, #264]	; 0x108
 800b1f8:	bf34      	ite	cc
 800b1fa:	2303      	movcc	r3, #3
 800b1fc:	2304      	movcs	r3, #4
 800b1fe:	9347      	str	r3, [sp, #284]	; 0x11c
 800b200:	6863      	ldr	r3, [r4, #4]
 800b202:	2b00      	cmp	r3, #0
 800b204:	dd42      	ble.n	800b28c <__ssvfiscanf_r+0x268>
 800b206:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b208:	0659      	lsls	r1, r3, #25
 800b20a:	d404      	bmi.n	800b216 <__ssvfiscanf_r+0x1f2>
 800b20c:	6823      	ldr	r3, [r4, #0]
 800b20e:	781a      	ldrb	r2, [r3, #0]
 800b210:	5cba      	ldrb	r2, [r7, r2]
 800b212:	0712      	lsls	r2, r2, #28
 800b214:	d441      	bmi.n	800b29a <__ssvfiscanf_r+0x276>
 800b216:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b218:	2b02      	cmp	r3, #2
 800b21a:	dc50      	bgt.n	800b2be <__ssvfiscanf_r+0x29a>
 800b21c:	466b      	mov	r3, sp
 800b21e:	4622      	mov	r2, r4
 800b220:	a941      	add	r1, sp, #260	; 0x104
 800b222:	4630      	mov	r0, r6
 800b224:	f000 f876 	bl	800b314 <_scanf_chars>
 800b228:	2801      	cmp	r0, #1
 800b22a:	d06e      	beq.n	800b30a <__ssvfiscanf_r+0x2e6>
 800b22c:	2802      	cmp	r0, #2
 800b22e:	f47f af20 	bne.w	800b072 <__ssvfiscanf_r+0x4e>
 800b232:	e7cf      	b.n	800b1d4 <__ssvfiscanf_r+0x1b0>
 800b234:	220a      	movs	r2, #10
 800b236:	e7dd      	b.n	800b1f4 <__ssvfiscanf_r+0x1d0>
 800b238:	2300      	movs	r3, #0
 800b23a:	9342      	str	r3, [sp, #264]	; 0x108
 800b23c:	2303      	movs	r3, #3
 800b23e:	e7de      	b.n	800b1fe <__ssvfiscanf_r+0x1da>
 800b240:	2308      	movs	r3, #8
 800b242:	9342      	str	r3, [sp, #264]	; 0x108
 800b244:	2304      	movs	r3, #4
 800b246:	e7da      	b.n	800b1fe <__ssvfiscanf_r+0x1da>
 800b248:	4629      	mov	r1, r5
 800b24a:	4640      	mov	r0, r8
 800b24c:	f000 f9e0 	bl	800b610 <__sccl>
 800b250:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b252:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b256:	9341      	str	r3, [sp, #260]	; 0x104
 800b258:	4605      	mov	r5, r0
 800b25a:	2301      	movs	r3, #1
 800b25c:	e7cf      	b.n	800b1fe <__ssvfiscanf_r+0x1da>
 800b25e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b260:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b264:	9341      	str	r3, [sp, #260]	; 0x104
 800b266:	2300      	movs	r3, #0
 800b268:	e7c9      	b.n	800b1fe <__ssvfiscanf_r+0x1da>
 800b26a:	2302      	movs	r3, #2
 800b26c:	e7c7      	b.n	800b1fe <__ssvfiscanf_r+0x1da>
 800b26e:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b270:	06c3      	lsls	r3, r0, #27
 800b272:	f53f aefe 	bmi.w	800b072 <__ssvfiscanf_r+0x4e>
 800b276:	9b00      	ldr	r3, [sp, #0]
 800b278:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b27a:	1d19      	adds	r1, r3, #4
 800b27c:	9100      	str	r1, [sp, #0]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	f010 0f01 	tst.w	r0, #1
 800b284:	bf14      	ite	ne
 800b286:	801a      	strhne	r2, [r3, #0]
 800b288:	601a      	streq	r2, [r3, #0]
 800b28a:	e6f2      	b.n	800b072 <__ssvfiscanf_r+0x4e>
 800b28c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b28e:	4621      	mov	r1, r4
 800b290:	4630      	mov	r0, r6
 800b292:	4798      	blx	r3
 800b294:	2800      	cmp	r0, #0
 800b296:	d0b6      	beq.n	800b206 <__ssvfiscanf_r+0x1e2>
 800b298:	e79c      	b.n	800b1d4 <__ssvfiscanf_r+0x1b0>
 800b29a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b29c:	3201      	adds	r2, #1
 800b29e:	9245      	str	r2, [sp, #276]	; 0x114
 800b2a0:	6862      	ldr	r2, [r4, #4]
 800b2a2:	3a01      	subs	r2, #1
 800b2a4:	2a00      	cmp	r2, #0
 800b2a6:	6062      	str	r2, [r4, #4]
 800b2a8:	dd02      	ble.n	800b2b0 <__ssvfiscanf_r+0x28c>
 800b2aa:	3301      	adds	r3, #1
 800b2ac:	6023      	str	r3, [r4, #0]
 800b2ae:	e7ad      	b.n	800b20c <__ssvfiscanf_r+0x1e8>
 800b2b0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b2b2:	4621      	mov	r1, r4
 800b2b4:	4630      	mov	r0, r6
 800b2b6:	4798      	blx	r3
 800b2b8:	2800      	cmp	r0, #0
 800b2ba:	d0a7      	beq.n	800b20c <__ssvfiscanf_r+0x1e8>
 800b2bc:	e78a      	b.n	800b1d4 <__ssvfiscanf_r+0x1b0>
 800b2be:	2b04      	cmp	r3, #4
 800b2c0:	dc0e      	bgt.n	800b2e0 <__ssvfiscanf_r+0x2bc>
 800b2c2:	466b      	mov	r3, sp
 800b2c4:	4622      	mov	r2, r4
 800b2c6:	a941      	add	r1, sp, #260	; 0x104
 800b2c8:	4630      	mov	r0, r6
 800b2ca:	f000 f87d 	bl	800b3c8 <_scanf_i>
 800b2ce:	e7ab      	b.n	800b228 <__ssvfiscanf_r+0x204>
 800b2d0:	0800af71 	.word	0x0800af71
 800b2d4:	0800afeb 	.word	0x0800afeb
 800b2d8:	0800c8f1 	.word	0x0800c8f1
 800b2dc:	0800cc5a 	.word	0x0800cc5a
 800b2e0:	4b0b      	ldr	r3, [pc, #44]	; (800b310 <__ssvfiscanf_r+0x2ec>)
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	f43f aec5 	beq.w	800b072 <__ssvfiscanf_r+0x4e>
 800b2e8:	466b      	mov	r3, sp
 800b2ea:	4622      	mov	r2, r4
 800b2ec:	a941      	add	r1, sp, #260	; 0x104
 800b2ee:	4630      	mov	r0, r6
 800b2f0:	f7fc fb74 	bl	80079dc <_scanf_float>
 800b2f4:	e798      	b.n	800b228 <__ssvfiscanf_r+0x204>
 800b2f6:	89a3      	ldrh	r3, [r4, #12]
 800b2f8:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b2fc:	bf18      	it	ne
 800b2fe:	f04f 30ff 	movne.w	r0, #4294967295
 800b302:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800b306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b30a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b30c:	e7f9      	b.n	800b302 <__ssvfiscanf_r+0x2de>
 800b30e:	bf00      	nop
 800b310:	080079dd 	.word	0x080079dd

0800b314 <_scanf_chars>:
 800b314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b318:	4615      	mov	r5, r2
 800b31a:	688a      	ldr	r2, [r1, #8]
 800b31c:	4680      	mov	r8, r0
 800b31e:	460c      	mov	r4, r1
 800b320:	b932      	cbnz	r2, 800b330 <_scanf_chars+0x1c>
 800b322:	698a      	ldr	r2, [r1, #24]
 800b324:	2a00      	cmp	r2, #0
 800b326:	bf0c      	ite	eq
 800b328:	2201      	moveq	r2, #1
 800b32a:	f04f 32ff 	movne.w	r2, #4294967295
 800b32e:	608a      	str	r2, [r1, #8]
 800b330:	6822      	ldr	r2, [r4, #0]
 800b332:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800b3c4 <_scanf_chars+0xb0>
 800b336:	06d1      	lsls	r1, r2, #27
 800b338:	bf5f      	itttt	pl
 800b33a:	681a      	ldrpl	r2, [r3, #0]
 800b33c:	1d11      	addpl	r1, r2, #4
 800b33e:	6019      	strpl	r1, [r3, #0]
 800b340:	6816      	ldrpl	r6, [r2, #0]
 800b342:	2700      	movs	r7, #0
 800b344:	69a0      	ldr	r0, [r4, #24]
 800b346:	b188      	cbz	r0, 800b36c <_scanf_chars+0x58>
 800b348:	2801      	cmp	r0, #1
 800b34a:	d107      	bne.n	800b35c <_scanf_chars+0x48>
 800b34c:	682a      	ldr	r2, [r5, #0]
 800b34e:	7811      	ldrb	r1, [r2, #0]
 800b350:	6962      	ldr	r2, [r4, #20]
 800b352:	5c52      	ldrb	r2, [r2, r1]
 800b354:	b952      	cbnz	r2, 800b36c <_scanf_chars+0x58>
 800b356:	2f00      	cmp	r7, #0
 800b358:	d031      	beq.n	800b3be <_scanf_chars+0xaa>
 800b35a:	e022      	b.n	800b3a2 <_scanf_chars+0x8e>
 800b35c:	2802      	cmp	r0, #2
 800b35e:	d120      	bne.n	800b3a2 <_scanf_chars+0x8e>
 800b360:	682b      	ldr	r3, [r5, #0]
 800b362:	781b      	ldrb	r3, [r3, #0]
 800b364:	f813 3009 	ldrb.w	r3, [r3, r9]
 800b368:	071b      	lsls	r3, r3, #28
 800b36a:	d41a      	bmi.n	800b3a2 <_scanf_chars+0x8e>
 800b36c:	6823      	ldr	r3, [r4, #0]
 800b36e:	06da      	lsls	r2, r3, #27
 800b370:	bf5e      	ittt	pl
 800b372:	682b      	ldrpl	r3, [r5, #0]
 800b374:	781b      	ldrbpl	r3, [r3, #0]
 800b376:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b37a:	682a      	ldr	r2, [r5, #0]
 800b37c:	686b      	ldr	r3, [r5, #4]
 800b37e:	3201      	adds	r2, #1
 800b380:	602a      	str	r2, [r5, #0]
 800b382:	68a2      	ldr	r2, [r4, #8]
 800b384:	3b01      	subs	r3, #1
 800b386:	3a01      	subs	r2, #1
 800b388:	606b      	str	r3, [r5, #4]
 800b38a:	3701      	adds	r7, #1
 800b38c:	60a2      	str	r2, [r4, #8]
 800b38e:	b142      	cbz	r2, 800b3a2 <_scanf_chars+0x8e>
 800b390:	2b00      	cmp	r3, #0
 800b392:	dcd7      	bgt.n	800b344 <_scanf_chars+0x30>
 800b394:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b398:	4629      	mov	r1, r5
 800b39a:	4640      	mov	r0, r8
 800b39c:	4798      	blx	r3
 800b39e:	2800      	cmp	r0, #0
 800b3a0:	d0d0      	beq.n	800b344 <_scanf_chars+0x30>
 800b3a2:	6823      	ldr	r3, [r4, #0]
 800b3a4:	f013 0310 	ands.w	r3, r3, #16
 800b3a8:	d105      	bne.n	800b3b6 <_scanf_chars+0xa2>
 800b3aa:	68e2      	ldr	r2, [r4, #12]
 800b3ac:	3201      	adds	r2, #1
 800b3ae:	60e2      	str	r2, [r4, #12]
 800b3b0:	69a2      	ldr	r2, [r4, #24]
 800b3b2:	b102      	cbz	r2, 800b3b6 <_scanf_chars+0xa2>
 800b3b4:	7033      	strb	r3, [r6, #0]
 800b3b6:	6923      	ldr	r3, [r4, #16]
 800b3b8:	443b      	add	r3, r7
 800b3ba:	6123      	str	r3, [r4, #16]
 800b3bc:	2000      	movs	r0, #0
 800b3be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3c2:	bf00      	nop
 800b3c4:	0800c8f1 	.word	0x0800c8f1

0800b3c8 <_scanf_i>:
 800b3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3cc:	4698      	mov	r8, r3
 800b3ce:	4b76      	ldr	r3, [pc, #472]	; (800b5a8 <_scanf_i+0x1e0>)
 800b3d0:	460c      	mov	r4, r1
 800b3d2:	4682      	mov	sl, r0
 800b3d4:	4616      	mov	r6, r2
 800b3d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b3da:	b087      	sub	sp, #28
 800b3dc:	ab03      	add	r3, sp, #12
 800b3de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b3e2:	4b72      	ldr	r3, [pc, #456]	; (800b5ac <_scanf_i+0x1e4>)
 800b3e4:	69a1      	ldr	r1, [r4, #24]
 800b3e6:	4a72      	ldr	r2, [pc, #456]	; (800b5b0 <_scanf_i+0x1e8>)
 800b3e8:	2903      	cmp	r1, #3
 800b3ea:	bf18      	it	ne
 800b3ec:	461a      	movne	r2, r3
 800b3ee:	68a3      	ldr	r3, [r4, #8]
 800b3f0:	9201      	str	r2, [sp, #4]
 800b3f2:	1e5a      	subs	r2, r3, #1
 800b3f4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b3f8:	bf88      	it	hi
 800b3fa:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b3fe:	4627      	mov	r7, r4
 800b400:	bf82      	ittt	hi
 800b402:	eb03 0905 	addhi.w	r9, r3, r5
 800b406:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b40a:	60a3      	strhi	r3, [r4, #8]
 800b40c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b410:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800b414:	bf98      	it	ls
 800b416:	f04f 0900 	movls.w	r9, #0
 800b41a:	6023      	str	r3, [r4, #0]
 800b41c:	463d      	mov	r5, r7
 800b41e:	f04f 0b00 	mov.w	fp, #0
 800b422:	6831      	ldr	r1, [r6, #0]
 800b424:	ab03      	add	r3, sp, #12
 800b426:	7809      	ldrb	r1, [r1, #0]
 800b428:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b42c:	2202      	movs	r2, #2
 800b42e:	f7f4 fee7 	bl	8000200 <memchr>
 800b432:	b328      	cbz	r0, 800b480 <_scanf_i+0xb8>
 800b434:	f1bb 0f01 	cmp.w	fp, #1
 800b438:	d159      	bne.n	800b4ee <_scanf_i+0x126>
 800b43a:	6862      	ldr	r2, [r4, #4]
 800b43c:	b92a      	cbnz	r2, 800b44a <_scanf_i+0x82>
 800b43e:	6822      	ldr	r2, [r4, #0]
 800b440:	2308      	movs	r3, #8
 800b442:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b446:	6063      	str	r3, [r4, #4]
 800b448:	6022      	str	r2, [r4, #0]
 800b44a:	6822      	ldr	r2, [r4, #0]
 800b44c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b450:	6022      	str	r2, [r4, #0]
 800b452:	68a2      	ldr	r2, [r4, #8]
 800b454:	1e51      	subs	r1, r2, #1
 800b456:	60a1      	str	r1, [r4, #8]
 800b458:	b192      	cbz	r2, 800b480 <_scanf_i+0xb8>
 800b45a:	6832      	ldr	r2, [r6, #0]
 800b45c:	1c51      	adds	r1, r2, #1
 800b45e:	6031      	str	r1, [r6, #0]
 800b460:	7812      	ldrb	r2, [r2, #0]
 800b462:	f805 2b01 	strb.w	r2, [r5], #1
 800b466:	6872      	ldr	r2, [r6, #4]
 800b468:	3a01      	subs	r2, #1
 800b46a:	2a00      	cmp	r2, #0
 800b46c:	6072      	str	r2, [r6, #4]
 800b46e:	dc07      	bgt.n	800b480 <_scanf_i+0xb8>
 800b470:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800b474:	4631      	mov	r1, r6
 800b476:	4650      	mov	r0, sl
 800b478:	4790      	blx	r2
 800b47a:	2800      	cmp	r0, #0
 800b47c:	f040 8085 	bne.w	800b58a <_scanf_i+0x1c2>
 800b480:	f10b 0b01 	add.w	fp, fp, #1
 800b484:	f1bb 0f03 	cmp.w	fp, #3
 800b488:	d1cb      	bne.n	800b422 <_scanf_i+0x5a>
 800b48a:	6863      	ldr	r3, [r4, #4]
 800b48c:	b90b      	cbnz	r3, 800b492 <_scanf_i+0xca>
 800b48e:	230a      	movs	r3, #10
 800b490:	6063      	str	r3, [r4, #4]
 800b492:	6863      	ldr	r3, [r4, #4]
 800b494:	4947      	ldr	r1, [pc, #284]	; (800b5b4 <_scanf_i+0x1ec>)
 800b496:	6960      	ldr	r0, [r4, #20]
 800b498:	1ac9      	subs	r1, r1, r3
 800b49a:	f000 f8b9 	bl	800b610 <__sccl>
 800b49e:	f04f 0b00 	mov.w	fp, #0
 800b4a2:	68a3      	ldr	r3, [r4, #8]
 800b4a4:	6822      	ldr	r2, [r4, #0]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d03d      	beq.n	800b526 <_scanf_i+0x15e>
 800b4aa:	6831      	ldr	r1, [r6, #0]
 800b4ac:	6960      	ldr	r0, [r4, #20]
 800b4ae:	f891 c000 	ldrb.w	ip, [r1]
 800b4b2:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b4b6:	2800      	cmp	r0, #0
 800b4b8:	d035      	beq.n	800b526 <_scanf_i+0x15e>
 800b4ba:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800b4be:	d124      	bne.n	800b50a <_scanf_i+0x142>
 800b4c0:	0510      	lsls	r0, r2, #20
 800b4c2:	d522      	bpl.n	800b50a <_scanf_i+0x142>
 800b4c4:	f10b 0b01 	add.w	fp, fp, #1
 800b4c8:	f1b9 0f00 	cmp.w	r9, #0
 800b4cc:	d003      	beq.n	800b4d6 <_scanf_i+0x10e>
 800b4ce:	3301      	adds	r3, #1
 800b4d0:	f109 39ff 	add.w	r9, r9, #4294967295
 800b4d4:	60a3      	str	r3, [r4, #8]
 800b4d6:	6873      	ldr	r3, [r6, #4]
 800b4d8:	3b01      	subs	r3, #1
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	6073      	str	r3, [r6, #4]
 800b4de:	dd1b      	ble.n	800b518 <_scanf_i+0x150>
 800b4e0:	6833      	ldr	r3, [r6, #0]
 800b4e2:	3301      	adds	r3, #1
 800b4e4:	6033      	str	r3, [r6, #0]
 800b4e6:	68a3      	ldr	r3, [r4, #8]
 800b4e8:	3b01      	subs	r3, #1
 800b4ea:	60a3      	str	r3, [r4, #8]
 800b4ec:	e7d9      	b.n	800b4a2 <_scanf_i+0xda>
 800b4ee:	f1bb 0f02 	cmp.w	fp, #2
 800b4f2:	d1ae      	bne.n	800b452 <_scanf_i+0x8a>
 800b4f4:	6822      	ldr	r2, [r4, #0]
 800b4f6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b4fa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b4fe:	d1bf      	bne.n	800b480 <_scanf_i+0xb8>
 800b500:	2310      	movs	r3, #16
 800b502:	6063      	str	r3, [r4, #4]
 800b504:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b508:	e7a2      	b.n	800b450 <_scanf_i+0x88>
 800b50a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800b50e:	6022      	str	r2, [r4, #0]
 800b510:	780b      	ldrb	r3, [r1, #0]
 800b512:	f805 3b01 	strb.w	r3, [r5], #1
 800b516:	e7de      	b.n	800b4d6 <_scanf_i+0x10e>
 800b518:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b51c:	4631      	mov	r1, r6
 800b51e:	4650      	mov	r0, sl
 800b520:	4798      	blx	r3
 800b522:	2800      	cmp	r0, #0
 800b524:	d0df      	beq.n	800b4e6 <_scanf_i+0x11e>
 800b526:	6823      	ldr	r3, [r4, #0]
 800b528:	05db      	lsls	r3, r3, #23
 800b52a:	d50d      	bpl.n	800b548 <_scanf_i+0x180>
 800b52c:	42bd      	cmp	r5, r7
 800b52e:	d909      	bls.n	800b544 <_scanf_i+0x17c>
 800b530:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b534:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b538:	4632      	mov	r2, r6
 800b53a:	4650      	mov	r0, sl
 800b53c:	4798      	blx	r3
 800b53e:	f105 39ff 	add.w	r9, r5, #4294967295
 800b542:	464d      	mov	r5, r9
 800b544:	42bd      	cmp	r5, r7
 800b546:	d02d      	beq.n	800b5a4 <_scanf_i+0x1dc>
 800b548:	6822      	ldr	r2, [r4, #0]
 800b54a:	f012 0210 	ands.w	r2, r2, #16
 800b54e:	d113      	bne.n	800b578 <_scanf_i+0x1b0>
 800b550:	702a      	strb	r2, [r5, #0]
 800b552:	6863      	ldr	r3, [r4, #4]
 800b554:	9e01      	ldr	r6, [sp, #4]
 800b556:	4639      	mov	r1, r7
 800b558:	4650      	mov	r0, sl
 800b55a:	47b0      	blx	r6
 800b55c:	6821      	ldr	r1, [r4, #0]
 800b55e:	f8d8 3000 	ldr.w	r3, [r8]
 800b562:	f011 0f20 	tst.w	r1, #32
 800b566:	d013      	beq.n	800b590 <_scanf_i+0x1c8>
 800b568:	1d1a      	adds	r2, r3, #4
 800b56a:	f8c8 2000 	str.w	r2, [r8]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	6018      	str	r0, [r3, #0]
 800b572:	68e3      	ldr	r3, [r4, #12]
 800b574:	3301      	adds	r3, #1
 800b576:	60e3      	str	r3, [r4, #12]
 800b578:	1bed      	subs	r5, r5, r7
 800b57a:	44ab      	add	fp, r5
 800b57c:	6925      	ldr	r5, [r4, #16]
 800b57e:	445d      	add	r5, fp
 800b580:	6125      	str	r5, [r4, #16]
 800b582:	2000      	movs	r0, #0
 800b584:	b007      	add	sp, #28
 800b586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b58a:	f04f 0b00 	mov.w	fp, #0
 800b58e:	e7ca      	b.n	800b526 <_scanf_i+0x15e>
 800b590:	1d1a      	adds	r2, r3, #4
 800b592:	f8c8 2000 	str.w	r2, [r8]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	f011 0f01 	tst.w	r1, #1
 800b59c:	bf14      	ite	ne
 800b59e:	8018      	strhne	r0, [r3, #0]
 800b5a0:	6018      	streq	r0, [r3, #0]
 800b5a2:	e7e6      	b.n	800b572 <_scanf_i+0x1aa>
 800b5a4:	2001      	movs	r0, #1
 800b5a6:	e7ed      	b.n	800b584 <_scanf_i+0x1bc>
 800b5a8:	0800c83c 	.word	0x0800c83c
 800b5ac:	0800b765 	.word	0x0800b765
 800b5b0:	08008cad 	.word	0x08008cad
 800b5b4:	0800cc7e 	.word	0x0800cc7e

0800b5b8 <_read_r>:
 800b5b8:	b538      	push	{r3, r4, r5, lr}
 800b5ba:	4d07      	ldr	r5, [pc, #28]	; (800b5d8 <_read_r+0x20>)
 800b5bc:	4604      	mov	r4, r0
 800b5be:	4608      	mov	r0, r1
 800b5c0:	4611      	mov	r1, r2
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	602a      	str	r2, [r5, #0]
 800b5c6:	461a      	mov	r2, r3
 800b5c8:	f7f6 ff2e 	bl	8002428 <_read>
 800b5cc:	1c43      	adds	r3, r0, #1
 800b5ce:	d102      	bne.n	800b5d6 <_read_r+0x1e>
 800b5d0:	682b      	ldr	r3, [r5, #0]
 800b5d2:	b103      	cbz	r3, 800b5d6 <_read_r+0x1e>
 800b5d4:	6023      	str	r3, [r4, #0]
 800b5d6:	bd38      	pop	{r3, r4, r5, pc}
 800b5d8:	200004d4 	.word	0x200004d4
 800b5dc:	00000000 	.word	0x00000000

0800b5e0 <nan>:
 800b5e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b5e8 <nan+0x8>
 800b5e4:	4770      	bx	lr
 800b5e6:	bf00      	nop
 800b5e8:	00000000 	.word	0x00000000
 800b5ec:	7ff80000 	.word	0x7ff80000

0800b5f0 <_sbrk_r>:
 800b5f0:	b538      	push	{r3, r4, r5, lr}
 800b5f2:	4d06      	ldr	r5, [pc, #24]	; (800b60c <_sbrk_r+0x1c>)
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	4604      	mov	r4, r0
 800b5f8:	4608      	mov	r0, r1
 800b5fa:	602b      	str	r3, [r5, #0]
 800b5fc:	f7f6 ff82 	bl	8002504 <_sbrk>
 800b600:	1c43      	adds	r3, r0, #1
 800b602:	d102      	bne.n	800b60a <_sbrk_r+0x1a>
 800b604:	682b      	ldr	r3, [r5, #0]
 800b606:	b103      	cbz	r3, 800b60a <_sbrk_r+0x1a>
 800b608:	6023      	str	r3, [r4, #0]
 800b60a:	bd38      	pop	{r3, r4, r5, pc}
 800b60c:	200004d4 	.word	0x200004d4

0800b610 <__sccl>:
 800b610:	b570      	push	{r4, r5, r6, lr}
 800b612:	780b      	ldrb	r3, [r1, #0]
 800b614:	4604      	mov	r4, r0
 800b616:	2b5e      	cmp	r3, #94	; 0x5e
 800b618:	bf0b      	itete	eq
 800b61a:	784b      	ldrbeq	r3, [r1, #1]
 800b61c:	1c48      	addne	r0, r1, #1
 800b61e:	1c88      	addeq	r0, r1, #2
 800b620:	2200      	movne	r2, #0
 800b622:	bf08      	it	eq
 800b624:	2201      	moveq	r2, #1
 800b626:	1e61      	subs	r1, r4, #1
 800b628:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800b62c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800b630:	42a9      	cmp	r1, r5
 800b632:	d1fb      	bne.n	800b62c <__sccl+0x1c>
 800b634:	b90b      	cbnz	r3, 800b63a <__sccl+0x2a>
 800b636:	3801      	subs	r0, #1
 800b638:	bd70      	pop	{r4, r5, r6, pc}
 800b63a:	f082 0201 	eor.w	r2, r2, #1
 800b63e:	54e2      	strb	r2, [r4, r3]
 800b640:	4605      	mov	r5, r0
 800b642:	4628      	mov	r0, r5
 800b644:	f810 1b01 	ldrb.w	r1, [r0], #1
 800b648:	292d      	cmp	r1, #45	; 0x2d
 800b64a:	d006      	beq.n	800b65a <__sccl+0x4a>
 800b64c:	295d      	cmp	r1, #93	; 0x5d
 800b64e:	d0f3      	beq.n	800b638 <__sccl+0x28>
 800b650:	b909      	cbnz	r1, 800b656 <__sccl+0x46>
 800b652:	4628      	mov	r0, r5
 800b654:	e7f0      	b.n	800b638 <__sccl+0x28>
 800b656:	460b      	mov	r3, r1
 800b658:	e7f1      	b.n	800b63e <__sccl+0x2e>
 800b65a:	786e      	ldrb	r6, [r5, #1]
 800b65c:	2e5d      	cmp	r6, #93	; 0x5d
 800b65e:	d0fa      	beq.n	800b656 <__sccl+0x46>
 800b660:	42b3      	cmp	r3, r6
 800b662:	dcf8      	bgt.n	800b656 <__sccl+0x46>
 800b664:	3502      	adds	r5, #2
 800b666:	4619      	mov	r1, r3
 800b668:	3101      	adds	r1, #1
 800b66a:	428e      	cmp	r6, r1
 800b66c:	5462      	strb	r2, [r4, r1]
 800b66e:	dcfb      	bgt.n	800b668 <__sccl+0x58>
 800b670:	1af1      	subs	r1, r6, r3
 800b672:	3901      	subs	r1, #1
 800b674:	1c58      	adds	r0, r3, #1
 800b676:	42b3      	cmp	r3, r6
 800b678:	bfa8      	it	ge
 800b67a:	2100      	movge	r1, #0
 800b67c:	1843      	adds	r3, r0, r1
 800b67e:	e7e0      	b.n	800b642 <__sccl+0x32>

0800b680 <_strtoul_l.constprop.0>:
 800b680:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b684:	4f36      	ldr	r7, [pc, #216]	; (800b760 <_strtoul_l.constprop.0+0xe0>)
 800b686:	4686      	mov	lr, r0
 800b688:	460d      	mov	r5, r1
 800b68a:	4628      	mov	r0, r5
 800b68c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b690:	5de6      	ldrb	r6, [r4, r7]
 800b692:	f016 0608 	ands.w	r6, r6, #8
 800b696:	d1f8      	bne.n	800b68a <_strtoul_l.constprop.0+0xa>
 800b698:	2c2d      	cmp	r4, #45	; 0x2d
 800b69a:	d12f      	bne.n	800b6fc <_strtoul_l.constprop.0+0x7c>
 800b69c:	782c      	ldrb	r4, [r5, #0]
 800b69e:	2601      	movs	r6, #1
 800b6a0:	1c85      	adds	r5, r0, #2
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d057      	beq.n	800b756 <_strtoul_l.constprop.0+0xd6>
 800b6a6:	2b10      	cmp	r3, #16
 800b6a8:	d109      	bne.n	800b6be <_strtoul_l.constprop.0+0x3e>
 800b6aa:	2c30      	cmp	r4, #48	; 0x30
 800b6ac:	d107      	bne.n	800b6be <_strtoul_l.constprop.0+0x3e>
 800b6ae:	7828      	ldrb	r0, [r5, #0]
 800b6b0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b6b4:	2858      	cmp	r0, #88	; 0x58
 800b6b6:	d149      	bne.n	800b74c <_strtoul_l.constprop.0+0xcc>
 800b6b8:	786c      	ldrb	r4, [r5, #1]
 800b6ba:	2310      	movs	r3, #16
 800b6bc:	3502      	adds	r5, #2
 800b6be:	f04f 38ff 	mov.w	r8, #4294967295
 800b6c2:	2700      	movs	r7, #0
 800b6c4:	fbb8 f8f3 	udiv	r8, r8, r3
 800b6c8:	fb03 f908 	mul.w	r9, r3, r8
 800b6cc:	ea6f 0909 	mvn.w	r9, r9
 800b6d0:	4638      	mov	r0, r7
 800b6d2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b6d6:	f1bc 0f09 	cmp.w	ip, #9
 800b6da:	d814      	bhi.n	800b706 <_strtoul_l.constprop.0+0x86>
 800b6dc:	4664      	mov	r4, ip
 800b6de:	42a3      	cmp	r3, r4
 800b6e0:	dd22      	ble.n	800b728 <_strtoul_l.constprop.0+0xa8>
 800b6e2:	2f00      	cmp	r7, #0
 800b6e4:	db1d      	blt.n	800b722 <_strtoul_l.constprop.0+0xa2>
 800b6e6:	4580      	cmp	r8, r0
 800b6e8:	d31b      	bcc.n	800b722 <_strtoul_l.constprop.0+0xa2>
 800b6ea:	d101      	bne.n	800b6f0 <_strtoul_l.constprop.0+0x70>
 800b6ec:	45a1      	cmp	r9, r4
 800b6ee:	db18      	blt.n	800b722 <_strtoul_l.constprop.0+0xa2>
 800b6f0:	fb00 4003 	mla	r0, r0, r3, r4
 800b6f4:	2701      	movs	r7, #1
 800b6f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b6fa:	e7ea      	b.n	800b6d2 <_strtoul_l.constprop.0+0x52>
 800b6fc:	2c2b      	cmp	r4, #43	; 0x2b
 800b6fe:	bf04      	itt	eq
 800b700:	782c      	ldrbeq	r4, [r5, #0]
 800b702:	1c85      	addeq	r5, r0, #2
 800b704:	e7cd      	b.n	800b6a2 <_strtoul_l.constprop.0+0x22>
 800b706:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b70a:	f1bc 0f19 	cmp.w	ip, #25
 800b70e:	d801      	bhi.n	800b714 <_strtoul_l.constprop.0+0x94>
 800b710:	3c37      	subs	r4, #55	; 0x37
 800b712:	e7e4      	b.n	800b6de <_strtoul_l.constprop.0+0x5e>
 800b714:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b718:	f1bc 0f19 	cmp.w	ip, #25
 800b71c:	d804      	bhi.n	800b728 <_strtoul_l.constprop.0+0xa8>
 800b71e:	3c57      	subs	r4, #87	; 0x57
 800b720:	e7dd      	b.n	800b6de <_strtoul_l.constprop.0+0x5e>
 800b722:	f04f 37ff 	mov.w	r7, #4294967295
 800b726:	e7e6      	b.n	800b6f6 <_strtoul_l.constprop.0+0x76>
 800b728:	2f00      	cmp	r7, #0
 800b72a:	da07      	bge.n	800b73c <_strtoul_l.constprop.0+0xbc>
 800b72c:	2322      	movs	r3, #34	; 0x22
 800b72e:	f8ce 3000 	str.w	r3, [lr]
 800b732:	f04f 30ff 	mov.w	r0, #4294967295
 800b736:	b932      	cbnz	r2, 800b746 <_strtoul_l.constprop.0+0xc6>
 800b738:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b73c:	b106      	cbz	r6, 800b740 <_strtoul_l.constprop.0+0xc0>
 800b73e:	4240      	negs	r0, r0
 800b740:	2a00      	cmp	r2, #0
 800b742:	d0f9      	beq.n	800b738 <_strtoul_l.constprop.0+0xb8>
 800b744:	b107      	cbz	r7, 800b748 <_strtoul_l.constprop.0+0xc8>
 800b746:	1e69      	subs	r1, r5, #1
 800b748:	6011      	str	r1, [r2, #0]
 800b74a:	e7f5      	b.n	800b738 <_strtoul_l.constprop.0+0xb8>
 800b74c:	2430      	movs	r4, #48	; 0x30
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d1b5      	bne.n	800b6be <_strtoul_l.constprop.0+0x3e>
 800b752:	2308      	movs	r3, #8
 800b754:	e7b3      	b.n	800b6be <_strtoul_l.constprop.0+0x3e>
 800b756:	2c30      	cmp	r4, #48	; 0x30
 800b758:	d0a9      	beq.n	800b6ae <_strtoul_l.constprop.0+0x2e>
 800b75a:	230a      	movs	r3, #10
 800b75c:	e7af      	b.n	800b6be <_strtoul_l.constprop.0+0x3e>
 800b75e:	bf00      	nop
 800b760:	0800c8f1 	.word	0x0800c8f1

0800b764 <_strtoul_r>:
 800b764:	f7ff bf8c 	b.w	800b680 <_strtoul_l.constprop.0>

0800b768 <__submore>:
 800b768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b76c:	460c      	mov	r4, r1
 800b76e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b770:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b774:	4299      	cmp	r1, r3
 800b776:	d11d      	bne.n	800b7b4 <__submore+0x4c>
 800b778:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b77c:	f7ff fa28 	bl	800abd0 <_malloc_r>
 800b780:	b918      	cbnz	r0, 800b78a <__submore+0x22>
 800b782:	f04f 30ff 	mov.w	r0, #4294967295
 800b786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b78a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b78e:	63a3      	str	r3, [r4, #56]	; 0x38
 800b790:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800b794:	6360      	str	r0, [r4, #52]	; 0x34
 800b796:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800b79a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b79e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800b7a2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b7a6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800b7aa:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800b7ae:	6020      	str	r0, [r4, #0]
 800b7b0:	2000      	movs	r0, #0
 800b7b2:	e7e8      	b.n	800b786 <__submore+0x1e>
 800b7b4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800b7b6:	0077      	lsls	r7, r6, #1
 800b7b8:	463a      	mov	r2, r7
 800b7ba:	f000 fa2d 	bl	800bc18 <_realloc_r>
 800b7be:	4605      	mov	r5, r0
 800b7c0:	2800      	cmp	r0, #0
 800b7c2:	d0de      	beq.n	800b782 <__submore+0x1a>
 800b7c4:	eb00 0806 	add.w	r8, r0, r6
 800b7c8:	4601      	mov	r1, r0
 800b7ca:	4632      	mov	r2, r6
 800b7cc:	4640      	mov	r0, r8
 800b7ce:	f7fe fcad 	bl	800a12c <memcpy>
 800b7d2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800b7d6:	f8c4 8000 	str.w	r8, [r4]
 800b7da:	e7e9      	b.n	800b7b0 <__submore+0x48>

0800b7dc <__ascii_wctomb>:
 800b7dc:	b149      	cbz	r1, 800b7f2 <__ascii_wctomb+0x16>
 800b7de:	2aff      	cmp	r2, #255	; 0xff
 800b7e0:	bf85      	ittet	hi
 800b7e2:	238a      	movhi	r3, #138	; 0x8a
 800b7e4:	6003      	strhi	r3, [r0, #0]
 800b7e6:	700a      	strbls	r2, [r1, #0]
 800b7e8:	f04f 30ff 	movhi.w	r0, #4294967295
 800b7ec:	bf98      	it	ls
 800b7ee:	2001      	movls	r0, #1
 800b7f0:	4770      	bx	lr
 800b7f2:	4608      	mov	r0, r1
 800b7f4:	4770      	bx	lr
	...

0800b7f8 <__assert_func>:
 800b7f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b7fa:	4614      	mov	r4, r2
 800b7fc:	461a      	mov	r2, r3
 800b7fe:	4b09      	ldr	r3, [pc, #36]	; (800b824 <__assert_func+0x2c>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	4605      	mov	r5, r0
 800b804:	68d8      	ldr	r0, [r3, #12]
 800b806:	b14c      	cbz	r4, 800b81c <__assert_func+0x24>
 800b808:	4b07      	ldr	r3, [pc, #28]	; (800b828 <__assert_func+0x30>)
 800b80a:	9100      	str	r1, [sp, #0]
 800b80c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b810:	4906      	ldr	r1, [pc, #24]	; (800b82c <__assert_func+0x34>)
 800b812:	462b      	mov	r3, r5
 800b814:	f000 f9a6 	bl	800bb64 <fiprintf>
 800b818:	f000 fc46 	bl	800c0a8 <abort>
 800b81c:	4b04      	ldr	r3, [pc, #16]	; (800b830 <__assert_func+0x38>)
 800b81e:	461c      	mov	r4, r3
 800b820:	e7f3      	b.n	800b80a <__assert_func+0x12>
 800b822:	bf00      	nop
 800b824:	2000000c 	.word	0x2000000c
 800b828:	0800cc80 	.word	0x0800cc80
 800b82c:	0800cc8d 	.word	0x0800cc8d
 800b830:	0800ccbb 	.word	0x0800ccbb

0800b834 <__sflush_r>:
 800b834:	898a      	ldrh	r2, [r1, #12]
 800b836:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b83a:	4605      	mov	r5, r0
 800b83c:	0710      	lsls	r0, r2, #28
 800b83e:	460c      	mov	r4, r1
 800b840:	d458      	bmi.n	800b8f4 <__sflush_r+0xc0>
 800b842:	684b      	ldr	r3, [r1, #4]
 800b844:	2b00      	cmp	r3, #0
 800b846:	dc05      	bgt.n	800b854 <__sflush_r+0x20>
 800b848:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	dc02      	bgt.n	800b854 <__sflush_r+0x20>
 800b84e:	2000      	movs	r0, #0
 800b850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b854:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b856:	2e00      	cmp	r6, #0
 800b858:	d0f9      	beq.n	800b84e <__sflush_r+0x1a>
 800b85a:	2300      	movs	r3, #0
 800b85c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b860:	682f      	ldr	r7, [r5, #0]
 800b862:	602b      	str	r3, [r5, #0]
 800b864:	d032      	beq.n	800b8cc <__sflush_r+0x98>
 800b866:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b868:	89a3      	ldrh	r3, [r4, #12]
 800b86a:	075a      	lsls	r2, r3, #29
 800b86c:	d505      	bpl.n	800b87a <__sflush_r+0x46>
 800b86e:	6863      	ldr	r3, [r4, #4]
 800b870:	1ac0      	subs	r0, r0, r3
 800b872:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b874:	b10b      	cbz	r3, 800b87a <__sflush_r+0x46>
 800b876:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b878:	1ac0      	subs	r0, r0, r3
 800b87a:	2300      	movs	r3, #0
 800b87c:	4602      	mov	r2, r0
 800b87e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b880:	6a21      	ldr	r1, [r4, #32]
 800b882:	4628      	mov	r0, r5
 800b884:	47b0      	blx	r6
 800b886:	1c43      	adds	r3, r0, #1
 800b888:	89a3      	ldrh	r3, [r4, #12]
 800b88a:	d106      	bne.n	800b89a <__sflush_r+0x66>
 800b88c:	6829      	ldr	r1, [r5, #0]
 800b88e:	291d      	cmp	r1, #29
 800b890:	d82c      	bhi.n	800b8ec <__sflush_r+0xb8>
 800b892:	4a2a      	ldr	r2, [pc, #168]	; (800b93c <__sflush_r+0x108>)
 800b894:	40ca      	lsrs	r2, r1
 800b896:	07d6      	lsls	r6, r2, #31
 800b898:	d528      	bpl.n	800b8ec <__sflush_r+0xb8>
 800b89a:	2200      	movs	r2, #0
 800b89c:	6062      	str	r2, [r4, #4]
 800b89e:	04d9      	lsls	r1, r3, #19
 800b8a0:	6922      	ldr	r2, [r4, #16]
 800b8a2:	6022      	str	r2, [r4, #0]
 800b8a4:	d504      	bpl.n	800b8b0 <__sflush_r+0x7c>
 800b8a6:	1c42      	adds	r2, r0, #1
 800b8a8:	d101      	bne.n	800b8ae <__sflush_r+0x7a>
 800b8aa:	682b      	ldr	r3, [r5, #0]
 800b8ac:	b903      	cbnz	r3, 800b8b0 <__sflush_r+0x7c>
 800b8ae:	6560      	str	r0, [r4, #84]	; 0x54
 800b8b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b8b2:	602f      	str	r7, [r5, #0]
 800b8b4:	2900      	cmp	r1, #0
 800b8b6:	d0ca      	beq.n	800b84e <__sflush_r+0x1a>
 800b8b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b8bc:	4299      	cmp	r1, r3
 800b8be:	d002      	beq.n	800b8c6 <__sflush_r+0x92>
 800b8c0:	4628      	mov	r0, r5
 800b8c2:	f7ff f919 	bl	800aaf8 <_free_r>
 800b8c6:	2000      	movs	r0, #0
 800b8c8:	6360      	str	r0, [r4, #52]	; 0x34
 800b8ca:	e7c1      	b.n	800b850 <__sflush_r+0x1c>
 800b8cc:	6a21      	ldr	r1, [r4, #32]
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	4628      	mov	r0, r5
 800b8d2:	47b0      	blx	r6
 800b8d4:	1c41      	adds	r1, r0, #1
 800b8d6:	d1c7      	bne.n	800b868 <__sflush_r+0x34>
 800b8d8:	682b      	ldr	r3, [r5, #0]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d0c4      	beq.n	800b868 <__sflush_r+0x34>
 800b8de:	2b1d      	cmp	r3, #29
 800b8e0:	d001      	beq.n	800b8e6 <__sflush_r+0xb2>
 800b8e2:	2b16      	cmp	r3, #22
 800b8e4:	d101      	bne.n	800b8ea <__sflush_r+0xb6>
 800b8e6:	602f      	str	r7, [r5, #0]
 800b8e8:	e7b1      	b.n	800b84e <__sflush_r+0x1a>
 800b8ea:	89a3      	ldrh	r3, [r4, #12]
 800b8ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8f0:	81a3      	strh	r3, [r4, #12]
 800b8f2:	e7ad      	b.n	800b850 <__sflush_r+0x1c>
 800b8f4:	690f      	ldr	r7, [r1, #16]
 800b8f6:	2f00      	cmp	r7, #0
 800b8f8:	d0a9      	beq.n	800b84e <__sflush_r+0x1a>
 800b8fa:	0793      	lsls	r3, r2, #30
 800b8fc:	680e      	ldr	r6, [r1, #0]
 800b8fe:	bf08      	it	eq
 800b900:	694b      	ldreq	r3, [r1, #20]
 800b902:	600f      	str	r7, [r1, #0]
 800b904:	bf18      	it	ne
 800b906:	2300      	movne	r3, #0
 800b908:	eba6 0807 	sub.w	r8, r6, r7
 800b90c:	608b      	str	r3, [r1, #8]
 800b90e:	f1b8 0f00 	cmp.w	r8, #0
 800b912:	dd9c      	ble.n	800b84e <__sflush_r+0x1a>
 800b914:	6a21      	ldr	r1, [r4, #32]
 800b916:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b918:	4643      	mov	r3, r8
 800b91a:	463a      	mov	r2, r7
 800b91c:	4628      	mov	r0, r5
 800b91e:	47b0      	blx	r6
 800b920:	2800      	cmp	r0, #0
 800b922:	dc06      	bgt.n	800b932 <__sflush_r+0xfe>
 800b924:	89a3      	ldrh	r3, [r4, #12]
 800b926:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b92a:	81a3      	strh	r3, [r4, #12]
 800b92c:	f04f 30ff 	mov.w	r0, #4294967295
 800b930:	e78e      	b.n	800b850 <__sflush_r+0x1c>
 800b932:	4407      	add	r7, r0
 800b934:	eba8 0800 	sub.w	r8, r8, r0
 800b938:	e7e9      	b.n	800b90e <__sflush_r+0xda>
 800b93a:	bf00      	nop
 800b93c:	20400001 	.word	0x20400001

0800b940 <_fflush_r>:
 800b940:	b538      	push	{r3, r4, r5, lr}
 800b942:	690b      	ldr	r3, [r1, #16]
 800b944:	4605      	mov	r5, r0
 800b946:	460c      	mov	r4, r1
 800b948:	b913      	cbnz	r3, 800b950 <_fflush_r+0x10>
 800b94a:	2500      	movs	r5, #0
 800b94c:	4628      	mov	r0, r5
 800b94e:	bd38      	pop	{r3, r4, r5, pc}
 800b950:	b118      	cbz	r0, 800b95a <_fflush_r+0x1a>
 800b952:	6983      	ldr	r3, [r0, #24]
 800b954:	b90b      	cbnz	r3, 800b95a <_fflush_r+0x1a>
 800b956:	f000 f887 	bl	800ba68 <__sinit>
 800b95a:	4b14      	ldr	r3, [pc, #80]	; (800b9ac <_fflush_r+0x6c>)
 800b95c:	429c      	cmp	r4, r3
 800b95e:	d11b      	bne.n	800b998 <_fflush_r+0x58>
 800b960:	686c      	ldr	r4, [r5, #4]
 800b962:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d0ef      	beq.n	800b94a <_fflush_r+0xa>
 800b96a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b96c:	07d0      	lsls	r0, r2, #31
 800b96e:	d404      	bmi.n	800b97a <_fflush_r+0x3a>
 800b970:	0599      	lsls	r1, r3, #22
 800b972:	d402      	bmi.n	800b97a <_fflush_r+0x3a>
 800b974:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b976:	f000 f927 	bl	800bbc8 <__retarget_lock_acquire_recursive>
 800b97a:	4628      	mov	r0, r5
 800b97c:	4621      	mov	r1, r4
 800b97e:	f7ff ff59 	bl	800b834 <__sflush_r>
 800b982:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b984:	07da      	lsls	r2, r3, #31
 800b986:	4605      	mov	r5, r0
 800b988:	d4e0      	bmi.n	800b94c <_fflush_r+0xc>
 800b98a:	89a3      	ldrh	r3, [r4, #12]
 800b98c:	059b      	lsls	r3, r3, #22
 800b98e:	d4dd      	bmi.n	800b94c <_fflush_r+0xc>
 800b990:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b992:	f000 f91a 	bl	800bbca <__retarget_lock_release_recursive>
 800b996:	e7d9      	b.n	800b94c <_fflush_r+0xc>
 800b998:	4b05      	ldr	r3, [pc, #20]	; (800b9b0 <_fflush_r+0x70>)
 800b99a:	429c      	cmp	r4, r3
 800b99c:	d101      	bne.n	800b9a2 <_fflush_r+0x62>
 800b99e:	68ac      	ldr	r4, [r5, #8]
 800b9a0:	e7df      	b.n	800b962 <_fflush_r+0x22>
 800b9a2:	4b04      	ldr	r3, [pc, #16]	; (800b9b4 <_fflush_r+0x74>)
 800b9a4:	429c      	cmp	r4, r3
 800b9a6:	bf08      	it	eq
 800b9a8:	68ec      	ldreq	r4, [r5, #12]
 800b9aa:	e7da      	b.n	800b962 <_fflush_r+0x22>
 800b9ac:	0800ccdc 	.word	0x0800ccdc
 800b9b0:	0800ccfc 	.word	0x0800ccfc
 800b9b4:	0800ccbc 	.word	0x0800ccbc

0800b9b8 <std>:
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	b510      	push	{r4, lr}
 800b9bc:	4604      	mov	r4, r0
 800b9be:	e9c0 3300 	strd	r3, r3, [r0]
 800b9c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b9c6:	6083      	str	r3, [r0, #8]
 800b9c8:	8181      	strh	r1, [r0, #12]
 800b9ca:	6643      	str	r3, [r0, #100]	; 0x64
 800b9cc:	81c2      	strh	r2, [r0, #14]
 800b9ce:	6183      	str	r3, [r0, #24]
 800b9d0:	4619      	mov	r1, r3
 800b9d2:	2208      	movs	r2, #8
 800b9d4:	305c      	adds	r0, #92	; 0x5c
 800b9d6:	f7fb fb8f 	bl	80070f8 <memset>
 800b9da:	4b05      	ldr	r3, [pc, #20]	; (800b9f0 <std+0x38>)
 800b9dc:	6263      	str	r3, [r4, #36]	; 0x24
 800b9de:	4b05      	ldr	r3, [pc, #20]	; (800b9f4 <std+0x3c>)
 800b9e0:	62a3      	str	r3, [r4, #40]	; 0x28
 800b9e2:	4b05      	ldr	r3, [pc, #20]	; (800b9f8 <std+0x40>)
 800b9e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b9e6:	4b05      	ldr	r3, [pc, #20]	; (800b9fc <std+0x44>)
 800b9e8:	6224      	str	r4, [r4, #32]
 800b9ea:	6323      	str	r3, [r4, #48]	; 0x30
 800b9ec:	bd10      	pop	{r4, pc}
 800b9ee:	bf00      	nop
 800b9f0:	08007ea1 	.word	0x08007ea1
 800b9f4:	08007ec7 	.word	0x08007ec7
 800b9f8:	08007eff 	.word	0x08007eff
 800b9fc:	08007f23 	.word	0x08007f23

0800ba00 <_cleanup_r>:
 800ba00:	4901      	ldr	r1, [pc, #4]	; (800ba08 <_cleanup_r+0x8>)
 800ba02:	f000 b8c1 	b.w	800bb88 <_fwalk_reent>
 800ba06:	bf00      	nop
 800ba08:	0800b941 	.word	0x0800b941

0800ba0c <__sfmoreglue>:
 800ba0c:	b570      	push	{r4, r5, r6, lr}
 800ba0e:	2268      	movs	r2, #104	; 0x68
 800ba10:	1e4d      	subs	r5, r1, #1
 800ba12:	4355      	muls	r5, r2
 800ba14:	460e      	mov	r6, r1
 800ba16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ba1a:	f7ff f8d9 	bl	800abd0 <_malloc_r>
 800ba1e:	4604      	mov	r4, r0
 800ba20:	b140      	cbz	r0, 800ba34 <__sfmoreglue+0x28>
 800ba22:	2100      	movs	r1, #0
 800ba24:	e9c0 1600 	strd	r1, r6, [r0]
 800ba28:	300c      	adds	r0, #12
 800ba2a:	60a0      	str	r0, [r4, #8]
 800ba2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ba30:	f7fb fb62 	bl	80070f8 <memset>
 800ba34:	4620      	mov	r0, r4
 800ba36:	bd70      	pop	{r4, r5, r6, pc}

0800ba38 <__sfp_lock_acquire>:
 800ba38:	4801      	ldr	r0, [pc, #4]	; (800ba40 <__sfp_lock_acquire+0x8>)
 800ba3a:	f000 b8c5 	b.w	800bbc8 <__retarget_lock_acquire_recursive>
 800ba3e:	bf00      	nop
 800ba40:	200004d9 	.word	0x200004d9

0800ba44 <__sfp_lock_release>:
 800ba44:	4801      	ldr	r0, [pc, #4]	; (800ba4c <__sfp_lock_release+0x8>)
 800ba46:	f000 b8c0 	b.w	800bbca <__retarget_lock_release_recursive>
 800ba4a:	bf00      	nop
 800ba4c:	200004d9 	.word	0x200004d9

0800ba50 <__sinit_lock_acquire>:
 800ba50:	4801      	ldr	r0, [pc, #4]	; (800ba58 <__sinit_lock_acquire+0x8>)
 800ba52:	f000 b8b9 	b.w	800bbc8 <__retarget_lock_acquire_recursive>
 800ba56:	bf00      	nop
 800ba58:	200004da 	.word	0x200004da

0800ba5c <__sinit_lock_release>:
 800ba5c:	4801      	ldr	r0, [pc, #4]	; (800ba64 <__sinit_lock_release+0x8>)
 800ba5e:	f000 b8b4 	b.w	800bbca <__retarget_lock_release_recursive>
 800ba62:	bf00      	nop
 800ba64:	200004da 	.word	0x200004da

0800ba68 <__sinit>:
 800ba68:	b510      	push	{r4, lr}
 800ba6a:	4604      	mov	r4, r0
 800ba6c:	f7ff fff0 	bl	800ba50 <__sinit_lock_acquire>
 800ba70:	69a3      	ldr	r3, [r4, #24]
 800ba72:	b11b      	cbz	r3, 800ba7c <__sinit+0x14>
 800ba74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba78:	f7ff bff0 	b.w	800ba5c <__sinit_lock_release>
 800ba7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ba80:	6523      	str	r3, [r4, #80]	; 0x50
 800ba82:	4b13      	ldr	r3, [pc, #76]	; (800bad0 <__sinit+0x68>)
 800ba84:	4a13      	ldr	r2, [pc, #76]	; (800bad4 <__sinit+0x6c>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	62a2      	str	r2, [r4, #40]	; 0x28
 800ba8a:	42a3      	cmp	r3, r4
 800ba8c:	bf04      	itt	eq
 800ba8e:	2301      	moveq	r3, #1
 800ba90:	61a3      	streq	r3, [r4, #24]
 800ba92:	4620      	mov	r0, r4
 800ba94:	f000 f820 	bl	800bad8 <__sfp>
 800ba98:	6060      	str	r0, [r4, #4]
 800ba9a:	4620      	mov	r0, r4
 800ba9c:	f000 f81c 	bl	800bad8 <__sfp>
 800baa0:	60a0      	str	r0, [r4, #8]
 800baa2:	4620      	mov	r0, r4
 800baa4:	f000 f818 	bl	800bad8 <__sfp>
 800baa8:	2200      	movs	r2, #0
 800baaa:	60e0      	str	r0, [r4, #12]
 800baac:	2104      	movs	r1, #4
 800baae:	6860      	ldr	r0, [r4, #4]
 800bab0:	f7ff ff82 	bl	800b9b8 <std>
 800bab4:	68a0      	ldr	r0, [r4, #8]
 800bab6:	2201      	movs	r2, #1
 800bab8:	2109      	movs	r1, #9
 800baba:	f7ff ff7d 	bl	800b9b8 <std>
 800babe:	68e0      	ldr	r0, [r4, #12]
 800bac0:	2202      	movs	r2, #2
 800bac2:	2112      	movs	r1, #18
 800bac4:	f7ff ff78 	bl	800b9b8 <std>
 800bac8:	2301      	movs	r3, #1
 800baca:	61a3      	str	r3, [r4, #24]
 800bacc:	e7d2      	b.n	800ba74 <__sinit+0xc>
 800bace:	bf00      	nop
 800bad0:	0800c860 	.word	0x0800c860
 800bad4:	0800ba01 	.word	0x0800ba01

0800bad8 <__sfp>:
 800bad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bada:	4607      	mov	r7, r0
 800badc:	f7ff ffac 	bl	800ba38 <__sfp_lock_acquire>
 800bae0:	4b1e      	ldr	r3, [pc, #120]	; (800bb5c <__sfp+0x84>)
 800bae2:	681e      	ldr	r6, [r3, #0]
 800bae4:	69b3      	ldr	r3, [r6, #24]
 800bae6:	b913      	cbnz	r3, 800baee <__sfp+0x16>
 800bae8:	4630      	mov	r0, r6
 800baea:	f7ff ffbd 	bl	800ba68 <__sinit>
 800baee:	3648      	adds	r6, #72	; 0x48
 800baf0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800baf4:	3b01      	subs	r3, #1
 800baf6:	d503      	bpl.n	800bb00 <__sfp+0x28>
 800baf8:	6833      	ldr	r3, [r6, #0]
 800bafa:	b30b      	cbz	r3, 800bb40 <__sfp+0x68>
 800bafc:	6836      	ldr	r6, [r6, #0]
 800bafe:	e7f7      	b.n	800baf0 <__sfp+0x18>
 800bb00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bb04:	b9d5      	cbnz	r5, 800bb3c <__sfp+0x64>
 800bb06:	4b16      	ldr	r3, [pc, #88]	; (800bb60 <__sfp+0x88>)
 800bb08:	60e3      	str	r3, [r4, #12]
 800bb0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bb0e:	6665      	str	r5, [r4, #100]	; 0x64
 800bb10:	f000 f859 	bl	800bbc6 <__retarget_lock_init_recursive>
 800bb14:	f7ff ff96 	bl	800ba44 <__sfp_lock_release>
 800bb18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bb1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bb20:	6025      	str	r5, [r4, #0]
 800bb22:	61a5      	str	r5, [r4, #24]
 800bb24:	2208      	movs	r2, #8
 800bb26:	4629      	mov	r1, r5
 800bb28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bb2c:	f7fb fae4 	bl	80070f8 <memset>
 800bb30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bb34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bb38:	4620      	mov	r0, r4
 800bb3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb3c:	3468      	adds	r4, #104	; 0x68
 800bb3e:	e7d9      	b.n	800baf4 <__sfp+0x1c>
 800bb40:	2104      	movs	r1, #4
 800bb42:	4638      	mov	r0, r7
 800bb44:	f7ff ff62 	bl	800ba0c <__sfmoreglue>
 800bb48:	4604      	mov	r4, r0
 800bb4a:	6030      	str	r0, [r6, #0]
 800bb4c:	2800      	cmp	r0, #0
 800bb4e:	d1d5      	bne.n	800bafc <__sfp+0x24>
 800bb50:	f7ff ff78 	bl	800ba44 <__sfp_lock_release>
 800bb54:	230c      	movs	r3, #12
 800bb56:	603b      	str	r3, [r7, #0]
 800bb58:	e7ee      	b.n	800bb38 <__sfp+0x60>
 800bb5a:	bf00      	nop
 800bb5c:	0800c860 	.word	0x0800c860
 800bb60:	ffff0001 	.word	0xffff0001

0800bb64 <fiprintf>:
 800bb64:	b40e      	push	{r1, r2, r3}
 800bb66:	b503      	push	{r0, r1, lr}
 800bb68:	4601      	mov	r1, r0
 800bb6a:	ab03      	add	r3, sp, #12
 800bb6c:	4805      	ldr	r0, [pc, #20]	; (800bb84 <fiprintf+0x20>)
 800bb6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb72:	6800      	ldr	r0, [r0, #0]
 800bb74:	9301      	str	r3, [sp, #4]
 800bb76:	f000 f8a7 	bl	800bcc8 <_vfiprintf_r>
 800bb7a:	b002      	add	sp, #8
 800bb7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb80:	b003      	add	sp, #12
 800bb82:	4770      	bx	lr
 800bb84:	2000000c 	.word	0x2000000c

0800bb88 <_fwalk_reent>:
 800bb88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb8c:	4606      	mov	r6, r0
 800bb8e:	4688      	mov	r8, r1
 800bb90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bb94:	2700      	movs	r7, #0
 800bb96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bb9a:	f1b9 0901 	subs.w	r9, r9, #1
 800bb9e:	d505      	bpl.n	800bbac <_fwalk_reent+0x24>
 800bba0:	6824      	ldr	r4, [r4, #0]
 800bba2:	2c00      	cmp	r4, #0
 800bba4:	d1f7      	bne.n	800bb96 <_fwalk_reent+0xe>
 800bba6:	4638      	mov	r0, r7
 800bba8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbac:	89ab      	ldrh	r3, [r5, #12]
 800bbae:	2b01      	cmp	r3, #1
 800bbb0:	d907      	bls.n	800bbc2 <_fwalk_reent+0x3a>
 800bbb2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bbb6:	3301      	adds	r3, #1
 800bbb8:	d003      	beq.n	800bbc2 <_fwalk_reent+0x3a>
 800bbba:	4629      	mov	r1, r5
 800bbbc:	4630      	mov	r0, r6
 800bbbe:	47c0      	blx	r8
 800bbc0:	4307      	orrs	r7, r0
 800bbc2:	3568      	adds	r5, #104	; 0x68
 800bbc4:	e7e9      	b.n	800bb9a <_fwalk_reent+0x12>

0800bbc6 <__retarget_lock_init_recursive>:
 800bbc6:	4770      	bx	lr

0800bbc8 <__retarget_lock_acquire_recursive>:
 800bbc8:	4770      	bx	lr

0800bbca <__retarget_lock_release_recursive>:
 800bbca:	4770      	bx	lr

0800bbcc <memmove>:
 800bbcc:	4288      	cmp	r0, r1
 800bbce:	b510      	push	{r4, lr}
 800bbd0:	eb01 0402 	add.w	r4, r1, r2
 800bbd4:	d902      	bls.n	800bbdc <memmove+0x10>
 800bbd6:	4284      	cmp	r4, r0
 800bbd8:	4623      	mov	r3, r4
 800bbda:	d807      	bhi.n	800bbec <memmove+0x20>
 800bbdc:	1e43      	subs	r3, r0, #1
 800bbde:	42a1      	cmp	r1, r4
 800bbe0:	d008      	beq.n	800bbf4 <memmove+0x28>
 800bbe2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bbe6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bbea:	e7f8      	b.n	800bbde <memmove+0x12>
 800bbec:	4402      	add	r2, r0
 800bbee:	4601      	mov	r1, r0
 800bbf0:	428a      	cmp	r2, r1
 800bbf2:	d100      	bne.n	800bbf6 <memmove+0x2a>
 800bbf4:	bd10      	pop	{r4, pc}
 800bbf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bbfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bbfe:	e7f7      	b.n	800bbf0 <memmove+0x24>

0800bc00 <__malloc_lock>:
 800bc00:	4801      	ldr	r0, [pc, #4]	; (800bc08 <__malloc_lock+0x8>)
 800bc02:	f7ff bfe1 	b.w	800bbc8 <__retarget_lock_acquire_recursive>
 800bc06:	bf00      	nop
 800bc08:	200004d8 	.word	0x200004d8

0800bc0c <__malloc_unlock>:
 800bc0c:	4801      	ldr	r0, [pc, #4]	; (800bc14 <__malloc_unlock+0x8>)
 800bc0e:	f7ff bfdc 	b.w	800bbca <__retarget_lock_release_recursive>
 800bc12:	bf00      	nop
 800bc14:	200004d8 	.word	0x200004d8

0800bc18 <_realloc_r>:
 800bc18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc1c:	4680      	mov	r8, r0
 800bc1e:	4614      	mov	r4, r2
 800bc20:	460e      	mov	r6, r1
 800bc22:	b921      	cbnz	r1, 800bc2e <_realloc_r+0x16>
 800bc24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc28:	4611      	mov	r1, r2
 800bc2a:	f7fe bfd1 	b.w	800abd0 <_malloc_r>
 800bc2e:	b92a      	cbnz	r2, 800bc3c <_realloc_r+0x24>
 800bc30:	f7fe ff62 	bl	800aaf8 <_free_r>
 800bc34:	4625      	mov	r5, r4
 800bc36:	4628      	mov	r0, r5
 800bc38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc3c:	f000 faa0 	bl	800c180 <_malloc_usable_size_r>
 800bc40:	4284      	cmp	r4, r0
 800bc42:	4607      	mov	r7, r0
 800bc44:	d802      	bhi.n	800bc4c <_realloc_r+0x34>
 800bc46:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bc4a:	d812      	bhi.n	800bc72 <_realloc_r+0x5a>
 800bc4c:	4621      	mov	r1, r4
 800bc4e:	4640      	mov	r0, r8
 800bc50:	f7fe ffbe 	bl	800abd0 <_malloc_r>
 800bc54:	4605      	mov	r5, r0
 800bc56:	2800      	cmp	r0, #0
 800bc58:	d0ed      	beq.n	800bc36 <_realloc_r+0x1e>
 800bc5a:	42bc      	cmp	r4, r7
 800bc5c:	4622      	mov	r2, r4
 800bc5e:	4631      	mov	r1, r6
 800bc60:	bf28      	it	cs
 800bc62:	463a      	movcs	r2, r7
 800bc64:	f7fe fa62 	bl	800a12c <memcpy>
 800bc68:	4631      	mov	r1, r6
 800bc6a:	4640      	mov	r0, r8
 800bc6c:	f7fe ff44 	bl	800aaf8 <_free_r>
 800bc70:	e7e1      	b.n	800bc36 <_realloc_r+0x1e>
 800bc72:	4635      	mov	r5, r6
 800bc74:	e7df      	b.n	800bc36 <_realloc_r+0x1e>

0800bc76 <__sfputc_r>:
 800bc76:	6893      	ldr	r3, [r2, #8]
 800bc78:	3b01      	subs	r3, #1
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	b410      	push	{r4}
 800bc7e:	6093      	str	r3, [r2, #8]
 800bc80:	da08      	bge.n	800bc94 <__sfputc_r+0x1e>
 800bc82:	6994      	ldr	r4, [r2, #24]
 800bc84:	42a3      	cmp	r3, r4
 800bc86:	db01      	blt.n	800bc8c <__sfputc_r+0x16>
 800bc88:	290a      	cmp	r1, #10
 800bc8a:	d103      	bne.n	800bc94 <__sfputc_r+0x1e>
 800bc8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc90:	f000 b94a 	b.w	800bf28 <__swbuf_r>
 800bc94:	6813      	ldr	r3, [r2, #0]
 800bc96:	1c58      	adds	r0, r3, #1
 800bc98:	6010      	str	r0, [r2, #0]
 800bc9a:	7019      	strb	r1, [r3, #0]
 800bc9c:	4608      	mov	r0, r1
 800bc9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bca2:	4770      	bx	lr

0800bca4 <__sfputs_r>:
 800bca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bca6:	4606      	mov	r6, r0
 800bca8:	460f      	mov	r7, r1
 800bcaa:	4614      	mov	r4, r2
 800bcac:	18d5      	adds	r5, r2, r3
 800bcae:	42ac      	cmp	r4, r5
 800bcb0:	d101      	bne.n	800bcb6 <__sfputs_r+0x12>
 800bcb2:	2000      	movs	r0, #0
 800bcb4:	e007      	b.n	800bcc6 <__sfputs_r+0x22>
 800bcb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcba:	463a      	mov	r2, r7
 800bcbc:	4630      	mov	r0, r6
 800bcbe:	f7ff ffda 	bl	800bc76 <__sfputc_r>
 800bcc2:	1c43      	adds	r3, r0, #1
 800bcc4:	d1f3      	bne.n	800bcae <__sfputs_r+0xa>
 800bcc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bcc8 <_vfiprintf_r>:
 800bcc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bccc:	460d      	mov	r5, r1
 800bcce:	b09d      	sub	sp, #116	; 0x74
 800bcd0:	4614      	mov	r4, r2
 800bcd2:	4698      	mov	r8, r3
 800bcd4:	4606      	mov	r6, r0
 800bcd6:	b118      	cbz	r0, 800bce0 <_vfiprintf_r+0x18>
 800bcd8:	6983      	ldr	r3, [r0, #24]
 800bcda:	b90b      	cbnz	r3, 800bce0 <_vfiprintf_r+0x18>
 800bcdc:	f7ff fec4 	bl	800ba68 <__sinit>
 800bce0:	4b89      	ldr	r3, [pc, #548]	; (800bf08 <_vfiprintf_r+0x240>)
 800bce2:	429d      	cmp	r5, r3
 800bce4:	d11b      	bne.n	800bd1e <_vfiprintf_r+0x56>
 800bce6:	6875      	ldr	r5, [r6, #4]
 800bce8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bcea:	07d9      	lsls	r1, r3, #31
 800bcec:	d405      	bmi.n	800bcfa <_vfiprintf_r+0x32>
 800bcee:	89ab      	ldrh	r3, [r5, #12]
 800bcf0:	059a      	lsls	r2, r3, #22
 800bcf2:	d402      	bmi.n	800bcfa <_vfiprintf_r+0x32>
 800bcf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bcf6:	f7ff ff67 	bl	800bbc8 <__retarget_lock_acquire_recursive>
 800bcfa:	89ab      	ldrh	r3, [r5, #12]
 800bcfc:	071b      	lsls	r3, r3, #28
 800bcfe:	d501      	bpl.n	800bd04 <_vfiprintf_r+0x3c>
 800bd00:	692b      	ldr	r3, [r5, #16]
 800bd02:	b9eb      	cbnz	r3, 800bd40 <_vfiprintf_r+0x78>
 800bd04:	4629      	mov	r1, r5
 800bd06:	4630      	mov	r0, r6
 800bd08:	f000 f960 	bl	800bfcc <__swsetup_r>
 800bd0c:	b1c0      	cbz	r0, 800bd40 <_vfiprintf_r+0x78>
 800bd0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd10:	07dc      	lsls	r4, r3, #31
 800bd12:	d50e      	bpl.n	800bd32 <_vfiprintf_r+0x6a>
 800bd14:	f04f 30ff 	mov.w	r0, #4294967295
 800bd18:	b01d      	add	sp, #116	; 0x74
 800bd1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd1e:	4b7b      	ldr	r3, [pc, #492]	; (800bf0c <_vfiprintf_r+0x244>)
 800bd20:	429d      	cmp	r5, r3
 800bd22:	d101      	bne.n	800bd28 <_vfiprintf_r+0x60>
 800bd24:	68b5      	ldr	r5, [r6, #8]
 800bd26:	e7df      	b.n	800bce8 <_vfiprintf_r+0x20>
 800bd28:	4b79      	ldr	r3, [pc, #484]	; (800bf10 <_vfiprintf_r+0x248>)
 800bd2a:	429d      	cmp	r5, r3
 800bd2c:	bf08      	it	eq
 800bd2e:	68f5      	ldreq	r5, [r6, #12]
 800bd30:	e7da      	b.n	800bce8 <_vfiprintf_r+0x20>
 800bd32:	89ab      	ldrh	r3, [r5, #12]
 800bd34:	0598      	lsls	r0, r3, #22
 800bd36:	d4ed      	bmi.n	800bd14 <_vfiprintf_r+0x4c>
 800bd38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd3a:	f7ff ff46 	bl	800bbca <__retarget_lock_release_recursive>
 800bd3e:	e7e9      	b.n	800bd14 <_vfiprintf_r+0x4c>
 800bd40:	2300      	movs	r3, #0
 800bd42:	9309      	str	r3, [sp, #36]	; 0x24
 800bd44:	2320      	movs	r3, #32
 800bd46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd4a:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd4e:	2330      	movs	r3, #48	; 0x30
 800bd50:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bf14 <_vfiprintf_r+0x24c>
 800bd54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd58:	f04f 0901 	mov.w	r9, #1
 800bd5c:	4623      	mov	r3, r4
 800bd5e:	469a      	mov	sl, r3
 800bd60:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd64:	b10a      	cbz	r2, 800bd6a <_vfiprintf_r+0xa2>
 800bd66:	2a25      	cmp	r2, #37	; 0x25
 800bd68:	d1f9      	bne.n	800bd5e <_vfiprintf_r+0x96>
 800bd6a:	ebba 0b04 	subs.w	fp, sl, r4
 800bd6e:	d00b      	beq.n	800bd88 <_vfiprintf_r+0xc0>
 800bd70:	465b      	mov	r3, fp
 800bd72:	4622      	mov	r2, r4
 800bd74:	4629      	mov	r1, r5
 800bd76:	4630      	mov	r0, r6
 800bd78:	f7ff ff94 	bl	800bca4 <__sfputs_r>
 800bd7c:	3001      	adds	r0, #1
 800bd7e:	f000 80aa 	beq.w	800bed6 <_vfiprintf_r+0x20e>
 800bd82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd84:	445a      	add	r2, fp
 800bd86:	9209      	str	r2, [sp, #36]	; 0x24
 800bd88:	f89a 3000 	ldrb.w	r3, [sl]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	f000 80a2 	beq.w	800bed6 <_vfiprintf_r+0x20e>
 800bd92:	2300      	movs	r3, #0
 800bd94:	f04f 32ff 	mov.w	r2, #4294967295
 800bd98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd9c:	f10a 0a01 	add.w	sl, sl, #1
 800bda0:	9304      	str	r3, [sp, #16]
 800bda2:	9307      	str	r3, [sp, #28]
 800bda4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bda8:	931a      	str	r3, [sp, #104]	; 0x68
 800bdaa:	4654      	mov	r4, sl
 800bdac:	2205      	movs	r2, #5
 800bdae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdb2:	4858      	ldr	r0, [pc, #352]	; (800bf14 <_vfiprintf_r+0x24c>)
 800bdb4:	f7f4 fa24 	bl	8000200 <memchr>
 800bdb8:	9a04      	ldr	r2, [sp, #16]
 800bdba:	b9d8      	cbnz	r0, 800bdf4 <_vfiprintf_r+0x12c>
 800bdbc:	06d1      	lsls	r1, r2, #27
 800bdbe:	bf44      	itt	mi
 800bdc0:	2320      	movmi	r3, #32
 800bdc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bdc6:	0713      	lsls	r3, r2, #28
 800bdc8:	bf44      	itt	mi
 800bdca:	232b      	movmi	r3, #43	; 0x2b
 800bdcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bdd0:	f89a 3000 	ldrb.w	r3, [sl]
 800bdd4:	2b2a      	cmp	r3, #42	; 0x2a
 800bdd6:	d015      	beq.n	800be04 <_vfiprintf_r+0x13c>
 800bdd8:	9a07      	ldr	r2, [sp, #28]
 800bdda:	4654      	mov	r4, sl
 800bddc:	2000      	movs	r0, #0
 800bdde:	f04f 0c0a 	mov.w	ip, #10
 800bde2:	4621      	mov	r1, r4
 800bde4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bde8:	3b30      	subs	r3, #48	; 0x30
 800bdea:	2b09      	cmp	r3, #9
 800bdec:	d94e      	bls.n	800be8c <_vfiprintf_r+0x1c4>
 800bdee:	b1b0      	cbz	r0, 800be1e <_vfiprintf_r+0x156>
 800bdf0:	9207      	str	r2, [sp, #28]
 800bdf2:	e014      	b.n	800be1e <_vfiprintf_r+0x156>
 800bdf4:	eba0 0308 	sub.w	r3, r0, r8
 800bdf8:	fa09 f303 	lsl.w	r3, r9, r3
 800bdfc:	4313      	orrs	r3, r2
 800bdfe:	9304      	str	r3, [sp, #16]
 800be00:	46a2      	mov	sl, r4
 800be02:	e7d2      	b.n	800bdaa <_vfiprintf_r+0xe2>
 800be04:	9b03      	ldr	r3, [sp, #12]
 800be06:	1d19      	adds	r1, r3, #4
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	9103      	str	r1, [sp, #12]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	bfbb      	ittet	lt
 800be10:	425b      	neglt	r3, r3
 800be12:	f042 0202 	orrlt.w	r2, r2, #2
 800be16:	9307      	strge	r3, [sp, #28]
 800be18:	9307      	strlt	r3, [sp, #28]
 800be1a:	bfb8      	it	lt
 800be1c:	9204      	strlt	r2, [sp, #16]
 800be1e:	7823      	ldrb	r3, [r4, #0]
 800be20:	2b2e      	cmp	r3, #46	; 0x2e
 800be22:	d10c      	bne.n	800be3e <_vfiprintf_r+0x176>
 800be24:	7863      	ldrb	r3, [r4, #1]
 800be26:	2b2a      	cmp	r3, #42	; 0x2a
 800be28:	d135      	bne.n	800be96 <_vfiprintf_r+0x1ce>
 800be2a:	9b03      	ldr	r3, [sp, #12]
 800be2c:	1d1a      	adds	r2, r3, #4
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	9203      	str	r2, [sp, #12]
 800be32:	2b00      	cmp	r3, #0
 800be34:	bfb8      	it	lt
 800be36:	f04f 33ff 	movlt.w	r3, #4294967295
 800be3a:	3402      	adds	r4, #2
 800be3c:	9305      	str	r3, [sp, #20]
 800be3e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bf24 <_vfiprintf_r+0x25c>
 800be42:	7821      	ldrb	r1, [r4, #0]
 800be44:	2203      	movs	r2, #3
 800be46:	4650      	mov	r0, sl
 800be48:	f7f4 f9da 	bl	8000200 <memchr>
 800be4c:	b140      	cbz	r0, 800be60 <_vfiprintf_r+0x198>
 800be4e:	2340      	movs	r3, #64	; 0x40
 800be50:	eba0 000a 	sub.w	r0, r0, sl
 800be54:	fa03 f000 	lsl.w	r0, r3, r0
 800be58:	9b04      	ldr	r3, [sp, #16]
 800be5a:	4303      	orrs	r3, r0
 800be5c:	3401      	adds	r4, #1
 800be5e:	9304      	str	r3, [sp, #16]
 800be60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be64:	482c      	ldr	r0, [pc, #176]	; (800bf18 <_vfiprintf_r+0x250>)
 800be66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be6a:	2206      	movs	r2, #6
 800be6c:	f7f4 f9c8 	bl	8000200 <memchr>
 800be70:	2800      	cmp	r0, #0
 800be72:	d03f      	beq.n	800bef4 <_vfiprintf_r+0x22c>
 800be74:	4b29      	ldr	r3, [pc, #164]	; (800bf1c <_vfiprintf_r+0x254>)
 800be76:	bb1b      	cbnz	r3, 800bec0 <_vfiprintf_r+0x1f8>
 800be78:	9b03      	ldr	r3, [sp, #12]
 800be7a:	3307      	adds	r3, #7
 800be7c:	f023 0307 	bic.w	r3, r3, #7
 800be80:	3308      	adds	r3, #8
 800be82:	9303      	str	r3, [sp, #12]
 800be84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be86:	443b      	add	r3, r7
 800be88:	9309      	str	r3, [sp, #36]	; 0x24
 800be8a:	e767      	b.n	800bd5c <_vfiprintf_r+0x94>
 800be8c:	fb0c 3202 	mla	r2, ip, r2, r3
 800be90:	460c      	mov	r4, r1
 800be92:	2001      	movs	r0, #1
 800be94:	e7a5      	b.n	800bde2 <_vfiprintf_r+0x11a>
 800be96:	2300      	movs	r3, #0
 800be98:	3401      	adds	r4, #1
 800be9a:	9305      	str	r3, [sp, #20]
 800be9c:	4619      	mov	r1, r3
 800be9e:	f04f 0c0a 	mov.w	ip, #10
 800bea2:	4620      	mov	r0, r4
 800bea4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bea8:	3a30      	subs	r2, #48	; 0x30
 800beaa:	2a09      	cmp	r2, #9
 800beac:	d903      	bls.n	800beb6 <_vfiprintf_r+0x1ee>
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d0c5      	beq.n	800be3e <_vfiprintf_r+0x176>
 800beb2:	9105      	str	r1, [sp, #20]
 800beb4:	e7c3      	b.n	800be3e <_vfiprintf_r+0x176>
 800beb6:	fb0c 2101 	mla	r1, ip, r1, r2
 800beba:	4604      	mov	r4, r0
 800bebc:	2301      	movs	r3, #1
 800bebe:	e7f0      	b.n	800bea2 <_vfiprintf_r+0x1da>
 800bec0:	ab03      	add	r3, sp, #12
 800bec2:	9300      	str	r3, [sp, #0]
 800bec4:	462a      	mov	r2, r5
 800bec6:	4b16      	ldr	r3, [pc, #88]	; (800bf20 <_vfiprintf_r+0x258>)
 800bec8:	a904      	add	r1, sp, #16
 800beca:	4630      	mov	r0, r6
 800becc:	f7fb f9bc 	bl	8007248 <_printf_float>
 800bed0:	4607      	mov	r7, r0
 800bed2:	1c78      	adds	r0, r7, #1
 800bed4:	d1d6      	bne.n	800be84 <_vfiprintf_r+0x1bc>
 800bed6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bed8:	07d9      	lsls	r1, r3, #31
 800beda:	d405      	bmi.n	800bee8 <_vfiprintf_r+0x220>
 800bedc:	89ab      	ldrh	r3, [r5, #12]
 800bede:	059a      	lsls	r2, r3, #22
 800bee0:	d402      	bmi.n	800bee8 <_vfiprintf_r+0x220>
 800bee2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bee4:	f7ff fe71 	bl	800bbca <__retarget_lock_release_recursive>
 800bee8:	89ab      	ldrh	r3, [r5, #12]
 800beea:	065b      	lsls	r3, r3, #25
 800beec:	f53f af12 	bmi.w	800bd14 <_vfiprintf_r+0x4c>
 800bef0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bef2:	e711      	b.n	800bd18 <_vfiprintf_r+0x50>
 800bef4:	ab03      	add	r3, sp, #12
 800bef6:	9300      	str	r3, [sp, #0]
 800bef8:	462a      	mov	r2, r5
 800befa:	4b09      	ldr	r3, [pc, #36]	; (800bf20 <_vfiprintf_r+0x258>)
 800befc:	a904      	add	r1, sp, #16
 800befe:	4630      	mov	r0, r6
 800bf00:	f7fb fc46 	bl	8007790 <_printf_i>
 800bf04:	e7e4      	b.n	800bed0 <_vfiprintf_r+0x208>
 800bf06:	bf00      	nop
 800bf08:	0800ccdc 	.word	0x0800ccdc
 800bf0c:	0800ccfc 	.word	0x0800ccfc
 800bf10:	0800ccbc 	.word	0x0800ccbc
 800bf14:	0800cc54 	.word	0x0800cc54
 800bf18:	0800cc5e 	.word	0x0800cc5e
 800bf1c:	08007249 	.word	0x08007249
 800bf20:	0800bca5 	.word	0x0800bca5
 800bf24:	0800cc5a 	.word	0x0800cc5a

0800bf28 <__swbuf_r>:
 800bf28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf2a:	460e      	mov	r6, r1
 800bf2c:	4614      	mov	r4, r2
 800bf2e:	4605      	mov	r5, r0
 800bf30:	b118      	cbz	r0, 800bf3a <__swbuf_r+0x12>
 800bf32:	6983      	ldr	r3, [r0, #24]
 800bf34:	b90b      	cbnz	r3, 800bf3a <__swbuf_r+0x12>
 800bf36:	f7ff fd97 	bl	800ba68 <__sinit>
 800bf3a:	4b21      	ldr	r3, [pc, #132]	; (800bfc0 <__swbuf_r+0x98>)
 800bf3c:	429c      	cmp	r4, r3
 800bf3e:	d12b      	bne.n	800bf98 <__swbuf_r+0x70>
 800bf40:	686c      	ldr	r4, [r5, #4]
 800bf42:	69a3      	ldr	r3, [r4, #24]
 800bf44:	60a3      	str	r3, [r4, #8]
 800bf46:	89a3      	ldrh	r3, [r4, #12]
 800bf48:	071a      	lsls	r2, r3, #28
 800bf4a:	d52f      	bpl.n	800bfac <__swbuf_r+0x84>
 800bf4c:	6923      	ldr	r3, [r4, #16]
 800bf4e:	b36b      	cbz	r3, 800bfac <__swbuf_r+0x84>
 800bf50:	6923      	ldr	r3, [r4, #16]
 800bf52:	6820      	ldr	r0, [r4, #0]
 800bf54:	1ac0      	subs	r0, r0, r3
 800bf56:	6963      	ldr	r3, [r4, #20]
 800bf58:	b2f6      	uxtb	r6, r6
 800bf5a:	4283      	cmp	r3, r0
 800bf5c:	4637      	mov	r7, r6
 800bf5e:	dc04      	bgt.n	800bf6a <__swbuf_r+0x42>
 800bf60:	4621      	mov	r1, r4
 800bf62:	4628      	mov	r0, r5
 800bf64:	f7ff fcec 	bl	800b940 <_fflush_r>
 800bf68:	bb30      	cbnz	r0, 800bfb8 <__swbuf_r+0x90>
 800bf6a:	68a3      	ldr	r3, [r4, #8]
 800bf6c:	3b01      	subs	r3, #1
 800bf6e:	60a3      	str	r3, [r4, #8]
 800bf70:	6823      	ldr	r3, [r4, #0]
 800bf72:	1c5a      	adds	r2, r3, #1
 800bf74:	6022      	str	r2, [r4, #0]
 800bf76:	701e      	strb	r6, [r3, #0]
 800bf78:	6963      	ldr	r3, [r4, #20]
 800bf7a:	3001      	adds	r0, #1
 800bf7c:	4283      	cmp	r3, r0
 800bf7e:	d004      	beq.n	800bf8a <__swbuf_r+0x62>
 800bf80:	89a3      	ldrh	r3, [r4, #12]
 800bf82:	07db      	lsls	r3, r3, #31
 800bf84:	d506      	bpl.n	800bf94 <__swbuf_r+0x6c>
 800bf86:	2e0a      	cmp	r6, #10
 800bf88:	d104      	bne.n	800bf94 <__swbuf_r+0x6c>
 800bf8a:	4621      	mov	r1, r4
 800bf8c:	4628      	mov	r0, r5
 800bf8e:	f7ff fcd7 	bl	800b940 <_fflush_r>
 800bf92:	b988      	cbnz	r0, 800bfb8 <__swbuf_r+0x90>
 800bf94:	4638      	mov	r0, r7
 800bf96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf98:	4b0a      	ldr	r3, [pc, #40]	; (800bfc4 <__swbuf_r+0x9c>)
 800bf9a:	429c      	cmp	r4, r3
 800bf9c:	d101      	bne.n	800bfa2 <__swbuf_r+0x7a>
 800bf9e:	68ac      	ldr	r4, [r5, #8]
 800bfa0:	e7cf      	b.n	800bf42 <__swbuf_r+0x1a>
 800bfa2:	4b09      	ldr	r3, [pc, #36]	; (800bfc8 <__swbuf_r+0xa0>)
 800bfa4:	429c      	cmp	r4, r3
 800bfa6:	bf08      	it	eq
 800bfa8:	68ec      	ldreq	r4, [r5, #12]
 800bfaa:	e7ca      	b.n	800bf42 <__swbuf_r+0x1a>
 800bfac:	4621      	mov	r1, r4
 800bfae:	4628      	mov	r0, r5
 800bfb0:	f000 f80c 	bl	800bfcc <__swsetup_r>
 800bfb4:	2800      	cmp	r0, #0
 800bfb6:	d0cb      	beq.n	800bf50 <__swbuf_r+0x28>
 800bfb8:	f04f 37ff 	mov.w	r7, #4294967295
 800bfbc:	e7ea      	b.n	800bf94 <__swbuf_r+0x6c>
 800bfbe:	bf00      	nop
 800bfc0:	0800ccdc 	.word	0x0800ccdc
 800bfc4:	0800ccfc 	.word	0x0800ccfc
 800bfc8:	0800ccbc 	.word	0x0800ccbc

0800bfcc <__swsetup_r>:
 800bfcc:	4b32      	ldr	r3, [pc, #200]	; (800c098 <__swsetup_r+0xcc>)
 800bfce:	b570      	push	{r4, r5, r6, lr}
 800bfd0:	681d      	ldr	r5, [r3, #0]
 800bfd2:	4606      	mov	r6, r0
 800bfd4:	460c      	mov	r4, r1
 800bfd6:	b125      	cbz	r5, 800bfe2 <__swsetup_r+0x16>
 800bfd8:	69ab      	ldr	r3, [r5, #24]
 800bfda:	b913      	cbnz	r3, 800bfe2 <__swsetup_r+0x16>
 800bfdc:	4628      	mov	r0, r5
 800bfde:	f7ff fd43 	bl	800ba68 <__sinit>
 800bfe2:	4b2e      	ldr	r3, [pc, #184]	; (800c09c <__swsetup_r+0xd0>)
 800bfe4:	429c      	cmp	r4, r3
 800bfe6:	d10f      	bne.n	800c008 <__swsetup_r+0x3c>
 800bfe8:	686c      	ldr	r4, [r5, #4]
 800bfea:	89a3      	ldrh	r3, [r4, #12]
 800bfec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bff0:	0719      	lsls	r1, r3, #28
 800bff2:	d42c      	bmi.n	800c04e <__swsetup_r+0x82>
 800bff4:	06dd      	lsls	r5, r3, #27
 800bff6:	d411      	bmi.n	800c01c <__swsetup_r+0x50>
 800bff8:	2309      	movs	r3, #9
 800bffa:	6033      	str	r3, [r6, #0]
 800bffc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c000:	81a3      	strh	r3, [r4, #12]
 800c002:	f04f 30ff 	mov.w	r0, #4294967295
 800c006:	e03e      	b.n	800c086 <__swsetup_r+0xba>
 800c008:	4b25      	ldr	r3, [pc, #148]	; (800c0a0 <__swsetup_r+0xd4>)
 800c00a:	429c      	cmp	r4, r3
 800c00c:	d101      	bne.n	800c012 <__swsetup_r+0x46>
 800c00e:	68ac      	ldr	r4, [r5, #8]
 800c010:	e7eb      	b.n	800bfea <__swsetup_r+0x1e>
 800c012:	4b24      	ldr	r3, [pc, #144]	; (800c0a4 <__swsetup_r+0xd8>)
 800c014:	429c      	cmp	r4, r3
 800c016:	bf08      	it	eq
 800c018:	68ec      	ldreq	r4, [r5, #12]
 800c01a:	e7e6      	b.n	800bfea <__swsetup_r+0x1e>
 800c01c:	0758      	lsls	r0, r3, #29
 800c01e:	d512      	bpl.n	800c046 <__swsetup_r+0x7a>
 800c020:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c022:	b141      	cbz	r1, 800c036 <__swsetup_r+0x6a>
 800c024:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c028:	4299      	cmp	r1, r3
 800c02a:	d002      	beq.n	800c032 <__swsetup_r+0x66>
 800c02c:	4630      	mov	r0, r6
 800c02e:	f7fe fd63 	bl	800aaf8 <_free_r>
 800c032:	2300      	movs	r3, #0
 800c034:	6363      	str	r3, [r4, #52]	; 0x34
 800c036:	89a3      	ldrh	r3, [r4, #12]
 800c038:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c03c:	81a3      	strh	r3, [r4, #12]
 800c03e:	2300      	movs	r3, #0
 800c040:	6063      	str	r3, [r4, #4]
 800c042:	6923      	ldr	r3, [r4, #16]
 800c044:	6023      	str	r3, [r4, #0]
 800c046:	89a3      	ldrh	r3, [r4, #12]
 800c048:	f043 0308 	orr.w	r3, r3, #8
 800c04c:	81a3      	strh	r3, [r4, #12]
 800c04e:	6923      	ldr	r3, [r4, #16]
 800c050:	b94b      	cbnz	r3, 800c066 <__swsetup_r+0x9a>
 800c052:	89a3      	ldrh	r3, [r4, #12]
 800c054:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c05c:	d003      	beq.n	800c066 <__swsetup_r+0x9a>
 800c05e:	4621      	mov	r1, r4
 800c060:	4630      	mov	r0, r6
 800c062:	f000 f84d 	bl	800c100 <__smakebuf_r>
 800c066:	89a0      	ldrh	r0, [r4, #12]
 800c068:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c06c:	f010 0301 	ands.w	r3, r0, #1
 800c070:	d00a      	beq.n	800c088 <__swsetup_r+0xbc>
 800c072:	2300      	movs	r3, #0
 800c074:	60a3      	str	r3, [r4, #8]
 800c076:	6963      	ldr	r3, [r4, #20]
 800c078:	425b      	negs	r3, r3
 800c07a:	61a3      	str	r3, [r4, #24]
 800c07c:	6923      	ldr	r3, [r4, #16]
 800c07e:	b943      	cbnz	r3, 800c092 <__swsetup_r+0xc6>
 800c080:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c084:	d1ba      	bne.n	800bffc <__swsetup_r+0x30>
 800c086:	bd70      	pop	{r4, r5, r6, pc}
 800c088:	0781      	lsls	r1, r0, #30
 800c08a:	bf58      	it	pl
 800c08c:	6963      	ldrpl	r3, [r4, #20]
 800c08e:	60a3      	str	r3, [r4, #8]
 800c090:	e7f4      	b.n	800c07c <__swsetup_r+0xb0>
 800c092:	2000      	movs	r0, #0
 800c094:	e7f7      	b.n	800c086 <__swsetup_r+0xba>
 800c096:	bf00      	nop
 800c098:	2000000c 	.word	0x2000000c
 800c09c:	0800ccdc 	.word	0x0800ccdc
 800c0a0:	0800ccfc 	.word	0x0800ccfc
 800c0a4:	0800ccbc 	.word	0x0800ccbc

0800c0a8 <abort>:
 800c0a8:	b508      	push	{r3, lr}
 800c0aa:	2006      	movs	r0, #6
 800c0ac:	f000 f898 	bl	800c1e0 <raise>
 800c0b0:	2001      	movs	r0, #1
 800c0b2:	f7f6 f9af 	bl	8002414 <_exit>

0800c0b6 <__swhatbuf_r>:
 800c0b6:	b570      	push	{r4, r5, r6, lr}
 800c0b8:	460e      	mov	r6, r1
 800c0ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0be:	2900      	cmp	r1, #0
 800c0c0:	b096      	sub	sp, #88	; 0x58
 800c0c2:	4614      	mov	r4, r2
 800c0c4:	461d      	mov	r5, r3
 800c0c6:	da08      	bge.n	800c0da <__swhatbuf_r+0x24>
 800c0c8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	602a      	str	r2, [r5, #0]
 800c0d0:	061a      	lsls	r2, r3, #24
 800c0d2:	d410      	bmi.n	800c0f6 <__swhatbuf_r+0x40>
 800c0d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0d8:	e00e      	b.n	800c0f8 <__swhatbuf_r+0x42>
 800c0da:	466a      	mov	r2, sp
 800c0dc:	f000 f89c 	bl	800c218 <_fstat_r>
 800c0e0:	2800      	cmp	r0, #0
 800c0e2:	dbf1      	blt.n	800c0c8 <__swhatbuf_r+0x12>
 800c0e4:	9a01      	ldr	r2, [sp, #4]
 800c0e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c0ea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c0ee:	425a      	negs	r2, r3
 800c0f0:	415a      	adcs	r2, r3
 800c0f2:	602a      	str	r2, [r5, #0]
 800c0f4:	e7ee      	b.n	800c0d4 <__swhatbuf_r+0x1e>
 800c0f6:	2340      	movs	r3, #64	; 0x40
 800c0f8:	2000      	movs	r0, #0
 800c0fa:	6023      	str	r3, [r4, #0]
 800c0fc:	b016      	add	sp, #88	; 0x58
 800c0fe:	bd70      	pop	{r4, r5, r6, pc}

0800c100 <__smakebuf_r>:
 800c100:	898b      	ldrh	r3, [r1, #12]
 800c102:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c104:	079d      	lsls	r5, r3, #30
 800c106:	4606      	mov	r6, r0
 800c108:	460c      	mov	r4, r1
 800c10a:	d507      	bpl.n	800c11c <__smakebuf_r+0x1c>
 800c10c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c110:	6023      	str	r3, [r4, #0]
 800c112:	6123      	str	r3, [r4, #16]
 800c114:	2301      	movs	r3, #1
 800c116:	6163      	str	r3, [r4, #20]
 800c118:	b002      	add	sp, #8
 800c11a:	bd70      	pop	{r4, r5, r6, pc}
 800c11c:	ab01      	add	r3, sp, #4
 800c11e:	466a      	mov	r2, sp
 800c120:	f7ff ffc9 	bl	800c0b6 <__swhatbuf_r>
 800c124:	9900      	ldr	r1, [sp, #0]
 800c126:	4605      	mov	r5, r0
 800c128:	4630      	mov	r0, r6
 800c12a:	f7fe fd51 	bl	800abd0 <_malloc_r>
 800c12e:	b948      	cbnz	r0, 800c144 <__smakebuf_r+0x44>
 800c130:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c134:	059a      	lsls	r2, r3, #22
 800c136:	d4ef      	bmi.n	800c118 <__smakebuf_r+0x18>
 800c138:	f023 0303 	bic.w	r3, r3, #3
 800c13c:	f043 0302 	orr.w	r3, r3, #2
 800c140:	81a3      	strh	r3, [r4, #12]
 800c142:	e7e3      	b.n	800c10c <__smakebuf_r+0xc>
 800c144:	4b0d      	ldr	r3, [pc, #52]	; (800c17c <__smakebuf_r+0x7c>)
 800c146:	62b3      	str	r3, [r6, #40]	; 0x28
 800c148:	89a3      	ldrh	r3, [r4, #12]
 800c14a:	6020      	str	r0, [r4, #0]
 800c14c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c150:	81a3      	strh	r3, [r4, #12]
 800c152:	9b00      	ldr	r3, [sp, #0]
 800c154:	6163      	str	r3, [r4, #20]
 800c156:	9b01      	ldr	r3, [sp, #4]
 800c158:	6120      	str	r0, [r4, #16]
 800c15a:	b15b      	cbz	r3, 800c174 <__smakebuf_r+0x74>
 800c15c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c160:	4630      	mov	r0, r6
 800c162:	f000 f86b 	bl	800c23c <_isatty_r>
 800c166:	b128      	cbz	r0, 800c174 <__smakebuf_r+0x74>
 800c168:	89a3      	ldrh	r3, [r4, #12]
 800c16a:	f023 0303 	bic.w	r3, r3, #3
 800c16e:	f043 0301 	orr.w	r3, r3, #1
 800c172:	81a3      	strh	r3, [r4, #12]
 800c174:	89a0      	ldrh	r0, [r4, #12]
 800c176:	4305      	orrs	r5, r0
 800c178:	81a5      	strh	r5, [r4, #12]
 800c17a:	e7cd      	b.n	800c118 <__smakebuf_r+0x18>
 800c17c:	0800ba01 	.word	0x0800ba01

0800c180 <_malloc_usable_size_r>:
 800c180:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c184:	1f18      	subs	r0, r3, #4
 800c186:	2b00      	cmp	r3, #0
 800c188:	bfbc      	itt	lt
 800c18a:	580b      	ldrlt	r3, [r1, r0]
 800c18c:	18c0      	addlt	r0, r0, r3
 800c18e:	4770      	bx	lr

0800c190 <_raise_r>:
 800c190:	291f      	cmp	r1, #31
 800c192:	b538      	push	{r3, r4, r5, lr}
 800c194:	4604      	mov	r4, r0
 800c196:	460d      	mov	r5, r1
 800c198:	d904      	bls.n	800c1a4 <_raise_r+0x14>
 800c19a:	2316      	movs	r3, #22
 800c19c:	6003      	str	r3, [r0, #0]
 800c19e:	f04f 30ff 	mov.w	r0, #4294967295
 800c1a2:	bd38      	pop	{r3, r4, r5, pc}
 800c1a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c1a6:	b112      	cbz	r2, 800c1ae <_raise_r+0x1e>
 800c1a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c1ac:	b94b      	cbnz	r3, 800c1c2 <_raise_r+0x32>
 800c1ae:	4620      	mov	r0, r4
 800c1b0:	f000 f830 	bl	800c214 <_getpid_r>
 800c1b4:	462a      	mov	r2, r5
 800c1b6:	4601      	mov	r1, r0
 800c1b8:	4620      	mov	r0, r4
 800c1ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c1be:	f000 b817 	b.w	800c1f0 <_kill_r>
 800c1c2:	2b01      	cmp	r3, #1
 800c1c4:	d00a      	beq.n	800c1dc <_raise_r+0x4c>
 800c1c6:	1c59      	adds	r1, r3, #1
 800c1c8:	d103      	bne.n	800c1d2 <_raise_r+0x42>
 800c1ca:	2316      	movs	r3, #22
 800c1cc:	6003      	str	r3, [r0, #0]
 800c1ce:	2001      	movs	r0, #1
 800c1d0:	e7e7      	b.n	800c1a2 <_raise_r+0x12>
 800c1d2:	2400      	movs	r4, #0
 800c1d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c1d8:	4628      	mov	r0, r5
 800c1da:	4798      	blx	r3
 800c1dc:	2000      	movs	r0, #0
 800c1de:	e7e0      	b.n	800c1a2 <_raise_r+0x12>

0800c1e0 <raise>:
 800c1e0:	4b02      	ldr	r3, [pc, #8]	; (800c1ec <raise+0xc>)
 800c1e2:	4601      	mov	r1, r0
 800c1e4:	6818      	ldr	r0, [r3, #0]
 800c1e6:	f7ff bfd3 	b.w	800c190 <_raise_r>
 800c1ea:	bf00      	nop
 800c1ec:	2000000c 	.word	0x2000000c

0800c1f0 <_kill_r>:
 800c1f0:	b538      	push	{r3, r4, r5, lr}
 800c1f2:	4d07      	ldr	r5, [pc, #28]	; (800c210 <_kill_r+0x20>)
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	4604      	mov	r4, r0
 800c1f8:	4608      	mov	r0, r1
 800c1fa:	4611      	mov	r1, r2
 800c1fc:	602b      	str	r3, [r5, #0]
 800c1fe:	f7f6 f8f9 	bl	80023f4 <_kill>
 800c202:	1c43      	adds	r3, r0, #1
 800c204:	d102      	bne.n	800c20c <_kill_r+0x1c>
 800c206:	682b      	ldr	r3, [r5, #0]
 800c208:	b103      	cbz	r3, 800c20c <_kill_r+0x1c>
 800c20a:	6023      	str	r3, [r4, #0]
 800c20c:	bd38      	pop	{r3, r4, r5, pc}
 800c20e:	bf00      	nop
 800c210:	200004d4 	.word	0x200004d4

0800c214 <_getpid_r>:
 800c214:	f7f6 b8e6 	b.w	80023e4 <_getpid>

0800c218 <_fstat_r>:
 800c218:	b538      	push	{r3, r4, r5, lr}
 800c21a:	4d07      	ldr	r5, [pc, #28]	; (800c238 <_fstat_r+0x20>)
 800c21c:	2300      	movs	r3, #0
 800c21e:	4604      	mov	r4, r0
 800c220:	4608      	mov	r0, r1
 800c222:	4611      	mov	r1, r2
 800c224:	602b      	str	r3, [r5, #0]
 800c226:	f7f6 f944 	bl	80024b2 <_fstat>
 800c22a:	1c43      	adds	r3, r0, #1
 800c22c:	d102      	bne.n	800c234 <_fstat_r+0x1c>
 800c22e:	682b      	ldr	r3, [r5, #0]
 800c230:	b103      	cbz	r3, 800c234 <_fstat_r+0x1c>
 800c232:	6023      	str	r3, [r4, #0]
 800c234:	bd38      	pop	{r3, r4, r5, pc}
 800c236:	bf00      	nop
 800c238:	200004d4 	.word	0x200004d4

0800c23c <_isatty_r>:
 800c23c:	b538      	push	{r3, r4, r5, lr}
 800c23e:	4d06      	ldr	r5, [pc, #24]	; (800c258 <_isatty_r+0x1c>)
 800c240:	2300      	movs	r3, #0
 800c242:	4604      	mov	r4, r0
 800c244:	4608      	mov	r0, r1
 800c246:	602b      	str	r3, [r5, #0]
 800c248:	f7f6 f943 	bl	80024d2 <_isatty>
 800c24c:	1c43      	adds	r3, r0, #1
 800c24e:	d102      	bne.n	800c256 <_isatty_r+0x1a>
 800c250:	682b      	ldr	r3, [r5, #0]
 800c252:	b103      	cbz	r3, 800c256 <_isatty_r+0x1a>
 800c254:	6023      	str	r3, [r4, #0]
 800c256:	bd38      	pop	{r3, r4, r5, pc}
 800c258:	200004d4 	.word	0x200004d4

0800c25c <atan2>:
 800c25c:	f000 b800 	b.w	800c260 <__ieee754_atan2>

0800c260 <__ieee754_atan2>:
 800c260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c264:	ec57 6b11 	vmov	r6, r7, d1
 800c268:	4273      	negs	r3, r6
 800c26a:	f8df e184 	ldr.w	lr, [pc, #388]	; 800c3f0 <__ieee754_atan2+0x190>
 800c26e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800c272:	4333      	orrs	r3, r6
 800c274:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800c278:	4573      	cmp	r3, lr
 800c27a:	ec51 0b10 	vmov	r0, r1, d0
 800c27e:	ee11 8a10 	vmov	r8, s2
 800c282:	d80a      	bhi.n	800c29a <__ieee754_atan2+0x3a>
 800c284:	4244      	negs	r4, r0
 800c286:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c28a:	4304      	orrs	r4, r0
 800c28c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800c290:	4574      	cmp	r4, lr
 800c292:	ee10 9a10 	vmov	r9, s0
 800c296:	468c      	mov	ip, r1
 800c298:	d907      	bls.n	800c2aa <__ieee754_atan2+0x4a>
 800c29a:	4632      	mov	r2, r6
 800c29c:	463b      	mov	r3, r7
 800c29e:	f7f4 f805 	bl	80002ac <__adddf3>
 800c2a2:	ec41 0b10 	vmov	d0, r0, r1
 800c2a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2aa:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800c2ae:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c2b2:	4334      	orrs	r4, r6
 800c2b4:	d103      	bne.n	800c2be <__ieee754_atan2+0x5e>
 800c2b6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2ba:	f000 b89d 	b.w	800c3f8 <atan>
 800c2be:	17bc      	asrs	r4, r7, #30
 800c2c0:	f004 0402 	and.w	r4, r4, #2
 800c2c4:	ea53 0909 	orrs.w	r9, r3, r9
 800c2c8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800c2cc:	d107      	bne.n	800c2de <__ieee754_atan2+0x7e>
 800c2ce:	2c02      	cmp	r4, #2
 800c2d0:	d060      	beq.n	800c394 <__ieee754_atan2+0x134>
 800c2d2:	2c03      	cmp	r4, #3
 800c2d4:	d1e5      	bne.n	800c2a2 <__ieee754_atan2+0x42>
 800c2d6:	a142      	add	r1, pc, #264	; (adr r1, 800c3e0 <__ieee754_atan2+0x180>)
 800c2d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c2dc:	e7e1      	b.n	800c2a2 <__ieee754_atan2+0x42>
 800c2de:	ea52 0808 	orrs.w	r8, r2, r8
 800c2e2:	d106      	bne.n	800c2f2 <__ieee754_atan2+0x92>
 800c2e4:	f1bc 0f00 	cmp.w	ip, #0
 800c2e8:	da5f      	bge.n	800c3aa <__ieee754_atan2+0x14a>
 800c2ea:	a13f      	add	r1, pc, #252	; (adr r1, 800c3e8 <__ieee754_atan2+0x188>)
 800c2ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c2f0:	e7d7      	b.n	800c2a2 <__ieee754_atan2+0x42>
 800c2f2:	4572      	cmp	r2, lr
 800c2f4:	d10f      	bne.n	800c316 <__ieee754_atan2+0xb6>
 800c2f6:	4293      	cmp	r3, r2
 800c2f8:	f104 34ff 	add.w	r4, r4, #4294967295
 800c2fc:	d107      	bne.n	800c30e <__ieee754_atan2+0xae>
 800c2fe:	2c02      	cmp	r4, #2
 800c300:	d84c      	bhi.n	800c39c <__ieee754_atan2+0x13c>
 800c302:	4b35      	ldr	r3, [pc, #212]	; (800c3d8 <__ieee754_atan2+0x178>)
 800c304:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800c308:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c30c:	e7c9      	b.n	800c2a2 <__ieee754_atan2+0x42>
 800c30e:	2c02      	cmp	r4, #2
 800c310:	d848      	bhi.n	800c3a4 <__ieee754_atan2+0x144>
 800c312:	4b32      	ldr	r3, [pc, #200]	; (800c3dc <__ieee754_atan2+0x17c>)
 800c314:	e7f6      	b.n	800c304 <__ieee754_atan2+0xa4>
 800c316:	4573      	cmp	r3, lr
 800c318:	d0e4      	beq.n	800c2e4 <__ieee754_atan2+0x84>
 800c31a:	1a9b      	subs	r3, r3, r2
 800c31c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800c320:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c324:	da1e      	bge.n	800c364 <__ieee754_atan2+0x104>
 800c326:	2f00      	cmp	r7, #0
 800c328:	da01      	bge.n	800c32e <__ieee754_atan2+0xce>
 800c32a:	323c      	adds	r2, #60	; 0x3c
 800c32c:	db1e      	blt.n	800c36c <__ieee754_atan2+0x10c>
 800c32e:	4632      	mov	r2, r6
 800c330:	463b      	mov	r3, r7
 800c332:	f7f4 fa9b 	bl	800086c <__aeabi_ddiv>
 800c336:	ec41 0b10 	vmov	d0, r0, r1
 800c33a:	f000 f9fd 	bl	800c738 <fabs>
 800c33e:	f000 f85b 	bl	800c3f8 <atan>
 800c342:	ec51 0b10 	vmov	r0, r1, d0
 800c346:	2c01      	cmp	r4, #1
 800c348:	d013      	beq.n	800c372 <__ieee754_atan2+0x112>
 800c34a:	2c02      	cmp	r4, #2
 800c34c:	d015      	beq.n	800c37a <__ieee754_atan2+0x11a>
 800c34e:	2c00      	cmp	r4, #0
 800c350:	d0a7      	beq.n	800c2a2 <__ieee754_atan2+0x42>
 800c352:	a319      	add	r3, pc, #100	; (adr r3, 800c3b8 <__ieee754_atan2+0x158>)
 800c354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c358:	f7f3 ffa6 	bl	80002a8 <__aeabi_dsub>
 800c35c:	a318      	add	r3, pc, #96	; (adr r3, 800c3c0 <__ieee754_atan2+0x160>)
 800c35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c362:	e014      	b.n	800c38e <__ieee754_atan2+0x12e>
 800c364:	a118      	add	r1, pc, #96	; (adr r1, 800c3c8 <__ieee754_atan2+0x168>)
 800c366:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c36a:	e7ec      	b.n	800c346 <__ieee754_atan2+0xe6>
 800c36c:	2000      	movs	r0, #0
 800c36e:	2100      	movs	r1, #0
 800c370:	e7e9      	b.n	800c346 <__ieee754_atan2+0xe6>
 800c372:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c376:	4619      	mov	r1, r3
 800c378:	e793      	b.n	800c2a2 <__ieee754_atan2+0x42>
 800c37a:	a30f      	add	r3, pc, #60	; (adr r3, 800c3b8 <__ieee754_atan2+0x158>)
 800c37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c380:	f7f3 ff92 	bl	80002a8 <__aeabi_dsub>
 800c384:	4602      	mov	r2, r0
 800c386:	460b      	mov	r3, r1
 800c388:	a10d      	add	r1, pc, #52	; (adr r1, 800c3c0 <__ieee754_atan2+0x160>)
 800c38a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c38e:	f7f3 ff8b 	bl	80002a8 <__aeabi_dsub>
 800c392:	e786      	b.n	800c2a2 <__ieee754_atan2+0x42>
 800c394:	a10a      	add	r1, pc, #40	; (adr r1, 800c3c0 <__ieee754_atan2+0x160>)
 800c396:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c39a:	e782      	b.n	800c2a2 <__ieee754_atan2+0x42>
 800c39c:	a10c      	add	r1, pc, #48	; (adr r1, 800c3d0 <__ieee754_atan2+0x170>)
 800c39e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3a2:	e77e      	b.n	800c2a2 <__ieee754_atan2+0x42>
 800c3a4:	2000      	movs	r0, #0
 800c3a6:	2100      	movs	r1, #0
 800c3a8:	e77b      	b.n	800c2a2 <__ieee754_atan2+0x42>
 800c3aa:	a107      	add	r1, pc, #28	; (adr r1, 800c3c8 <__ieee754_atan2+0x168>)
 800c3ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3b0:	e777      	b.n	800c2a2 <__ieee754_atan2+0x42>
 800c3b2:	bf00      	nop
 800c3b4:	f3af 8000 	nop.w
 800c3b8:	33145c07 	.word	0x33145c07
 800c3bc:	3ca1a626 	.word	0x3ca1a626
 800c3c0:	54442d18 	.word	0x54442d18
 800c3c4:	400921fb 	.word	0x400921fb
 800c3c8:	54442d18 	.word	0x54442d18
 800c3cc:	3ff921fb 	.word	0x3ff921fb
 800c3d0:	54442d18 	.word	0x54442d18
 800c3d4:	3fe921fb 	.word	0x3fe921fb
 800c3d8:	0800cd20 	.word	0x0800cd20
 800c3dc:	0800cd38 	.word	0x0800cd38
 800c3e0:	54442d18 	.word	0x54442d18
 800c3e4:	c00921fb 	.word	0xc00921fb
 800c3e8:	54442d18 	.word	0x54442d18
 800c3ec:	bff921fb 	.word	0xbff921fb
 800c3f0:	7ff00000 	.word	0x7ff00000
 800c3f4:	00000000 	.word	0x00000000

0800c3f8 <atan>:
 800c3f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3fc:	ec55 4b10 	vmov	r4, r5, d0
 800c400:	4bc3      	ldr	r3, [pc, #780]	; (800c710 <atan+0x318>)
 800c402:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c406:	429e      	cmp	r6, r3
 800c408:	46ab      	mov	fp, r5
 800c40a:	dd18      	ble.n	800c43e <atan+0x46>
 800c40c:	4bc1      	ldr	r3, [pc, #772]	; (800c714 <atan+0x31c>)
 800c40e:	429e      	cmp	r6, r3
 800c410:	dc01      	bgt.n	800c416 <atan+0x1e>
 800c412:	d109      	bne.n	800c428 <atan+0x30>
 800c414:	b144      	cbz	r4, 800c428 <atan+0x30>
 800c416:	4622      	mov	r2, r4
 800c418:	462b      	mov	r3, r5
 800c41a:	4620      	mov	r0, r4
 800c41c:	4629      	mov	r1, r5
 800c41e:	f7f3 ff45 	bl	80002ac <__adddf3>
 800c422:	4604      	mov	r4, r0
 800c424:	460d      	mov	r5, r1
 800c426:	e006      	b.n	800c436 <atan+0x3e>
 800c428:	f1bb 0f00 	cmp.w	fp, #0
 800c42c:	f300 8131 	bgt.w	800c692 <atan+0x29a>
 800c430:	a59b      	add	r5, pc, #620	; (adr r5, 800c6a0 <atan+0x2a8>)
 800c432:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c436:	ec45 4b10 	vmov	d0, r4, r5
 800c43a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c43e:	4bb6      	ldr	r3, [pc, #728]	; (800c718 <atan+0x320>)
 800c440:	429e      	cmp	r6, r3
 800c442:	dc14      	bgt.n	800c46e <atan+0x76>
 800c444:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c448:	429e      	cmp	r6, r3
 800c44a:	dc0d      	bgt.n	800c468 <atan+0x70>
 800c44c:	a396      	add	r3, pc, #600	; (adr r3, 800c6a8 <atan+0x2b0>)
 800c44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c452:	ee10 0a10 	vmov	r0, s0
 800c456:	4629      	mov	r1, r5
 800c458:	f7f3 ff28 	bl	80002ac <__adddf3>
 800c45c:	4baf      	ldr	r3, [pc, #700]	; (800c71c <atan+0x324>)
 800c45e:	2200      	movs	r2, #0
 800c460:	f7f4 fb6a 	bl	8000b38 <__aeabi_dcmpgt>
 800c464:	2800      	cmp	r0, #0
 800c466:	d1e6      	bne.n	800c436 <atan+0x3e>
 800c468:	f04f 3aff 	mov.w	sl, #4294967295
 800c46c:	e02b      	b.n	800c4c6 <atan+0xce>
 800c46e:	f000 f963 	bl	800c738 <fabs>
 800c472:	4bab      	ldr	r3, [pc, #684]	; (800c720 <atan+0x328>)
 800c474:	429e      	cmp	r6, r3
 800c476:	ec55 4b10 	vmov	r4, r5, d0
 800c47a:	f300 80bf 	bgt.w	800c5fc <atan+0x204>
 800c47e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c482:	429e      	cmp	r6, r3
 800c484:	f300 80a0 	bgt.w	800c5c8 <atan+0x1d0>
 800c488:	ee10 2a10 	vmov	r2, s0
 800c48c:	ee10 0a10 	vmov	r0, s0
 800c490:	462b      	mov	r3, r5
 800c492:	4629      	mov	r1, r5
 800c494:	f7f3 ff0a 	bl	80002ac <__adddf3>
 800c498:	4ba0      	ldr	r3, [pc, #640]	; (800c71c <atan+0x324>)
 800c49a:	2200      	movs	r2, #0
 800c49c:	f7f3 ff04 	bl	80002a8 <__aeabi_dsub>
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	4606      	mov	r6, r0
 800c4a4:	460f      	mov	r7, r1
 800c4a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c4aa:	4620      	mov	r0, r4
 800c4ac:	4629      	mov	r1, r5
 800c4ae:	f7f3 fefd 	bl	80002ac <__adddf3>
 800c4b2:	4602      	mov	r2, r0
 800c4b4:	460b      	mov	r3, r1
 800c4b6:	4630      	mov	r0, r6
 800c4b8:	4639      	mov	r1, r7
 800c4ba:	f7f4 f9d7 	bl	800086c <__aeabi_ddiv>
 800c4be:	f04f 0a00 	mov.w	sl, #0
 800c4c2:	4604      	mov	r4, r0
 800c4c4:	460d      	mov	r5, r1
 800c4c6:	4622      	mov	r2, r4
 800c4c8:	462b      	mov	r3, r5
 800c4ca:	4620      	mov	r0, r4
 800c4cc:	4629      	mov	r1, r5
 800c4ce:	f7f4 f8a3 	bl	8000618 <__aeabi_dmul>
 800c4d2:	4602      	mov	r2, r0
 800c4d4:	460b      	mov	r3, r1
 800c4d6:	4680      	mov	r8, r0
 800c4d8:	4689      	mov	r9, r1
 800c4da:	f7f4 f89d 	bl	8000618 <__aeabi_dmul>
 800c4de:	a374      	add	r3, pc, #464	; (adr r3, 800c6b0 <atan+0x2b8>)
 800c4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4e4:	4606      	mov	r6, r0
 800c4e6:	460f      	mov	r7, r1
 800c4e8:	f7f4 f896 	bl	8000618 <__aeabi_dmul>
 800c4ec:	a372      	add	r3, pc, #456	; (adr r3, 800c6b8 <atan+0x2c0>)
 800c4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4f2:	f7f3 fedb 	bl	80002ac <__adddf3>
 800c4f6:	4632      	mov	r2, r6
 800c4f8:	463b      	mov	r3, r7
 800c4fa:	f7f4 f88d 	bl	8000618 <__aeabi_dmul>
 800c4fe:	a370      	add	r3, pc, #448	; (adr r3, 800c6c0 <atan+0x2c8>)
 800c500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c504:	f7f3 fed2 	bl	80002ac <__adddf3>
 800c508:	4632      	mov	r2, r6
 800c50a:	463b      	mov	r3, r7
 800c50c:	f7f4 f884 	bl	8000618 <__aeabi_dmul>
 800c510:	a36d      	add	r3, pc, #436	; (adr r3, 800c6c8 <atan+0x2d0>)
 800c512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c516:	f7f3 fec9 	bl	80002ac <__adddf3>
 800c51a:	4632      	mov	r2, r6
 800c51c:	463b      	mov	r3, r7
 800c51e:	f7f4 f87b 	bl	8000618 <__aeabi_dmul>
 800c522:	a36b      	add	r3, pc, #428	; (adr r3, 800c6d0 <atan+0x2d8>)
 800c524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c528:	f7f3 fec0 	bl	80002ac <__adddf3>
 800c52c:	4632      	mov	r2, r6
 800c52e:	463b      	mov	r3, r7
 800c530:	f7f4 f872 	bl	8000618 <__aeabi_dmul>
 800c534:	a368      	add	r3, pc, #416	; (adr r3, 800c6d8 <atan+0x2e0>)
 800c536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c53a:	f7f3 feb7 	bl	80002ac <__adddf3>
 800c53e:	4642      	mov	r2, r8
 800c540:	464b      	mov	r3, r9
 800c542:	f7f4 f869 	bl	8000618 <__aeabi_dmul>
 800c546:	a366      	add	r3, pc, #408	; (adr r3, 800c6e0 <atan+0x2e8>)
 800c548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c54c:	4680      	mov	r8, r0
 800c54e:	4689      	mov	r9, r1
 800c550:	4630      	mov	r0, r6
 800c552:	4639      	mov	r1, r7
 800c554:	f7f4 f860 	bl	8000618 <__aeabi_dmul>
 800c558:	a363      	add	r3, pc, #396	; (adr r3, 800c6e8 <atan+0x2f0>)
 800c55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c55e:	f7f3 fea3 	bl	80002a8 <__aeabi_dsub>
 800c562:	4632      	mov	r2, r6
 800c564:	463b      	mov	r3, r7
 800c566:	f7f4 f857 	bl	8000618 <__aeabi_dmul>
 800c56a:	a361      	add	r3, pc, #388	; (adr r3, 800c6f0 <atan+0x2f8>)
 800c56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c570:	f7f3 fe9a 	bl	80002a8 <__aeabi_dsub>
 800c574:	4632      	mov	r2, r6
 800c576:	463b      	mov	r3, r7
 800c578:	f7f4 f84e 	bl	8000618 <__aeabi_dmul>
 800c57c:	a35e      	add	r3, pc, #376	; (adr r3, 800c6f8 <atan+0x300>)
 800c57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c582:	f7f3 fe91 	bl	80002a8 <__aeabi_dsub>
 800c586:	4632      	mov	r2, r6
 800c588:	463b      	mov	r3, r7
 800c58a:	f7f4 f845 	bl	8000618 <__aeabi_dmul>
 800c58e:	a35c      	add	r3, pc, #368	; (adr r3, 800c700 <atan+0x308>)
 800c590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c594:	f7f3 fe88 	bl	80002a8 <__aeabi_dsub>
 800c598:	4632      	mov	r2, r6
 800c59a:	463b      	mov	r3, r7
 800c59c:	f7f4 f83c 	bl	8000618 <__aeabi_dmul>
 800c5a0:	4602      	mov	r2, r0
 800c5a2:	460b      	mov	r3, r1
 800c5a4:	4640      	mov	r0, r8
 800c5a6:	4649      	mov	r1, r9
 800c5a8:	f7f3 fe80 	bl	80002ac <__adddf3>
 800c5ac:	4622      	mov	r2, r4
 800c5ae:	462b      	mov	r3, r5
 800c5b0:	f7f4 f832 	bl	8000618 <__aeabi_dmul>
 800c5b4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c5b8:	4602      	mov	r2, r0
 800c5ba:	460b      	mov	r3, r1
 800c5bc:	d14b      	bne.n	800c656 <atan+0x25e>
 800c5be:	4620      	mov	r0, r4
 800c5c0:	4629      	mov	r1, r5
 800c5c2:	f7f3 fe71 	bl	80002a8 <__aeabi_dsub>
 800c5c6:	e72c      	b.n	800c422 <atan+0x2a>
 800c5c8:	ee10 0a10 	vmov	r0, s0
 800c5cc:	4b53      	ldr	r3, [pc, #332]	; (800c71c <atan+0x324>)
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	4629      	mov	r1, r5
 800c5d2:	f7f3 fe69 	bl	80002a8 <__aeabi_dsub>
 800c5d6:	4b51      	ldr	r3, [pc, #324]	; (800c71c <atan+0x324>)
 800c5d8:	4606      	mov	r6, r0
 800c5da:	460f      	mov	r7, r1
 800c5dc:	2200      	movs	r2, #0
 800c5de:	4620      	mov	r0, r4
 800c5e0:	4629      	mov	r1, r5
 800c5e2:	f7f3 fe63 	bl	80002ac <__adddf3>
 800c5e6:	4602      	mov	r2, r0
 800c5e8:	460b      	mov	r3, r1
 800c5ea:	4630      	mov	r0, r6
 800c5ec:	4639      	mov	r1, r7
 800c5ee:	f7f4 f93d 	bl	800086c <__aeabi_ddiv>
 800c5f2:	f04f 0a01 	mov.w	sl, #1
 800c5f6:	4604      	mov	r4, r0
 800c5f8:	460d      	mov	r5, r1
 800c5fa:	e764      	b.n	800c4c6 <atan+0xce>
 800c5fc:	4b49      	ldr	r3, [pc, #292]	; (800c724 <atan+0x32c>)
 800c5fe:	429e      	cmp	r6, r3
 800c600:	da1d      	bge.n	800c63e <atan+0x246>
 800c602:	ee10 0a10 	vmov	r0, s0
 800c606:	4b48      	ldr	r3, [pc, #288]	; (800c728 <atan+0x330>)
 800c608:	2200      	movs	r2, #0
 800c60a:	4629      	mov	r1, r5
 800c60c:	f7f3 fe4c 	bl	80002a8 <__aeabi_dsub>
 800c610:	4b45      	ldr	r3, [pc, #276]	; (800c728 <atan+0x330>)
 800c612:	4606      	mov	r6, r0
 800c614:	460f      	mov	r7, r1
 800c616:	2200      	movs	r2, #0
 800c618:	4620      	mov	r0, r4
 800c61a:	4629      	mov	r1, r5
 800c61c:	f7f3 fffc 	bl	8000618 <__aeabi_dmul>
 800c620:	4b3e      	ldr	r3, [pc, #248]	; (800c71c <atan+0x324>)
 800c622:	2200      	movs	r2, #0
 800c624:	f7f3 fe42 	bl	80002ac <__adddf3>
 800c628:	4602      	mov	r2, r0
 800c62a:	460b      	mov	r3, r1
 800c62c:	4630      	mov	r0, r6
 800c62e:	4639      	mov	r1, r7
 800c630:	f7f4 f91c 	bl	800086c <__aeabi_ddiv>
 800c634:	f04f 0a02 	mov.w	sl, #2
 800c638:	4604      	mov	r4, r0
 800c63a:	460d      	mov	r5, r1
 800c63c:	e743      	b.n	800c4c6 <atan+0xce>
 800c63e:	462b      	mov	r3, r5
 800c640:	ee10 2a10 	vmov	r2, s0
 800c644:	4939      	ldr	r1, [pc, #228]	; (800c72c <atan+0x334>)
 800c646:	2000      	movs	r0, #0
 800c648:	f7f4 f910 	bl	800086c <__aeabi_ddiv>
 800c64c:	f04f 0a03 	mov.w	sl, #3
 800c650:	4604      	mov	r4, r0
 800c652:	460d      	mov	r5, r1
 800c654:	e737      	b.n	800c4c6 <atan+0xce>
 800c656:	4b36      	ldr	r3, [pc, #216]	; (800c730 <atan+0x338>)
 800c658:	4e36      	ldr	r6, [pc, #216]	; (800c734 <atan+0x33c>)
 800c65a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c65e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800c662:	e9da 2300 	ldrd	r2, r3, [sl]
 800c666:	f7f3 fe1f 	bl	80002a8 <__aeabi_dsub>
 800c66a:	4622      	mov	r2, r4
 800c66c:	462b      	mov	r3, r5
 800c66e:	f7f3 fe1b 	bl	80002a8 <__aeabi_dsub>
 800c672:	4602      	mov	r2, r0
 800c674:	460b      	mov	r3, r1
 800c676:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c67a:	f7f3 fe15 	bl	80002a8 <__aeabi_dsub>
 800c67e:	f1bb 0f00 	cmp.w	fp, #0
 800c682:	4604      	mov	r4, r0
 800c684:	460d      	mov	r5, r1
 800c686:	f6bf aed6 	bge.w	800c436 <atan+0x3e>
 800c68a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c68e:	461d      	mov	r5, r3
 800c690:	e6d1      	b.n	800c436 <atan+0x3e>
 800c692:	a51d      	add	r5, pc, #116	; (adr r5, 800c708 <atan+0x310>)
 800c694:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c698:	e6cd      	b.n	800c436 <atan+0x3e>
 800c69a:	bf00      	nop
 800c69c:	f3af 8000 	nop.w
 800c6a0:	54442d18 	.word	0x54442d18
 800c6a4:	bff921fb 	.word	0xbff921fb
 800c6a8:	8800759c 	.word	0x8800759c
 800c6ac:	7e37e43c 	.word	0x7e37e43c
 800c6b0:	e322da11 	.word	0xe322da11
 800c6b4:	3f90ad3a 	.word	0x3f90ad3a
 800c6b8:	24760deb 	.word	0x24760deb
 800c6bc:	3fa97b4b 	.word	0x3fa97b4b
 800c6c0:	a0d03d51 	.word	0xa0d03d51
 800c6c4:	3fb10d66 	.word	0x3fb10d66
 800c6c8:	c54c206e 	.word	0xc54c206e
 800c6cc:	3fb745cd 	.word	0x3fb745cd
 800c6d0:	920083ff 	.word	0x920083ff
 800c6d4:	3fc24924 	.word	0x3fc24924
 800c6d8:	5555550d 	.word	0x5555550d
 800c6dc:	3fd55555 	.word	0x3fd55555
 800c6e0:	2c6a6c2f 	.word	0x2c6a6c2f
 800c6e4:	bfa2b444 	.word	0xbfa2b444
 800c6e8:	52defd9a 	.word	0x52defd9a
 800c6ec:	3fadde2d 	.word	0x3fadde2d
 800c6f0:	af749a6d 	.word	0xaf749a6d
 800c6f4:	3fb3b0f2 	.word	0x3fb3b0f2
 800c6f8:	fe231671 	.word	0xfe231671
 800c6fc:	3fbc71c6 	.word	0x3fbc71c6
 800c700:	9998ebc4 	.word	0x9998ebc4
 800c704:	3fc99999 	.word	0x3fc99999
 800c708:	54442d18 	.word	0x54442d18
 800c70c:	3ff921fb 	.word	0x3ff921fb
 800c710:	440fffff 	.word	0x440fffff
 800c714:	7ff00000 	.word	0x7ff00000
 800c718:	3fdbffff 	.word	0x3fdbffff
 800c71c:	3ff00000 	.word	0x3ff00000
 800c720:	3ff2ffff 	.word	0x3ff2ffff
 800c724:	40038000 	.word	0x40038000
 800c728:	3ff80000 	.word	0x3ff80000
 800c72c:	bff00000 	.word	0xbff00000
 800c730:	0800cd70 	.word	0x0800cd70
 800c734:	0800cd50 	.word	0x0800cd50

0800c738 <fabs>:
 800c738:	ec51 0b10 	vmov	r0, r1, d0
 800c73c:	ee10 2a10 	vmov	r2, s0
 800c740:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c744:	ec43 2b10 	vmov	d0, r2, r3
 800c748:	4770      	bx	lr
	...

0800c74c <_init>:
 800c74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c74e:	bf00      	nop
 800c750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c752:	bc08      	pop	{r3}
 800c754:	469e      	mov	lr, r3
 800c756:	4770      	bx	lr

0800c758 <_fini>:
 800c758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c75a:	bf00      	nop
 800c75c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c75e:	bc08      	pop	{r3}
 800c760:	469e      	mov	lr, r3
 800c762:	4770      	bx	lr
